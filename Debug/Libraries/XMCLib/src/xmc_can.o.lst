   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_IsPanelControlReady:
  25              	.LFB177:
  26              	 .file 1 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc/xmc_can.h"
   1:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
   2:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @date 2019-07-02
   4:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
   5:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @cond
   6:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
   9:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *                                             
  12:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 
  18:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 
  21:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  36:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Change History
  37:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * --------------
  38:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  39:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  43:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  48:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *      
  52:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  55:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  58:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  61:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 
  64:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  68:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2019-07-02:
  69:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_GetClockFrequency()
  70:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsListEmpty(), XMC_CAN_GetListBegin(), XMC_CAN_GetListSize(), XMC_CAN_MO_Get
  71:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 
  72:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  73:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  74:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * related APIs.
  75:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  76:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  77:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  78:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  79:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  80:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  81:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @code
  82:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  83:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  84:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  85:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  86:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * //Node configuration
  87:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  88:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  89:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * //disable configuration
  90:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  91:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  92:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  93:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @endcode
  94:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  95:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  96:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  97:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @endcond
  98:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
  99:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 100:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 101:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
 102:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
 103:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 104:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 105:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 106:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 107:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 108:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 109:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 110:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 111:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 112:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 113:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #include <string.h>
 114:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 115:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 116:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 117:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 118:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 119:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 120:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 121:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 122:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 123:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 124:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 125:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 126:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 127:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 128:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 129:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * gateways between 
 130:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 131:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * node analysis.
 132:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 
 133:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 134:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 135:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 136:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 137:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 138:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 
 139:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 140:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 141:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 142:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 143:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 144:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 145:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 146:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 147:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 148:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 149:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 150:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 151:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 152:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 153:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 154:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 155:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 156:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 157:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 158:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 159:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 160:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 161:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 162:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 163:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @{
 164:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 165:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 166:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 167:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * MACROS
 168:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 169:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 170:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 171:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 172:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 173:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 174:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 175:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 176:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 177:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 178:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * ENUMS
 179:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 180:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 181:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 182:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** */
 183:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 184:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 185:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 186:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 187:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 188:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 189:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 190:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 191:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 192:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 193:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 194:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** */
 195:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 196:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 197:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 198:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 199:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 200:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 201:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 202:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 203:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 204:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 205:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 206:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 207:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 208:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 209:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 210:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** */
 211:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 212:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 213:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 214:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 215:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 216:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 217:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 218:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 219:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 220:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 221:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 222:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 223:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 224:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 225:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 226:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 227:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 228:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 229:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 230:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 231:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 232:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 233:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 234:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 235:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 236:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 237:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 238:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 239:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 240:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 241:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 242:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 243:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 244:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 245:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 246:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 247:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 248:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 249:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 250:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 251:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 252:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 253:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 254:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 255:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 256:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 257:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 258:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 259:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 260:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 261:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 262:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 263:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 264:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 265:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 266:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 267:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 268:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 269:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 270:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 271:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 272:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 273:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 274:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 275:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 276:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 277:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 278:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 279:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 280:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 281:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 282:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 283:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 284:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 285:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 286:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 287:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 288:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 289:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 290:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 291:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 292:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 293:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 294:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 295:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 296:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 297:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 298:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 299:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 300:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 301:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 302:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 303:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 304:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 305:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 306:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 307:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 308:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 309:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 310:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 311:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 312:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 313:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 314:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 315:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 316:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 317:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 318:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 319:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 320:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 321:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 322:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 323:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 324:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 325:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 326:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 327:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 328:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 329:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 330:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 331:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 332:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 333:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 334:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 335:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 336:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 337:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 338:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 339:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 340:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 341:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 342:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 343:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 344:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 345:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 346:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 347:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 348:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 349:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 350:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 351:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 352:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 353:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 354:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 355:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 356:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 357:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 358:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 359:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 360:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 361:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 362:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 363:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 364:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 365:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 366:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 367:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 368:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 369:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 370:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 371:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 372:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 373:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 374:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 375:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 376:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 377:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 378:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 379:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 380:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 381:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 382:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 383:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 384:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 385:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 386:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 387:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 388:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 389:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 390:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 391:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 392:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 393:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 394:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 395:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 396:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 397:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 398:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 399:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 400:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 401:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 402:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 403:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 404:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 405:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 406:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 407:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 408:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 409:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 410:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 411:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 412:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 413:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 414:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 415:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 416:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 417:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 418:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 419:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 420:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 421:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 422:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 423:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 424:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 425:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 426:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 427:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 428:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 429:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 430:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 431:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 432:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 433:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 434:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 435:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 436:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 437:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 438:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 439:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 440:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 441:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 442:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 443:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 444:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 445:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 446:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 447:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 448:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 449:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 450:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 451:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 452:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 453:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 454:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 455:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 456:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {  
 457:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 458:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 459:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 460:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #else
 461:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 462:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 463:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 464:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #else
 465:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 466:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 467:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 468:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 469:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 470:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 471:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 472:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 473:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 474:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** */
 475:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 476:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 477:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 478:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 479:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 480:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 481:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 482:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 483:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 484:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 485:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 486:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 487:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 488:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 489:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 490:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 491:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 492:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 493:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 494:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 495:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 496:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 497:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 498:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 499:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 500:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 501:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 502:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 503:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 504:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 505:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 506:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 507:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 508:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 509:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 510:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 511:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 512:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 513:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 514:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 515:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 516:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 517:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 518:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** */
 519:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 520:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 521:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 522:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 523:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   #pragma push
 524:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 525:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 526:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 527:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 528:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 529:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 530:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 531:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 532:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 533:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** */
 534:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 535:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 536:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 537:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   union{
 538:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 539:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 540:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 541:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 542:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 543:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     };
 544:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 545:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 546:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   };
 547:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 548:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 549:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 550:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 551:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** */
 552:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 553:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 554:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 555:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 556:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 557:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 558:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 559:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 560:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   union{
 561:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 562:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 563:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 564:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 565:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     };
 566:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 567:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   };
 568:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   union{
 569:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     struct{
 570:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 571:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 572:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     };
 573:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 574:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   };
 575:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 576:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 577:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   union{
 578:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 579:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 580:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 581:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 582:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                               of the data */
 583:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 584:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****       };
 585:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 586:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 587:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 588:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 589:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 590:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 591:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   #pragma pop
 592:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 593:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 594:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 595:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 596:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * API Prototypes
 597:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 598:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 599:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** extern "C" {
 600:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 601:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 602:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 603:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 604:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 605:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 606:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 607:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 608:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 609:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 610:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 611:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 612:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 613:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 614:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 615:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 616:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 617:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 618:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 619:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 620:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 621:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 622:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *         for details.
 623:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 624:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 625:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 626:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 627:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 628:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 629:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 630:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 631:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 632:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 633:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 634:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 635:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 636:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 637:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 638:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 639:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 640:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 641:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 642:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 643:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 644:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 645:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 646:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 647:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 648:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 649:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 650:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 651:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 652:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 653:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 654:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 655:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 656:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 657:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 658:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 659:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 660:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 661:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 662:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *       for details.
 663:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 664:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 665:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 666:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 667:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 668:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 669:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 670:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 671:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 672:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 673:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 674:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
  27              	 .loc 1 674 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 675:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  43              	 .loc 1 675 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F8C431 	 ldr r3,[r3,#452]
  46 000e 03F44073 	 and r3,r3,#768
  47 0012 002B     	 cmp r3,#0
  48 0014 0CBF     	 ite eq
  49 0016 0123     	 moveq r3,#1
  50 0018 0023     	 movne r3,#0
  51 001a DBB2     	 uxtb r3,r3
 676:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
  52              	 .loc 1 676 0
  53 001c 1846     	 mov r0,r3
  54 001e 0C37     	 adds r7,r7,#12
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 4
  57 0020 BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0022 5DF8047B 	 ldr r7,[sp],#4
  62              	.LCFI5:
  63              	 .cfi_restore 7
  64              	 .cfi_def_cfa_offset 0
  65 0026 7047     	 bx lr
  66              	 .cfi_endproc
  67              	.LFE177:
  69              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  70              	 .align 2
  71              	 .thumb
  72              	 .thumb_func
  74              	XMC_CAN_PanelControl:
  75              	.LFB178:
 677:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 678:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 679:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 680:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 681:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 682:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 683:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 684:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 685:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 686:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 687:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 688:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 689:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 690:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 691:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 692:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 693:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 694:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  register.
 695:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 696:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 697:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 698:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 699:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 700:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 701:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 702:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 703:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 704:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 705:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
  76              	 .loc 1 705 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80              	 
  81 0000 80B4     	 push {r7}
  82              	.LCFI6:
  83              	 .cfi_def_cfa_offset 4
  84              	 .cfi_offset 7,-4
  85 0002 83B0     	 sub sp,sp,#12
  86              	.LCFI7:
  87              	 .cfi_def_cfa_offset 16
  88 0004 00AF     	 add r7,sp,#0
  89              	.LCFI8:
  90              	 .cfi_def_cfa_register 7
  91 0006 7860     	 str r0,[r7,#4]
  92 0008 0846     	 mov r0,r1
  93 000a 1146     	 mov r1,r2
  94 000c 1A46     	 mov r2,r3
  95 000e 0346     	 mov r3,r0
  96 0010 FB70     	 strb r3,[r7,#3]
  97 0012 0B46     	 mov r3,r1
  98 0014 BB70     	 strb r3,[r7,#2]
  99 0016 1346     	 mov r3,r2
 100 0018 7B70     	 strb r3,[r7,#1]
 706:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 101              	 .loc 1 706 0
 102 001a FA78     	 ldrb r2,[r7,#3]
 707:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 103              	 .loc 1 707 0
 104 001c BB78     	 ldrb r3,[r7,#2]
 105 001e 1B04     	 lsls r3,r3,#16
 106 0020 03F47F03 	 and r3,r3,#16711680
 706:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 107              	 .loc 1 706 0
 108 0024 1A43     	 orrs r2,r2,r3
 708:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 109              	 .loc 1 708 0
 110 0026 7B78     	 ldrb r3,[r7,#1]
 111 0028 1B06     	 lsls r3,r3,#24
 707:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 112              	 .loc 1 707 0
 113 002a 1A43     	 orrs r2,r2,r3
 706:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 114              	 .loc 1 706 0
 115 002c 7B68     	 ldr r3,[r7,#4]
 116 002e C3F8C421 	 str r2,[r3,#452]
 709:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 117              	 .loc 1 709 0
 118 0032 0C37     	 adds r7,r7,#12
 119              	.LCFI9:
 120              	 .cfi_def_cfa_offset 4
 121 0034 BD46     	 mov sp,r7
 122              	.LCFI10:
 123              	 .cfi_def_cfa_register 13
 124              	 
 125 0036 5DF8047B 	 ldr r7,[sp],#4
 126              	.LCFI11:
 127              	 .cfi_restore 7
 128              	 .cfi_def_cfa_offset 0
 129 003a 7047     	 bx lr
 130              	 .cfi_endproc
 131              	.LFE178:
 133              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 134              	 .align 2
 135              	 .thumb
 136              	 .thumb_func
 138              	XMC_CAN_NODE_EnableConfigurationChange:
 139              	.LFB194:
 710:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 711:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 712:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 713:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 714:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 715:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 716:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 717:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 718:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 719:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 720:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 721:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 722:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 723:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 724:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 725:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 726:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 727:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  None
 728:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 729:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 730:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 731:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 732:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 733:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 734:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 735:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 736:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 737:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 738:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 739:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 740:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 741:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 742:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 743:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 744:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 745:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 746:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 747:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 748:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 749:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 750:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 751:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 752:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 753:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 754:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 755:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 756:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 757:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 758:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 759:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 760:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 761:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 762:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 763:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 764:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 765:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 766:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 767:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 768:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 769:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 770:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 771:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 772:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 773:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 774:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 775:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 776:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 777:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 778:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 779:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 780:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 781:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 782:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * 
 783:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 784:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 785:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 786:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 787:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 788:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 789:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 790:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 791:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 792:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 793:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 794:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 795:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 796:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 797:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 798:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 799:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 800:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 801:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 802:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 803:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return fCAN clock frequency 
 804:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 805:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 806:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Gets CAN base clock frequency
 807:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 808:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 809:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj);
 810:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 811:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 812:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 813:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 814:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 815:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *        for details.
 816:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 817:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 818:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 819:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 820:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 821:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 822:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 823:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 824:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 825:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 826:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 827:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 828:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 829:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 830:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 831:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 832:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 833:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 834:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 835:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #else
 836:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 837:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** #endif
 838:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 839:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 840:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 841:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 842:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 843:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 844:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 845:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 846:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 847:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 848:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 849:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 850:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * None
 851:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 852:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 853:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 854:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 855:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 856:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 857:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 858:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 859:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 860:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 861:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 862:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 863:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 864:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 865:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 866:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 867:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 868:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 869:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * None
 870:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 871:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 872:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 873:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 874:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 875:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 876:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 877:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 878:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 879:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 880:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 881:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 882:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 883:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 884:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 885:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 886:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 887:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 888:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 889:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 890:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 891:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 892:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 893:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * None
 894:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 895:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 896:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 897:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 898:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 899:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 900:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 901:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 902:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 903:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 904:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 905:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 906:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 907:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 908:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 909:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 910:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 911:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 912:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 913:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 914:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 915:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 916:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 917:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 918:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 919:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 920:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 921:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 922:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 923:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 924:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 925:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 926:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 927:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 928:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 929:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 930:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 931:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 932:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 933:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 934:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * None
 935:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 936:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 937:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 938:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 939:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 940:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 941:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 942:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 943:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 944:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 945:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 946:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 947:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 948:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 949:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 950:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 951:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 952:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 953:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 954:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 955:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 956:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 957:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 958:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 959:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 960:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 961:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 962:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 963:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 964:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 965:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 966:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 967:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 968:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 969:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 970:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 971:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 972:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 973:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 974:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 975:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
 976:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 977:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 978:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
 979:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 980:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 981:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 982:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 983:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 984:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 985:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 986:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 987:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 988:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 989:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 990:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 991:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
 992:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
 993:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 994:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 995:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 996:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 997:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 998:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
 999:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1000:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1001:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1002:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1003:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1004:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1005:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1006:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1007:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1008:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1009:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1010:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1011:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1012:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1013:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1014:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1015:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1016:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1017:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1018:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1019:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1020:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1021:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1022:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1023:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1024:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1025:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1026:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1027:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1028:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1029:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1030:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1031:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1032:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1033:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1034:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1035:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1036:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1037:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1038:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1039:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1040:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1041:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1042:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1043:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1044:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1045:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1046:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1047:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1048:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1049:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1050:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1051:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1052:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1053:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1054:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1055:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1056:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1057:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1058:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1059:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1060:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1061:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1062:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1063:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1064:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1065:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1066:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1067:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1068:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1069:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1070:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1071:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1072:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1073:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1074:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1075:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1076:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1077:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1078:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1079:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1080:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1081:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1082:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1083:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1084:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1085:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1086:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1087:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1088:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1089:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1090:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1091:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1092:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1093:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1094:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1095:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1096:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1097:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1098:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1099:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1100:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1101:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1102:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1103:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1104:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1105:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1106:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1107:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1108:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1109:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1110:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1111:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1112:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1113:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1114:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1115:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1116:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1117:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1118:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1119:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1120:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1121:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1122:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1123:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1124:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1125:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1126:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1127:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1128:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1129:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1130:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1131:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1132:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1133:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1134:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1135:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1136:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1137:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1138:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1139:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1140:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1141:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1142:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1143:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1144:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1145:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1146:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1147:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1148:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1149:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1150:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1151:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1152:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1153:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1154:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1155:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1156:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1157:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1158:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1159:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1160:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1161:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1162:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1163:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1164:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1165:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1166:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1167:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1168:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1169:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1170:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1171:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1172:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1173:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1174:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1175:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1176:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1177:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1178:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1179:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1180:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1181:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1182:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1183:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1184:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1185:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1186:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1187:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1188:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1189:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1190:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1191:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1192:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1193:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1194:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1195:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1196:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1197:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1198:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1199:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1200:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1201:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1202:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1203:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1204:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1205:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1206:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1207:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1208:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1209:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1210:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1211:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1212:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1213:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1214:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1215:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1216:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1217:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1218:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1219:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1220:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1221:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1222:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1223:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1224:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1225:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1226:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1227:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1228:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1229:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1230:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1231:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1232:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1233:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1234:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1235:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1236:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1237:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1238:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1239:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1240:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1241:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1242:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1243:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1244:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1245:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1246:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1247:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1248:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1249:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1250:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1251:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1252:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1253:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1254:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1255:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1256:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1257:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1258:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1259:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
1260:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1261:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
1262:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1263:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1264:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1265:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1266:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1267:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1268:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1269:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1270:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1271:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1272:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1273:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1274:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1275:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1276:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1277:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1278:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1279:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1280:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 140              	 .loc 1 1280 0
 141              	 .cfi_startproc
 142              	 
 143              	 
 144              	 
 145 0000 80B4     	 push {r7}
 146              	.LCFI12:
 147              	 .cfi_def_cfa_offset 4
 148              	 .cfi_offset 7,-4
 149 0002 83B0     	 sub sp,sp,#12
 150              	.LCFI13:
 151              	 .cfi_def_cfa_offset 16
 152 0004 00AF     	 add r7,sp,#0
 153              	.LCFI14:
 154              	 .cfi_def_cfa_register 7
 155 0006 7860     	 str r0,[r7,#4]
1281:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 156              	 .loc 1 1281 0
 157 0008 7B68     	 ldr r3,[r7,#4]
 158 000a 1B68     	 ldr r3,[r3]
 159 000c 43F04002 	 orr r2,r3,#64
 160 0010 7B68     	 ldr r3,[r7,#4]
 161 0012 1A60     	 str r2,[r3]
1282:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 162              	 .loc 1 1282 0
 163 0014 0C37     	 adds r7,r7,#12
 164              	.LCFI15:
 165              	 .cfi_def_cfa_offset 4
 166 0016 BD46     	 mov sp,r7
 167              	.LCFI16:
 168              	 .cfi_def_cfa_register 13
 169              	 
 170 0018 5DF8047B 	 ldr r7,[sp],#4
 171              	.LCFI17:
 172              	 .cfi_restore 7
 173              	 .cfi_def_cfa_offset 0
 174 001c 7047     	 bx lr
 175              	 .cfi_endproc
 176              	.LFE194:
 178 001e 00BF     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 179              	 .align 2
 180              	 .thumb
 181              	 .thumb_func
 183              	XMC_CAN_NODE_DisableConfigurationChange:
 184              	.LFB195:
1283:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1284:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1285:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** /**
1286:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1287:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1288:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1289:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * @return None
1290:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1291:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1292:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1293:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1294:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1295:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1296:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  *
1297:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****  */
1298:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** 
1299:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1300:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** {
 185              	 .loc 1 1300 0
 186              	 .cfi_startproc
 187              	 
 188              	 
 189              	 
 190 0000 80B4     	 push {r7}
 191              	.LCFI18:
 192              	 .cfi_def_cfa_offset 4
 193              	 .cfi_offset 7,-4
 194 0002 83B0     	 sub sp,sp,#12
 195              	.LCFI19:
 196              	 .cfi_def_cfa_offset 16
 197 0004 00AF     	 add r7,sp,#0
 198              	.LCFI20:
 199              	 .cfi_def_cfa_register 7
 200 0006 7860     	 str r0,[r7,#4]
1301:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 201              	 .loc 1 1301 0
 202 0008 7B68     	 ldr r3,[r7,#4]
 203 000a 1B68     	 ldr r3,[r3]
 204 000c 23F04002 	 bic r2,r3,#64
 205 0010 7B68     	 ldr r3,[r7,#4]
 206 0012 1A60     	 str r2,[r3]
1302:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_can.h **** }
 207              	 .loc 1 1302 0
 208 0014 0C37     	 adds r7,r7,#12
 209              	.LCFI21:
 210              	 .cfi_def_cfa_offset 4
 211 0016 BD46     	 mov sp,r7
 212              	.LCFI22:
 213              	 .cfi_def_cfa_register 13
 214              	 
 215 0018 5DF8047B 	 ldr r7,[sp],#4
 216              	.LCFI23:
 217              	 .cfi_restore 7
 218              	 .cfi_def_cfa_offset 0
 219 001c 7047     	 bx lr
 220              	 .cfi_endproc
 221              	.LFE195:
 223 001e 00BF     	 .section .text.max,"ax",%progbits
 224              	 .align 2
 225              	 .thumb
 226              	 .thumb_func
 228              	max:
 229              	.LFB235:
 230              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2019-06-26
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../Libraries/XMCLib/src/xmc_can.c ****  *
  59:../Libraries/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../Libraries/XMCLib/src/xmc_can.c ****  *
  62:../Libraries/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../Libraries/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../Libraries/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../Libraries/XMCLib/src/xmc_can.c ****  *
  67:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-06-21:
  68:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:../Libraries/XMCLib/src/xmc_can.c ****  *
  70:../Libraries/XMCLib/src/xmc_can.c ****  * 2018-11-12:
  71:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed assertion at XMC_CAN_InitEx()
  72:../Libraries/XMCLib/src/xmc_can.c ****  *
  73:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-05-07:
  74:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed compilation warnings
  75:../Libraries/XMCLib/src/xmc_can.c ****  *
  76:../Libraries/XMCLib/src/xmc_can.c ****  * 2019-06-26:
  77:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx() non returning, decrementing ntq before cont
  78:../Libraries/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_GetClockFrequency()
  79:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_InitEx() so that XMC_CAN_SetBaudrateClockSource() is invoked before XMC_CAN_
  80:../Libraries/XMCLib/src/xmc_can.c ****  *
  81:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  82:../Libraries/XMCLib/src/xmc_can.c ****  *
  83:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  84:../Libraries/XMCLib/src/xmc_can.c **** 
  85:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  86:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  87:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  88:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  89:../Libraries/XMCLib/src/xmc_can.c **** 
  90:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  91:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  92:../Libraries/XMCLib/src/xmc_can.c **** 
  93:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  94:../Libraries/XMCLib/src/xmc_can.c **** {
 231              	 .loc 2 94 0
 232              	 .cfi_startproc
 233              	 
 234              	 
 235              	 
 236 0000 80B4     	 push {r7}
 237              	.LCFI24:
 238              	 .cfi_def_cfa_offset 4
 239              	 .cfi_offset 7,-4
 240 0002 83B0     	 sub sp,sp,#12
 241              	.LCFI25:
 242              	 .cfi_def_cfa_offset 16
 243 0004 00AF     	 add r7,sp,#0
 244              	.LCFI26:
 245              	 .cfi_def_cfa_register 7
 246 0006 7860     	 str r0,[r7,#4]
 247 0008 3960     	 str r1,[r7]
  95:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 248              	 .loc 2 95 0
 249 000a 3A68     	 ldr r2,[r7]
 250 000c 7B68     	 ldr r3,[r7,#4]
 251 000e 9342     	 cmp r3,r2
 252 0010 38BF     	 it cc
 253 0012 1346     	 movcc r3,r2
  96:../Libraries/XMCLib/src/xmc_can.c **** }
 254              	 .loc 2 96 0
 255 0014 1846     	 mov r0,r3
 256 0016 0C37     	 adds r7,r7,#12
 257              	.LCFI27:
 258              	 .cfi_def_cfa_offset 4
 259 0018 BD46     	 mov sp,r7
 260              	.LCFI28:
 261              	 .cfi_def_cfa_register 13
 262              	 
 263 001a 5DF8047B 	 ldr r7,[sp],#4
 264              	.LCFI29:
 265              	 .cfi_restore 7
 266              	 .cfi_def_cfa_offset 0
 267 001e 7047     	 bx lr
 268              	 .cfi_endproc
 269              	.LFE235:
 271              	 .section .text.min,"ax",%progbits
 272              	 .align 2
 273              	 .thumb
 274              	 .thumb_func
 276              	min:
 277              	.LFB236:
  97:../Libraries/XMCLib/src/xmc_can.c **** 
  98:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  99:../Libraries/XMCLib/src/xmc_can.c **** {
 278              	 .loc 2 99 0
 279              	 .cfi_startproc
 280              	 
 281              	 
 282              	 
 283 0000 80B4     	 push {r7}
 284              	.LCFI30:
 285              	 .cfi_def_cfa_offset 4
 286              	 .cfi_offset 7,-4
 287 0002 83B0     	 sub sp,sp,#12
 288              	.LCFI31:
 289              	 .cfi_def_cfa_offset 16
 290 0004 00AF     	 add r7,sp,#0
 291              	.LCFI32:
 292              	 .cfi_def_cfa_register 7
 293 0006 7860     	 str r0,[r7,#4]
 294 0008 3960     	 str r1,[r7]
 100:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 295              	 .loc 2 100 0
 296 000a 3A68     	 ldr r2,[r7]
 297 000c 7B68     	 ldr r3,[r7,#4]
 298 000e 9342     	 cmp r3,r2
 299 0010 28BF     	 it cs
 300 0012 1346     	 movcs r3,r2
 101:../Libraries/XMCLib/src/xmc_can.c **** }
 301              	 .loc 2 101 0
 302 0014 1846     	 mov r0,r3
 303 0016 0C37     	 adds r7,r7,#12
 304              	.LCFI33:
 305              	 .cfi_def_cfa_offset 4
 306 0018 BD46     	 mov sp,r7
 307              	.LCFI34:
 308              	 .cfi_def_cfa_register 13
 309              	 
 310 001a 5DF8047B 	 ldr r7,[sp],#4
 311              	.LCFI35:
 312              	 .cfi_restore 7
 313              	 .cfi_def_cfa_offset 0
 314 001e 7047     	 bx lr
 315              	 .cfi_endproc
 316              	.LFE236:
 318              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 319              	 .align 2
 320              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 321              	 .thumb
 322              	 .thumb_func
 324              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 325              	.LFB237:
 102:../Libraries/XMCLib/src/xmc_can.c **** 
 103:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
 104:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
 105:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
 106:../Libraries/XMCLib/src/xmc_can.c **** 
 107:../Libraries/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
 108:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
 109:../Libraries/XMCLib/src/xmc_can.c **** 
 110:../Libraries/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 111:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 112:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 113:../Libraries/XMCLib/src/xmc_can.c **** 
 114:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 115:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 116:../Libraries/XMCLib/src/xmc_can.c **** 
 117:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 118:../Libraries/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 119:../Libraries/XMCLib/src/xmc_can.c **** 
 120:../Libraries/XMCLib/src/xmc_can.c **** 
 121:../Libraries/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 122:../Libraries/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 123:../Libraries/XMCLib/src/xmc_can.c **** {
 326              	 .loc 2 123 0
 327              	 .cfi_startproc
 328              	 
 329              	 
 330 0000 80B5     	 push {r7,lr}
 331              	.LCFI36:
 332              	 .cfi_def_cfa_offset 8
 333              	 .cfi_offset 7,-8
 334              	 .cfi_offset 14,-4
 335 0002 88B0     	 sub sp,sp,#32
 336              	.LCFI37:
 337              	 .cfi_def_cfa_offset 40
 338 0004 00AF     	 add r7,sp,#0
 339              	.LCFI38:
 340              	 .cfi_def_cfa_register 7
 341 0006 7860     	 str r0,[r7,#4]
 342 0008 3960     	 str r1,[r7]
 124:../Libraries/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 125:../Libraries/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 343              	 .loc 2 125 0
 344 000a 3B68     	 ldr r3,[r7]
 345 000c 1B68     	 ldr r3,[r3]
 346 000e 3A68     	 ldr r2,[r7]
 347 0010 5268     	 ldr r2,[r2,#4]
 348 0012 B3FBF2F1 	 udiv r1,r3,r2
 349 0016 02FB01F2 	 mul r2,r2,r1
 350 001a 9B1A     	 subs r3,r3,r2
 351 001c 002B     	 cmp r3,#0
 352 001e 40F08E80 	 bne .L11
 353              	.LBB2:
 126:../Libraries/XMCLib/src/xmc_can.c ****   {
 127:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t prescaler;
 128:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t div8 = 0;
 354              	 .loc 2 128 0
 355 0022 0023     	 movs r3,#0
 356 0024 BB61     	 str r3,[r7,#24]
 129:../Libraries/XMCLib/src/xmc_can.c **** 
 130:../Libraries/XMCLib/src/xmc_can.c ****     /* Calculate the factor between can frequency and required baudrate, this is equal to (prescale
 131:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 357              	 .loc 2 131 0
 358 0026 3B68     	 ldr r3,[r7]
 359 0028 1A68     	 ldr r2,[r3]
 360 002a 3B68     	 ldr r3,[r7]
 361 002c 5B68     	 ldr r3,[r3,#4]
 362 002e B2FBF3F3 	 udiv r3,r2,r3
 363 0032 BB60     	 str r3,[r7,#8]
 132:../Libraries/XMCLib/src/xmc_can.c **** 
 133:../Libraries/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 134:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 364              	 .loc 2 134 0
 365 0034 1923     	 movs r3,#25
 366 0036 7B61     	 str r3,[r7,#20]
 135:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg1 = 0;
 367              	 .loc 2 135 0
 368 0038 0023     	 movs r3,#0
 369 003a 3B61     	 str r3,[r7,#16]
 136:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tseg2 = 0;
 370              	 .loc 2 136 0
 371 003c 0023     	 movs r3,#0
 372 003e FB60     	 str r3,[r7,#12]
 137:../Libraries/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 373              	 .loc 2 137 0
 374 0040 4BE0     	 b .L12
 375              	.L17:
 138:../Libraries/XMCLib/src/xmc_can.c ****     {
 139:../Libraries/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 140:../Libraries/XMCLib/src/xmc_can.c ****       if ((fcan_div % ntq) == 0)
 376              	 .loc 2 140 0
 377 0042 BB68     	 ldr r3,[r7,#8]
 378 0044 7A69     	 ldr r2,[r7,#20]
 379 0046 B3FBF2F2 	 udiv r2,r3,r2
 380 004a 7969     	 ldr r1,[r7,#20]
 381 004c 01FB02F2 	 mul r2,r1,r2
 382 0050 9B1A     	 subs r3,r3,r2
 383 0052 002B     	 cmp r3,#0
 384 0054 3ED1     	 bne .L13
 141:../Libraries/XMCLib/src/xmc_can.c ****       {
 142:../Libraries/XMCLib/src/xmc_can.c ****     	  div8 = 0;
 385              	 .loc 2 142 0
 386 0056 0023     	 movs r3,#0
 387 0058 BB61     	 str r3,[r7,#24]
 143:../Libraries/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 388              	 .loc 2 143 0
 389 005a BA68     	 ldr r2,[r7,#8]
 390 005c 7B69     	 ldr r3,[r7,#20]
 391 005e B2FBF3F3 	 udiv r3,r2,r3
 392 0062 FB61     	 str r3,[r7,#28]
 144:../Libraries/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 393              	 .loc 2 144 0
 394 0064 FB69     	 ldr r3,[r7,#28]
 395 0066 002B     	 cmp r3,#0
 396 0068 34D0     	 beq .L13
 397              	 .loc 2 144 0 is_stmt 0 discriminator 1
 398 006a FB69     	 ldr r3,[r7,#28]
 399 006c B3F5007F 	 cmp r3,#512
 400 0070 30D8     	 bhi .L13
 145:../Libraries/XMCLib/src/xmc_can.c ****         {
 146:../Libraries/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 401              	 .loc 2 146 0 is_stmt 1
 402 0072 FB69     	 ldr r3,[r7,#28]
 403 0074 3F2B     	 cmp r3,#63
 404 0076 0AD9     	 bls .L14
 147:../Libraries/XMCLib/src/xmc_can.c ****           {
 148:../Libraries/XMCLib/src/xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 149:../Libraries/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) != 0)
 405              	 .loc 2 149 0
 406 0078 FB69     	 ldr r3,[r7,#28]
 407 007a 03F00703 	 and r3,r3,#7
 408 007e 002B     	 cmp r3,#0
 409 0080 03D0     	 beq .L15
 150:../Libraries/XMCLib/src/xmc_can.c ****             {
 151:../Libraries/XMCLib/src/xmc_can.c ****               --ntq;
 410              	 .loc 2 151 0
 411 0082 7B69     	 ldr r3,[r7,#20]
 412 0084 013B     	 subs r3,r3,#1
 413 0086 7B61     	 str r3,[r7,#20]
 152:../Libraries/XMCLib/src/xmc_can.c ****               continue;
 414              	 .loc 2 152 0
 415 0088 27E0     	 b .L12
 416              	.L15:
 153:../Libraries/XMCLib/src/xmc_can.c ****             }
 154:../Libraries/XMCLib/src/xmc_can.c ****             else
 155:../Libraries/XMCLib/src/xmc_can.c ****             {
 156:../Libraries/XMCLib/src/xmc_can.c ****               div8 = 1;
 417              	 .loc 2 156 0
 418 008a 0123     	 movs r3,#1
 419 008c BB61     	 str r3,[r7,#24]
 420              	.L14:
 157:../Libraries/XMCLib/src/xmc_can.c ****             }
 158:../Libraries/XMCLib/src/xmc_can.c ****           }
 159:../Libraries/XMCLib/src/xmc_can.c **** 
 160:../Libraries/XMCLib/src/xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 421              	 .loc 2 160 0
 422 008e 7B69     	 ldr r3,[r7,#20]
 423 0090 013B     	 subs r3,r3,#1
 424 0092 3A68     	 ldr r2,[r7]
 425 0094 1289     	 ldrh r2,[r2,#8]
 426 0096 02FB03F3 	 mul r3,r2,r3
 427 009a 2B4A     	 ldr r2,.L19
 428 009c A2FB0323 	 umull r2,r3,r2,r3
 429 00a0 5B0B     	 lsrs r3,r3,#13
 430 00a2 3B61     	 str r3,[r7,#16]
 161:../Libraries/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 431              	 .loc 2 161 0
 432 00a4 7A69     	 ldr r2,[r7,#20]
 433 00a6 3B69     	 ldr r3,[r7,#16]
 434 00a8 D31A     	 subs r3,r2,r3
 435 00aa 013B     	 subs r3,r3,#1
 436 00ac FB60     	 str r3,[r7,#12]
 162:../Libraries/XMCLib/src/xmc_can.c **** 
 163:../Libraries/XMCLib/src/xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 437              	 .loc 2 163 0
 438 00ae 3B69     	 ldr r3,[r7,#16]
 439 00b0 022B     	 cmp r3,#2
 440 00b2 0FD9     	 bls .L13
 441              	 .loc 2 163 0 is_stmt 0 discriminator 1
 442 00b4 3B69     	 ldr r3,[r7,#16]
 443 00b6 0F2B     	 cmp r3,#15
 444 00b8 0CD8     	 bhi .L13
 445              	 .loc 2 163 0 discriminator 2
 446 00ba FB68     	 ldr r3,[r7,#12]
 447 00bc 012B     	 cmp r3,#1
 448 00be 09D9     	 bls .L13
 164:../Libraries/XMCLib/src/xmc_can.c ****         		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_
 449              	 .loc 2 164 0 is_stmt 1
 450 00c0 FB68     	 ldr r3,[r7,#12]
 451 00c2 062B     	 cmp r3,#6
 452 00c4 06D8     	 bhi .L13
 453              	 .loc 2 164 0 is_stmt 0 discriminator 1
 454 00c6 3B68     	 ldr r3,[r7]
 455 00c8 5B89     	 ldrh r3,[r3,#10]
 456 00ca 1A46     	 mov r2,r3
 457 00cc FB68     	 ldr r3,[r7,#12]
 458 00ce 9A42     	 cmp r2,r3
 459 00d0 00D8     	 bhi .L13
 165:../Libraries/XMCLib/src/xmc_can.c ****           {
 166:../Libraries/XMCLib/src/xmc_can.c ****             break;
 460              	 .loc 2 166 0 is_stmt 1
 461 00d2 05E0     	 b .L16
 462              	.L13:
 167:../Libraries/XMCLib/src/xmc_can.c ****           }
 168:../Libraries/XMCLib/src/xmc_can.c **** 
 169:../Libraries/XMCLib/src/xmc_can.c **** 
 170:../Libraries/XMCLib/src/xmc_can.c ****         }
 171:../Libraries/XMCLib/src/xmc_can.c ****       }
 172:../Libraries/XMCLib/src/xmc_can.c ****       --ntq;
 463              	 .loc 2 172 0
 464 00d4 7B69     	 ldr r3,[r7,#20]
 465 00d6 013B     	 subs r3,r3,#1
 466 00d8 7B61     	 str r3,[r7,#20]
 467              	.L12:
 137:../Libraries/XMCLib/src/xmc_can.c ****     {
 468              	 .loc 2 137 0
 469 00da 7B69     	 ldr r3,[r7,#20]
 470 00dc 072B     	 cmp r3,#7
 471 00de B0D8     	 bhi .L17
 472              	.L16:
 173:../Libraries/XMCLib/src/xmc_can.c ****     }
 174:../Libraries/XMCLib/src/xmc_can.c **** 
 175:../Libraries/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 473              	 .loc 2 175 0
 474 00e0 7B69     	 ldr r3,[r7,#20]
 475 00e2 072B     	 cmp r3,#7
 476 00e4 2BD9     	 bls .L11
 176:../Libraries/XMCLib/src/xmc_can.c ****     {
 177:../Libraries/XMCLib/src/xmc_can.c **** 
 178:../Libraries/XMCLib/src/xmc_can.c **** 
 179:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 477              	 .loc 2 179 0
 478 00e6 7868     	 ldr r0,[r7,#4]
 479 00e8 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 180:../Libraries/XMCLib/src/xmc_can.c **** 
 181:../Libraries/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 182:../Libraries/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 480              	 .loc 2 182 0
 481 00ec FB68     	 ldr r3,[r7,#12]
 482 00ee 013B     	 subs r3,r3,#1
 483 00f0 1B03     	 lsls r3,r3,#12
 484 00f2 03F4E042 	 and r2,r3,#28672
 183:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 485              	 .loc 2 183 0
 486 00f6 3B68     	 ldr r3,[r7]
 487 00f8 5B89     	 ldrh r3,[r3,#10]
 488 00fa 013B     	 subs r3,r3,#1
 489 00fc 9B01     	 lsls r3,r3,#6
 490 00fe DBB2     	 uxtb r3,r3
 182:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 491              	 .loc 2 182 0
 492 0100 1A43     	 orrs r2,r2,r3
 184:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 493              	 .loc 2 184 0
 494 0102 3B69     	 ldr r3,[r7,#16]
 495 0104 013B     	 subs r3,r3,#1
 496 0106 1B02     	 lsls r3,r3,#8
 497 0108 03F47063 	 and r3,r3,#3840
 183:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 498              	 .loc 2 183 0
 499 010c 42EA0301 	 orr r1,r2,r3
 185:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 500              	 .loc 2 185 0
 501 0110 BA69     	 ldr r2,[r7,#24]
 502 0112 1346     	 mov r3,r2
 503 0114 5B00     	 lsls r3,r3,#1
 504 0116 1344     	 add r3,r3,r2
 505 0118 1A46     	 mov r2,r3
 506 011a FB69     	 ldr r3,[r7,#28]
 507 011c D340     	 lsrs r3,r3,r2
 508 011e 013B     	 subs r3,r3,#1
 509 0120 03F03F03 	 and r3,r3,#63
 184:../Libraries/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 510              	 .loc 2 184 0
 511 0124 41EA0302 	 orr r2,r1,r3
 186:../Libraries/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 512              	 .loc 2 186 0
 513 0128 BB69     	 ldr r3,[r7,#24]
 514 012a DB03     	 lsls r3,r3,#15
 515 012c 9BB2     	 uxth r3,r3
 185:../Libraries/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 516              	 .loc 2 185 0
 517 012e 1A43     	 orrs r2,r2,r3
 182:../Libraries/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 518              	 .loc 2 182 0
 519 0130 7B68     	 ldr r3,[r7,#4]
 520 0132 1A61     	 str r2,[r3,#16]
 187:../Libraries/XMCLib/src/xmc_can.c **** 
 188:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 521              	 .loc 2 188 0
 522 0134 7868     	 ldr r0,[r7,#4]
 523 0136 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 189:../Libraries/XMCLib/src/xmc_can.c **** 
 190:../Libraries/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 524              	 .loc 2 190 0
 525 013a 0023     	 movs r3,#0
 526 013c 00E0     	 b .L18
 527              	.L11:
 528              	.LBE2:
 191:../Libraries/XMCLib/src/xmc_can.c ****     }
 192:../Libraries/XMCLib/src/xmc_can.c ****   }
 193:../Libraries/XMCLib/src/xmc_can.c **** 
 194:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 529              	 .loc 2 194 0
 530 013e 0123     	 movs r3,#1
 531              	.L18:
 195:../Libraries/XMCLib/src/xmc_can.c **** }
 532              	 .loc 2 195 0
 533 0140 1846     	 mov r0,r3
 534 0142 2037     	 adds r7,r7,#32
 535              	.LCFI39:
 536              	 .cfi_def_cfa_offset 8
 537 0144 BD46     	 mov sp,r7
 538              	.LCFI40:
 539              	 .cfi_def_cfa_register 13
 540              	 
 541 0146 80BD     	 pop {r7,pc}
 542              	.L20:
 543              	 .align 2
 544              	.L19:
 545 0148 5917B7D1 	 .word -776530087
 546              	 .cfi_endproc
 547              	.LFE237:
 549              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 550              	 .align 2
 551              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 552              	 .thumb
 553              	 .thumb_func
 555              	XMC_CAN_NODE_NominalBitTimeConfigure:
 556              	.LFB238:
 196:../Libraries/XMCLib/src/xmc_can.c **** 
 197:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 198:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 199:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 200:../Libraries/XMCLib/src/xmc_can.c **** {
 557              	 .loc 2 200 0
 558              	 .cfi_startproc
 559              	 
 560              	 
 561 0000 80B5     	 push {r7,lr}
 562              	.LCFI41:
 563              	 .cfi_def_cfa_offset 8
 564              	 .cfi_offset 7,-8
 565              	 .cfi_offset 14,-4
 566 0002 90B0     	 sub sp,sp,#64
 567              	.LCFI42:
 568              	 .cfi_def_cfa_offset 72
 569 0004 00AF     	 add r7,sp,#0
 570              	.LCFI43:
 571              	 .cfi_def_cfa_register 7
 572 0006 7860     	 str r0,[r7,#4]
 573 0008 3960     	 str r1,[r7]
 201:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 574              	 .loc 2 201 0
 575 000a 0C23     	 movs r3,#12
 576 000c FB63     	 str r3,[r7,#60]
 202:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 577              	 .loc 2 202 0
 578 000e 0C23     	 movs r3,#12
 579 0010 BB63     	 str r3,[r7,#56]
 203:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 580              	 .loc 2 203 0
 581 0012 0023     	 movs r3,#0
 582 0014 7B63     	 str r3,[r7,#52]
 204:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 583              	 .loc 2 204 0
 584 0016 0123     	 movs r3,#1
 585 0018 3B63     	 str r3,[r7,#48]
 205:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 586              	 .loc 2 205 0
 587 001a 0023     	 movs r3,#0
 588 001c 7B61     	 str r3,[r7,#20]
 206:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 589              	 .loc 2 206 0
 590 001e 0023     	 movs r3,#0
 591 0020 FB62     	 str r3,[r7,#44]
 207:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 592              	 .loc 2 207 0
 593 0022 42F21073 	 movw r3,#10000
 594 0026 BB62     	 str r3,[r7,#40]
 208:../Libraries/XMCLib/src/xmc_can.c **** 
 209:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 210:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 211:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 212:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 213:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 214:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 215:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 216:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 217:../Libraries/XMCLib/src/xmc_can.c ****        
 218:../Libraries/XMCLib/src/xmc_can.c ****   /*
 219:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 220:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 221:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 222:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 223:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 224:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 225:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 226:../Libraries/XMCLib/src/xmc_can.c ****    *
 227:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 228:../Libraries/XMCLib/src/xmc_can.c ****    *
 229:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 230:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 231:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 232:../Libraries/XMCLib/src/xmc_can.c ****    */
 233:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 234:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 595              	 .loc 2 234 0
 596 0028 0123     	 movs r3,#1
 597 002a FB63     	 str r3,[r7,#60]
 598 002c 67E0     	 b .L22
 599              	.L31:
 600              	.LBB3:
 235:../Libraries/XMCLib/src/xmc_can.c ****   {
 236:../Libraries/XMCLib/src/xmc_can.c **** 
 237:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 601              	 .loc 2 237 0
 602 002e 3B68     	 ldr r3,[r7]
 603 0030 1A68     	 ldr r2,[r3]
 604 0032 1346     	 mov r3,r2
 605 0034 9B00     	 lsls r3,r3,#2
 606 0036 1344     	 add r3,r3,r2
 607 0038 5B00     	 lsls r3,r3,#1
 608 003a 1A46     	 mov r2,r3
 609 003c FB6B     	 ldr r3,[r7,#60]
 610 003e B2FBF3F3 	 udiv r3,r2,r3
 611 0042 3B61     	 str r3,[r7,#16]
 238:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 612              	 .loc 2 238 0
 613 0044 3B68     	 ldr r3,[r7]
 614 0046 5B68     	 ldr r3,[r3,#4]
 615 0048 3A69     	 ldr r2,[r7,#16]
 616 004a B2FBF3F3 	 udiv r3,r2,r3
 617 004e 7B62     	 str r3,[r7,#36]
 239:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 240:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 241:../Libraries/XMCLib/src/xmc_can.c **** 
 242:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 618              	 .loc 2 242 0
 619 0050 796A     	 ldr r1,[r7,#36]
 620 0052 5B4B     	 ldr r3,.L39
 621 0054 A3FB0123 	 umull r2,r3,r3,r1
 622 0058 DA08     	 lsrs r2,r3,#3
 623 005a 1346     	 mov r3,r2
 624 005c 9B00     	 lsls r3,r3,#2
 625 005e 1344     	 add r3,r3,r2
 626 0060 5B00     	 lsls r3,r3,#1
 627 0062 CA1A     	 subs r2,r1,r3
 628 0064 052A     	 cmp r2,#5
 629 0066 09D9     	 bls .L23
 243:../Libraries/XMCLib/src/xmc_can.c ****   {
 244:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 630              	 .loc 2 244 0
 631 0068 7B6A     	 ldr r3,[r7,#36]
 632 006a 554A     	 ldr r2,.L39
 633 006c A2FB0323 	 umull r2,r3,r2,r3
 634 0070 DB08     	 lsrs r3,r3,#3
 635 0072 7B62     	 str r3,[r7,#36]
 245:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 636              	 .loc 2 245 0
 637 0074 7B6A     	 ldr r3,[r7,#36]
 638 0076 0133     	 adds r3,r3,#1
 639 0078 7B62     	 str r3,[r7,#36]
 640 007a 05E0     	 b .L24
 641              	.L23:
 246:../Libraries/XMCLib/src/xmc_can.c ****   }
 247:../Libraries/XMCLib/src/xmc_can.c ****   else
 248:../Libraries/XMCLib/src/xmc_can.c ****   {
 249:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 642              	 .loc 2 249 0
 643 007c 7B6A     	 ldr r3,[r7,#36]
 644 007e 504A     	 ldr r2,.L39
 645 0080 A2FB0323 	 umull r2,r3,r2,r3
 646 0084 DB08     	 lsrs r3,r3,#3
 647 0086 7B62     	 str r3,[r7,#36]
 648              	.L24:
 250:../Libraries/XMCLib/src/xmc_can.c ****   }
 251:../Libraries/XMCLib/src/xmc_can.c **** 
 252:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 649              	 .loc 2 252 0
 650 0088 7B6A     	 ldr r3,[r7,#36]
 651 008a 002B     	 cmp r3,#0
 652 008c 0AD0     	 beq .L25
 253:../Libraries/XMCLib/src/xmc_can.c ****   {
 254:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 653              	 .loc 2 254 0
 654 008e 7A6A     	 ldr r2,[r7,#36]
 655 0090 1346     	 mov r3,r2
 656 0092 9B00     	 lsls r3,r3,#2
 657 0094 1344     	 add r3,r3,r2
 658 0096 5B00     	 lsls r3,r3,#1
 659 0098 1A46     	 mov r2,r3
 660 009a 3B69     	 ldr r3,[r7,#16]
 661 009c B3FBF2F3 	 udiv r3,r3,r2
 662 00a0 3B62     	 str r3,[r7,#32]
 663 00a2 07E0     	 b .L26
 664              	.L25:
 255:../Libraries/XMCLib/src/xmc_can.c ****   }
 256:../Libraries/XMCLib/src/xmc_can.c ****   else
 257:../Libraries/XMCLib/src/xmc_can.c ****   {
 258:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 665              	 .loc 2 258 0
 666 00a4 3B69     	 ldr r3,[r7,#16]
 667 00a6 464A     	 ldr r2,.L39
 668 00a8 A2FB0323 	 umull r2,r3,r2,r3
 669 00ac DB08     	 lsrs r3,r3,#3
 670 00ae 3B62     	 str r3,[r7,#32]
 259:../Libraries/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 671              	 .loc 2 259 0
 672 00b0 0123     	 movs r3,#1
 673 00b2 7B62     	 str r3,[r7,#36]
 674              	.L26:
 260:../Libraries/XMCLib/src/xmc_can.c ****   }
 261:../Libraries/XMCLib/src/xmc_can.c **** 
 262:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 675              	 .loc 2 262 0
 676 00b4 3B68     	 ldr r3,[r7]
 677 00b6 5A68     	 ldr r2,[r3,#4]
 678 00b8 3B6A     	 ldr r3,[r7,#32]
 679 00ba 9A42     	 cmp r2,r3
 680 00bc 05D8     	 bhi .L27
 263:../Libraries/XMCLib/src/xmc_can.c ****   {
 264:../Libraries/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 681              	 .loc 2 264 0
 682 00be 3B68     	 ldr r3,[r7]
 683 00c0 5B68     	 ldr r3,[r3,#4]
 684 00c2 3A6A     	 ldr r2,[r7,#32]
 685 00c4 D31A     	 subs r3,r2,r3
 686 00c6 FB61     	 str r3,[r7,#28]
 687 00c8 04E0     	 b .L28
 688              	.L27:
 265:../Libraries/XMCLib/src/xmc_can.c ****   }
 266:../Libraries/XMCLib/src/xmc_can.c ****   else
 267:../Libraries/XMCLib/src/xmc_can.c ****   {
 268:../Libraries/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 689              	 .loc 2 268 0
 690 00ca 3B68     	 ldr r3,[r7]
 691 00cc 5A68     	 ldr r2,[r3,#4]
 692 00ce 3B6A     	 ldr r3,[r7,#32]
 693 00d0 D31A     	 subs r3,r2,r3
 694 00d2 FB61     	 str r3,[r7,#28]
 695              	.L28:
 269:../Libraries/XMCLib/src/xmc_can.c ****   }
 270:../Libraries/XMCLib/src/xmc_can.c **** 
 271:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 696              	 .loc 2 271 0
 697 00d4 7B6A     	 ldr r3,[r7,#36]
 698 00d6 142B     	 cmp r3,#20
 699 00d8 0ED8     	 bhi .L29
 700              	 .loc 2 271 0 is_stmt 0 discriminator 1
 701 00da BA6A     	 ldr r2,[r7,#40]
 702 00dc FB69     	 ldr r3,[r7,#28]
 703 00de 9A42     	 cmp r2,r3
 704 00e0 0AD9     	 bls .L29
 272:../Libraries/XMCLib/src/xmc_can.c ****   {
 273:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 705              	 .loc 2 273 0 is_stmt 1
 706 00e2 FB6B     	 ldr r3,[r7,#60]
 707 00e4 7B63     	 str r3,[r7,#52]
 274:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 708              	 .loc 2 274 0
 709 00e6 7B6A     	 ldr r3,[r7,#36]
 710 00e8 FB62     	 str r3,[r7,#44]
 275:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 711              	 .loc 2 275 0
 712 00ea FB69     	 ldr r3,[r7,#28]
 713 00ec BB62     	 str r3,[r7,#40]
 276:../Libraries/XMCLib/src/xmc_can.c **** 
 277:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 714              	 .loc 2 277 0
 715 00ee FB69     	 ldr r3,[r7,#28]
 716 00f0 B3F57A7F 	 cmp r3,#1000
 717 00f4 00D2     	 bcs .L29
 278:../Libraries/XMCLib/src/xmc_can.c ****     {
 279:../Libraries/XMCLib/src/xmc_can.c ****       break;
 718              	 .loc 2 279 0
 719 00f6 05E0     	 b .L30
 720              	.L29:
 721              	.LBE3:
 234:../Libraries/XMCLib/src/xmc_can.c ****   {
 722              	 .loc 2 234 0 discriminator 2
 723 00f8 FB6B     	 ldr r3,[r7,#60]
 724 00fa 0133     	 adds r3,r3,#1
 725 00fc FB63     	 str r3,[r7,#60]
 726              	.L22:
 234:../Libraries/XMCLib/src/xmc_can.c ****   {
 727              	 .loc 2 234 0 is_stmt 0 discriminator 1
 728 00fe FB6B     	 ldr r3,[r7,#60]
 729 0100 402B     	 cmp r3,#64
 730 0102 94D9     	 bls .L31
 731              	.L30:
 280:../Libraries/XMCLib/src/xmc_can.c ****     }
 281:../Libraries/XMCLib/src/xmc_can.c ****    }
 282:../Libraries/XMCLib/src/xmc_can.c ****   }
 283:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 284:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 732              	 .loc 2 284 0 is_stmt 1
 733 0104 42F21073 	 movw r3,#10000
 734 0108 BB62     	 str r3,[r7,#40]
 285:../Libraries/XMCLib/src/xmc_can.c **** 
 286:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 735              	 .loc 2 286 0
 736 010a 4023     	 movs r3,#64
 737 010c BB63     	 str r3,[r7,#56]
 738 010e 2EE0     	 b .L32
 739              	.L38:
 740              	.LBB4:
 287:../Libraries/XMCLib/src/xmc_can.c ****   {
 288:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 741              	 .loc 2 288 0
 742 0110 BB6B     	 ldr r3,[r7,#56]
 743 0112 0133     	 adds r3,r3,#1
 744 0114 42F21072 	 movw r2,#10000
 745 0118 02FB03F2 	 mul r2,r2,r3
 746 011c FB6A     	 ldr r3,[r7,#44]
 747 011e B2FBF3F3 	 udiv r3,r2,r3
 748 0122 FB60     	 str r3,[r7,#12]
 289:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t error;
 290:../Libraries/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 749              	 .loc 2 290 0
 750 0124 3B68     	 ldr r3,[r7]
 751 0126 1B89     	 ldrh r3,[r3,#8]
 752 0128 1A46     	 mov r2,r3
 753 012a FB68     	 ldr r3,[r7,#12]
 754 012c 9A42     	 cmp r2,r3
 755 012e 06D8     	 bhi .L33
 291:../Libraries/XMCLib/src/xmc_can.c ****   {
 292:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 756              	 .loc 2 292 0
 757 0130 3B68     	 ldr r3,[r7]
 758 0132 1B89     	 ldrh r3,[r3,#8]
 759 0134 1A46     	 mov r2,r3
 760 0136 FB68     	 ldr r3,[r7,#12]
 761 0138 9B1A     	 subs r3,r3,r2
 762 013a BB61     	 str r3,[r7,#24]
 763 013c 05E0     	 b .L34
 764              	.L33:
 293:../Libraries/XMCLib/src/xmc_can.c ****   }
 294:../Libraries/XMCLib/src/xmc_can.c ****   else
 295:../Libraries/XMCLib/src/xmc_can.c ****   {
 296:../Libraries/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 765              	 .loc 2 296 0
 766 013e 3B68     	 ldr r3,[r7]
 767 0140 1B89     	 ldrh r3,[r3,#8]
 768 0142 1A46     	 mov r2,r3
 769 0144 FB68     	 ldr r3,[r7,#12]
 770 0146 D31A     	 subs r3,r2,r3
 771 0148 BB61     	 str r3,[r7,#24]
 772              	.L34:
 297:../Libraries/XMCLib/src/xmc_can.c ****   }
 298:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 773              	 .loc 2 298 0
 774 014a BA6A     	 ldr r2,[r7,#40]
 775 014c BB69     	 ldr r3,[r7,#24]
 776 014e 9A42     	 cmp r2,r3
 777 0150 03D9     	 bls .L35
 299:../Libraries/XMCLib/src/xmc_can.c ****     {
 300:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 778              	 .loc 2 300 0
 779 0152 BB6B     	 ldr r3,[r7,#56]
 780 0154 3B63     	 str r3,[r7,#48]
 301:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 781              	 .loc 2 301 0
 782 0156 BB69     	 ldr r3,[r7,#24]
 783 0158 BB62     	 str r3,[r7,#40]
 784              	.L35:
 302:../Libraries/XMCLib/src/xmc_can.c ****     }
 303:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 785              	 .loc 2 303 0
 786 015a 3B68     	 ldr r3,[r7]
 787 015c 1B89     	 ldrh r3,[r3,#8]
 788 015e 1A46     	 mov r2,r3
 789 0160 FB68     	 ldr r3,[r7,#12]
 790 0162 9A42     	 cmp r2,r3
 791 0164 00D9     	 bls .L36
 304:../Libraries/XMCLib/src/xmc_can.c ****     {
 305:../Libraries/XMCLib/src/xmc_can.c ****       break;
 792              	 .loc 2 305 0
 793 0166 05E0     	 b .L37
 794              	.L36:
 795              	.LBE4:
 286:../Libraries/XMCLib/src/xmc_can.c ****   {
 796              	 .loc 2 286 0 discriminator 2
 797 0168 BB6B     	 ldr r3,[r7,#56]
 798 016a 013B     	 subs r3,r3,#1
 799 016c BB63     	 str r3,[r7,#56]
 800              	.L32:
 286:../Libraries/XMCLib/src/xmc_can.c ****   {
 801              	 .loc 2 286 0 is_stmt 0 discriminator 1
 802 016e BB6B     	 ldr r3,[r7,#56]
 803 0170 022B     	 cmp r3,#2
 804 0172 CDD8     	 bhi .L38
 805              	.L37:
 306:../Libraries/XMCLib/src/xmc_can.c ****     }
 307:../Libraries/XMCLib/src/xmc_can.c ****   }
 308:../Libraries/XMCLib/src/xmc_can.c **** 
 309:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 806              	 .loc 2 309 0 is_stmt 1
 807 0174 FA6A     	 ldr r2,[r7,#44]
 808 0176 3B6B     	 ldr r3,[r7,#48]
 809 0178 D31A     	 subs r3,r2,r3
 810 017a 013B     	 subs r3,r3,#1
 811 017c 7B61     	 str r3,[r7,#20]
 310:../Libraries/XMCLib/src/xmc_can.c **** 
 311:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 812              	 .loc 2 311 0
 813 017e 7868     	 ldr r0,[r7,#4]
 814 0180 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 312:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 313:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 815              	 .loc 2 313 0
 816 0184 7B69     	 ldr r3,[r7,#20]
 817 0186 013B     	 subs r3,r3,#1
 818 0188 1B03     	 lsls r3,r3,#12
 819 018a 03F4E042 	 and r2,r3,#28672
 314:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 820              	 .loc 2 314 0
 821 018e 3B68     	 ldr r3,[r7]
 822 0190 5B89     	 ldrh r3,[r3,#10]
 823 0192 013B     	 subs r3,r3,#1
 824 0194 9B01     	 lsls r3,r3,#6
 825 0196 DBB2     	 uxtb r3,r3
 313:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 826              	 .loc 2 313 0
 827 0198 1A43     	 orrs r2,r2,r3
 315:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 828              	 .loc 2 315 0
 829 019a 3B6B     	 ldr r3,[r7,#48]
 830 019c 013B     	 subs r3,r3,#1
 831 019e 1B02     	 lsls r3,r3,#8
 832 01a0 03F47063 	 and r3,r3,#3840
 314:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 833              	 .loc 2 314 0
 834 01a4 1A43     	 orrs r2,r2,r3
 316:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 835              	 .loc 2 316 0
 836 01a6 7B6B     	 ldr r3,[r7,#52]
 837 01a8 013B     	 subs r3,r3,#1
 838 01aa 03F03F03 	 and r3,r3,#63
 839 01ae 1A43     	 orrs r2,r2,r3
 313:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 840              	 .loc 2 313 0
 841 01b0 7B68     	 ldr r3,[r7,#4]
 842 01b2 1A61     	 str r2,[r3,#16]
 317:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 318:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 843              	 .loc 2 318 0
 844 01b4 7868     	 ldr r0,[r7,#4]
 845 01b6 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 319:../Libraries/XMCLib/src/xmc_can.c **** }
 846              	 .loc 2 319 0
 847 01ba 4037     	 adds r7,r7,#64
 848              	.LCFI44:
 849              	 .cfi_def_cfa_offset 8
 850 01bc BD46     	 mov sp,r7
 851              	.LCFI45:
 852              	 .cfi_def_cfa_register 13
 853              	 
 854 01be 80BD     	 pop {r7,pc}
 855              	.L40:
 856              	 .align 2
 857              	.L39:
 858 01c0 CDCCCCCC 	 .word -858993459
 859              	 .cfi_endproc
 860              	.LFE238:
 862              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 863              	 .align 2
 864              	 .global XMC_CAN_AllocateMOtoNodeList
 865              	 .thumb
 866              	 .thumb_func
 868              	XMC_CAN_AllocateMOtoNodeList:
 869              	.LFB239:
 320:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 321:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 322:../Libraries/XMCLib/src/xmc_can.c **** {
 870              	 .loc 2 322 0
 871              	 .cfi_startproc
 872              	 
 873              	 
 874 0000 80B5     	 push {r7,lr}
 875              	.LCFI46:
 876              	 .cfi_def_cfa_offset 8
 877              	 .cfi_offset 7,-8
 878              	 .cfi_offset 14,-4
 879 0002 82B0     	 sub sp,sp,#8
 880              	.LCFI47:
 881              	 .cfi_def_cfa_offset 16
 882 0004 00AF     	 add r7,sp,#0
 883              	.LCFI48:
 884              	 .cfi_def_cfa_register 7
 885 0006 7860     	 str r0,[r7,#4]
 886 0008 0B46     	 mov r3,r1
 887 000a FB70     	 strb r3,[r7,#3]
 888 000c 1346     	 mov r3,r2
 889 000e BB70     	 strb r3,[r7,#2]
 323:../Libraries/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 324:../Libraries/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 890              	 .loc 2 324 0
 891 0010 00BF     	 nop
 892              	.L42:
 893              	 .loc 2 324 0 is_stmt 0 discriminator 1
 894 0012 7868     	 ldr r0,[r7,#4]
 895 0014 FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 896 0018 0346     	 mov r3,r0
 897 001a 83F00103 	 eor r3,r3,#1
 898 001e DBB2     	 uxtb r3,r3
 899 0020 002B     	 cmp r3,#0
 900 0022 F6D1     	 bne .L42
 325:../Libraries/XMCLib/src/xmc_can.c ****   {
 326:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 327:../Libraries/XMCLib/src/xmc_can.c ****   };
 328:../Libraries/XMCLib/src/xmc_can.c **** 
 329:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 330:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 901              	 .loc 2 330 0 is_stmt 1
 902 0024 FB78     	 ldrb r3,[r7,#3]
 903 0026 0133     	 adds r3,r3,#1
 904 0028 DBB2     	 uxtb r3,r3
 905 002a BA78     	 ldrb r2,[r7,#2]
 906 002c 7868     	 ldr r0,[r7,#4]
 907 002e 0221     	 movs r1,#2
 908 0030 FFF7FEFF 	 bl XMC_CAN_PanelControl
 331:../Libraries/XMCLib/src/xmc_can.c **** }
 909              	 .loc 2 331 0
 910 0034 0837     	 adds r7,r7,#8
 911              	.LCFI49:
 912              	 .cfi_def_cfa_offset 8
 913 0036 BD46     	 mov sp,r7
 914              	.LCFI50:
 915              	 .cfi_def_cfa_register 13
 916              	 
 917 0038 80BD     	 pop {r7,pc}
 918              	 .cfi_endproc
 919              	.LFE239:
 921 003a 00BF     	 .section .text.XMC_CAN_Disable,"ax",%progbits
 922              	 .align 2
 923              	 .global XMC_CAN_Disable
 924              	 .thumb
 925              	 .thumb_func
 927              	XMC_CAN_Disable:
 928              	.LFB240:
 332:../Libraries/XMCLib/src/xmc_can.c **** 
 333:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 334:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 335:../Libraries/XMCLib/src/xmc_can.c **** {
 929              	 .loc 2 335 0
 930              	 .cfi_startproc
 931              	 
 932              	 
 933 0000 80B5     	 push {r7,lr}
 934              	.LCFI51:
 935              	 .cfi_def_cfa_offset 8
 936              	 .cfi_offset 7,-8
 937              	 .cfi_offset 14,-4
 938 0002 82B0     	 sub sp,sp,#8
 939              	.LCFI52:
 940              	 .cfi_def_cfa_offset 16
 941 0004 00AF     	 add r7,sp,#0
 942              	.LCFI53:
 943              	 .cfi_def_cfa_register 7
 944 0006 7860     	 str r0,[r7,#4]
 336:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 337:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 945              	 .loc 2 337 0
 946 0008 7B68     	 ldr r3,[r7,#4]
 947 000a 0122     	 movs r2,#1
 948 000c 1A60     	 str r2,[r3]
 338:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 339:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 949              	 .loc 2 339 0
 950 000e 0448     	 ldr r0,.L44
 951 0010 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 340:../Libraries/XMCLib/src/xmc_can.c **** #endif
 341:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 342:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 952              	 .loc 2 342 0
 953 0014 0248     	 ldr r0,.L44
 954 0016 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 343:../Libraries/XMCLib/src/xmc_can.c **** #endif
 344:../Libraries/XMCLib/src/xmc_can.c **** }
 955              	 .loc 2 344 0
 956 001a 0837     	 adds r7,r7,#8
 957              	.LCFI54:
 958              	 .cfi_def_cfa_offset 8
 959 001c BD46     	 mov sp,r7
 960              	.LCFI55:
 961              	 .cfi_def_cfa_register 13
 962              	 
 963 001e 80BD     	 pop {r7,pc}
 964              	.L45:
 965              	 .align 2
 966              	.L44:
 967 0020 10000010 	 .word 268435472
 968              	 .cfi_endproc
 969              	.LFE240:
 971              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 972              	 .align 2
 973              	 .global XMC_CAN_Enable
 974              	 .thumb
 975              	 .thumb_func
 977              	XMC_CAN_Enable:
 978              	.LFB241:
 345:../Libraries/XMCLib/src/xmc_can.c **** 
 346:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 347:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 348:../Libraries/XMCLib/src/xmc_can.c **** {
 979              	 .loc 2 348 0
 980              	 .cfi_startproc
 981              	 
 982              	 
 983 0000 80B5     	 push {r7,lr}
 984              	.LCFI56:
 985              	 .cfi_def_cfa_offset 8
 986              	 .cfi_offset 7,-8
 987              	 .cfi_offset 14,-4
 988 0002 82B0     	 sub sp,sp,#8
 989              	.LCFI57:
 990              	 .cfi_def_cfa_offset 16
 991 0004 00AF     	 add r7,sp,#0
 992              	.LCFI58:
 993              	 .cfi_def_cfa_register 7
 994 0006 7860     	 str r0,[r7,#4]
 349:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 350:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 995              	 .loc 2 350 0
 996 0008 0A48     	 ldr r0,.L48
 997 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 351:../Libraries/XMCLib/src/xmc_can.c **** #endif
 352:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 353:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 998              	 .loc 2 353 0
 999 000e 0948     	 ldr r0,.L48
 1000 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 354:../Libraries/XMCLib/src/xmc_can.c **** #endif
 355:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 356:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 1001              	 .loc 2 356 0
 1002 0014 7B68     	 ldr r3,[r7,#4]
 1003 0016 1B68     	 ldr r3,[r3]
 1004 0018 23F00102 	 bic r2,r3,#1
 1005 001c 7B68     	 ldr r3,[r7,#4]
 1006 001e 1A60     	 str r2,[r3]
 357:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 1007              	 .loc 2 357 0
 1008 0020 00BF     	 nop
 1009              	.L47:
 1010              	 .loc 2 357 0 is_stmt 0 discriminator 1
 1011 0022 7B68     	 ldr r3,[r7,#4]
 1012 0024 1B68     	 ldr r3,[r3]
 1013 0026 03F00203 	 and r3,r3,#2
 1014 002a 002B     	 cmp r3,#0
 1015 002c F9D1     	 bne .L47
 358:../Libraries/XMCLib/src/xmc_can.c ****   {
 359:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 360:../Libraries/XMCLib/src/xmc_can.c ****   };
 361:../Libraries/XMCLib/src/xmc_can.c **** }
 1016              	 .loc 2 361 0 is_stmt 1
 1017 002e 0837     	 adds r7,r7,#8
 1018              	.LCFI59:
 1019              	 .cfi_def_cfa_offset 8
 1020 0030 BD46     	 mov sp,r7
 1021              	.LCFI60:
 1022              	 .cfi_def_cfa_register 13
 1023              	 
 1024 0032 80BD     	 pop {r7,pc}
 1025              	.L49:
 1026              	 .align 2
 1027              	.L48:
 1028 0034 10000010 	 .word 268435472
 1029              	 .cfi_endproc
 1030              	.LFE241:
 1032              	 .section .text.XMC_CAN_Init,"ax",%progbits
 1033              	 .align 2
 1034              	 .global XMC_CAN_Init
 1035              	 .thumb
 1036              	 .thumb_func
 1038              	XMC_CAN_Init:
 1039              	.LFB242:
 362:../Libraries/XMCLib/src/xmc_can.c **** 
 363:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 364:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 365:../Libraries/XMCLib/src/xmc_can.c **** {
 1040              	 .loc 2 365 0
 1041              	 .cfi_startproc
 1042              	 
 1043              	 
 1044 0000 80B5     	 push {r7,lr}
 1045              	.LCFI61:
 1046              	 .cfi_def_cfa_offset 8
 1047              	 .cfi_offset 7,-8
 1048              	 .cfi_offset 14,-4
 1049 0002 8EB0     	 sub sp,sp,#56
 1050              	.LCFI62:
 1051              	 .cfi_def_cfa_offset 64
 1052 0004 00AF     	 add r7,sp,#0
 1053              	.LCFI63:
 1054              	 .cfi_def_cfa_register 7
 1055 0006 F860     	 str r0,[r7,#12]
 1056 0008 0B46     	 mov r3,r1
 1057 000a 7A60     	 str r2,[r7,#4]
 1058 000c FB72     	 strb r3,[r7,#11]
 366:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 367:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 368:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 369:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 370:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 371:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 372:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 373:../Libraries/XMCLib/src/xmc_can.c **** 
 374:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 375:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 376:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1059              	 .loc 2 376 0
 1060 000e F868     	 ldr r0,[r7,#12]
 1061 0010 FFF7FEFF 	 bl XMC_CAN_Enable
 377:../Libraries/XMCLib/src/xmc_can.c **** 
 378:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1062              	 .loc 2 378 0
 1063 0014 FB7A     	 ldrb r3,[r7,#11]
 1064 0016 F868     	 ldr r0,[r7,#12]
 1065 0018 1946     	 mov r1,r3
 1066 001a FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 379:../Libraries/XMCLib/src/xmc_can.c **** 
 380:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1067              	 .loc 2 380 0
 1068 001e F868     	 ldr r0,[r7,#12]
 1069 0020 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1070 0024 7863     	 str r0,[r7,#52]
 381:../Libraries/XMCLib/src/xmc_can.c **** 
 382:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 383:../Libraries/XMCLib/src/xmc_can.c **** 
 384:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 385:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1071              	 .loc 2 385 0
 1072 0026 7A6B     	 ldr r2,[r7,#52]
 1073 0028 7B68     	 ldr r3,[r7,#4]
 1074 002a B2FBF3F3 	 udiv r3,r2,r3
 1075 002e C3F58063 	 rsb r3,r3,#1024
 1076 0032 0020     	 movs r0,#0
 1077 0034 1946     	 mov r1,r3
 1078 0036 FFF7FEFF 	 bl max
 1079 003a 0346     	 mov r3,r0
 1080 003c 1846     	 mov r0,r3
 1081 003e 40F2FF31 	 movw r1,#1023
 1082 0042 FFF7FEFF 	 bl min
 1083 0046 3863     	 str r0,[r7,#48]
 386:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1084              	 .loc 2 386 0
 1085 0048 3B6B     	 ldr r3,[r7,#48]
 1086 004a C3F58063 	 rsb r3,r3,#1024
 1087 004e 7A6B     	 ldr r2,[r7,#52]
 1088 0050 B2FBF3F3 	 udiv r3,r2,r3
 1089 0054 FB62     	 str r3,[r7,#44]
 387:../Libraries/XMCLib/src/xmc_can.c **** 
 388:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 389:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1090              	 .loc 2 389 0
 1091 0056 7B68     	 ldr r3,[r7,#4]
 1092 0058 9B09     	 lsrs r3,r3,#6
 1093 005a BB62     	 str r3,[r7,#40]
 390:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1094              	 .loc 2 390 0
 1095 005c 7B6B     	 ldr r3,[r7,#52]
 1096 005e 9B09     	 lsrs r3,r3,#6
 1097 0060 7B62     	 str r3,[r7,#36]
 391:../Libraries/XMCLib/src/xmc_can.c **** 
 392:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1098              	 .loc 2 392 0
 1099 0062 BB6A     	 ldr r3,[r7,#40]
 1100 0064 9A02     	 lsls r2,r3,#10
 1101 0066 7B6A     	 ldr r3,[r7,#36]
 1102 0068 B2FBF3F3 	 udiv r3,r2,r3
 1103 006c 1846     	 mov r0,r3
 1104 006e 40F2FF31 	 movw r1,#1023
 1105 0072 FFF7FEFF 	 bl min
 1106 0076 3862     	 str r0,[r7,#32]
 393:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1107              	 .loc 2 393 0
 1108 0078 7B6A     	 ldr r3,[r7,#36]
 1109 007a 3A6A     	 ldr r2,[r7,#32]
 1110 007c 02FB03F3 	 mul r3,r2,r3
 1111 0080 9B0A     	 lsrs r3,r3,#10
 1112 0082 FB61     	 str r3,[r7,#28]
 394:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1113              	 .loc 2 394 0
 1114 0084 FB69     	 ldr r3,[r7,#28]
 1115 0086 9B01     	 lsls r3,r3,#6
 1116 0088 FB61     	 str r3,[r7,#28]
 395:../Libraries/XMCLib/src/xmc_can.c **** 
 396:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1117              	 .loc 2 396 0
 1118 008a 7A68     	 ldr r2,[r7,#4]
 1119 008c FB6A     	 ldr r3,[r7,#44]
 1120 008e D21A     	 subs r2,r2,r3
 1121 0090 7968     	 ldr r1,[r7,#4]
 1122 0092 FB69     	 ldr r3,[r7,#28]
 1123 0094 CB1A     	 subs r3,r1,r3
 1124 0096 9A42     	 cmp r2,r3
 1125 0098 94BF     	 ite ls
 1126 009a 0123     	 movls r3,#1
 1127 009c 0023     	 movhi r3,#0
 1128 009e FB76     	 strb r3,[r7,#27]
 397:../Libraries/XMCLib/src/xmc_can.c **** 
 398:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1129              	 .loc 2 398 0
 1130 00a0 FB7E     	 ldrb r3,[r7,#27]
 1131 00a2 002B     	 cmp r3,#0
 1132 00a4 01D0     	 beq .L51
 1133              	 .loc 2 398 0 is_stmt 0 discriminator 1
 1134 00a6 3B6B     	 ldr r3,[r7,#48]
 1135 00a8 00E0     	 b .L52
 1136              	.L51:
 1137              	 .loc 2 398 0 discriminator 2
 1138 00aa 3B6A     	 ldr r3,[r7,#32]
 1139              	.L52:
 1140              	 .loc 2 398 0 discriminator 4
 1141 00ac 7B61     	 str r3,[r7,#20]
 399:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1142              	 .loc 2 399 0 is_stmt 1 discriminator 4
 1143 00ae FB7E     	 ldrb r3,[r7,#27]
 1144 00b0 002B     	 cmp r3,#0
 1145 00b2 01D0     	 beq .L53
 1146              	 .loc 2 399 0 is_stmt 0 discriminator 1
 1147 00b4 0123     	 movs r3,#1
 1148 00b6 00E0     	 b .L54
 1149              	.L53:
 1150              	 .loc 2 399 0 discriminator 2
 1151 00b8 0223     	 movs r3,#2
 1152              	.L54:
 1153              	 .loc 2 399 0 discriminator 4
 1154 00ba FB74     	 strb r3,[r7,#19]
 400:../Libraries/XMCLib/src/xmc_can.c **** 
 401:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1155              	 .loc 2 401 0 is_stmt 1 discriminator 4
 1156 00bc FB68     	 ldr r3,[r7,#12]
 1157 00be DB68     	 ldr r3,[r3,#12]
 1158 00c0 23F44343 	 bic r3,r3,#49920
 1159 00c4 23F0FF03 	 bic r3,r3,#255
 1160 00c8 FA68     	 ldr r2,[r7,#12]
 1161 00ca D360     	 str r3,[r2,#12]
 402:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1162              	 .loc 2 402 0 discriminator 4
 1163 00cc FB68     	 ldr r3,[r7,#12]
 1164 00ce DA68     	 ldr r2,[r3,#12]
 1165 00d0 FB7C     	 ldrb r3,[r7,#19]
 1166 00d2 9903     	 lsls r1,r3,#14
 1167 00d4 7B69     	 ldr r3,[r7,#20]
 1168 00d6 0B43     	 orrs r3,r3,r1
 1169 00d8 1A43     	 orrs r2,r2,r3
 1170 00da FB68     	 ldr r3,[r7,#12]
 1171 00dc DA60     	 str r2,[r3,#12]
 403:../Libraries/XMCLib/src/xmc_can.c **** 
 404:../Libraries/XMCLib/src/xmc_can.c **** }
 1172              	 .loc 2 404 0 discriminator 4
 1173 00de 3837     	 adds r7,r7,#56
 1174              	.LCFI64:
 1175              	 .cfi_def_cfa_offset 8
 1176 00e0 BD46     	 mov sp,r7
 1177              	.LCFI65:
 1178              	 .cfi_def_cfa_register 13
 1179              	 
 1180 00e2 80BD     	 pop {r7,pc}
 1181              	 .cfi_endproc
 1182              	.LFE242:
 1184              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1185              	 .align 2
 1186              	 .global XMC_CAN_SetBaudrateClockSource
 1187              	 .thumb
 1188              	 .thumb_func
 1190              	XMC_CAN_SetBaudrateClockSource:
 1191              	.LFB243:
 405:../Libraries/XMCLib/src/xmc_can.c **** 
 406:../Libraries/XMCLib/src/xmc_can.c **** #else
 407:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 408:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 409:../Libraries/XMCLib/src/xmc_can.c **** {
 410:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 411:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 412:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 413:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 414:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 415:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 416:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 417:../Libraries/XMCLib/src/xmc_can.c **** 
 418:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 419:../Libraries/XMCLib/src/xmc_can.c **** 
 420:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 421:../Libraries/XMCLib/src/xmc_can.c **** 
 422:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 423:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 424:../Libraries/XMCLib/src/xmc_can.c **** 
 425:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 426:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 427:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 428:../Libraries/XMCLib/src/xmc_can.c **** 
 429:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 430:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 431:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 432:../Libraries/XMCLib/src/xmc_can.c **** 
 433:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 434:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 435:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 436:../Libraries/XMCLib/src/xmc_can.c **** 
 437:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 438:../Libraries/XMCLib/src/xmc_can.c **** 
 439:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 440:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 441:../Libraries/XMCLib/src/xmc_can.c **** 
 442:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 443:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 444:../Libraries/XMCLib/src/xmc_can.c **** }
 445:../Libraries/XMCLib/src/xmc_can.c **** #endif
 446:../Libraries/XMCLib/src/xmc_can.c **** 
 447:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 448:../Libraries/XMCLib/src/xmc_can.c **** {
 1192              	 .loc 2 448 0
 1193              	 .cfi_startproc
 1194              	 
 1195              	 
 1196              	 
 1197 0000 80B4     	 push {r7}
 1198              	.LCFI66:
 1199              	 .cfi_def_cfa_offset 4
 1200              	 .cfi_offset 7,-4
 1201 0002 83B0     	 sub sp,sp,#12
 1202              	.LCFI67:
 1203              	 .cfi_def_cfa_offset 16
 1204 0004 00AF     	 add r7,sp,#0
 1205              	.LCFI68:
 1206              	 .cfi_def_cfa_register 7
 1207 0006 7860     	 str r0,[r7,#4]
 1208 0008 0B46     	 mov r3,r1
 1209 000a FB70     	 strb r3,[r7,#3]
 449:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 450:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 1210              	 .loc 2 450 0
 1211 000c 7B68     	 ldr r3,[r7,#4]
 1212 000e D3F8C831 	 ldr r3,[r3,#456]
 1213 0012 23F00F02 	 bic r2,r3,#15
 1214 0016 FB78     	 ldrb r3,[r7,#3]
 1215 0018 1A43     	 orrs r2,r2,r3
 1216 001a 7B68     	 ldr r3,[r7,#4]
 1217 001c C3F8C821 	 str r2,[r3,#456]
 451:../Libraries/XMCLib/src/xmc_can.c **** #else
 452:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 453:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(source);
 454:../Libraries/XMCLib/src/xmc_can.c **** #endif
 455:../Libraries/XMCLib/src/xmc_can.c **** }
 1218              	 .loc 2 455 0
 1219 0020 0C37     	 adds r7,r7,#12
 1220              	.LCFI69:
 1221              	 .cfi_def_cfa_offset 4
 1222 0022 BD46     	 mov sp,r7
 1223              	.LCFI70:
 1224              	 .cfi_def_cfa_register 13
 1225              	 
 1226 0024 5DF8047B 	 ldr r7,[sp],#4
 1227              	.LCFI71:
 1228              	 .cfi_restore 7
 1229              	 .cfi_def_cfa_offset 0
 1230 0028 7047     	 bx lr
 1231              	 .cfi_endproc
 1232              	.LFE243:
 1234 002a 00BF     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1235              	 .align 2
 1236              	 .global XMC_CAN_GetBaudrateClockSource
 1237              	 .thumb
 1238              	 .thumb_func
 1240              	XMC_CAN_GetBaudrateClockSource:
 1241              	.LFB244:
 456:../Libraries/XMCLib/src/xmc_can.c **** 
 457:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 458:../Libraries/XMCLib/src/xmc_can.c **** {
 1242              	 .loc 2 458 0
 1243              	 .cfi_startproc
 1244              	 
 1245              	 
 1246              	 
 1247 0000 80B4     	 push {r7}
 1248              	.LCFI72:
 1249              	 .cfi_def_cfa_offset 4
 1250              	 .cfi_offset 7,-4
 1251 0002 83B0     	 sub sp,sp,#12
 1252              	.LCFI73:
 1253              	 .cfi_def_cfa_offset 16
 1254 0004 00AF     	 add r7,sp,#0
 1255              	.LCFI74:
 1256              	 .cfi_def_cfa_register 7
 1257 0006 7860     	 str r0,[r7,#4]
 459:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 460:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 1258              	 .loc 2 460 0
 1259 0008 7B68     	 ldr r3,[r7,#4]
 1260 000a D3F8C831 	 ldr r3,[r3,#456]
 1261 000e DBB2     	 uxtb r3,r3
 1262 0010 03F00F03 	 and r3,r3,#15
 1263 0014 DBB2     	 uxtb r3,r3
 461:../Libraries/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 462:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 463:../Libraries/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 464:../Libraries/XMCLib/src/xmc_can.c **** #endif    
 465:../Libraries/XMCLib/src/xmc_can.c **** }
 1264              	 .loc 2 465 0
 1265 0016 1846     	 mov r0,r3
 1266 0018 0C37     	 adds r7,r7,#12
 1267              	.LCFI75:
 1268              	 .cfi_def_cfa_offset 4
 1269 001a BD46     	 mov sp,r7
 1270              	.LCFI76:
 1271              	 .cfi_def_cfa_register 13
 1272              	 
 1273 001c 5DF8047B 	 ldr r7,[sp],#4
 1274              	.LCFI77:
 1275              	 .cfi_restore 7
 1276              	 .cfi_def_cfa_offset 0
 1277 0020 7047     	 bx lr
 1278              	 .cfi_endproc
 1279              	.LFE244:
 1281 0022 00BF     	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1282              	 .align 2
 1283              	 .global XMC_CAN_GetBaudrateClockFrequency
 1284              	 .thumb
 1285              	 .thumb_func
 1287              	XMC_CAN_GetBaudrateClockFrequency:
 1288              	.LFB245:
 466:../Libraries/XMCLib/src/xmc_can.c **** 
 467:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 468:../Libraries/XMCLib/src/xmc_can.c **** {
 1289              	 .loc 2 468 0
 1290              	 .cfi_startproc
 1291              	 
 1292              	 
 1293 0000 80B5     	 push {r7,lr}
 1294              	.LCFI78:
 1295              	 .cfi_def_cfa_offset 8
 1296              	 .cfi_offset 7,-8
 1297              	 .cfi_offset 14,-4
 1298 0002 84B0     	 sub sp,sp,#16
 1299              	.LCFI79:
 1300              	 .cfi_def_cfa_offset 24
 1301 0004 00AF     	 add r7,sp,#0
 1302              	.LCFI80:
 1303              	 .cfi_def_cfa_register 7
 1304 0006 7860     	 str r0,[r7,#4]
 469:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 470:../Libraries/XMCLib/src/xmc_can.c **** 
 471:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 472:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 1305              	 .loc 2 472 0
 1306 0008 7868     	 ldr r0,[r7,#4]
 1307 000a FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockSource
 1308 000e 0346     	 mov r3,r0
 1309 0010 012B     	 cmp r3,#1
 1310 0012 02D0     	 beq .L60
 1311 0014 022B     	 cmp r3,#2
 1312 0016 04D0     	 beq .L61
 1313 0018 07E0     	 b .L64
 1314              	.L60:
 473:../Libraries/XMCLib/src/xmc_can.c ****   {
 474:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 475:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 476:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1315              	 .loc 2 476 0
 1316 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1317 001e F860     	 str r0,[r7,#12]
 477:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1318              	 .loc 2 477 0
 1319 0020 06E0     	 b .L62
 1320              	.L61:
 478:../Libraries/XMCLib/src/xmc_can.c **** #else
 479:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 480:../Libraries/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 481:../Libraries/XMCLib/src/xmc_can.c ****       break;
 482:../Libraries/XMCLib/src/xmc_can.c **** #endif
 483:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 484:../Libraries/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 1321              	 .loc 2 484 0
 1322 0022 FFF7FEFF 	 bl OSCHP_GetFrequency
 1323 0026 F860     	 str r0,[r7,#12]
 485:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1324              	 .loc 2 485 0
 1325 0028 02E0     	 b .L62
 1326              	.L64:
 486:../Libraries/XMCLib/src/xmc_can.c **** 
 487:../Libraries/XMCLib/src/xmc_can.c ****     default:
 488:../Libraries/XMCLib/src/xmc_can.c ****       frequency = 0;
 1327              	 .loc 2 488 0
 1328 002a 0023     	 movs r3,#0
 1329 002c FB60     	 str r3,[r7,#12]
 489:../Libraries/XMCLib/src/xmc_can.c ****       break;
 1330              	 .loc 2 489 0
 1331 002e 00BF     	 nop
 1332              	.L62:
 490:../Libraries/XMCLib/src/xmc_can.c ****   }
 491:../Libraries/XMCLib/src/xmc_can.c **** #else
 492:../Libraries/XMCLib/src/xmc_can.c ****   XMC_UNUSED_ARG(obj);
 493:../Libraries/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 494:../Libraries/XMCLib/src/xmc_can.c **** #endif  
 495:../Libraries/XMCLib/src/xmc_can.c **** 
 496:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 1333              	 .loc 2 496 0
 1334 0030 FB68     	 ldr r3,[r7,#12]
 497:../Libraries/XMCLib/src/xmc_can.c **** }
 1335              	 .loc 2 497 0
 1336 0032 1846     	 mov r0,r3
 1337 0034 1037     	 adds r7,r7,#16
 1338              	.LCFI81:
 1339              	 .cfi_def_cfa_offset 8
 1340 0036 BD46     	 mov sp,r7
 1341              	.LCFI82:
 1342              	 .cfi_def_cfa_register 13
 1343              	 
 1344 0038 80BD     	 pop {r7,pc}
 1345              	 .cfi_endproc
 1346              	.LFE245:
 1348 003a 00BF     	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1349              	 .align 2
 1350              	 .global XMC_CAN_InitEx
 1351              	 .thumb
 1352              	 .thumb_func
 1354              	XMC_CAN_InitEx:
 1355              	.LFB246:
 498:../Libraries/XMCLib/src/xmc_can.c **** 
 499:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 500:../Libraries/XMCLib/src/xmc_can.c **** {
 1356              	 .loc 2 500 0
 1357              	 .cfi_startproc
 1358              	 
 1359              	 
 1360 0000 80B5     	 push {r7,lr}
 1361              	.LCFI83:
 1362              	 .cfi_def_cfa_offset 8
 1363              	 .cfi_offset 7,-8
 1364              	 .cfi_offset 14,-4
 1365 0002 88B0     	 sub sp,sp,#32
 1366              	.LCFI84:
 1367              	 .cfi_def_cfa_offset 40
 1368 0004 00AF     	 add r7,sp,#0
 1369              	.LCFI85:
 1370              	 .cfi_def_cfa_register 7
 1371 0006 F860     	 str r0,[r7,#12]
 1372 0008 0B46     	 mov r3,r1
 1373 000a 7A60     	 str r2,[r7,#4]
 1374 000c FB72     	 strb r3,[r7,#11]
 501:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 502:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 503:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 504:../Libraries/XMCLib/src/xmc_can.c **** 
 505:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 506:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1375              	 .loc 2 506 0
 1376 000e F868     	 ldr r0,[r7,#12]
 1377 0010 FFF7FEFF 	 bl XMC_CAN_Enable
 507:../Libraries/XMCLib/src/xmc_can.c **** 
 508:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1378              	 .loc 2 508 0
 1379 0014 FB7A     	 ldrb r3,[r7,#11]
 1380 0016 F868     	 ldr r0,[r7,#12]
 1381 0018 1946     	 mov r1,r3
 1382 001a FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 509:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1383              	 .loc 2 509 0
 1384 001e F868     	 ldr r0,[r7,#12]
 1385 0020 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1386 0024 F861     	 str r0,[r7,#28]
 510:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 511:../Libraries/XMCLib/src/xmc_can.c **** 
 512:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 513:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1387              	 .loc 2 513 0
 1388 0026 FA69     	 ldr r2,[r7,#28]
 1389 0028 7B68     	 ldr r3,[r7,#4]
 1390 002a B2FBF3F3 	 udiv r3,r2,r3
 1391 002e C3F58063 	 rsb r3,r3,#1024
 1392 0032 0020     	 movs r0,#0
 1393 0034 1946     	 mov r1,r3
 1394 0036 FFF7FEFF 	 bl max
 1395 003a 0346     	 mov r3,r0
 1396 003c 1846     	 mov r0,r3
 1397 003e 40F2FF31 	 movw r1,#1023
 1398 0042 FFF7FEFF 	 bl min
 1399 0046 B861     	 str r0,[r7,#24]
 514:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1400              	 .loc 2 514 0
 1401 0048 BB69     	 ldr r3,[r7,#24]
 1402 004a C3F58063 	 rsb r3,r3,#1024
 1403 004e FA69     	 ldr r2,[r7,#28]
 1404 0050 B2FBF3F3 	 udiv r3,r2,r3
 1405 0054 7B61     	 str r3,[r7,#20]
 515:../Libraries/XMCLib/src/xmc_can.c **** 
 516:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1406              	 .loc 2 516 0
 1407 0056 FB68     	 ldr r3,[r7,#12]
 1408 0058 DB68     	 ldr r3,[r3,#12]
 1409 005a 23F44343 	 bic r3,r3,#49920
 1410 005e 23F0FF03 	 bic r3,r3,#255
 1411 0062 FA68     	 ldr r2,[r7,#12]
 1412 0064 D360     	 str r3,[r2,#12]
 517:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1413              	 .loc 2 517 0
 1414 0066 FB68     	 ldr r3,[r7,#12]
 1415 0068 DA68     	 ldr r2,[r3,#12]
 1416 006a BB69     	 ldr r3,[r7,#24]
 1417 006c 1343     	 orrs r3,r3,r2
 1418 006e 43F48042 	 orr r2,r3,#16384
 1419 0072 FB68     	 ldr r3,[r7,#12]
 1420 0074 DA60     	 str r2,[r3,#12]
 518:../Libraries/XMCLib/src/xmc_can.c **** 
 519:../Libraries/XMCLib/src/xmc_can.c ****   return freq_n;
 1421              	 .loc 2 519 0
 1422 0076 7B69     	 ldr r3,[r7,#20]
 520:../Libraries/XMCLib/src/xmc_can.c **** }
 1423              	 .loc 2 520 0
 1424 0078 1846     	 mov r0,r3
 1425 007a 2037     	 adds r7,r7,#32
 1426              	.LCFI86:
 1427              	 .cfi_def_cfa_offset 8
 1428 007c BD46     	 mov sp,r7
 1429              	.LCFI87:
 1430              	 .cfi_def_cfa_register 13
 1431              	 
 1432 007e 80BD     	 pop {r7,pc}
 1433              	 .cfi_endproc
 1434              	.LFE246:
 1436              	 .section .text.XMC_CAN_GetClockFrequency,"ax",%progbits
 1437              	 .align 2
 1438              	 .global XMC_CAN_GetClockFrequency
 1439              	 .thumb
 1440              	 .thumb_func
 1442              	XMC_CAN_GetClockFrequency:
 1443              	.LFB247:
 521:../Libraries/XMCLib/src/xmc_can.c **** 
 522:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetClockFrequency(XMC_CAN_t *const obj)
 523:../Libraries/XMCLib/src/xmc_can.c **** {
 1444              	 .loc 2 523 0
 1445              	 .cfi_startproc
 1446              	 
 1447              	 
 1448 0000 80B5     	 push {r7,lr}
 1449              	.LCFI88:
 1450              	 .cfi_def_cfa_offset 8
 1451              	 .cfi_offset 7,-8
 1452              	 .cfi_offset 14,-4
 1453 0002 84B0     	 sub sp,sp,#16
 1454              	.LCFI89:
 1455              	 .cfi_def_cfa_offset 24
 1456 0004 00AF     	 add r7,sp,#0
 1457              	.LCFI90:
 1458              	 .cfi_def_cfa_register 7
 1459 0006 7860     	 str r0,[r7,#4]
 524:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step_n = (obj->FDR & CAN_FDR_STEP_Msk) >> CAN_FDR_STEP_Pos;
 1460              	 .loc 2 524 0
 1461 0008 7B68     	 ldr r3,[r7,#4]
 1462 000a DB68     	 ldr r3,[r3,#12]
 1463 000c C3F30903 	 ubfx r3,r3,#0,#10
 1464 0010 FB60     	 str r3,[r7,#12]
 525:../Libraries/XMCLib/src/xmc_can.c ****   return (XMC_CAN_GetBaudrateClockFrequency(obj) * (1024U - step_n));
 1465              	 .loc 2 525 0
 1466 0012 7868     	 ldr r0,[r7,#4]
 1467 0014 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1468 0018 0246     	 mov r2,r0
 1469 001a FB68     	 ldr r3,[r7,#12]
 1470 001c C3F58063 	 rsb r3,r3,#1024
 1471 0020 03FB02F3 	 mul r3,r3,r2
 526:../Libraries/XMCLib/src/xmc_can.c **** }
 1472              	 .loc 2 526 0
 1473 0024 1846     	 mov r0,r3
 1474 0026 1037     	 adds r7,r7,#16
 1475              	.LCFI91:
 1476              	 .cfi_def_cfa_offset 8
 1477 0028 BD46     	 mov sp,r7
 1478              	.LCFI92:
 1479              	 .cfi_def_cfa_register 13
 1480              	 
 1481 002a 80BD     	 pop {r7,pc}
 1482              	 .cfi_endproc
 1483              	.LFE247:
 1485              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1486              	 .align 2
 1487              	 .global XMC_CAN_MO_SetIdentifier
 1488              	 .thumb
 1489              	 .thumb_func
 1491              	XMC_CAN_MO_SetIdentifier:
 1492              	.LFB248:
 527:../Libraries/XMCLib/src/xmc_can.c **** 
 528:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 529:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 530:../Libraries/XMCLib/src/xmc_can.c **** {
 1493              	 .loc 2 530 0
 1494              	 .cfi_startproc
 1495              	 
 1496              	 
 1497              	 
 1498 0000 80B4     	 push {r7}
 1499              	.LCFI93:
 1500              	 .cfi_def_cfa_offset 4
 1501              	 .cfi_offset 7,-4
 1502 0002 83B0     	 sub sp,sp,#12
 1503              	.LCFI94:
 1504              	 .cfi_def_cfa_offset 16
 1505 0004 00AF     	 add r7,sp,#0
 1506              	.LCFI95:
 1507              	 .cfi_def_cfa_register 7
 1508 0006 7860     	 str r0,[r7,#4]
 1509 0008 3960     	 str r1,[r7]
 531:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1510              	 .loc 2 531 0
 1511 000a 7B68     	 ldr r3,[r7,#4]
 1512 000c 1B68     	 ldr r3,[r3]
 1513 000e 9B69     	 ldr r3,[r3,#24]
 1514 0010 03F00053 	 and r3,r3,#536870912
 1515 0014 002B     	 cmp r3,#0
 1516 0016 0DD1     	 bne .L70
 532:../Libraries/XMCLib/src/xmc_can.c ****   {
 533:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1517              	 .loc 2 533 0
 1518 0018 7B68     	 ldr r3,[r7,#4]
 1519 001a 1B68     	 ldr r3,[r3]
 1520 001c 7A68     	 ldr r2,[r7,#4]
 1521 001e 1268     	 ldr r2,[r2]
 1522 0020 9269     	 ldr r2,[r2,#24]
 1523 0022 02F06041 	 and r1,r2,#-536870912
 534:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1524              	 .loc 2 534 0
 1525 0026 3A68     	 ldr r2,[r7]
 1526 0028 9204     	 lsls r2,r2,#18
 1527 002a 22F06042 	 bic r2,r2,#-536870912
 533:../Libraries/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1528              	 .loc 2 533 0
 1529 002e 0A43     	 orrs r2,r2,r1
 1530 0030 9A61     	 str r2,[r3,#24]
 1531 0032 0BE0     	 b .L71
 1532              	.L70:
 535:../Libraries/XMCLib/src/xmc_can.c ****   }
 536:../Libraries/XMCLib/src/xmc_can.c ****   else
 537:../Libraries/XMCLib/src/xmc_can.c ****   {
 538:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1533              	 .loc 2 538 0
 1534 0034 7B68     	 ldr r3,[r7,#4]
 1535 0036 1B68     	 ldr r3,[r3]
 1536 0038 7A68     	 ldr r2,[r7,#4]
 1537 003a 1268     	 ldr r2,[r2]
 1538 003c 9269     	 ldr r2,[r2,#24]
 1539 003e 02F06041 	 and r1,r2,#-536870912
 539:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1540              	 .loc 2 539 0
 1541 0042 3A68     	 ldr r2,[r7]
 1542 0044 22F06042 	 bic r2,r2,#-536870912
 538:../Libraries/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1543              	 .loc 2 538 0
 1544 0048 0A43     	 orrs r2,r2,r1
 1545 004a 9A61     	 str r2,[r3,#24]
 1546              	.L71:
 540:../Libraries/XMCLib/src/xmc_can.c ****   }
 541:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1547              	 .loc 2 541 0
 1548 004c 3B68     	 ldr r3,[r7]
 1549 004e 23F06041 	 bic r1,r3,#-536870912
 1550 0052 7A68     	 ldr r2,[r7,#4]
 1551 0054 5368     	 ldr r3,[r2,#4]
 1552 0056 61F31C03 	 bfi r3,r1,#0,#29
 1553 005a 5360     	 str r3,[r2,#4]
 542:../Libraries/XMCLib/src/xmc_can.c **** }
 1554              	 .loc 2 542 0
 1555 005c 0C37     	 adds r7,r7,#12
 1556              	.LCFI96:
 1557              	 .cfi_def_cfa_offset 4
 1558 005e BD46     	 mov sp,r7
 1559              	.LCFI97:
 1560              	 .cfi_def_cfa_register 13
 1561              	 
 1562 0060 5DF8047B 	 ldr r7,[sp],#4
 1563              	.LCFI98:
 1564              	 .cfi_restore 7
 1565              	 .cfi_def_cfa_offset 0
 1566 0064 7047     	 bx lr
 1567              	 .cfi_endproc
 1568              	.LFE248:
 1570 0066 00BF     	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1571              	 .align 2
 1572              	 .global XMC_CAN_MO_GetIdentifier
 1573              	 .thumb
 1574              	 .thumb_func
 1576              	XMC_CAN_MO_GetIdentifier:
 1577              	.LFB249:
 543:../Libraries/XMCLib/src/xmc_can.c **** 
 544:../Libraries/XMCLib/src/xmc_can.c **** 
 545:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 546:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 547:../Libraries/XMCLib/src/xmc_can.c **** {
 1578              	 .loc 2 547 0
 1579              	 .cfi_startproc
 1580              	 
 1581              	 
 1582              	 
 1583 0000 80B4     	 push {r7}
 1584              	.LCFI99:
 1585              	 .cfi_def_cfa_offset 4
 1586              	 .cfi_offset 7,-4
 1587 0002 85B0     	 sub sp,sp,#20
 1588              	.LCFI100:
 1589              	 .cfi_def_cfa_offset 24
 1590 0004 00AF     	 add r7,sp,#0
 1591              	.LCFI101:
 1592              	 .cfi_def_cfa_register 7
 1593 0006 7860     	 str r0,[r7,#4]
 548:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 549:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1594              	 .loc 2 549 0
 1595 0008 7B68     	 ldr r3,[r7,#4]
 1596 000a 1B68     	 ldr r3,[r3]
 1597 000c 9B69     	 ldr r3,[r3,#24]
 1598 000e 03F00053 	 and r3,r3,#536870912
 1599 0012 002B     	 cmp r3,#0
 1600 0014 07D1     	 bne .L73
 550:../Libraries/XMCLib/src/xmc_can.c ****   {
 551:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 1601              	 .loc 2 551 0
 1602 0016 7B68     	 ldr r3,[r7,#4]
 1603 0018 1B68     	 ldr r3,[r3]
 1604 001a 9B69     	 ldr r3,[r3,#24]
 1605 001c 23F06043 	 bic r3,r3,#-536870912
 1606 0020 9B0C     	 lsrs r3,r3,#18
 1607 0022 FB60     	 str r3,[r7,#12]
 1608 0024 05E0     	 b .L74
 1609              	.L73:
 552:../Libraries/XMCLib/src/xmc_can.c ****   }
 553:../Libraries/XMCLib/src/xmc_can.c ****   else
 554:../Libraries/XMCLib/src/xmc_can.c ****   {
 555:../Libraries/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1610              	 .loc 2 555 0
 1611 0026 7B68     	 ldr r3,[r7,#4]
 1612 0028 1B68     	 ldr r3,[r3]
 1613 002a 9B69     	 ldr r3,[r3,#24]
 1614 002c 23F06043 	 bic r3,r3,#-536870912
 1615 0030 FB60     	 str r3,[r7,#12]
 1616              	.L74:
 556:../Libraries/XMCLib/src/xmc_can.c ****   }
 557:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1617              	 .loc 2 557 0
 1618 0032 FB68     	 ldr r3,[r7,#12]
 558:../Libraries/XMCLib/src/xmc_can.c **** }
 1619              	 .loc 2 558 0
 1620 0034 1846     	 mov r0,r3
 1621 0036 1437     	 adds r7,r7,#20
 1622              	.LCFI102:
 1623              	 .cfi_def_cfa_offset 4
 1624 0038 BD46     	 mov sp,r7
 1625              	.LCFI103:
 1626              	 .cfi_def_cfa_register 13
 1627              	 
 1628 003a 5DF8047B 	 ldr r7,[sp],#4
 1629              	.LCFI104:
 1630              	 .cfi_restore 7
 1631              	 .cfi_def_cfa_offset 0
 1632 003e 7047     	 bx lr
 1633              	 .cfi_endproc
 1634              	.LFE249:
 1636              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1637              	 .align 2
 1638              	 .global XMC_CAN_MO_GetAcceptanceMask
 1639              	 .thumb
 1640              	 .thumb_func
 1642              	XMC_CAN_MO_GetAcceptanceMask:
 1643              	.LFB250:
 559:../Libraries/XMCLib/src/xmc_can.c **** 
 560:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 561:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 562:../Libraries/XMCLib/src/xmc_can.c **** {
 1644              	 .loc 2 562 0
 1645              	 .cfi_startproc
 1646              	 
 1647              	 
 1648              	 
 1649 0000 80B4     	 push {r7}
 1650              	.LCFI105:
 1651              	 .cfi_def_cfa_offset 4
 1652              	 .cfi_offset 7,-4
 1653 0002 85B0     	 sub sp,sp,#20
 1654              	.LCFI106:
 1655              	 .cfi_def_cfa_offset 24
 1656 0004 00AF     	 add r7,sp,#0
 1657              	.LCFI107:
 1658              	 .cfi_def_cfa_register 7
 1659 0006 7860     	 str r0,[r7,#4]
 563:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 564:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1660              	 .loc 2 564 0
 1661 0008 7B68     	 ldr r3,[r7,#4]
 1662 000a 1B68     	 ldr r3,[r3]
 1663 000c DB68     	 ldr r3,[r3,#12]
 1664 000e 03F00053 	 and r3,r3,#536870912
 1665 0012 002B     	 cmp r3,#0
 1666 0014 0ED1     	 bne .L77
 565:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1667              	 .loc 2 565 0
 1668 0016 7B68     	 ldr r3,[r7,#4]
 1669 0018 1B68     	 ldr r3,[r3]
 1670 001a 9B69     	 ldr r3,[r3,#24]
 1671 001c 03F00053 	 and r3,r3,#536870912
 1672 0020 002B     	 cmp r3,#0
 1673 0022 07D1     	 bne .L77
 566:../Libraries/XMCLib/src/xmc_can.c ****   {
 567:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1674              	 .loc 2 567 0
 1675 0024 7B68     	 ldr r3,[r7,#4]
 1676 0026 1B68     	 ldr r3,[r3]
 1677 0028 DB68     	 ldr r3,[r3,#12]
 1678 002a 23F06043 	 bic r3,r3,#-536870912
 1679 002e 9B0C     	 lsrs r3,r3,#18
 1680 0030 FB60     	 str r3,[r7,#12]
 1681 0032 05E0     	 b .L78
 1682              	.L77:
 568:../Libraries/XMCLib/src/xmc_can.c ****   }
 569:../Libraries/XMCLib/src/xmc_can.c ****   else
 570:../Libraries/XMCLib/src/xmc_can.c ****   {
 571:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1683              	 .loc 2 571 0
 1684 0034 7B68     	 ldr r3,[r7,#4]
 1685 0036 1B68     	 ldr r3,[r3]
 1686 0038 DB68     	 ldr r3,[r3,#12]
 1687 003a 23F06043 	 bic r3,r3,#-536870912
 1688 003e FB60     	 str r3,[r7,#12]
 1689              	.L78:
 572:../Libraries/XMCLib/src/xmc_can.c ****   }
 573:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1690              	 .loc 2 573 0
 1691 0040 FB68     	 ldr r3,[r7,#12]
 574:../Libraries/XMCLib/src/xmc_can.c **** }
 1692              	 .loc 2 574 0
 1693 0042 1846     	 mov r0,r3
 1694 0044 1437     	 adds r7,r7,#20
 1695              	.LCFI108:
 1696              	 .cfi_def_cfa_offset 4
 1697 0046 BD46     	 mov sp,r7
 1698              	.LCFI109:
 1699              	 .cfi_def_cfa_register 13
 1700              	 
 1701 0048 5DF8047B 	 ldr r7,[sp],#4
 1702              	.LCFI110:
 1703              	 .cfi_restore 7
 1704              	 .cfi_def_cfa_offset 0
 1705 004c 7047     	 bx lr
 1706              	 .cfi_endproc
 1707              	.LFE250:
 1709 004e 00BF     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1710              	 .align 2
 1711              	 .global XMC_CAN_MO_SetAcceptanceMask
 1712              	 .thumb
 1713              	 .thumb_func
 1715              	XMC_CAN_MO_SetAcceptanceMask:
 1716              	.LFB251:
 575:../Libraries/XMCLib/src/xmc_can.c **** 
 576:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 577:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 578:../Libraries/XMCLib/src/xmc_can.c **** {
 1717              	 .loc 2 578 0
 1718              	 .cfi_startproc
 1719              	 
 1720              	 
 1721              	 
 1722 0000 80B4     	 push {r7}
 1723              	.LCFI111:
 1724              	 .cfi_def_cfa_offset 4
 1725              	 .cfi_offset 7,-4
 1726 0002 83B0     	 sub sp,sp,#12
 1727              	.LCFI112:
 1728              	 .cfi_def_cfa_offset 16
 1729 0004 00AF     	 add r7,sp,#0
 1730              	.LCFI113:
 1731              	 .cfi_def_cfa_register 7
 1732 0006 7860     	 str r0,[r7,#4]
 1733 0008 3960     	 str r1,[r7]
 579:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1734              	 .loc 2 579 0
 1735 000a 7B68     	 ldr r3,[r7,#4]
 1736 000c 1B68     	 ldr r3,[r3]
 1737 000e DB68     	 ldr r3,[r3,#12]
 1738 0010 03F00053 	 and r3,r3,#536870912
 1739 0014 002B     	 cmp r3,#0
 1740 0016 12D1     	 bne .L81
 580:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1741              	 .loc 2 580 0
 1742 0018 7B68     	 ldr r3,[r7,#4]
 1743 001a 1B68     	 ldr r3,[r3]
 1744 001c 9B69     	 ldr r3,[r3,#24]
 1745 001e 03F00053 	 and r3,r3,#536870912
 1746 0022 002B     	 cmp r3,#0
 1747 0024 0BD1     	 bne .L81
 581:../Libraries/XMCLib/src/xmc_can.c ****   {
 582:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1748              	 .loc 2 582 0
 1749 0026 7B68     	 ldr r3,[r7,#4]
 1750 0028 1B68     	 ldr r3,[r3]
 1751 002a 7A68     	 ldr r2,[r7,#4]
 1752 002c 1268     	 ldr r2,[r2]
 1753 002e D268     	 ldr r2,[r2,#12]
 1754 0030 02F06041 	 and r1,r2,#-536870912
 583:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1755              	 .loc 2 583 0
 1756 0034 3A68     	 ldr r2,[r7]
 1757 0036 9204     	 lsls r2,r2,#18
 582:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1758              	 .loc 2 582 0
 1759 0038 0A43     	 orrs r2,r2,r1
 1760 003a DA60     	 str r2,[r3,#12]
 1761 003c 0BE0     	 b .L82
 1762              	.L81:
 584:../Libraries/XMCLib/src/xmc_can.c ****   }
 585:../Libraries/XMCLib/src/xmc_can.c ****   else
 586:../Libraries/XMCLib/src/xmc_can.c ****   {
 587:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1763              	 .loc 2 587 0
 1764 003e 7B68     	 ldr r3,[r7,#4]
 1765 0040 1B68     	 ldr r3,[r3]
 1766 0042 7A68     	 ldr r2,[r7,#4]
 1767 0044 1268     	 ldr r2,[r2]
 1768 0046 D268     	 ldr r2,[r2,#12]
 1769 0048 02F06041 	 and r1,r2,#-536870912
 588:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1770              	 .loc 2 588 0
 1771 004c 3A68     	 ldr r2,[r7]
 1772 004e 22F06042 	 bic r2,r2,#-536870912
 587:../Libraries/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1773              	 .loc 2 587 0
 1774 0052 0A43     	 orrs r2,r2,r1
 1775 0054 DA60     	 str r2,[r3,#12]
 1776              	.L82:
 589:../Libraries/XMCLib/src/xmc_can.c ****   }
 590:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1777              	 .loc 2 590 0
 1778 0056 3B68     	 ldr r3,[r7]
 1779 0058 23F06041 	 bic r1,r3,#-536870912
 1780 005c 7A68     	 ldr r2,[r7,#4]
 1781 005e 9368     	 ldr r3,[r2,#8]
 1782 0060 61F31C03 	 bfi r3,r1,#0,#29
 1783 0064 9360     	 str r3,[r2,#8]
 591:../Libraries/XMCLib/src/xmc_can.c **** }
 1784              	 .loc 2 591 0
 1785 0066 0C37     	 adds r7,r7,#12
 1786              	.LCFI114:
 1787              	 .cfi_def_cfa_offset 4
 1788 0068 BD46     	 mov sp,r7
 1789              	.LCFI115:
 1790              	 .cfi_def_cfa_register 13
 1791              	 
 1792 006a 5DF8047B 	 ldr r7,[sp],#4
 1793              	.LCFI116:
 1794              	 .cfi_restore 7
 1795              	 .cfi_def_cfa_offset 0
 1796 006e 7047     	 bx lr
 1797              	 .cfi_endproc
 1798              	.LFE251:
 1800              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1801              	 .align 2
 1802              	 .global XMC_CAN_MO_Config
 1803              	 .thumb
 1804              	 .thumb_func
 1806              	XMC_CAN_MO_Config:
 1807              	.LFB252:
 592:../Libraries/XMCLib/src/xmc_can.c **** 
 593:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 594:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 595:../Libraries/XMCLib/src/xmc_can.c **** {
 1808              	 .loc 2 595 0
 1809              	 .cfi_startproc
 1810              	 
 1811              	 
 1812 0000 80B5     	 push {r7,lr}
 1813              	.LCFI117:
 1814              	 .cfi_def_cfa_offset 8
 1815              	 .cfi_offset 7,-8
 1816              	 .cfi_offset 14,-4
 1817 0002 86B0     	 sub sp,sp,#24
 1818              	.LCFI118:
 1819              	 .cfi_def_cfa_offset 32
 1820 0004 00AF     	 add r7,sp,#0
 1821              	.LCFI119:
 1822              	 .cfi_def_cfa_register 7
 1823 0006 7860     	 str r0,[r7,#4]
 596:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 597:../Libraries/XMCLib/src/xmc_can.c ****   
 598:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 599:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 1824              	 .loc 2 599 0
 1825 0008 7B68     	 ldr r3,[r7,#4]
 1826 000a 1B68     	 ldr r3,[r3]
 1827 000c 03F13843 	 add r3,r3,#-1207959552
 1828 0010 A3F5A833 	 sub r3,r3,#86016
 1829 0014 5B09     	 lsrs r3,r3,#5
 1830 0016 7B61     	 str r3,[r7,#20]
 600:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1831              	 .loc 2 600 0
 1832 0018 7B69     	 ldr r3,[r7,#20]
 1833 001a 5B09     	 lsrs r3,r3,#5
 1834 001c 5A03     	 lsls r2,r3,#13
 1835 001e 7B69     	 ldr r3,[r7,#20]
 1836 0020 03F01F03 	 and r3,r3,#31
 1837 0024 1B02     	 lsls r3,r3,#8
 1838 0026 1343     	 orrs r3,r3,r2
 1839 0028 3B61     	 str r3,[r7,#16]
 601:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1840              	 .loc 2 601 0
 1841 002a 7B68     	 ldr r3,[r7,#4]
 1842 002c 1B68     	 ldr r3,[r3]
 1843 002e 7A68     	 ldr r2,[r7,#4]
 1844 0030 1268     	 ldr r2,[r2]
 1845 0032 9268     	 ldr r2,[r2,#8]
 1846 0034 22F47F42 	 bic r2,r2,#65280
 1847 0038 9A60     	 str r2,[r3,#8]
 602:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1848              	 .loc 2 602 0
 1849 003a 7B68     	 ldr r3,[r7,#4]
 1850 003c 1B68     	 ldr r3,[r3]
 1851 003e 7A68     	 ldr r2,[r7,#4]
 1852 0040 1268     	 ldr r2,[r2]
 1853 0042 9168     	 ldr r1,[r2,#8]
 1854 0044 3A69     	 ldr r2,[r7,#16]
 1855 0046 0A43     	 orrs r2,r2,r1
 1856 0048 9A60     	 str r2,[r3,#8]
 603:../Libraries/XMCLib/src/xmc_can.c ****   
 604:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1857              	 .loc 2 604 0
 1858 004a 7B68     	 ldr r3,[r7,#4]
 1859 004c DB79     	 ldrb r3,[r3,#7]
 1860 004e 03F02003 	 and r3,r3,#32
 1861 0052 DBB2     	 uxtb r3,r3
 1862 0054 002B     	 cmp r3,#0
 1863 0056 07D0     	 beq .L84
 605:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1864              	 .loc 2 605 0 discriminator 1
 1865 0058 7B68     	 ldr r3,[r7,#4]
 1866 005a DB79     	 ldrb r3,[r3,#7]
 1867 005c 03F02003 	 and r3,r3,#32
 1868 0060 DBB2     	 uxtb r3,r3
 604:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1869              	 .loc 2 604 0 discriminator 1
 1870 0062 002B     	 cmp r3,#0
 1871 0064 00D1     	 bne .L84
 604:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1872              	 .loc 2 604 0 is_stmt 0
 1873 0066 60E0     	 b .L83
 1874              	.L84:
 606:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1875              	 .loc 2 606 0 is_stmt 1
 1876 0068 7B68     	 ldr r3,[r7,#4]
 1877 006a 1B7E     	 ldrb r3,[r3,#24]
 605:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1878              	 .loc 2 605 0
 1879 006c 002B     	 cmp r3,#0
 1880 006e 04D0     	 beq .L86
 607:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1881              	 .loc 2 607 0
 1882 0070 7B68     	 ldr r3,[r7,#4]
 1883 0072 1B7E     	 ldrb r3,[r3,#24]
 606:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1884              	 .loc 2 606 0
 1885 0074 012B     	 cmp r3,#1
 1886 0076 00D0     	 beq .L86
 1887 0078 57E0     	 b .L83
 1888              	.L86:
 608:../Libraries/XMCLib/src/xmc_can.c ****   {
 609:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 610:../Libraries/XMCLib/src/xmc_can.c ****   }
 611:../Libraries/XMCLib/src/xmc_can.c ****   else
 612:../Libraries/XMCLib/src/xmc_can.c ****   {
 613:../Libraries/XMCLib/src/xmc_can.c **** 
 614:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 615:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1889              	 .loc 2 615 0
 1890 007a 7B68     	 ldr r3,[r7,#4]
 1891 007c 1B68     	 ldr r3,[r3]
 1892 007e 2022     	 movs r2,#32
 1893 0080 DA61     	 str r2,[r3,#28]
 616:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1894              	 .loc 2 616 0
 1895 0082 7B68     	 ldr r3,[r7,#4]
 1896 0084 DB79     	 ldrb r3,[r3,#7]
 1897 0086 03F02003 	 and r3,r3,#32
 1898 008a DBB2     	 uxtb r3,r3
 1899 008c 002B     	 cmp r3,#0
 1900 008e 28D1     	 bne .L87
 617:../Libraries/XMCLib/src/xmc_can.c ****     {
 618:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1901              	 .loc 2 618 0
 1902 0090 7B68     	 ldr r3,[r7,#4]
 1903 0092 5B68     	 ldr r3,[r3,#4]
 1904 0094 FB60     	 str r3,[r7,#12]
 619:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1905              	 .loc 2 619 0
 1906 0096 FB68     	 ldr r3,[r7,#12]
 1907 0098 03F06043 	 and r3,r3,#-536870912
 1908 009c FB60     	 str r3,[r7,#12]
 620:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1909              	 .loc 2 620 0
 1910 009e 7B68     	 ldr r3,[r7,#4]
 1911 00a0 5B68     	 ldr r3,[r3,#4]
 1912 00a2 C3F31C03 	 ubfx r3,r3,#0,#29
 1913 00a6 9B04     	 lsls r3,r3,#18
 1914 00a8 1A46     	 mov r2,r3
 1915 00aa FB68     	 ldr r3,[r7,#12]
 1916 00ac 1343     	 orrs r3,r3,r2
 1917 00ae FB60     	 str r3,[r7,#12]
 621:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1918              	 .loc 2 621 0
 1919 00b0 7B68     	 ldr r3,[r7,#4]
 1920 00b2 1B68     	 ldr r3,[r3]
 1921 00b4 FA68     	 ldr r2,[r7,#12]
 1922 00b6 9A61     	 str r2,[r3,#24]
 622:../Libraries/XMCLib/src/xmc_can.c **** 
 623:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1923              	 .loc 2 623 0
 1924 00b8 7B68     	 ldr r3,[r7,#4]
 1925 00ba 9B68     	 ldr r3,[r3,#8]
 1926 00bc FB60     	 str r3,[r7,#12]
 624:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1927              	 .loc 2 624 0
 1928 00be FB68     	 ldr r3,[r7,#12]
 1929 00c0 03F06043 	 and r3,r3,#-536870912
 1930 00c4 FB60     	 str r3,[r7,#12]
 625:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1931              	 .loc 2 625 0
 1932 00c6 7B68     	 ldr r3,[r7,#4]
 1933 00c8 9B68     	 ldr r3,[r3,#8]
 1934 00ca C3F31C03 	 ubfx r3,r3,#0,#29
 1935 00ce 9B04     	 lsls r3,r3,#18
 1936 00d0 1A46     	 mov r2,r3
 1937 00d2 FB68     	 ldr r3,[r7,#12]
 1938 00d4 1343     	 orrs r3,r3,r2
 1939 00d6 FB60     	 str r3,[r7,#12]
 626:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1940              	 .loc 2 626 0
 1941 00d8 7B68     	 ldr r3,[r7,#4]
 1942 00da 1B68     	 ldr r3,[r3]
 1943 00dc FA68     	 ldr r2,[r7,#12]
 1944 00de DA60     	 str r2,[r3,#12]
 1945 00e0 09E0     	 b .L88
 1946              	.L87:
 627:../Libraries/XMCLib/src/xmc_can.c ****     }
 628:../Libraries/XMCLib/src/xmc_can.c ****     else
 629:../Libraries/XMCLib/src/xmc_can.c ****     {
 630:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1947              	 .loc 2 630 0
 1948 00e2 7B68     	 ldr r3,[r7,#4]
 1949 00e4 1B68     	 ldr r3,[r3]
 1950 00e6 7A68     	 ldr r2,[r7,#4]
 1951 00e8 5268     	 ldr r2,[r2,#4]
 1952 00ea 9A61     	 str r2,[r3,#24]
 631:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1953              	 .loc 2 631 0
 1954 00ec 7B68     	 ldr r3,[r7,#4]
 1955 00ee 1B68     	 ldr r3,[r3]
 1956 00f0 7A68     	 ldr r2,[r7,#4]
 1957 00f2 9268     	 ldr r2,[r2,#8]
 1958 00f4 DA60     	 str r2,[r3,#12]
 1959              	.L88:
 632:../Libraries/XMCLib/src/xmc_can.c ****     }
 633:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 634:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1960              	 .loc 2 634 0
 1961 00f6 7B68     	 ldr r3,[r7,#4]
 1962 00f8 1B7E     	 ldrb r3,[r3,#24]
 1963 00fa 012B     	 cmp r3,#1
 1964 00fc 0CD1     	 bne .L89
 635:../Libraries/XMCLib/src/xmc_can.c ****     {
 636:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 637:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1965              	 .loc 2 637 0
 1966 00fe 7868     	 ldr r0,[r7,#4]
 1967 0100 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 638:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1968              	 .loc 2 638 0
 1969 0104 7B68     	 ldr r3,[r7,#4]
 1970 0106 1B68     	 ldr r3,[r3]
 1971 0108 4FF00062 	 mov r2,#134217728
 1972 010c DA61     	 str r2,[r3,#28]
 639:../Libraries/XMCLib/src/xmc_can.c **** 
 640:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 641:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 1973              	 .loc 2 641 0
 1974 010e 7B68     	 ldr r3,[r7,#4]
 1975 0110 1B68     	 ldr r3,[r3]
 1976 0112 074A     	 ldr r2,.L90
 1977 0114 DA61     	 str r2,[r3,#28]
 1978 0116 08E0     	 b .L83
 1979              	.L89:
 642:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 643:../Libraries/XMCLib/src/xmc_can.c ****     }
 644:../Libraries/XMCLib/src/xmc_can.c ****     else
 645:../Libraries/XMCLib/src/xmc_can.c ****     {
 646:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 647:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1980              	 .loc 2 647 0
 1981 0118 7B68     	 ldr r3,[r7,#4]
 1982 011a 1B68     	 ldr r3,[r3]
 1983 011c 4FF40062 	 mov r2,#2048
 1984 0120 DA61     	 str r2,[r3,#28]
 648:../Libraries/XMCLib/src/xmc_can.c **** 
 649:../Libraries/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 650:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 1985              	 .loc 2 650 0
 1986 0122 7B68     	 ldr r3,[r7,#4]
 1987 0124 1B68     	 ldr r3,[r3]
 1988 0126 034A     	 ldr r2,.L90+4
 1989 0128 DA61     	 str r2,[r3,#28]
 1990              	.L83:
 651:../Libraries/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 652:../Libraries/XMCLib/src/xmc_can.c ****     }
 653:../Libraries/XMCLib/src/xmc_can.c **** 
 654:../Libraries/XMCLib/src/xmc_can.c ****   }
 655:../Libraries/XMCLib/src/xmc_can.c **** }
 1991              	 .loc 2 655 0
 1992 012a 1837     	 adds r7,r7,#24
 1993              	.LCFI120:
 1994              	 .cfi_def_cfa_offset 8
 1995 012c BD46     	 mov sp,r7
 1996              	.LCFI121:
 1997              	 .cfi_def_cfa_register 13
 1998              	 
 1999 012e 80BD     	 pop {r7,pc}
 2000              	.L91:
 2001              	 .align 2
 2002              	.L90:
 2003 0130 C0002006 	 .word 102760640
 2004 0134 4006A000 	 .word 10487360
 2005              	 .cfi_endproc
 2006              	.LFE252:
 2008              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 2009              	 .align 2
 2010              	 .global XMC_CAN_MO_UpdateData
 2011              	 .thumb
 2012              	 .thumb_func
 2014              	XMC_CAN_MO_UpdateData:
 2015              	.LFB253:
 656:../Libraries/XMCLib/src/xmc_can.c **** 
 657:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 658:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 659:../Libraries/XMCLib/src/xmc_can.c **** {
 2016              	 .loc 2 659 0
 2017              	 .cfi_startproc
 2018              	 
 2019              	 
 2020              	 
 2021 0000 80B4     	 push {r7}
 2022              	.LCFI122:
 2023              	 .cfi_def_cfa_offset 4
 2024              	 .cfi_offset 7,-4
 2025 0002 85B0     	 sub sp,sp,#20
 2026              	.LCFI123:
 2027              	 .cfi_def_cfa_offset 24
 2028 0004 00AF     	 add r7,sp,#0
 2029              	.LCFI124:
 2030              	 .cfi_def_cfa_register 7
 2031 0006 7860     	 str r0,[r7,#4]
 660:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2032              	 .loc 2 660 0
 2033 0008 0323     	 movs r3,#3
 2034 000a FB73     	 strb r3,[r7,#15]
 661:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 662:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 2035              	 .loc 2 662 0
 2036 000c 7B68     	 ldr r3,[r7,#4]
 2037 000e 1B7E     	 ldrb r3,[r3,#24]
 2038 0010 012B     	 cmp r3,#1
 2039 0012 22D1     	 bne .L93
 663:../Libraries/XMCLib/src/xmc_can.c ****   {
 664:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 2040              	 .loc 2 664 0
 2041 0014 7B68     	 ldr r3,[r7,#4]
 2042 0016 1B68     	 ldr r3,[r3]
 2043 0018 2022     	 movs r2,#32
 2044 001a DA61     	 str r2,[r3,#28]
 665:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 666:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 2045              	 .loc 2 666 0
 2046 001c 7B68     	 ldr r3,[r7,#4]
 2047 001e 1B68     	 ldr r3,[r3]
 2048 0020 7A68     	 ldr r2,[r7,#4]
 2049 0022 1268     	 ldr r2,[r2]
 2050 0024 1268     	 ldr r2,[r2]
 2051 0026 22F07061 	 bic r1,r2,#251658240
 667:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2052              	 .loc 2 667 0
 2053 002a 7A68     	 ldr r2,[r7,#4]
 2054 002c 127B     	 ldrb r2,[r2,#12]
 2055 002e 1206     	 lsls r2,r2,#24
 2056 0030 02F07062 	 and r2,r2,#251658240
 666:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2057              	 .loc 2 666 0
 2058 0034 0A43     	 orrs r2,r2,r1
 2059 0036 1A60     	 str r2,[r3]
 668:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 669:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 2060              	 .loc 2 669 0
 2061 0038 7B68     	 ldr r3,[r7,#4]
 2062 003a 1B68     	 ldr r3,[r3]
 2063 003c 7A68     	 ldr r2,[r7,#4]
 2064 003e 1269     	 ldr r2,[r2,#16]
 2065 0040 1A61     	 str r2,[r3,#16]
 670:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 2066              	 .loc 2 670 0
 2067 0042 7B68     	 ldr r3,[r7,#4]
 2068 0044 1B68     	 ldr r3,[r3]
 2069 0046 7A68     	 ldr r2,[r7,#4]
 2070 0048 5269     	 ldr r2,[r2,#20]
 2071 004a 5A61     	 str r2,[r3,#20]
 671:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 672:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 2072              	 .loc 2 672 0
 2073 004c 7B68     	 ldr r3,[r7,#4]
 2074 004e 1B68     	 ldr r3,[r3]
 2075 0050 064A     	 ldr r2,.L96
 2076 0052 DA61     	 str r2,[r3,#28]
 673:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2077              	 .loc 2 673 0
 2078 0054 0023     	 movs r3,#0
 2079 0056 FB73     	 strb r3,[r7,#15]
 2080 0058 01E0     	 b .L94
 2081              	.L93:
 674:../Libraries/XMCLib/src/xmc_can.c ****   }
 675:../Libraries/XMCLib/src/xmc_can.c ****   else
 676:../Libraries/XMCLib/src/xmc_can.c ****   {
 677:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2082              	 .loc 2 677 0
 2083 005a 0323     	 movs r3,#3
 2084 005c FB73     	 strb r3,[r7,#15]
 2085              	.L94:
 678:../Libraries/XMCLib/src/xmc_can.c ****   }
 679:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2086              	 .loc 2 679 0
 2087 005e FB7B     	 ldrb r3,[r7,#15]
 680:../Libraries/XMCLib/src/xmc_can.c **** }
 2088              	 .loc 2 680 0
 2089 0060 1846     	 mov r0,r3
 2090 0062 1437     	 adds r7,r7,#20
 2091              	.LCFI125:
 2092              	 .cfi_def_cfa_offset 4
 2093 0064 BD46     	 mov sp,r7
 2094              	.LCFI126:
 2095              	 .cfi_def_cfa_register 13
 2096              	 
 2097 0066 5DF8047B 	 ldr r7,[sp],#4
 2098              	.LCFI127:
 2099              	 .cfi_restore 7
 2100              	 .cfi_def_cfa_offset 0
 2101 006a 7047     	 bx lr
 2102              	.L97:
 2103              	 .align 2
 2104              	.L96:
 2105 006c 40002800 	 .word 2621504
 2106              	 .cfi_endproc
 2107              	.LFE253:
 2109              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2110              	 .align 2
 2111              	 .global XMC_CAN_MO_Transmit
 2112              	 .thumb
 2113              	 .thumb_func
 2115              	XMC_CAN_MO_Transmit:
 2116              	.LFB254:
 681:../Libraries/XMCLib/src/xmc_can.c **** 
 682:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 683:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 684:../Libraries/XMCLib/src/xmc_can.c **** {
 2117              	 .loc 2 684 0
 2118              	 .cfi_startproc
 2119              	 
 2120              	 
 2121              	 
 2122 0000 80B4     	 push {r7}
 2123              	.LCFI128:
 2124              	 .cfi_def_cfa_offset 4
 2125              	 .cfi_offset 7,-4
 2126 0002 87B0     	 sub sp,sp,#28
 2127              	.LCFI129:
 2128              	 .cfi_def_cfa_offset 32
 2129 0004 00AF     	 add r7,sp,#0
 2130              	.LCFI130:
 2131              	 .cfi_def_cfa_register 7
 2132 0006 7860     	 str r0,[r7,#4]
 685:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2133              	 .loc 2 685 0
 2134 0008 0123     	 movs r3,#1
 2135 000a FB75     	 strb r3,[r7,#23]
 686:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2136              	 .loc 2 686 0
 2137 000c 7B68     	 ldr r3,[r7,#4]
 2138 000e 1B68     	 ldr r3,[r3]
 2139 0010 DB69     	 ldr r3,[r3,#28]
 2140 0012 03F02003 	 and r3,r3,#32
 2141 0016 5B09     	 lsrs r3,r3,#5
 2142 0018 3B61     	 str r3,[r7,#16]
 687:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2143              	 .loc 2 687 0
 2144 001a 7B68     	 ldr r3,[r7,#4]
 2145 001c 1B68     	 ldr r3,[r3]
 2146 001e DB69     	 ldr r3,[r3,#28]
 2147 0020 03F48073 	 and r3,r3,#256
 2148 0024 1B0A     	 lsrs r3,r3,#8
 2149 0026 FB60     	 str r3,[r7,#12]
 688:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 689:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2150              	 .loc 2 689 0
 2151 0028 3B69     	 ldr r3,[r7,#16]
 2152 002a 002B     	 cmp r3,#0
 2153 002c 02D1     	 bne .L99
 690:../Libraries/XMCLib/src/xmc_can.c ****   {
 691:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2154              	 .loc 2 691 0
 2155 002e 0423     	 movs r3,#4
 2156 0030 FB75     	 strb r3,[r7,#23]
 2157 0032 0CE0     	 b .L100
 2158              	.L99:
 692:../Libraries/XMCLib/src/xmc_can.c ****   }
 693:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 694:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2159              	 .loc 2 694 0
 2160 0034 FB68     	 ldr r3,[r7,#12]
 2161 0036 012B     	 cmp r3,#1
 2162 0038 02D1     	 bne .L101
 695:../Libraries/XMCLib/src/xmc_can.c ****   {
 696:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2163              	 .loc 2 696 0
 2164 003a 0223     	 movs r3,#2
 2165 003c FB75     	 strb r3,[r7,#23]
 2166 003e 06E0     	 b .L100
 2167              	.L101:
 697:../Libraries/XMCLib/src/xmc_can.c ****   }
 698:../Libraries/XMCLib/src/xmc_can.c ****   else
 699:../Libraries/XMCLib/src/xmc_can.c ****   {
 700:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 701:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2168              	 .loc 2 701 0
 2169 0040 7B68     	 ldr r3,[r7,#4]
 2170 0042 1B68     	 ldr r3,[r3]
 2171 0044 4FF0E062 	 mov r2,#117440512
 2172 0048 DA61     	 str r2,[r3,#28]
 702:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2173              	 .loc 2 702 0
 2174 004a 0023     	 movs r3,#0
 2175 004c FB75     	 strb r3,[r7,#23]
 2176              	.L100:
 703:../Libraries/XMCLib/src/xmc_can.c ****   }
 704:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2177              	 .loc 2 704 0
 2178 004e FB7D     	 ldrb r3,[r7,#23]
 705:../Libraries/XMCLib/src/xmc_can.c **** }
 2179              	 .loc 2 705 0
 2180 0050 1846     	 mov r0,r3
 2181 0052 1C37     	 adds r7,r7,#28
 2182              	.LCFI131:
 2183              	 .cfi_def_cfa_offset 4
 2184 0054 BD46     	 mov sp,r7
 2185              	.LCFI132:
 2186              	 .cfi_def_cfa_register 13
 2187              	 
 2188 0056 5DF8047B 	 ldr r7,[sp],#4
 2189              	.LCFI133:
 2190              	 .cfi_restore 7
 2191              	 .cfi_def_cfa_offset 0
 2192 005a 7047     	 bx lr
 2193              	 .cfi_endproc
 2194              	.LFE254:
 2196              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2197              	 .align 2
 2198              	 .global XMC_CAN_MO_ReceiveData
 2199              	 .thumb
 2200              	 .thumb_func
 2202              	XMC_CAN_MO_ReceiveData:
 2203              	.LFB255:
 706:../Libraries/XMCLib/src/xmc_can.c **** 
 707:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 708:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 709:../Libraries/XMCLib/src/xmc_can.c **** {
 2204              	 .loc 2 709 0
 2205              	 .cfi_startproc
 2206              	 
 2207              	 
 2208              	 
 2209 0000 80B4     	 push {r7}
 2210              	.LCFI134:
 2211              	 .cfi_def_cfa_offset 4
 2212              	 .cfi_offset 7,-4
 2213 0002 87B0     	 sub sp,sp,#28
 2214              	.LCFI135:
 2215              	 .cfi_def_cfa_offset 32
 2216 0004 00AF     	 add r7,sp,#0
 2217              	.LCFI136:
 2218              	 .cfi_def_cfa_register 7
 2219 0006 7860     	 str r0,[r7,#4]
 710:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2220              	 .loc 2 710 0
 2221 0008 0123     	 movs r3,#1
 2222 000a FB75     	 strb r3,[r7,#23]
 711:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2223              	 .loc 2 711 0
 2224 000c 0023     	 movs r3,#0
 2225 000e BB75     	 strb r3,[r7,#22]
 712:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2226              	 .loc 2 712 0
 2227 0010 0023     	 movs r3,#0
 2228 0012 7B75     	 strb r3,[r7,#21]
 713:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2229              	 .loc 2 713 0
 2230 0014 7B68     	 ldr r3,[r7,#4]
 2231 0016 1B68     	 ldr r3,[r3]
 2232 0018 DB69     	 ldr r3,[r3,#28]
 2233 001a 03F40063 	 and r3,r3,#2048
 2234 001e DB0A     	 lsrs r3,r3,#11
 2235 0020 3B61     	 str r3,[r7,#16]
 714:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2236              	 .loc 2 714 0
 2237 0022 7B68     	 ldr r3,[r7,#4]
 2238 0024 1B68     	 ldr r3,[r3]
 2239 0026 DB69     	 ldr r3,[r3,#28]
 2240 0028 03F00403 	 and r3,r3,#4
 2241 002c 9B08     	 lsrs r3,r3,#2
 2242 002e FB60     	 str r3,[r7,#12]
 715:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 716:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2243              	 .loc 2 716 0
 2244 0030 3B69     	 ldr r3,[r7,#16]
 2245 0032 002B     	 cmp r3,#0
 2246 0034 02D0     	 beq .L104
 717:../Libraries/XMCLib/src/xmc_can.c ****   {
 718:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2247              	 .loc 2 718 0
 2248 0036 0323     	 movs r3,#3
 2249 0038 FB75     	 strb r3,[r7,#23]
 2250 003a 25E0     	 b .L105
 2251              	.L104:
 719:../Libraries/XMCLib/src/xmc_can.c ****   }
 720:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 721:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2252              	 .loc 2 721 0
 2253 003c FB68     	 ldr r3,[r7,#12]
 2254 003e 012B     	 cmp r3,#1
 2255 0040 02D1     	 bne .L106
 722:../Libraries/XMCLib/src/xmc_can.c ****   {
 723:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2256              	 .loc 2 723 0
 2257 0042 0223     	 movs r3,#2
 2258 0044 FB75     	 strb r3,[r7,#23]
 2259 0046 1FE0     	 b .L105
 2260              	.L106:
 724:../Libraries/XMCLib/src/xmc_can.c ****   }
 725:../Libraries/XMCLib/src/xmc_can.c ****   else
 726:../Libraries/XMCLib/src/xmc_can.c ****   {
 727:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 728:../Libraries/XMCLib/src/xmc_can.c ****     do
 729:../Libraries/XMCLib/src/xmc_can.c ****     {
 730:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2261              	 .loc 2 730 0 discriminator 2
 2262 0048 7B68     	 ldr r3,[r7,#4]
 2263 004a 1B68     	 ldr r3,[r3]
 2264 004c 1A69     	 ldr r2,[r3,#16]
 2265 004e 7B68     	 ldr r3,[r7,#4]
 2266 0050 1A61     	 str r2,[r3,#16]
 731:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2267              	 .loc 2 731 0 discriminator 2
 2268 0052 7B68     	 ldr r3,[r7,#4]
 2269 0054 1B68     	 ldr r3,[r3]
 2270 0056 5A69     	 ldr r2,[r3,#20]
 2271 0058 7B68     	 ldr r3,[r7,#4]
 2272 005a 5A61     	 str r2,[r3,#20]
 732:../Libraries/XMCLib/src/xmc_can.c **** 
 733:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2273              	 .loc 2 733 0 discriminator 2
 2274 005c 7B68     	 ldr r3,[r7,#4]
 2275 005e 1B68     	 ldr r3,[r3]
 2276 0060 DB69     	 ldr r3,[r3,#28]
 2277 0062 03F00403 	 and r3,r3,#4
 2278 0066 9B08     	 lsrs r3,r3,#2
 2279 0068 BB75     	 strb r3,[r7,#22]
 734:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2280              	 .loc 2 734 0 discriminator 2
 2281 006a 7B68     	 ldr r3,[r7,#4]
 2282 006c 1B68     	 ldr r3,[r3]
 2283 006e DB69     	 ldr r3,[r3,#28]
 2284 0070 03F00803 	 and r3,r3,#8
 2285 0074 DB08     	 lsrs r3,r3,#3
 2286 0076 7B75     	 strb r3,[r7,#21]
 735:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2287              	 .loc 2 735 0 discriminator 2
 2288 0078 BB7D     	 ldrb r3,[r7,#22]
 2289 007a 002B     	 cmp r3,#0
 2290 007c 02D0     	 beq .L107
 2291              	 .loc 2 735 0 is_stmt 0 discriminator 1
 2292 007e 7B7D     	 ldrb r3,[r7,#21]
 2293 0080 002B     	 cmp r3,#0
 2294 0082 E1D1     	 bne .L106
 2295              	.L107:
 736:../Libraries/XMCLib/src/xmc_can.c **** 
 737:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2296              	 .loc 2 737 0 is_stmt 1
 2297 0084 0023     	 movs r3,#0
 2298 0086 FB75     	 strb r3,[r7,#23]
 2299              	.L105:
 738:../Libraries/XMCLib/src/xmc_can.c ****   }
 739:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2300              	 .loc 2 739 0
 2301 0088 FB7D     	 ldrb r3,[r7,#23]
 740:../Libraries/XMCLib/src/xmc_can.c **** }
 2302              	 .loc 2 740 0
 2303 008a 1846     	 mov r0,r3
 2304 008c 1C37     	 adds r7,r7,#28
 2305              	.LCFI137:
 2306              	 .cfi_def_cfa_offset 4
 2307 008e BD46     	 mov sp,r7
 2308              	.LCFI138:
 2309              	 .cfi_def_cfa_register 13
 2310              	 
 2311 0090 5DF8047B 	 ldr r7,[sp],#4
 2312              	.LCFI139:
 2313              	 .cfi_restore 7
 2314              	 .cfi_def_cfa_offset 0
 2315 0094 7047     	 bx lr
 2316              	 .cfi_endproc
 2317              	.LFE255:
 2319 0096 00BF     	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2320              	 .align 2
 2321              	 .global XMC_CAN_MO_Receive
 2322              	 .thumb
 2323              	 .thumb_func
 2325              	XMC_CAN_MO_Receive:
 2326              	.LFB256:
 741:../Libraries/XMCLib/src/xmc_can.c **** 
 742:../Libraries/XMCLib/src/xmc_can.c **** 
 743:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 744:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 745:../Libraries/XMCLib/src/xmc_can.c **** {
 2327              	 .loc 2 745 0
 2328              	 .cfi_startproc
 2329              	 
 2330              	 
 2331              	 
 2332 0000 80B4     	 push {r7}
 2333              	.LCFI140:
 2334              	 .cfi_def_cfa_offset 4
 2335              	 .cfi_offset 7,-4
 2336 0002 87B0     	 sub sp,sp,#28
 2337              	.LCFI141:
 2338              	 .cfi_def_cfa_offset 32
 2339 0004 00AF     	 add r7,sp,#0
 2340              	.LCFI142:
 2341              	 .cfi_def_cfa_register 7
 2342 0006 7860     	 str r0,[r7,#4]
 746:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2343              	 .loc 2 746 0
 2344 0008 0123     	 movs r3,#1
 2345 000a FB75     	 strb r3,[r7,#23]
 747:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2346              	 .loc 2 747 0
 2347 000c 0023     	 movs r3,#0
 2348 000e BB75     	 strb r3,[r7,#22]
 748:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2349              	 .loc 2 748 0
 2350 0010 0023     	 movs r3,#0
 2351 0012 7B75     	 strb r3,[r7,#21]
 749:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2352              	 .loc 2 749 0
 2353 0014 7B68     	 ldr r3,[r7,#4]
 2354 0016 1B68     	 ldr r3,[r3]
 2355 0018 DB69     	 ldr r3,[r3,#28]
 2356 001a 03F40063 	 and r3,r3,#2048
 2357 001e DB0A     	 lsrs r3,r3,#11
 2358 0020 3B61     	 str r3,[r7,#16]
 750:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2359              	 .loc 2 750 0
 2360 0022 7B68     	 ldr r3,[r7,#4]
 2361 0024 1B68     	 ldr r3,[r3]
 2362 0026 DB69     	 ldr r3,[r3,#28]
 2363 0028 03F00403 	 and r3,r3,#4
 2364 002c 9B08     	 lsrs r3,r3,#2
 2365 002e FB60     	 str r3,[r7,#12]
 751:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 752:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2366              	 .loc 2 752 0
 2367 0030 3B69     	 ldr r3,[r7,#16]
 2368 0032 002B     	 cmp r3,#0
 2369 0034 02D0     	 beq .L110
 753:../Libraries/XMCLib/src/xmc_can.c ****   {
 754:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2370              	 .loc 2 754 0
 2371 0036 0323     	 movs r3,#3
 2372 0038 FB75     	 strb r3,[r7,#23]
 2373 003a A7E0     	 b .L111
 2374              	.L110:
 755:../Libraries/XMCLib/src/xmc_can.c ****   }
 756:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 757:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2375              	 .loc 2 757 0
 2376 003c FB68     	 ldr r3,[r7,#12]
 2377 003e 012B     	 cmp r3,#1
 2378 0040 02D1     	 bne .L112
 758:../Libraries/XMCLib/src/xmc_can.c ****   {
 759:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2379              	 .loc 2 759 0
 2380 0042 0223     	 movs r3,#2
 2381 0044 FB75     	 strb r3,[r7,#23]
 2382 0046 A1E0     	 b .L111
 2383              	.L112:
 760:../Libraries/XMCLib/src/xmc_can.c ****   }
 761:../Libraries/XMCLib/src/xmc_can.c ****   else
 762:../Libraries/XMCLib/src/xmc_can.c ****   {
 763:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 764:../Libraries/XMCLib/src/xmc_can.c ****     do
 765:../Libraries/XMCLib/src/xmc_can.c ****     {
 766:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2384              	 .loc 2 766 0
 2385 0048 7B68     	 ldr r3,[r7,#4]
 2386 004a 1B68     	 ldr r3,[r3]
 2387 004c 0822     	 movs r2,#8
 2388 004e DA61     	 str r2,[r3,#28]
 767:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2389              	 .loc 2 767 0
 2390 0050 7B68     	 ldr r3,[r7,#4]
 2391 0052 1B68     	 ldr r3,[r3]
 2392 0054 9B69     	 ldr r3,[r3,#24]
 2393 0056 03F00053 	 and r3,r3,#536870912
 2394 005a 5B0F     	 lsrs r3,r3,#29
 2395 005c 002B     	 cmp r3,#0
 2396 005e 40D1     	 bne .L113
 768:../Libraries/XMCLib/src/xmc_can.c ****       {
 769:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2397              	 .loc 2 769 0
 2398 0060 7A68     	 ldr r2,[r7,#4]
 2399 0062 D379     	 ldrb r3,[r2,#7]
 2400 0064 6FF34513 	 bfc r3,#5,#1
 2401 0068 D371     	 strb r3,[r2,#7]
 770:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2402              	 .loc 2 770 0
 2403 006a 7B68     	 ldr r3,[r7,#4]
 2404 006c 1B68     	 ldr r3,[r3]
 2405 006e 9A69     	 ldr r2,[r3,#24]
 2406 0070 4A4B     	 ldr r3,.L119
 2407 0072 1340     	 ands r3,r3,r2
 2408 0074 9B0C     	 lsrs r3,r3,#18
 2409 0076 23F06041 	 bic r1,r3,#-536870912
 2410 007a 7A68     	 ldr r2,[r7,#4]
 2411 007c 5368     	 ldr r3,[r2,#4]
 2412 007e 61F31C03 	 bfi r3,r1,#0,#29
 2413 0082 5360     	 str r3,[r2,#4]
 771:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2414              	 .loc 2 771 0
 2415 0084 7B68     	 ldr r3,[r7,#4]
 2416 0086 1B68     	 ldr r3,[r3]
 2417 0088 DB68     	 ldr r3,[r3,#12]
 2418 008a 03F00053 	 and r3,r3,#536870912
 2419 008e 5B0F     	 lsrs r3,r3,#29
 2420 0090 DBB2     	 uxtb r3,r3
 2421 0092 03F00103 	 and r3,r3,#1
 2422 0096 D9B2     	 uxtb r1,r3
 2423 0098 7A68     	 ldr r2,[r7,#4]
 2424 009a D37A     	 ldrb r3,[r2,#11]
 2425 009c 61F34513 	 bfi r3,r1,#5,#1
 2426 00a0 D372     	 strb r3,[r2,#11]
 772:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 2427              	 .loc 2 772 0
 2428 00a2 7B68     	 ldr r3,[r7,#4]
 2429 00a4 DB7A     	 ldrb r3,[r3,#11]
 2430 00a6 03F02003 	 and r3,r3,#32
 2431 00aa DBB2     	 uxtb r3,r3
 2432 00ac 002B     	 cmp r3,#0
 2433 00ae 0DD0     	 beq .L114
 773:../Libraries/XMCLib/src/xmc_can.c ****         {
 774:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2434              	 .loc 2 774 0
 2435 00b0 7B68     	 ldr r3,[r7,#4]
 2436 00b2 1B68     	 ldr r3,[r3]
 2437 00b4 DA68     	 ldr r2,[r3,#12]
 2438 00b6 394B     	 ldr r3,.L119
 2439 00b8 1340     	 ands r3,r3,r2
 2440 00ba 9B0C     	 lsrs r3,r3,#18
 2441 00bc 23F06041 	 bic r1,r3,#-536870912
 2442 00c0 7A68     	 ldr r2,[r7,#4]
 2443 00c2 9368     	 ldr r3,[r2,#8]
 2444 00c4 61F31C03 	 bfi r3,r1,#0,#29
 2445 00c8 9360     	 str r3,[r2,#8]
 2446 00ca 32E0     	 b .L116
 2447              	.L114:
 775:../Libraries/XMCLib/src/xmc_can.c ****         }
 776:../Libraries/XMCLib/src/xmc_can.c ****         else
 777:../Libraries/XMCLib/src/xmc_can.c ****         {
 778:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2448              	 .loc 2 778 0
 2449 00cc 7B68     	 ldr r3,[r7,#4]
 2450 00ce 1B68     	 ldr r3,[r3]
 2451 00d0 DB68     	 ldr r3,[r3,#12]
 2452 00d2 23F06041 	 bic r1,r3,#-536870912
 2453 00d6 7A68     	 ldr r2,[r7,#4]
 2454 00d8 9368     	 ldr r3,[r2,#8]
 2455 00da 61F31C03 	 bfi r3,r1,#0,#29
 2456 00de 9360     	 str r3,[r2,#8]
 2457 00e0 27E0     	 b .L116
 2458              	.L113:
 779:../Libraries/XMCLib/src/xmc_can.c ****         }
 780:../Libraries/XMCLib/src/xmc_can.c ****       }
 781:../Libraries/XMCLib/src/xmc_can.c ****       else
 782:../Libraries/XMCLib/src/xmc_can.c ****       {
 783:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2459              	 .loc 2 783 0
 2460 00e2 7A68     	 ldr r2,[r7,#4]
 2461 00e4 D379     	 ldrb r3,[r2,#7]
 2462 00e6 43F02003 	 orr r3,r3,#32
 2463 00ea D371     	 strb r3,[r2,#7]
 784:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2464              	 .loc 2 784 0
 2465 00ec 7B68     	 ldr r3,[r7,#4]
 2466 00ee 1B68     	 ldr r3,[r3]
 2467 00f0 9B69     	 ldr r3,[r3,#24]
 2468 00f2 23F06041 	 bic r1,r3,#-536870912
 2469 00f6 7A68     	 ldr r2,[r7,#4]
 2470 00f8 5368     	 ldr r3,[r2,#4]
 2471 00fa 61F31C03 	 bfi r3,r1,#0,#29
 2472 00fe 5360     	 str r3,[r2,#4]
 785:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2473              	 .loc 2 785 0
 2474 0100 7B68     	 ldr r3,[r7,#4]
 2475 0102 1B68     	 ldr r3,[r3]
 2476 0104 DB68     	 ldr r3,[r3,#12]
 2477 0106 23F06041 	 bic r1,r3,#-536870912
 2478 010a 7A68     	 ldr r2,[r7,#4]
 2479 010c 9368     	 ldr r3,[r2,#8]
 2480 010e 61F31C03 	 bfi r3,r1,#0,#29
 2481 0112 9360     	 str r3,[r2,#8]
 786:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2482              	 .loc 2 786 0
 2483 0114 7B68     	 ldr r3,[r7,#4]
 2484 0116 1B68     	 ldr r3,[r3]
 2485 0118 DB68     	 ldr r3,[r3,#12]
 2486 011a 03F00053 	 and r3,r3,#536870912
 2487 011e 5B0F     	 lsrs r3,r3,#29
 2488 0120 DBB2     	 uxtb r3,r3
 2489 0122 03F00103 	 and r3,r3,#1
 2490 0126 D9B2     	 uxtb r1,r3
 2491 0128 7A68     	 ldr r2,[r7,#4]
 2492 012a D37A     	 ldrb r3,[r2,#11]
 2493 012c 61F34513 	 bfi r3,r1,#5,#1
 2494 0130 D372     	 strb r3,[r2,#11]
 2495              	.L116:
 787:../Libraries/XMCLib/src/xmc_can.c ****       }
 788:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2496              	 .loc 2 788 0
 2497 0132 7B68     	 ldr r3,[r7,#4]
 2498 0134 1B68     	 ldr r3,[r3]
 2499 0136 1B68     	 ldr r3,[r3]
 2500 0138 03F07063 	 and r3,r3,#251658240
 2501 013c 1B0E     	 lsrs r3,r3,#24
 2502 013e DAB2     	 uxtb r2,r3
 2503 0140 7B68     	 ldr r3,[r7,#4]
 2504 0142 1A73     	 strb r2,[r3,#12]
 789:../Libraries/XMCLib/src/xmc_can.c **** 
 790:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2505              	 .loc 2 790 0
 2506 0144 7B68     	 ldr r3,[r7,#4]
 2507 0146 1B68     	 ldr r3,[r3]
 2508 0148 1A69     	 ldr r2,[r3,#16]
 2509 014a 7B68     	 ldr r3,[r7,#4]
 2510 014c 1A61     	 str r2,[r3,#16]
 791:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2511              	 .loc 2 791 0
 2512 014e 7B68     	 ldr r3,[r7,#4]
 2513 0150 1B68     	 ldr r3,[r3]
 2514 0152 5A69     	 ldr r2,[r3,#20]
 2515 0154 7B68     	 ldr r3,[r7,#4]
 2516 0156 5A61     	 str r2,[r3,#20]
 792:../Libraries/XMCLib/src/xmc_can.c **** 
 793:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2517              	 .loc 2 793 0
 2518 0158 7B68     	 ldr r3,[r7,#4]
 2519 015a 1B68     	 ldr r3,[r3]
 2520 015c DB69     	 ldr r3,[r3,#28]
 2521 015e 03F00403 	 and r3,r3,#4
 2522 0162 9B08     	 lsrs r3,r3,#2
 2523 0164 BB75     	 strb r3,[r7,#22]
 794:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2524              	 .loc 2 794 0
 2525 0166 7B68     	 ldr r3,[r7,#4]
 2526 0168 1B68     	 ldr r3,[r3]
 2527 016a DB69     	 ldr r3,[r3,#28]
 2528 016c 03F00803 	 and r3,r3,#8
 2529 0170 DB08     	 lsrs r3,r3,#3
 2530 0172 7B75     	 strb r3,[r7,#21]
 795:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2531              	 .loc 2 795 0
 2532 0174 BB7D     	 ldrb r3,[r7,#22]
 2533 0176 002B     	 cmp r3,#0
 2534 0178 03D0     	 beq .L117
 2535              	 .loc 2 795 0 is_stmt 0 discriminator 1
 2536 017a 7B7D     	 ldrb r3,[r7,#21]
 2537 017c 002B     	 cmp r3,#0
 2538 017e 7FF463AF 	 bne .L112
 2539              	.L117:
 796:../Libraries/XMCLib/src/xmc_can.c **** 
 797:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2540              	 .loc 2 797 0 is_stmt 1
 2541 0182 7B68     	 ldr r3,[r7,#4]
 2542 0184 0022     	 movs r2,#0
 2543 0186 1A76     	 strb r2,[r3,#24]
 798:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2544              	 .loc 2 798 0
 2545 0188 0023     	 movs r3,#0
 2546 018a FB75     	 strb r3,[r7,#23]
 2547              	.L111:
 799:../Libraries/XMCLib/src/xmc_can.c ****   }
 800:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2548              	 .loc 2 800 0
 2549 018c FB7D     	 ldrb r3,[r7,#23]
 801:../Libraries/XMCLib/src/xmc_can.c **** }
 2550              	 .loc 2 801 0
 2551 018e 1846     	 mov r0,r3
 2552 0190 1C37     	 adds r7,r7,#28
 2553              	.LCFI143:
 2554              	 .cfi_def_cfa_offset 4
 2555 0192 BD46     	 mov sp,r7
 2556              	.LCFI144:
 2557              	 .cfi_def_cfa_register 13
 2558              	 
 2559 0194 5DF8047B 	 ldr r7,[sp],#4
 2560              	.LCFI145:
 2561              	 .cfi_restore 7
 2562              	 .cfi_def_cfa_offset 0
 2563 0198 7047     	 bx lr
 2564              	.L120:
 2565 019a 00BF     	 .align 2
 2566              	.L119:
 2567 019c 0000FC1F 	 .word 536608768
 2568              	 .cfi_endproc
 2569              	.LFE256:
 2571              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2572              	 .align 2
 2573              	 .global XMC_CAN_NODE_EnableEvent
 2574              	 .thumb
 2575              	 .thumb_func
 2577              	XMC_CAN_NODE_EnableEvent:
 2578              	.LFB257:
 802:../Libraries/XMCLib/src/xmc_can.c **** 
 803:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 804:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 805:../Libraries/XMCLib/src/xmc_can.c **** {
 2579              	 .loc 2 805 0
 2580              	 .cfi_startproc
 2581              	 
 2582              	 
 2583              	 
 2584 0000 80B4     	 push {r7}
 2585              	.LCFI146:
 2586              	 .cfi_def_cfa_offset 4
 2587              	 .cfi_offset 7,-4
 2588 0002 83B0     	 sub sp,sp,#12
 2589              	.LCFI147:
 2590              	 .cfi_def_cfa_offset 16
 2591 0004 00AF     	 add r7,sp,#0
 2592              	.LCFI148:
 2593              	 .cfi_def_cfa_register 7
 2594 0006 7860     	 str r0,[r7,#4]
 2595 0008 3960     	 str r1,[r7]
 806:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2596              	 .loc 2 806 0
 2597 000a 3B68     	 ldr r3,[r7]
 2598 000c B3F5800F 	 cmp r3,#4194304
 2599 0010 06D0     	 beq .L122
 807:../Libraries/XMCLib/src/xmc_can.c ****   {
 808:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2600              	 .loc 2 808 0
 2601 0012 7B68     	 ldr r3,[r7,#4]
 2602 0014 1A68     	 ldr r2,[r3]
 2603 0016 3B68     	 ldr r3,[r7]
 2604 0018 1A43     	 orrs r2,r2,r3
 2605 001a 7B68     	 ldr r3,[r7,#4]
 2606 001c 1A60     	 str r2,[r3]
 2607 001e 05E0     	 b .L121
 2608              	.L122:
 809:../Libraries/XMCLib/src/xmc_can.c ****   }
 810:../Libraries/XMCLib/src/xmc_can.c ****   else
 811:../Libraries/XMCLib/src/xmc_can.c ****   {
 812:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2609              	 .loc 2 812 0
 2610 0020 7B68     	 ldr r3,[r7,#4]
 2611 0022 9A69     	 ldr r2,[r3,#24]
 2612 0024 3B68     	 ldr r3,[r7]
 2613 0026 1A43     	 orrs r2,r2,r3
 2614 0028 7B68     	 ldr r3,[r7,#4]
 2615 002a 9A61     	 str r2,[r3,#24]
 2616              	.L121:
 813:../Libraries/XMCLib/src/xmc_can.c ****   }
 814:../Libraries/XMCLib/src/xmc_can.c **** }
 2617              	 .loc 2 814 0
 2618 002c 0C37     	 adds r7,r7,#12
 2619              	.LCFI149:
 2620              	 .cfi_def_cfa_offset 4
 2621 002e BD46     	 mov sp,r7
 2622              	.LCFI150:
 2623              	 .cfi_def_cfa_register 13
 2624              	 
 2625 0030 5DF8047B 	 ldr r7,[sp],#4
 2626              	.LCFI151:
 2627              	 .cfi_restore 7
 2628              	 .cfi_def_cfa_offset 0
 2629 0034 7047     	 bx lr
 2630              	 .cfi_endproc
 2631              	.LFE257:
 2633 0036 00BF     	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2634              	 .align 2
 2635              	 .global XMC_CAN_NODE_DisableEvent
 2636              	 .thumb
 2637              	 .thumb_func
 2639              	XMC_CAN_NODE_DisableEvent:
 2640              	.LFB258:
 815:../Libraries/XMCLib/src/xmc_can.c **** 
 816:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 817:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 818:../Libraries/XMCLib/src/xmc_can.c **** {
 2641              	 .loc 2 818 0
 2642              	 .cfi_startproc
 2643              	 
 2644              	 
 2645              	 
 2646 0000 80B4     	 push {r7}
 2647              	.LCFI152:
 2648              	 .cfi_def_cfa_offset 4
 2649              	 .cfi_offset 7,-4
 2650 0002 83B0     	 sub sp,sp,#12
 2651              	.LCFI153:
 2652              	 .cfi_def_cfa_offset 16
 2653 0004 00AF     	 add r7,sp,#0
 2654              	.LCFI154:
 2655              	 .cfi_def_cfa_register 7
 2656 0006 7860     	 str r0,[r7,#4]
 2657 0008 3960     	 str r1,[r7]
 819:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2658              	 .loc 2 819 0
 2659 000a 3B68     	 ldr r3,[r7]
 2660 000c B3F5800F 	 cmp r3,#4194304
 2661 0010 07D0     	 beq .L125
 820:../Libraries/XMCLib/src/xmc_can.c ****   {
 821:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2662              	 .loc 2 821 0
 2663 0012 7B68     	 ldr r3,[r7,#4]
 2664 0014 1A68     	 ldr r2,[r3]
 2665 0016 3B68     	 ldr r3,[r7]
 2666 0018 DB43     	 mvns r3,r3
 2667 001a 1A40     	 ands r2,r2,r3
 2668 001c 7B68     	 ldr r3,[r7,#4]
 2669 001e 1A60     	 str r2,[r3]
 2670 0020 06E0     	 b .L124
 2671              	.L125:
 822:../Libraries/XMCLib/src/xmc_can.c ****   }
 823:../Libraries/XMCLib/src/xmc_can.c ****   else
 824:../Libraries/XMCLib/src/xmc_can.c ****   {
 825:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2672              	 .loc 2 825 0
 2673 0022 7B68     	 ldr r3,[r7,#4]
 2674 0024 9A69     	 ldr r2,[r3,#24]
 2675 0026 3B68     	 ldr r3,[r7]
 2676 0028 DB43     	 mvns r3,r3
 2677 002a 1A40     	 ands r2,r2,r3
 2678 002c 7B68     	 ldr r3,[r7,#4]
 2679 002e 9A61     	 str r2,[r3,#24]
 2680              	.L124:
 826:../Libraries/XMCLib/src/xmc_can.c ****   }
 827:../Libraries/XMCLib/src/xmc_can.c **** }
 2681              	 .loc 2 827 0
 2682 0030 0C37     	 adds r7,r7,#12
 2683              	.LCFI155:
 2684              	 .cfi_def_cfa_offset 4
 2685 0032 BD46     	 mov sp,r7
 2686              	.LCFI156:
 2687              	 .cfi_def_cfa_register 13
 2688              	 
 2689 0034 5DF8047B 	 ldr r7,[sp],#4
 2690              	.LCFI157:
 2691              	 .cfi_restore 7
 2692              	 .cfi_def_cfa_offset 0
 2693 0038 7047     	 bx lr
 2694              	 .cfi_endproc
 2695              	.LFE258:
 2697 003a 00BF     	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2698              	 .align 2
 2699              	 .global XMC_CAN_TXFIFO_Transmit
 2700              	 .thumb
 2701              	 .thumb_func
 2703              	XMC_CAN_TXFIFO_Transmit:
 2704              	.LFB259:
 828:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 829:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 830:../Libraries/XMCLib/src/xmc_can.c **** {
 2705              	 .loc 2 830 0
 2706              	 .cfi_startproc
 2707              	 
 2708              	 
 2709              	 
 2710 0000 80B4     	 push {r7}
 2711              	.LCFI158:
 2712              	 .cfi_def_cfa_offset 4
 2713              	 .cfi_offset 7,-4
 2714 0002 89B0     	 sub sp,sp,#36
 2715              	.LCFI159:
 2716              	 .cfi_def_cfa_offset 40
 2717 0004 00AF     	 add r7,sp,#0
 2718              	.LCFI160:
 2719              	 .cfi_def_cfa_register 7
 2720 0006 7860     	 str r0,[r7,#4]
 831:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2721              	 .loc 2 831 0
 2722 0008 0123     	 movs r3,#1
 2723 000a FB77     	 strb r3,[r7,#31]
 832:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2724              	 .loc 2 832 0
 2725 000c 7B68     	 ldr r3,[r7,#4]
 2726 000e 1B68     	 ldr r3,[r3]
 2727 0010 DB69     	 ldr r3,[r3,#28]
 2728 0012 03F02003 	 and r3,r3,#32
 2729 0016 5B09     	 lsrs r3,r3,#5
 2730 0018 BB61     	 str r3,[r7,#24]
 833:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2731              	 .loc 2 833 0
 2732 001a 7B68     	 ldr r3,[r7,#4]
 2733 001c 1B68     	 ldr r3,[r3]
 2734 001e DB69     	 ldr r3,[r3,#28]
 2735 0020 03F48073 	 and r3,r3,#256
 2736 0024 1B0A     	 lsrs r3,r3,#8
 2737 0026 7B61     	 str r3,[r7,#20]
 834:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2738              	 .loc 2 834 0
 2739 0028 7B68     	 ldr r3,[r7,#4]
 2740 002a 1B68     	 ldr r3,[r3]
 2741 002c 5B68     	 ldr r3,[r3,#4]
 2742 002e 03F47F03 	 and r3,r3,#16711680
 2743 0032 1B0C     	 lsrs r3,r3,#16
 2744 0034 3B61     	 str r3,[r7,#16]
 835:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2745              	 .loc 2 835 0
 2746 0036 3B69     	 ldr r3,[r7,#16]
 2747 0038 03F11073 	 add r3,r3,#37748736
 2748 003c 03F52863 	 add r3,r3,#2688
 2749 0040 5B01     	 lsls r3,r3,#5
 2750 0042 FB60     	 str r3,[r7,#12]
 836:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 837:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2751              	 .loc 2 837 0
 2752 0044 BB69     	 ldr r3,[r7,#24]
 2753 0046 002B     	 cmp r3,#0
 2754 0048 02D1     	 bne .L128
 838:../Libraries/XMCLib/src/xmc_can.c ****   {
 839:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2755              	 .loc 2 839 0
 2756 004a 0423     	 movs r3,#4
 2757 004c FB77     	 strb r3,[r7,#31]
 2758 004e 0BE0     	 b .L129
 2759              	.L128:
 840:../Libraries/XMCLib/src/xmc_can.c ****   }
 841:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 842:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2760              	 .loc 2 842 0
 2761 0050 7B69     	 ldr r3,[r7,#20]
 2762 0052 012B     	 cmp r3,#1
 2763 0054 02D1     	 bne .L130
 843:../Libraries/XMCLib/src/xmc_can.c ****   {
 844:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2764              	 .loc 2 844 0
 2765 0056 0223     	 movs r3,#2
 2766 0058 FB77     	 strb r3,[r7,#31]
 2767 005a 05E0     	 b .L129
 2768              	.L130:
 845:../Libraries/XMCLib/src/xmc_can.c ****   }
 846:../Libraries/XMCLib/src/xmc_can.c ****   else
 847:../Libraries/XMCLib/src/xmc_can.c ****   {
 848:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2769              	 .loc 2 848 0
 2770 005c FB68     	 ldr r3,[r7,#12]
 2771 005e 4FF0E062 	 mov r2,#117440512
 2772 0062 DA61     	 str r2,[r3,#28]
 849:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2773              	 .loc 2 849 0
 2774 0064 0023     	 movs r3,#0
 2775 0066 FB77     	 strb r3,[r7,#31]
 2776              	.L129:
 850:../Libraries/XMCLib/src/xmc_can.c ****   }
 851:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2777              	 .loc 2 851 0
 2778 0068 FB7F     	 ldrb r3,[r7,#31]
 852:../Libraries/XMCLib/src/xmc_can.c **** }
 2779              	 .loc 2 852 0
 2780 006a 1846     	 mov r0,r3
 2781 006c 2437     	 adds r7,r7,#36
 2782              	.LCFI161:
 2783              	 .cfi_def_cfa_offset 4
 2784 006e BD46     	 mov sp,r7
 2785              	.LCFI162:
 2786              	 .cfi_def_cfa_register 13
 2787              	 
 2788 0070 5DF8047B 	 ldr r7,[sp],#4
 2789              	.LCFI163:
 2790              	 .cfi_restore 7
 2791              	 .cfi_def_cfa_offset 0
 2792 0074 7047     	 bx lr
 2793              	 .cfi_endproc
 2794              	.LFE259:
 2796 0076 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2797              	 .align 2
 2798              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2799              	 .thumb
 2800              	 .thumb_func
 2802              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2803              	.LFB260:
 853:../Libraries/XMCLib/src/xmc_can.c **** 
 854:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 855:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 856:../Libraries/XMCLib/src/xmc_can.c **** {
 2804              	 .loc 2 856 0
 2805              	 .cfi_startproc
 2806              	 
 2807              	 
 2808              	 
 2809 0000 80B4     	 push {r7}
 2810              	.LCFI164:
 2811              	 .cfi_def_cfa_offset 4
 2812              	 .cfi_offset 7,-4
 2813 0002 83B0     	 sub sp,sp,#12
 2814              	.LCFI165:
 2815              	 .cfi_def_cfa_offset 16
 2816 0004 00AF     	 add r7,sp,#0
 2817              	.LCFI166:
 2818              	 .cfi_def_cfa_register 7
 2819 0006 7860     	 str r0,[r7,#4]
 2820 0008 3960     	 str r1,[r7]
 857:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2821              	 .loc 2 857 0
 2822 000a 7B68     	 ldr r3,[r7,#4]
 2823 000c 1B68     	 ldr r3,[r3]
 2824 000e 7A68     	 ldr r2,[r7,#4]
 2825 0010 1268     	 ldr r2,[r2]
 2826 0012 1268     	 ldr r2,[r2]
 2827 0014 22F00F02 	 bic r2,r2,#15
 2828 0018 42F00202 	 orr r2,r2,#2
 2829 001c 1A60     	 str r2,[r3]
 858:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 859:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2830              	 .loc 2 859 0
 2831 001e 7B68     	 ldr r3,[r7,#4]
 2832 0020 1B68     	 ldr r3,[r3]
 2833 0022 7A68     	 ldr r2,[r7,#4]
 2834 0024 1268     	 ldr r2,[r2]
 2835 0026 5268     	 ldr r2,[r2,#4]
 2836 0028 02F07F42 	 and r2,r2,#-16777216
 860:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 861:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 862:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2837              	 .loc 2 862 0
 2838 002c 3978     	 ldrb r1,[r7]
 861:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2839              	 .loc 2 861 0
 2840 002e 1143     	 orrs r1,r1,r2
 863:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2841              	 .loc 2 863 0
 2842 0030 BA78     	 ldrb r2,[r7,#2]
 2843 0032 1204     	 lsls r2,r2,#16
 2844 0034 02F47F02 	 and r2,r2,#16711680
 862:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2845              	 .loc 2 862 0
 2846 0038 1143     	 orrs r1,r1,r2
 864:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2847              	 .loc 2 864 0
 2848 003a 7A78     	 ldrb r2,[r7,#1]
 2849 003c 1202     	 lsls r2,r2,#8
 2850 003e 92B2     	 uxth r2,r2
 863:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2851              	 .loc 2 863 0
 2852 0040 0A43     	 orrs r2,r2,r1
 859:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2853              	 .loc 2 859 0
 2854 0042 5A60     	 str r2,[r3,#4]
 865:../Libraries/XMCLib/src/xmc_can.c **** }
 2855              	 .loc 2 865 0
 2856 0044 0C37     	 adds r7,r7,#12
 2857              	.LCFI167:
 2858              	 .cfi_def_cfa_offset 4
 2859 0046 BD46     	 mov sp,r7
 2860              	.LCFI168:
 2861              	 .cfi_def_cfa_register 13
 2862              	 
 2863 0048 5DF8047B 	 ldr r7,[sp],#4
 2864              	.LCFI169:
 2865              	 .cfi_restore 7
 2866              	 .cfi_def_cfa_offset 0
 2867 004c 7047     	 bx lr
 2868              	 .cfi_endproc
 2869              	.LFE260:
 2871 004e 00BF     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2872              	 .align 2
 2873              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2874              	 .thumb
 2875              	 .thumb_func
 2877              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2878              	.LFB261:
 866:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 867:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 868:../Libraries/XMCLib/src/xmc_can.c **** {
 2879              	 .loc 2 868 0
 2880              	 .cfi_startproc
 2881              	 
 2882              	 
 2883              	 
 2884 0000 80B4     	 push {r7}
 2885              	.LCFI170:
 2886              	 .cfi_def_cfa_offset 4
 2887              	 .cfi_offset 7,-4
 2888 0002 83B0     	 sub sp,sp,#12
 2889              	.LCFI171:
 2890              	 .cfi_def_cfa_offset 16
 2891 0004 00AF     	 add r7,sp,#0
 2892              	.LCFI172:
 2893              	 .cfi_def_cfa_register 7
 2894 0006 7860     	 str r0,[r7,#4]
 2895 0008 3960     	 str r1,[r7]
 869:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2896              	 .loc 2 869 0
 2897 000a 7B68     	 ldr r3,[r7,#4]
 2898 000c 1B68     	 ldr r3,[r3]
 2899 000e 7A68     	 ldr r2,[r7,#4]
 2900 0010 1268     	 ldr r2,[r2]
 2901 0012 1268     	 ldr r2,[r2]
 2902 0014 22F00F02 	 bic r2,r2,#15
 2903 0018 42F00102 	 orr r2,r2,#1
 2904 001c 1A60     	 str r2,[r3]
 870:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 871:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 2905              	 .loc 2 871 0
 2906 001e 7B68     	 ldr r3,[r7,#4]
 2907 0020 1B68     	 ldr r3,[r3]
 2908 0022 7A68     	 ldr r2,[r7,#4]
 2909 0024 1268     	 ldr r2,[r2]
 2910 0026 5268     	 ldr r2,[r2,#4]
 2911 0028 02F07F42 	 and r2,r2,#-16777216
 872:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 873:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2912              	 .loc 2 874 0
 2913 002c 3978     	 ldrb r1,[r7]
 873:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2914              	 .loc 2 873 0
 2915 002e 1143     	 orrs r1,r1,r2
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2916              	 .loc 2 875 0
 2917 0030 BA78     	 ldrb r2,[r7,#2]
 2918 0032 1204     	 lsls r2,r2,#16
 2919 0034 02F47F02 	 and r2,r2,#16711680
 874:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2920              	 .loc 2 874 0
 2921 0038 1143     	 orrs r1,r1,r2
 876:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2922              	 .loc 2 876 0
 2923 003a 7A78     	 ldrb r2,[r7,#1]
 2924 003c 1202     	 lsls r2,r2,#8
 2925 003e 92B2     	 uxth r2,r2
 875:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2926              	 .loc 2 875 0
 2927 0040 0A43     	 orrs r2,r2,r1
 871:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2928              	 .loc 2 871 0
 2929 0042 5A60     	 str r2,[r3,#4]
 877:../Libraries/XMCLib/src/xmc_can.c **** }
 2930              	 .loc 2 877 0
 2931 0044 0C37     	 adds r7,r7,#12
 2932              	.LCFI173:
 2933              	 .cfi_def_cfa_offset 4
 2934 0046 BD46     	 mov sp,r7
 2935              	.LCFI174:
 2936              	 .cfi_def_cfa_register 13
 2937              	 
 2938 0048 5DF8047B 	 ldr r7,[sp],#4
 2939              	.LCFI175:
 2940              	 .cfi_restore 7
 2941              	 .cfi_def_cfa_offset 0
 2942 004c 7047     	 bx lr
 2943              	 .cfi_endproc
 2944              	.LFE261:
 2946 004e 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 2947              	 .align 2
 2948              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 2949              	 .thumb
 2950              	 .thumb_func
 2952              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 2953              	.LFB262:
 878:../Libraries/XMCLib/src/xmc_can.c **** 
 879:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 880:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 881:../Libraries/XMCLib/src/xmc_can.c **** {
 2954              	 .loc 2 881 0
 2955              	 .cfi_startproc
 2956              	 
 2957              	 
 2958              	 
 2959 0000 80B4     	 push {r7}
 2960              	.LCFI176:
 2961              	 .cfi_def_cfa_offset 4
 2962              	 .cfi_offset 7,-4
 2963 0002 83B0     	 sub sp,sp,#12
 2964              	.LCFI177:
 2965              	 .cfi_def_cfa_offset 16
 2966 0004 00AF     	 add r7,sp,#0
 2967              	.LCFI178:
 2968              	 .cfi_def_cfa_register 7
 2969 0006 7860     	 str r0,[r7,#4]
 2970 0008 3960     	 str r1,[r7]
 882:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2971              	 .loc 2 882 0
 2972 000a 7B68     	 ldr r3,[r7,#4]
 2973 000c 1B68     	 ldr r3,[r3]
 2974 000e 7A68     	 ldr r2,[r7,#4]
 2975 0010 1268     	 ldr r2,[r2]
 2976 0012 1268     	 ldr r2,[r2]
 2977 0014 22F00F02 	 bic r2,r2,#15
 2978 0018 42F00302 	 orr r2,r2,#3
 2979 001c 1A60     	 str r2,[r3]
 883:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 884:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 2980              	 .loc 2 884 0
 2981 001e 7B68     	 ldr r3,[r7,#4]
 2982 0020 1B68     	 ldr r3,[r3]
 2983 0022 7A68     	 ldr r2,[r7,#4]
 2984 0024 1268     	 ldr r2,[r2]
 2985 0026 5268     	 ldr r2,[r2,#4]
 2986 0028 22F47F01 	 bic r1,r2,#16711680
 885:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2987              	 .loc 2 885 0
 2988 002c BA78     	 ldrb r2,[r7,#2]
 2989 002e 1204     	 lsls r2,r2,#16
 2990 0030 02F47F02 	 and r2,r2,#16711680
 884:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2991              	 .loc 2 884 0
 2992 0034 0A43     	 orrs r2,r2,r1
 2993 0036 5A60     	 str r2,[r3,#4]
 886:../Libraries/XMCLib/src/xmc_can.c **** 
 887:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 2994              	 .loc 2 887 0
 2995 0038 7B68     	 ldr r3,[r7,#4]
 2996 003a 1B68     	 ldr r3,[r3]
 2997 003c 034A     	 ldr r2,.L135
 2998 003e DA61     	 str r2,[r3,#28]
 888:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 889:../Libraries/XMCLib/src/xmc_can.c **** }
 2999              	 .loc 2 889 0
 3000 0040 0C37     	 adds r7,r7,#12
 3001              	.LCFI179:
 3002              	 .cfi_def_cfa_offset 4
 3003 0042 BD46     	 mov sp,r7
 3004              	.LCFI180:
 3005              	 .cfi_def_cfa_register 13
 3006              	 
 3007 0044 5DF8047B 	 ldr r7,[sp],#4
 3008              	.LCFI181:
 3009              	 .cfi_restore 7
 3010              	 .cfi_def_cfa_offset 0
 3011 0048 7047     	 bx lr
 3012              	.L136:
 3013 004a 00BF     	 .align 2
 3014              	.L135:
 3015 004c 00040002 	 .word 33555456
 3016              	 .cfi_endproc
 3017              	.LFE262:
 3019              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 3020              	 .align 2
 3021              	 .global XMC_CAN_GATEWAY_InitSourceObject
 3022              	 .thumb
 3023              	 .thumb_func
 3025              	XMC_CAN_GATEWAY_InitSourceObject:
 3026              	.LFB263:
 890:../Libraries/XMCLib/src/xmc_can.c **** 
 891:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 892:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 893:../Libraries/XMCLib/src/xmc_can.c **** {
 3027              	 .loc 2 893 0
 3028              	 .cfi_startproc
 3029              	 
 3030              	 
 3031              	 
 3032 0000 80B4     	 push {r7}
 3033              	.LCFI182:
 3034              	 .cfi_def_cfa_offset 4
 3035              	 .cfi_offset 7,-4
 3036 0002 85B0     	 sub sp,sp,#20
 3037              	.LCFI183:
 3038              	 .cfi_def_cfa_offset 24
 3039 0004 00AF     	 add r7,sp,#0
 3040              	.LCFI184:
 3041              	 .cfi_def_cfa_register 7
 3042 0006 F860     	 str r0,[r7,#12]
 3043 0008 3B1D     	 adds r3,r7,#4
 3044 000a 83E80600 	 stmia r3,{r1,r2}
 894:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 3045              	 .loc 2 894 0
 3046 000e FB68     	 ldr r3,[r7,#12]
 3047 0010 1B68     	 ldr r3,[r3]
 895:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3048              	 .loc 2 895 0
 3049 0012 FA79     	 ldrb r2,[r7,#7]
 3050 0014 1202     	 lsls r2,r2,#8
 3051 0016 02F48071 	 and r1,r2,#256
 896:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3052              	 .loc 2 896 0
 3053 001a 7A7A     	 ldrb r2,[r7,#9]
 3054 001c 9202     	 lsls r2,r2,#10
 3055 001e 02F48062 	 and r2,r2,#1024
 895:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3056              	 .loc 2 895 0
 3057 0022 1143     	 orrs r1,r1,r2
 897:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3058              	 .loc 2 897 0
 3059 0024 3A7A     	 ldrb r2,[r7,#8]
 3060 0026 5202     	 lsls r2,r2,#9
 3061 0028 02F40072 	 and r2,r2,#512
 896:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3062              	 .loc 2 896 0
 3063 002c 1143     	 orrs r1,r1,r2
 898:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 3064              	 .loc 2 898 0
 3065 002e BA7A     	 ldrb r2,[r7,#10]
 3066 0030 D202     	 lsls r2,r2,#11
 3067 0032 02F40062 	 and r2,r2,#2048
 897:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3068              	 .loc 2 897 0
 3069 0036 0A43     	 orrs r2,r2,r1
 3070 0038 42F00402 	 orr r2,r2,#4
 894:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3071              	 .loc 2 894 0
 3072 003c 1A60     	 str r2,[r3]
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3073              	 .loc 2 899 0
 3074 003e FB68     	 ldr r3,[r7,#12]
 3075 0040 1B68     	 ldr r3,[r3]
 3076 0042 3A79     	 ldrb r2,[r7,#4]
 3077 0044 1146     	 mov r1,r2
 900:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 3078              	 .loc 2 900 0
 3079 0046 BA79     	 ldrb r2,[r7,#6]
 3080 0048 1204     	 lsls r2,r2,#16
 3081 004a 02F47F02 	 and r2,r2,#16711680
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3082              	 .loc 2 899 0
 3083 004e 1143     	 orrs r1,r1,r2
 901:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 3084              	 .loc 2 901 0
 3085 0050 7A79     	 ldrb r2,[r7,#5]
 3086 0052 1202     	 lsls r2,r2,#8
 3087 0054 92B2     	 uxth r2,r2
 899:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3088              	 .loc 2 899 0
 3089 0056 0A43     	 orrs r2,r2,r1
 3090 0058 5A60     	 str r2,[r3,#4]
 902:../Libraries/XMCLib/src/xmc_can.c **** }
 3091              	 .loc 2 902 0
 3092 005a 1437     	 adds r7,r7,#20
 3093              	.LCFI185:
 3094              	 .cfi_def_cfa_offset 4
 3095 005c BD46     	 mov sp,r7
 3096              	.LCFI186:
 3097              	 .cfi_def_cfa_register 13
 3098              	 
 3099 005e 5DF8047B 	 ldr r7,[sp],#4
 3100              	.LCFI187:
 3101              	 .cfi_restore 7
 3102              	 .cfi_def_cfa_offset 0
 3103 0062 7047     	 bx lr
 3104              	 .cfi_endproc
 3105              	.LFE263:
 3107              	 .text
 3108              	.Letext0:
 3109              	 .file 3 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3110              	 .file 4 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3111              	 .file 5 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 3112              	 .file 6 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc/xmc4_scu.h"
 3113              	 .file 7 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Include/cmsis_gcc.h"
 3114              	 .file 8 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Include/core_cm4.h"
 3115              	 .file 9 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:20     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:24     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:70     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:74     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:134    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:138    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:179    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:183    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:224    .text.max:00000000 $t
    {standard input}:228    .text.max:00000000 max
    {standard input}:272    .text.min:00000000 $t
    {standard input}:276    .text.min:00000000 min
    {standard input}:319    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:324    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:545    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000148 $d
    {standard input}:550    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:555    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:858    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001c0 $d
    {standard input}:863    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:868    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:922    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:927    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:967    .text.XMC_CAN_Disable:00000020 $d
    {standard input}:972    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:977    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:1028   .text.XMC_CAN_Enable:00000034 $d
    {standard input}:1033   .text.XMC_CAN_Init:00000000 $t
    {standard input}:1038   .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1190   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1287   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1185   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1235   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1240   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1282   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1349   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1354   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1437   .text.XMC_CAN_GetClockFrequency:00000000 $t
    {standard input}:1442   .text.XMC_CAN_GetClockFrequency:00000000 XMC_CAN_GetClockFrequency
    {standard input}:1486   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1491   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1571   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1576   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1637   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1642   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1710   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1715   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1801   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1806   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:2014   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:2003   .text.XMC_CAN_MO_Config:00000130 $d
    {standard input}:2009   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2105   .text.XMC_CAN_MO_UpdateData:0000006c $d
    {standard input}:2110   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2115   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2197   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2202   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2320   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2325   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2567   .text.XMC_CAN_MO_Receive:0000019c $d
    {standard input}:2572   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2577   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2634   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2639   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2698   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2703   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2797   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2802   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2872   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2877   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:2947   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:2952   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:3015   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:3020   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:3025   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency
OSCHP_GetFrequency
