   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_eru.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_ERU_ETL_Init,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_ERU_ETL_Init
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_ERU_ETL_Init:
  26              	.LFB141:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_eru.c"
   1:../Libraries/XMCLib/src/xmc_eru.c **** /**
   2:../Libraries/XMCLib/src/xmc_eru.c ****  * @file xmc_eru.c
   3:../Libraries/XMCLib/src/xmc_eru.c ****  * @date 2016-03-10
   4:../Libraries/XMCLib/src/xmc_eru.c ****  *
   5:../Libraries/XMCLib/src/xmc_eru.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_eru.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_eru.c ****  *
   9:../Libraries/XMCLib/src/xmc_eru.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_eru.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_eru.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_eru.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  18:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  21:../Libraries/XMCLib/src/xmc_eru.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_eru.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_eru.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_eru.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_eru.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_eru.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_eru.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_eru.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_eru.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_eru.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_eru.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_eru.c ****  *
  36:../Libraries/XMCLib/src/xmc_eru.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_eru.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_eru.c ****  *
  39:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_eru.c ****  *
  42:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_eru.c ****  *
  45:../Libraries/XMCLib/src/xmc_eru.c ****  * 2016-03-10:
  46:../Libraries/XMCLib/src/xmc_eru.c ****  *     - XMC_ERU_ETL_GetEdgeDetection() API is added to get the configured edge for event generatio
  47:../Libraries/XMCLib/src/xmc_eru.c ****  *
  48:../Libraries/XMCLib/src/xmc_eru.c ****  * @endcond
  49:../Libraries/XMCLib/src/xmc_eru.c ****  */
  50:../Libraries/XMCLib/src/xmc_eru.c **** 
  51:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  52:../Libraries/XMCLib/src/xmc_eru.c ****  * HEADER FILES
  53:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  54:../Libraries/XMCLib/src/xmc_eru.c **** 
  55:../Libraries/XMCLib/src/xmc_eru.c **** #include "xmc_eru.h"
  56:../Libraries/XMCLib/src/xmc_eru.c **** 
  57:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  58:../Libraries/XMCLib/src/xmc_eru.c ****  * MACROS
  59:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  60:../Libraries/XMCLib/src/xmc_eru.c **** 
  61:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_BITSIZE (4UL) /* Used to set the input for path A and path B based on the channe
  62:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_INPUT_BITSIZE (2UL)
  63:../Libraries/XMCLib/src/xmc_eru.c **** 
  64:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_A(input) \
  65:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_A0) || \
  66:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A1) || \
  67:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A2) || \
  68:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A3))
  69:../Libraries/XMCLib/src/xmc_eru.c **** 
  70:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_B(input) \
  71:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_B0) || \
  72:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B1) || \
  73:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B2) || \
  74:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B3))
  75:../Libraries/XMCLib/src/xmc_eru.c **** 
  76:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode) \
  77:../Libraries/XMCLib/src/xmc_eru.c ****     ((mode == XMC_ERU_ETL_STATUS_FLAG_MODE_SWCTRL) || \
  78:../Libraries/XMCLib/src/xmc_eru.c ****      (mode == XMC_ERU_ETL_STATUS_FLAG_MODE_HWCTRL))
  79:../Libraries/XMCLib/src/xmc_eru.c **** 
  80:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_EVENT_SOURCE(source) \
  81:../Libraries/XMCLib/src/xmc_eru.c ****     ((source == XMC_ERU_ETL_SOURCE_A)              || \
  82:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_B)              || \
  83:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_B)         || \
  84:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_B)        || \
  85:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A)          || \
  86:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_B)     || \
  87:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_B)    || \
  88:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_B)          || \
  89:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_NOT_B)     || \
  90:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_NOT_B)    || \
  91:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_NOT_B) || \
  92:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_NOT_B))
  93:../Libraries/XMCLib/src/xmc_eru.c **** 
  94:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge) \
  95:../Libraries/XMCLib/src/xmc_eru.c ****     ((edge == XMC_ERU_ETL_EDGE_DETECTION_DISABLED) || \
  96:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_RISING) || \
  97:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_FALLING) || \
  98:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_BOTH))
  99:../Libraries/XMCLib/src/xmc_eru.c **** 
 100:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(channel) \
 101:../Libraries/XMCLib/src/xmc_eru.c ****     ((channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0) || \
 102:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL1) || \
 103:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL2) || \
 104:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL3))
 105:../Libraries/XMCLib/src/xmc_eru.c **** 
 106:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PATTERN_INPUT(input) \
 107:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT0) || \
 108:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT1) || \
 109:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT2) || \
 110:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT3))
 111:../Libraries/XMCLib/src/xmc_eru.c **** 
 112:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(trigger) \
 113:../Libraries/XMCLib/src/xmc_eru.c ****     ((trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER1) || \
 114:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER2) || \
 115:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER3))
 116:../Libraries/XMCLib/src/xmc_eru.c **** 
 117:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(service) \
 118:../Libraries/XMCLib/src/xmc_eru.c ****     ((service == XMC_ERU_OGU_SERVICE_REQUEST_DISABLED) || \
 119:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER) || \
 120:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH) || \
 121:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH))
 122:../Libraries/XMCLib/src/xmc_eru.c ****  
 123:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_eru.c ****  * API IMPLEMENTATION
 125:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
 126:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_ETLx channel with the config structure.  */
 127:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
 128:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 129:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_ETL_CONFIG_t *const config)
 130:../Libraries/XMCLib/src/xmc_eru.c **** { 
  28              	 .loc 1 130 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 84B0     	 sub sp,sp,#16
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 24
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 0B46     	 mov r3,r1
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c FB72     	 strb r3,[r7,#11]
 131:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 132:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));
 133:../Libraries/XMCLib/src/xmc_eru.c **** 
 134:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
  47              	 .loc 1 134 0
  48 000e F868     	 ldr r0,[r7,#12]
  49 0010 FFF7FEFF 	 bl XMC_ERU_Enable
 135:../Libraries/XMCLib/src/xmc_eru.c **** 
 136:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & 
  50              	 .loc 1 136 0
  51 0014 FB68     	 ldr r3,[r7,#12]
  52 0016 1A68     	 ldr r2,[r3]
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  53              	 .loc 1 137 0
  54 0018 FB7A     	 ldrb r3,[r7,#11]
  55 001a 9B00     	 lsls r3,r3,#2
  56 001c 1946     	 mov r1,r3
  57 001e 0F23     	 movs r3,#15
  58 0020 8B40     	 lsls r3,r3,r1
  59 0022 DB43     	 mvns r3,r3
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  60              	 .loc 1 136 0
  61 0024 1A40     	 ands r2,r2,r3
 138:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  62              	 .loc 1 138 0
  63 0026 7B68     	 ldr r3,[r7,#4]
  64 0028 1B68     	 ldr r3,[r3]
  65 002a F97A     	 ldrb r1,[r7,#11]
  66 002c 8900     	 lsls r1,r1,#2
  67 002e 8B40     	 lsls r3,r3,r1
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  68              	 .loc 1 137 0
  69 0030 1A43     	 orrs r2,r2,r3
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  70              	 .loc 1 136 0
  71 0032 FB68     	 ldr r3,[r7,#12]
  72 0034 1A60     	 str r2,[r3]
 139:../Libraries/XMCLib/src/xmc_eru.c ****   
 140:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON[channel] = config->raw;
  73              	 .loc 1 140 0
  74 0036 FA7A     	 ldrb r2,[r7,#11]
  75 0038 7B68     	 ldr r3,[r7,#4]
  76 003a 5968     	 ldr r1,[r3,#4]
  77 003c FB68     	 ldr r3,[r7,#12]
  78 003e 0432     	 adds r2,r2,#4
  79 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 141:../Libraries/XMCLib/src/xmc_eru.c **** }
  80              	 .loc 1 141 0
  81 0044 1037     	 adds r7,r7,#16
  82              	.LCFI3:
  83              	 .cfi_def_cfa_offset 8
  84 0046 BD46     	 mov sp,r7
  85              	.LCFI4:
  86              	 .cfi_def_cfa_register 13
  87              	 
  88 0048 80BD     	 pop {r7,pc}
  89              	 .cfi_endproc
  90              	.LFE141:
  92 004a 00BF     	 .section .text.XMC_ERU_OGU_Init,"ax",%progbits
  93              	 .align 2
  94              	 .global XMC_ERU_OGU_Init
  95              	 .thumb
  96              	 .thumb_func
  98              	XMC_ERU_OGU_Init:
  99              	.LFB142:
 142:../Libraries/XMCLib/src/xmc_eru.c **** 
 143:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_OGUy channel with the config structure.  */
 144:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
 145:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 146:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_OGU_CONFIG_t *const config)
 147:../Libraries/XMCLib/src/xmc_eru.c **** {
 100              	 .loc 1 147 0
 101              	 .cfi_startproc
 102              	 
 103              	 
 104 0000 80B5     	 push {r7,lr}
 105              	.LCFI5:
 106              	 .cfi_def_cfa_offset 8
 107              	 .cfi_offset 7,-8
 108              	 .cfi_offset 14,-4
 109 0002 84B0     	 sub sp,sp,#16
 110              	.LCFI6:
 111              	 .cfi_def_cfa_offset 24
 112 0004 00AF     	 add r7,sp,#0
 113              	.LCFI7:
 114              	 .cfi_def_cfa_register 7
 115 0006 F860     	 str r0,[r7,#12]
 116 0008 0B46     	 mov r3,r1
 117 000a 7A60     	 str r2,[r7,#4]
 118 000c FB72     	 strb r3,[r7,#11]
 148:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 149:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));
 150:../Libraries/XMCLib/src/xmc_eru.c **** 
 151:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 119              	 .loc 1 151 0
 120 000e F868     	 ldr r0,[r7,#12]
 121 0010 FFF7FEFF 	 bl XMC_ERU_Enable
 152:../Libraries/XMCLib/src/xmc_eru.c **** 
 153:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON[channel] = config->raw;
 122              	 .loc 1 153 0
 123 0014 FA7A     	 ldrb r2,[r7,#11]
 124 0016 7B68     	 ldr r3,[r7,#4]
 125 0018 1968     	 ldr r1,[r3]
 126 001a FB68     	 ldr r3,[r7,#12]
 127 001c 0832     	 adds r2,r2,#8
 128 001e 43F82210 	 str r1,[r3,r2,lsl#2]
 154:../Libraries/XMCLib/src/xmc_eru.c **** }
 129              	 .loc 1 154 0
 130 0022 1037     	 adds r7,r7,#16
 131              	.LCFI8:
 132              	 .cfi_def_cfa_offset 8
 133 0024 BD46     	 mov sp,r7
 134              	.LCFI9:
 135              	 .cfi_def_cfa_register 13
 136              	 
 137 0026 80BD     	 pop {r7,pc}
 138              	 .cfi_endproc
 139              	.LFE142:
 141              	 .section .text.XMC_ERU_ETL_SetInput,"ax",%progbits
 142              	 .align 2
 143              	 .global XMC_ERU_ETL_SetInput
 144              	 .thumb
 145              	 .thumb_func
 147              	XMC_ERU_ETL_SetInput:
 148              	.LFB143:
 155:../Libraries/XMCLib/src/xmc_eru.c **** 
 156:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the event source for path A and path B, with selected input_a and input_b respectivel
 157:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
 158:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 159:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_A_t input_a,
 160:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_B_t input_b)
 161:../Libraries/XMCLib/src/xmc_eru.c **** {
 149              	 .loc 1 161 0
 150              	 .cfi_startproc
 151              	 
 152              	 
 153              	 
 154 0000 80B4     	 push {r7}
 155              	.LCFI10:
 156              	 .cfi_def_cfa_offset 4
 157              	 .cfi_offset 7,-4
 158 0002 83B0     	 sub sp,sp,#12
 159              	.LCFI11:
 160              	 .cfi_def_cfa_offset 16
 161 0004 00AF     	 add r7,sp,#0
 162              	.LCFI12:
 163              	 .cfi_def_cfa_register 7
 164 0006 7860     	 str r0,[r7,#4]
 165 0008 0846     	 mov r0,r1
 166 000a 1146     	 mov r1,r2
 167 000c 1A46     	 mov r2,r3
 168 000e 0346     	 mov r3,r0
 169 0010 FB70     	 strb r3,[r7,#3]
 170 0012 0B46     	 mov r3,r1
 171 0014 BB70     	 strb r3,[r7,#2]
 172 0016 1346     	 mov r3,r2
 173 0018 7B70     	 strb r3,[r7,#1]
 162:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 163:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
 164:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
 165:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));
 166:../Libraries/XMCLib/src/xmc_eru.c **** 
 167:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channe
 174              	 .loc 1 167 0
 175 001a 7B68     	 ldr r3,[r7,#4]
 176 001c 1A68     	 ldr r2,[r3]
 177 001e FB78     	 ldrb r3,[r7,#3]
 178 0020 9B00     	 lsls r3,r3,#2
 179 0022 1946     	 mov r1,r3
 180 0024 0F23     	 movs r3,#15
 181 0026 8B40     	 lsls r3,r3,r1
 182 0028 DB43     	 mvns r3,r3
 183 002a 1A40     	 ands r2,r2,r3
 168:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 184              	 .loc 1 168 0
 185 002c BB78     	 ldrb r3,[r7,#2]
 186 002e 7978     	 ldrb r1,[r7,#1]
 187 0030 8900     	 lsls r1,r1,#2
 188 0032 0B43     	 orrs r3,r3,r1
 189 0034 F978     	 ldrb r1,[r7,#3]
 190 0036 8900     	 lsls r1,r1,#2
 191 0038 8B40     	 lsls r3,r3,r1
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 192              	 .loc 1 167 0
 193 003a 1A43     	 orrs r2,r2,r3
 194 003c 7B68     	 ldr r3,[r7,#4]
 195 003e 1A60     	 str r2,[r3]
 169:../Libraries/XMCLib/src/xmc_eru.c **** }
 196              	 .loc 1 169 0
 197 0040 0C37     	 adds r7,r7,#12
 198              	.LCFI13:
 199              	 .cfi_def_cfa_offset 4
 200 0042 BD46     	 mov sp,r7
 201              	.LCFI14:
 202              	 .cfi_def_cfa_register 13
 203              	 
 204 0044 5DF8047B 	 ldr r7,[sp],#4
 205              	.LCFI15:
 206              	 .cfi_restore 7
 207              	 .cfi_def_cfa_offset 0
 208 0048 7047     	 bx lr
 209              	 .cfi_endproc
 210              	.LFE143:
 212 004a 00BF     	 .section .text.XMC_ERU_ETL_SetSource,"ax",%progbits
 213              	 .align 2
 214              	 .global XMC_ERU_ETL_SetSource
 215              	 .thumb
 216              	 .thumb_func
 218              	XMC_ERU_ETL_SetSource:
 219              	.LFB144:
 170:../Libraries/XMCLib/src/xmc_eru.c **** 
 171:../Libraries/XMCLib/src/xmc_eru.c **** /* Select input path combination along with polarity for event generation by setting (SS, NA, NB) b
 172:../Libraries/XMCLib/src/xmc_eru.c ****    EXICONx(x = [0 to 3]) register */
 173:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
 174:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 175:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_SOURCE_t source)
 176:../Libraries/XMCLib/src/xmc_eru.c **** {
 220              	 .loc 1 176 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224              	 
 225 0000 80B4     	 push {r7}
 226              	.LCFI16:
 227              	 .cfi_def_cfa_offset 4
 228              	 .cfi_offset 7,-4
 229 0002 83B0     	 sub sp,sp,#12
 230              	.LCFI17:
 231              	 .cfi_def_cfa_offset 16
 232 0004 00AF     	 add r7,sp,#0
 233              	.LCFI18:
 234              	 .cfi_def_cfa_register 7
 235 0006 7860     	 str r0,[r7,#4]
 236 0008 0B46     	 mov r3,r1
 237 000a FB70     	 strb r3,[r7,#3]
 238 000c 1346     	 mov r3,r2
 239 000e BB70     	 strb r3,[r7,#2]
 177:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 178:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
 179:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));
 180:../Libraries/XMCLib/src/xmc_eru.c **** 
 181:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].SS = (uint8_t)source;
 240              	 .loc 1 181 0
 241 0010 FA78     	 ldrb r2,[r7,#3]
 242 0012 BB78     	 ldrb r3,[r7,#2]
 243 0014 03F00F03 	 and r3,r3,#15
 244 0018 D9B2     	 uxtb r1,r3
 245 001a 7B68     	 ldr r3,[r7,#4]
 246 001c 0432     	 adds r2,r2,#4
 247 001e 01F00F01 	 and r1,r1,#15
 248 0022 0902     	 lsls r1,r1,#8
 249 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 250 0028 20F47060 	 bic r0,r0,#3840
 251 002c 0143     	 orrs r1,r1,r0
 252 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 182:../Libraries/XMCLib/src/xmc_eru.c **** }
 253              	 .loc 1 182 0
 254 0032 0C37     	 adds r7,r7,#12
 255              	.LCFI19:
 256              	 .cfi_def_cfa_offset 4
 257 0034 BD46     	 mov sp,r7
 258              	.LCFI20:
 259              	 .cfi_def_cfa_register 13
 260              	 
 261 0036 5DF8047B 	 ldr r7,[sp],#4
 262              	.LCFI21:
 263              	 .cfi_restore 7
 264              	 .cfi_def_cfa_offset 0
 265 003a 7047     	 bx lr
 266              	 .cfi_endproc
 267              	.LFE144:
 269              	 .section .text.XMC_ERU_ETL_SetEdgeDetection,"ax",%progbits
 270              	 .align 2
 271              	 .global XMC_ERU_ETL_SetEdgeDetection
 272              	 .thumb
 273              	 .thumb_func
 275              	XMC_ERU_ETL_SetEdgeDetection:
 276              	.LFB145:
 183:../Libraries/XMCLib/src/xmc_eru.c **** 
 184:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
 185:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
 186:../Libraries/XMCLib/src/xmc_eru.c ****                                   const uint8_t channel,
 187:../Libraries/XMCLib/src/xmc_eru.c ****                                   const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
 188:../Libraries/XMCLib/src/xmc_eru.c **** {
 277              	 .loc 1 188 0
 278              	 .cfi_startproc
 279              	 
 280              	 
 281              	 
 282 0000 80B4     	 push {r7}
 283              	.LCFI22:
 284              	 .cfi_def_cfa_offset 4
 285              	 .cfi_offset 7,-4
 286 0002 83B0     	 sub sp,sp,#12
 287              	.LCFI23:
 288              	 .cfi_def_cfa_offset 16
 289 0004 00AF     	 add r7,sp,#0
 290              	.LCFI24:
 291              	 .cfi_def_cfa_register 7
 292 0006 7860     	 str r0,[r7,#4]
 293 0008 0B46     	 mov r3,r1
 294 000a FB70     	 strb r3,[r7,#3]
 295 000c 1346     	 mov r3,r2
 296 000e BB70     	 strb r3,[r7,#2]
 189:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 190:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
 191:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(ed
 192:../Libraries/XMCLib/src/xmc_eru.c **** 
 193:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 297              	 .loc 1 193 0
 298 0010 FA78     	 ldrb r2,[r7,#3]
 299 0012 BB78     	 ldrb r3,[r7,#2]
 300 0014 03F00303 	 and r3,r3,#3
 301 0018 D9B2     	 uxtb r1,r3
 302 001a 7B68     	 ldr r3,[r7,#4]
 303 001c 0432     	 adds r2,r2,#4
 304 001e 01F00301 	 and r1,r1,#3
 305 0022 8900     	 lsls r1,r1,#2
 306 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 307 0028 20F00C00 	 bic r0,r0,#12
 308 002c 0143     	 orrs r1,r1,r0
 309 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 194:../Libraries/XMCLib/src/xmc_eru.c **** }
 310              	 .loc 1 194 0
 311 0032 0C37     	 adds r7,r7,#12
 312              	.LCFI25:
 313              	 .cfi_def_cfa_offset 4
 314 0034 BD46     	 mov sp,r7
 315              	.LCFI26:
 316              	 .cfi_def_cfa_register 13
 317              	 
 318 0036 5DF8047B 	 ldr r7,[sp],#4
 319              	.LCFI27:
 320              	 .cfi_restore 7
 321              	 .cfi_def_cfa_offset 0
 322 003a 7047     	 bx lr
 323              	 .cfi_endproc
 324              	.LFE145:
 326              	 .section .text.XMC_ERU_ETL_GetEdgeDetection,"ax",%progbits
 327              	 .align 2
 328              	 .global XMC_ERU_ETL_GetEdgeDetection
 329              	 .thumb
 330              	 .thumb_func
 332              	XMC_ERU_ETL_GetEdgeDetection:
 333              	.LFB146:
 195:../Libraries/XMCLib/src/xmc_eru.c **** 
 196:../Libraries/XMCLib/src/xmc_eru.c **** /* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) re
 197:../Libraries/XMCLib/src/xmc_eru.c **** XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t chann
 198:../Libraries/XMCLib/src/xmc_eru.c **** {
 334              	 .loc 1 198 0
 335              	 .cfi_startproc
 336              	 
 337              	 
 338              	 
 339 0000 80B4     	 push {r7}
 340              	.LCFI28:
 341              	 .cfi_def_cfa_offset 4
 342              	 .cfi_offset 7,-4
 343 0002 83B0     	 sub sp,sp,#12
 344              	.LCFI29:
 345              	 .cfi_def_cfa_offset 16
 346 0004 00AF     	 add r7,sp,#0
 347              	.LCFI30:
 348              	 .cfi_def_cfa_register 7
 349 0006 7860     	 str r0,[r7,#4]
 350 0008 0B46     	 mov r3,r1
 351 000a FB70     	 strb r3,[r7,#3]
 199:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 200:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
 201:../Libraries/XMCLib/src/xmc_eru.c ****   return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 352              	 .loc 1 201 0
 353 000c FA78     	 ldrb r2,[r7,#3]
 354 000e 7B68     	 ldr r3,[r7,#4]
 355 0010 0432     	 adds r2,r2,#4
 356 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 357 0016 9B08     	 lsrs r3,r3,#2
 358 0018 03F00303 	 and r3,r3,#3
 359 001c DBB2     	 uxtb r3,r3
 202:../Libraries/XMCLib/src/xmc_eru.c **** }
 360              	 .loc 1 202 0
 361 001e 1846     	 mov r0,r3
 362 0020 0C37     	 adds r7,r7,#12
 363              	.LCFI31:
 364              	 .cfi_def_cfa_offset 4
 365 0022 BD46     	 mov sp,r7
 366              	.LCFI32:
 367              	 .cfi_def_cfa_register 13
 368              	 
 369 0024 5DF8047B 	 ldr r7,[sp],#4
 370              	.LCFI33:
 371              	 .cfi_restore 7
 372              	 .cfi_def_cfa_offset 0
 373 0028 7047     	 bx lr
 374              	 .cfi_endproc
 375              	.LFE146:
 377 002a 00BF     	 .section .text.XMC_ERU_ETL_SetStatusFlagMode,"ax",%progbits
 378              	 .align 2
 379              	 .global XMC_ERU_ETL_SetStatusFlagMode
 380              	 .thumb
 381              	 .thumb_func
 383              	XMC_ERU_ETL_SetStatusFlagMode:
 384              	.LFB147:
 203:../Libraries/XMCLib/src/xmc_eru.c **** 
 204:../Libraries/XMCLib/src/xmc_eru.c **** /* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
 205:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
 206:../Libraries/XMCLib/src/xmc_eru.c ****                                    const uint8_t channel,
 207:../Libraries/XMCLib/src/xmc_eru.c ****                                    const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
 208:../Libraries/XMCLib/src/xmc_eru.c **** {
 385              	 .loc 1 208 0
 386              	 .cfi_startproc
 387              	 
 388              	 
 389              	 
 390 0000 80B4     	 push {r7}
 391              	.LCFI34:
 392              	 .cfi_def_cfa_offset 4
 393              	 .cfi_offset 7,-4
 394 0002 83B0     	 sub sp,sp,#12
 395              	.LCFI35:
 396              	 .cfi_def_cfa_offset 16
 397 0004 00AF     	 add r7,sp,#0
 398              	.LCFI36:
 399              	 .cfi_def_cfa_register 7
 400 0006 7860     	 str r0,[r7,#4]
 401 0008 0B46     	 mov r3,r1
 402 000a FB70     	 strb r3,[r7,#3]
 403 000c 1346     	 mov r3,r2
 404 000e BB70     	 strb r3,[r7,#2]
 209:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru))
 210:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
 211:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLA
 212:../Libraries/XMCLib/src/xmc_eru.c **** 
 213:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].LD = (uint8_t)mode;
 405              	 .loc 1 213 0
 406 0010 FA78     	 ldrb r2,[r7,#3]
 407 0012 BB78     	 ldrb r3,[r7,#2]
 408 0014 03F00103 	 and r3,r3,#1
 409 0018 D9B2     	 uxtb r1,r3
 410 001a 7B68     	 ldr r3,[r7,#4]
 411 001c 0432     	 adds r2,r2,#4
 412 001e 01F00101 	 and r1,r1,#1
 413 0022 4900     	 lsls r1,r1,#1
 414 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 415 0028 20F00200 	 bic r0,r0,#2
 416 002c 0143     	 orrs r1,r1,r0
 417 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 214:../Libraries/XMCLib/src/xmc_eru.c **** }
 418              	 .loc 1 214 0
 419 0032 0C37     	 adds r7,r7,#12
 420              	.LCFI37:
 421              	 .cfi_def_cfa_offset 4
 422 0034 BD46     	 mov sp,r7
 423              	.LCFI38:
 424              	 .cfi_def_cfa_register 13
 425              	 
 426 0036 5DF8047B 	 ldr r7,[sp],#4
 427              	.LCFI39:
 428              	 .cfi_restore 7
 429              	 .cfi_def_cfa_offset 0
 430 003a 7047     	 bx lr
 431              	 .cfi_endproc
 432              	.LFE147:
 434              	 .section .text.XMC_ERU_ETL_EnableOutputTrigger,"ax",%progbits
 435              	 .align 2
 436              	 .global XMC_ERU_ETL_EnableOutputTrigger
 437              	 .thumb
 438              	 .thumb_func
 440              	XMC_ERU_ETL_EnableOutputTrigger:
 441              	.LFB148:
 215:../Libraries/XMCLib/src/xmc_eru.c **** 
 216:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pul
 217:../Libraries/XMCLib/src/xmc_eru.c ****  * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
 218:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
 219:../Libraries/XMCLib/src/xmc_eru.c ****                                      const uint8_t channel,
 220:../Libraries/XMCLib/src/xmc_eru.c ****                                      const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
 221:../Libraries/XMCLib/src/xmc_eru.c **** {
 442              	 .loc 1 221 0
 443              	 .cfi_startproc
 444              	 
 445              	 
 446              	 
 447 0000 80B4     	 push {r7}
 448              	.LCFI40:
 449              	 .cfi_def_cfa_offset 4
 450              	 .cfi_offset 7,-4
 451 0002 83B0     	 sub sp,sp,#12
 452              	.LCFI41:
 453              	 .cfi_def_cfa_offset 16
 454 0004 00AF     	 add r7,sp,#0
 455              	.LCFI42:
 456              	 .cfi_def_cfa_register 7
 457 0006 7860     	 str r0,[r7,#4]
 458 0008 0B46     	 mov r3,r1
 459 000a FB70     	 strb r3,[r7,#3]
 460 000c 1346     	 mov r3,r2
 461 000e BB70     	 strb r3,[r7,#2]
 222:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru
 223:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
 224:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CH
 225:../Libraries/XMCLib/src/xmc_eru.c **** 
 226:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 462              	 .loc 1 226 0
 463 0010 FA78     	 ldrb r2,[r7,#3]
 464 0012 BB78     	 ldrb r3,[r7,#2]
 465 0014 03F00703 	 and r3,r3,#7
 466 0018 D9B2     	 uxtb r1,r3
 467 001a 7B68     	 ldr r3,[r7,#4]
 468 001c 0432     	 adds r2,r2,#4
 469 001e 01F00701 	 and r1,r1,#7
 470 0022 0901     	 lsls r1,r1,#4
 471 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 472 0028 20F07000 	 bic r0,r0,#112
 473 002c 0143     	 orrs r1,r1,r0
 474 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 227:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = (uint8_t)true;
 475              	 .loc 1 227 0
 476 0032 FA78     	 ldrb r2,[r7,#3]
 477 0034 7B68     	 ldr r3,[r7,#4]
 478 0036 0432     	 adds r2,r2,#4
 479 0038 53F82210 	 ldr r1,[r3,r2,lsl#2]
 480 003c 41F00101 	 orr r1,r1,#1
 481 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 228:../Libraries/XMCLib/src/xmc_eru.c **** }
 482              	 .loc 1 228 0
 483 0044 0C37     	 adds r7,r7,#12
 484              	.LCFI43:
 485              	 .cfi_def_cfa_offset 4
 486 0046 BD46     	 mov sp,r7
 487              	.LCFI44:
 488              	 .cfi_def_cfa_register 13
 489              	 
 490 0048 5DF8047B 	 ldr r7,[sp],#4
 491              	.LCFI45:
 492              	 .cfi_restore 7
 493              	 .cfi_def_cfa_offset 0
 494 004c 7047     	 bx lr
 495              	 .cfi_endproc
 496              	.LFE148:
 498 004e 00BF     	 .section .text.XMC_ERU_ETL_DisableOutputTrigger,"ax",%progbits
 499              	 .align 2
 500              	 .global XMC_ERU_ETL_DisableOutputTrigger
 501              	 .thumb
 502              	 .thumb_func
 504              	XMC_ERU_ETL_DisableOutputTrigger:
 505              	.LFB149:
 229:../Libraries/XMCLib/src/xmc_eru.c **** 
 230:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
 231:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
 232:../Libraries/XMCLib/src/xmc_eru.c **** {
 506              	 .loc 1 232 0
 507              	 .cfi_startproc
 508              	 
 509              	 
 510              	 
 511 0000 80B4     	 push {r7}
 512              	.LCFI46:
 513              	 .cfi_def_cfa_offset 4
 514              	 .cfi_offset 7,-4
 515 0002 83B0     	 sub sp,sp,#12
 516              	.LCFI47:
 517              	 .cfi_def_cfa_offset 16
 518 0004 00AF     	 add r7,sp,#0
 519              	.LCFI48:
 520              	 .cfi_def_cfa_register 7
 521 0006 7860     	 str r0,[r7,#4]
 522 0008 0B46     	 mov r3,r1
 523 000a FB70     	 strb r3,[r7,#3]
 233:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(er
 234:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));
 235:../Libraries/XMCLib/src/xmc_eru.c **** 
 236:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = false;
 524              	 .loc 1 236 0
 525 000c FA78     	 ldrb r2,[r7,#3]
 526 000e 7B68     	 ldr r3,[r7,#4]
 527 0010 0432     	 adds r2,r2,#4
 528 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 529 0016 21F00101 	 bic r1,r1,#1
 530 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 237:../Libraries/XMCLib/src/xmc_eru.c **** }
 531              	 .loc 1 237 0
 532 001e 0C37     	 adds r7,r7,#12
 533              	.LCFI49:
 534              	 .cfi_def_cfa_offset 4
 535 0020 BD46     	 mov sp,r7
 536              	.LCFI50:
 537              	 .cfi_def_cfa_register 13
 538              	 
 539 0022 5DF8047B 	 ldr r7,[sp],#4
 540              	.LCFI51:
 541              	 .cfi_restore 7
 542              	 .cfi_def_cfa_offset 0
 543 0026 7047     	 bx lr
 544              	 .cfi_endproc
 545              	.LFE149:
 547              	 .section .text.XMC_ERU_OGU_EnablePatternDetection,"ax",%progbits
 548              	 .align 2
 549              	 .global XMC_ERU_OGU_EnablePatternDetection
 550              	 .thumb
 551              	 .thumb_func
 553              	XMC_ERU_OGU_EnablePatternDetection:
 554              	.LFB150:
 238:../Libraries/XMCLib/src/xmc_eru.c **** 
 239:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and 
 240:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
 241:../Libraries/XMCLib/src/xmc_eru.c ****                                         const uint8_t channel,
 242:../Libraries/XMCLib/src/xmc_eru.c ****                                         const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
 243:../Libraries/XMCLib/src/xmc_eru.c **** {
 555              	 .loc 1 243 0
 556              	 .cfi_startproc
 557              	 
 558              	 
 559              	 
 560 0000 80B4     	 push {r7}
 561              	.LCFI52:
 562              	 .cfi_def_cfa_offset 4
 563              	 .cfi_offset 7,-4
 564 0002 83B0     	 sub sp,sp,#12
 565              	.LCFI53:
 566              	 .cfi_def_cfa_offset 16
 567 0004 00AF     	 add r7,sp,#0
 568              	.LCFI54:
 569              	 .cfi_def_cfa_register 7
 570 0006 7860     	 str r0,[r7,#4]
 571 0008 0B46     	 mov r3,r1
 572 000a FB70     	 strb r3,[r7,#3]
 573 000c 1346     	 mov r3,r2
 574 000e BB70     	 strb r3,[r7,#2]
 244:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(
 245:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
 246:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_
 247:../Libraries/XMCLib/src/xmc_eru.c **** 
 248:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 575              	 .loc 1 248 0
 576 0010 FA78     	 ldrb r2,[r7,#3]
 577 0012 BB78     	 ldrb r3,[r7,#2]
 578 0014 03F00F03 	 and r3,r3,#15
 579 0018 D9B2     	 uxtb r1,r3
 580 001a 7B68     	 ldr r3,[r7,#4]
 581 001c 0832     	 adds r2,r2,#8
 582 001e 01F00F01 	 and r1,r1,#15
 583 0022 0903     	 lsls r1,r1,#12
 584 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 585 0028 20F47040 	 bic r0,r0,#61440
 586 002c 0143     	 orrs r1,r1,r0
 587 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 249:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = true;
 588              	 .loc 1 249 0
 589 0032 FA78     	 ldrb r2,[r7,#3]
 590 0034 7B68     	 ldr r3,[r7,#4]
 591 0036 0832     	 adds r2,r2,#8
 592 0038 53F82210 	 ldr r1,[r3,r2,lsl#2]
 593 003c 41F00401 	 orr r1,r1,#4
 594 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 250:../Libraries/XMCLib/src/xmc_eru.c **** }
 595              	 .loc 1 250 0
 596 0044 0C37     	 adds r7,r7,#12
 597              	.LCFI55:
 598              	 .cfi_def_cfa_offset 4
 599 0046 BD46     	 mov sp,r7
 600              	.LCFI56:
 601              	 .cfi_def_cfa_register 13
 602              	 
 603 0048 5DF8047B 	 ldr r7,[sp],#4
 604              	.LCFI57:
 605              	 .cfi_restore 7
 606              	 .cfi_def_cfa_offset 0
 607 004c 7047     	 bx lr
 608              	 .cfi_endproc
 609              	.LFE150:
 611 004e 00BF     	 .section .text.XMC_ERU_OGU_DisablePatternDetection,"ax",%progbits
 612              	 .align 2
 613              	 .global XMC_ERU_OGU_DisablePatternDetection
 614              	 .thumb
 615              	 .thumb_func
 617              	XMC_ERU_OGU_DisablePatternDetection:
 618              	.LFB151:
 251:../Libraries/XMCLib/src/xmc_eru.c **** 
 252:../Libraries/XMCLib/src/xmc_eru.c **** /* Disable the pattern detection by clearing (GEEN) bit. */
 253:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
 254:../Libraries/XMCLib/src/xmc_eru.c **** {
 619              	 .loc 1 254 0
 620              	 .cfi_startproc
 621              	 
 622              	 
 623              	 
 624 0000 80B4     	 push {r7}
 625              	.LCFI58:
 626              	 .cfi_def_cfa_offset 4
 627              	 .cfi_offset 7,-4
 628 0002 83B0     	 sub sp,sp,#12
 629              	.LCFI59:
 630              	 .cfi_def_cfa_offset 16
 631 0004 00AF     	 add r7,sp,#0
 632              	.LCFI60:
 633              	 .cfi_def_cfa_register 7
 634 0006 7860     	 str r0,[r7,#4]
 635 0008 0B46     	 mov r3,r1
 636 000a FB70     	 strb r3,[r7,#3]
 255:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 256:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));
 257:../Libraries/XMCLib/src/xmc_eru.c **** 
 258:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = false;
 637              	 .loc 1 258 0
 638 000c FA78     	 ldrb r2,[r7,#3]
 639 000e 7B68     	 ldr r3,[r7,#4]
 640 0010 0832     	 adds r2,r2,#8
 641 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 642 0016 21F00401 	 bic r1,r1,#4
 643 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 259:../Libraries/XMCLib/src/xmc_eru.c **** }
 644              	 .loc 1 259 0
 645 001e 0C37     	 adds r7,r7,#12
 646              	.LCFI61:
 647              	 .cfi_def_cfa_offset 4
 648 0020 BD46     	 mov sp,r7
 649              	.LCFI62:
 650              	 .cfi_def_cfa_register 13
 651              	 
 652 0022 5DF8047B 	 ldr r7,[sp],#4
 653              	.LCFI63:
 654              	 .cfi_restore 7
 655              	 .cfi_def_cfa_offset 0
 656 0026 7047     	 bx lr
 657              	 .cfi_endproc
 658              	.LFE151:
 660              	 .section .text.XMC_ERU_OGU_EnablePeripheralTrigger,"ax",%progbits
 661              	 .align 2
 662              	 .global XMC_ERU_OGU_EnablePeripheralTrigger
 663              	 .thumb
 664              	 .thumb_func
 666              	XMC_ERU_OGU_EnablePeripheralTrigger:
 667              	.LFB152:
 260:../Libraries/XMCLib/src/xmc_eru.c **** 
 261:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures peripheral trigger input, by setting (ISS) bit. */
 262:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
 263:../Libraries/XMCLib/src/xmc_eru.c ****                                          const uint8_t channel,
 264:../Libraries/XMCLib/src/xmc_eru.c ****                                          const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
 265:../Libraries/XMCLib/src/xmc_eru.c **** {
 668              	 .loc 1 265 0
 669              	 .cfi_startproc
 670              	 
 671              	 
 672              	 
 673 0000 80B4     	 push {r7}
 674              	.LCFI64:
 675              	 .cfi_def_cfa_offset 4
 676              	 .cfi_offset 7,-4
 677 0002 83B0     	 sub sp,sp,#12
 678              	.LCFI65:
 679              	 .cfi_def_cfa_offset 16
 680 0004 00AF     	 add r7,sp,#0
 681              	.LCFI66:
 682              	 .cfi_def_cfa_register 7
 683 0006 7860     	 str r0,[r7,#4]
 684 0008 0B46     	 mov r3,r1
 685 000a FB70     	 strb r3,[r7,#3]
 686 000c 1346     	 mov r3,r2
 687 000e BB70     	 strb r3,[r7,#2]
 266:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 267:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 268:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
 269:../Libraries/XMCLib/src/xmc_eru.c ****               XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));
 270:../Libraries/XMCLib/src/xmc_eru.c **** 
 271:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 688              	 .loc 1 271 0
 689 0010 FA78     	 ldrb r2,[r7,#3]
 690 0012 BB78     	 ldrb r3,[r7,#2]
 691 0014 03F00303 	 and r3,r3,#3
 692 0018 D9B2     	 uxtb r1,r3
 693 001a 7B68     	 ldr r3,[r7,#4]
 694 001c 0832     	 adds r2,r2,#8
 695 001e 01F00301 	 and r1,r1,#3
 696 0022 53F82200 	 ldr r0,[r3,r2,lsl#2]
 697 0026 20F00300 	 bic r0,r0,#3
 698 002a 0143     	 orrs r1,r1,r0
 699 002c 43F82210 	 str r1,[r3,r2,lsl#2]
 272:../Libraries/XMCLib/src/xmc_eru.c **** }
 700              	 .loc 1 272 0
 701 0030 0C37     	 adds r7,r7,#12
 702              	.LCFI67:
 703              	 .cfi_def_cfa_offset 4
 704 0032 BD46     	 mov sp,r7
 705              	.LCFI68:
 706              	 .cfi_def_cfa_register 13
 707              	 
 708 0034 5DF8047B 	 ldr r7,[sp],#4
 709              	.LCFI69:
 710              	 .cfi_restore 7
 711              	 .cfi_def_cfa_offset 0
 712 0038 7047     	 bx lr
 713              	 .cfi_endproc
 714              	.LFE152:
 716 003a 00BF     	 .section .text.XMC_ERU_OGU_DisablePeripheralTrigger,"ax",%progbits
 717              	 .align 2
 718              	 .global XMC_ERU_OGU_DisablePeripheralTrigger
 719              	 .thumb
 720              	 .thumb_func
 722              	XMC_ERU_OGU_DisablePeripheralTrigger:
 723              	.LFB153:
 273:../Libraries/XMCLib/src/xmc_eru.c **** 
 274:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
 275:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
 276:../Libraries/XMCLib/src/xmc_eru.c ****                                           const uint8_t channel)
 277:../Libraries/XMCLib/src/xmc_eru.c **** {
 724              	 .loc 1 277 0
 725              	 .cfi_startproc
 726              	 
 727              	 
 728              	 
 729 0000 80B4     	 push {r7}
 730              	.LCFI70:
 731              	 .cfi_def_cfa_offset 4
 732              	 .cfi_offset 7,-4
 733 0002 83B0     	 sub sp,sp,#12
 734              	.LCFI71:
 735              	 .cfi_def_cfa_offset 16
 736 0004 00AF     	 add r7,sp,#0
 737              	.LCFI72:
 738              	 .cfi_def_cfa_register 7
 739 0006 7860     	 str r0,[r7,#4]
 740 0008 0B46     	 mov r3,r1
 741 000a FB70     	 strb r3,[r7,#3]
 278:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PT
 279:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 280:../Libraries/XMCLib/src/xmc_eru.c **** 
 281:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)0;
 742              	 .loc 1 281 0
 743 000c FA78     	 ldrb r2,[r7,#3]
 744 000e 7B68     	 ldr r3,[r7,#4]
 745 0010 0832     	 adds r2,r2,#8
 746 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 747 0016 21F00301 	 bic r1,r1,#3
 748 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 282:../Libraries/XMCLib/src/xmc_eru.c **** }
 749              	 .loc 1 282 0
 750 001e 0C37     	 adds r7,r7,#12
 751              	.LCFI73:
 752              	 .cfi_def_cfa_offset 4
 753 0020 BD46     	 mov sp,r7
 754              	.LCFI74:
 755              	 .cfi_def_cfa_register 13
 756              	 
 757 0022 5DF8047B 	 ldr r7,[sp],#4
 758              	.LCFI75:
 759              	 .cfi_restore 7
 760              	 .cfi_def_cfa_offset 0
 761 0026 7047     	 bx lr
 762              	 .cfi_endproc
 763              	.LFE153:
 765              	 .section .text.XMC_ERU_OGU_SetServiceRequestMode,"ax",%progbits
 766              	 .align 2
 767              	 .global XMC_ERU_OGU_SetServiceRequestMode
 768              	 .thumb
 769              	 .thumb_func
 771              	XMC_ERU_OGU_SetServiceRequestMode:
 772              	.LFB154:
 283:../Libraries/XMCLib/src/xmc_eru.c **** 
 284:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the gating scheme for service request generation by setting (GP) bit. */
 285:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
 286:../Libraries/XMCLib/src/xmc_eru.c ****                                        const uint8_t channel,
 287:../Libraries/XMCLib/src/xmc_eru.c ****                                        const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
 288:../Libraries/XMCLib/src/xmc_eru.c **** {
 773              	 .loc 1 288 0
 774              	 .cfi_startproc
 775              	 
 776              	 
 777              	 
 778 0000 80B4     	 push {r7}
 779              	.LCFI76:
 780              	 .cfi_def_cfa_offset 4
 781              	 .cfi_offset 7,-4
 782 0002 83B0     	 sub sp,sp,#12
 783              	.LCFI77:
 784              	 .cfi_def_cfa_offset 16
 785 0004 00AF     	 add r7,sp,#0
 786              	.LCFI78:
 787              	 .cfi_def_cfa_register 7
 788 0006 7860     	 str r0,[r7,#4]
 789 0008 0B46     	 mov r3,r1
 790 000a FB70     	 strb r3,[r7,#3]
 791 000c 1346     	 mov r3,r2
 792 000e BB70     	 strb r3,[r7,#2]
 289:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(e
 290:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
 291:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SE
 292:../Libraries/XMCLib/src/xmc_eru.c **** 
 293:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GP = (uint8_t)mode;
 793              	 .loc 1 293 0
 794 0010 FA78     	 ldrb r2,[r7,#3]
 795 0012 BB78     	 ldrb r3,[r7,#2]
 796 0014 03F00303 	 and r3,r3,#3
 797 0018 D9B2     	 uxtb r1,r3
 798 001a 7B68     	 ldr r3,[r7,#4]
 799 001c 0832     	 adds r2,r2,#8
 800 001e 01F00301 	 and r1,r1,#3
 801 0022 0901     	 lsls r1,r1,#4
 802 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 803 0028 20F03000 	 bic r0,r0,#48
 804 002c 0143     	 orrs r1,r1,r0
 805 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 294:../Libraries/XMCLib/src/xmc_eru.c **** 
 295:../Libraries/XMCLib/src/xmc_eru.c **** }
 806              	 .loc 1 295 0
 807 0032 0C37     	 adds r7,r7,#12
 808              	.LCFI79:
 809              	 .cfi_def_cfa_offset 4
 810 0034 BD46     	 mov sp,r7
 811              	.LCFI80:
 812              	 .cfi_def_cfa_register 13
 813              	 
 814 0036 5DF8047B 	 ldr r7,[sp],#4
 815              	.LCFI81:
 816              	 .cfi_restore 7
 817              	 .cfi_def_cfa_offset 0
 818 003a 7047     	 bx lr
 819              	 .cfi_endproc
 820              	.LFE154:
 822              	 .text
 823              	.Letext0:
 824              	 .file 2 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 825              	 .file 3 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 826              	 .file 4 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc_eru.h"
 827              	 .file 5 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/cmsis_gcc.h"
 828              	 .file 6 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eru.c
    {standard input}:20     .text.XMC_ERU_ETL_Init:00000000 $t
    {standard input}:25     .text.XMC_ERU_ETL_Init:00000000 XMC_ERU_ETL_Init
    {standard input}:93     .text.XMC_ERU_OGU_Init:00000000 $t
    {standard input}:98     .text.XMC_ERU_OGU_Init:00000000 XMC_ERU_OGU_Init
    {standard input}:142    .text.XMC_ERU_ETL_SetInput:00000000 $t
    {standard input}:147    .text.XMC_ERU_ETL_SetInput:00000000 XMC_ERU_ETL_SetInput
    {standard input}:213    .text.XMC_ERU_ETL_SetSource:00000000 $t
    {standard input}:218    .text.XMC_ERU_ETL_SetSource:00000000 XMC_ERU_ETL_SetSource
    {standard input}:270    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 $t
    {standard input}:275    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 XMC_ERU_ETL_SetEdgeDetection
    {standard input}:327    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 $t
    {standard input}:332    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 XMC_ERU_ETL_GetEdgeDetection
    {standard input}:378    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 $t
    {standard input}:383    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 XMC_ERU_ETL_SetStatusFlagMode
    {standard input}:435    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 $t
    {standard input}:440    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 XMC_ERU_ETL_EnableOutputTrigger
    {standard input}:499    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 $t
    {standard input}:504    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 XMC_ERU_ETL_DisableOutputTrigger
    {standard input}:548    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 $t
    {standard input}:553    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 XMC_ERU_OGU_EnablePatternDetection
    {standard input}:612    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 $t
    {standard input}:617    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 XMC_ERU_OGU_DisablePatternDetection
    {standard input}:661    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 $t
    {standard input}:666    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 XMC_ERU_OGU_EnablePeripheralTrigger
    {standard input}:717    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 $t
    {standard input}:722    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 XMC_ERU_OGU_DisablePeripheralTrigger
    {standard input}:766    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 $t
    {standard input}:771    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 XMC_ERU_OGU_SetServiceRequestMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_ERU_Enable
