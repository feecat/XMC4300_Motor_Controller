   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pwm_ccu4.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU4_EnableClock,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU4_EnableClock:
  25              	.LFB153:
  26              	 .file 1 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2019-03-30
   4:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  18:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  21:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  39:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  43:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  46:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  49:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  58:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  64:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  67:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-05-20:
  68:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  69:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  70:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  71:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-04-27:
  72:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  73:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  74:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2017-09-15:
  75:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Fix XMC_CCU4_SLICE_SetShadowTransferMode()
  76:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  77:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2019-03-30:
  78:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed XMC_CCU4_StartPrescaler(), XMC_CCU4_StopPrescaler(), XMC_CCU4_EnableMultipleClocks
  79:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed XMC_CCU4_SLICE_SetEvent(), XMC_CCU4_SLICE_ClearEvent() to avoid RMW access
  80:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SetSuspendMode(), XMC_CCU4_SLICE_GetPrescaler()
  81:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  82:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2019-07-29:
  83:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_GetStatus()
  84:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  85:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  86:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  87:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  88:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  89:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  90:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  91:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  92:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  93:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  94:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  95:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  96:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  97:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  98:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  99:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
 102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
 103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
 107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
 112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
 113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
 118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 368:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 369:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 370:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 371:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 372:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 373:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 374:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 375:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 376:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 377:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 378:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 379:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 380:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 381:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 382:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 383:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 384:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 385:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 386:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 387:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 388:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 389:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 390:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 391:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 392:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 393:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 394:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 395:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 396:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 397:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 398:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 399:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 400:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 401:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 402:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 403:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 404:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 405:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 406:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 407:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 408:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 409:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 410:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 411:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 412:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 413:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 414:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 415:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 416:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 417:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 418:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 419:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 420:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 421:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 422:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 423:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 424:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 425:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 426:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 427:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 428:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 429:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 430:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 431:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 432:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 433:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 434:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 435:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 436:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 437:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 438:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 439:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 440:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 441:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 442:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 443:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 444:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 445:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 446:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 447:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 448:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 449:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 450:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 451:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 452:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 453:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 454:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 455:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 456:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 457:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 458:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 459:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 460:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 461:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 462:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 463:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 464:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 465:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 466:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 467:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 468:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 469:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 470:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 471:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 472:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 473:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 474:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 475:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 476:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 477:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 478:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 479:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 480:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 481:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 482:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 483:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 484:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 485:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 486:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 487:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 488:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 489:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 490:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 491:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 492:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 493:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 494:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 495:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 496:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 497:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 498:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 499:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 500:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 501:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 502:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 503:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 504:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 505:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 506:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 507:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 508:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 509:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 510:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 511:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 512:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 513:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 514:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 515:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 516:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 517:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 518:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 519:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 520:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 521:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 522:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 523:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 524:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 525:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 526:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 527:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 528:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 529:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 530:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 531:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 532:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 533:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 534:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 535:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 536:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 537:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 538:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 539:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 540:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 541:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 542:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 543:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 544:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 545:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 546:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 547:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 548:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 549:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 550:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 551:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 552:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 553:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 554:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 555:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 556:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 557:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 558:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 559:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 560:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 561:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 562:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 563:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 564:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 565:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 566:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 567:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 568:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 569:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 570:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 571:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 572:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 573:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 574:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 575:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 576:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 577:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 578:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 579:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 580:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 581:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 582:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 583:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 584:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 585:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 586:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 587:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 588:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 589:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 590:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 591:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 592:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 593:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 594:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 595:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 596:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 597:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 598:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 599:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 600:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 601:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 602:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 603:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 604:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 605:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 606:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 607:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 608:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 609:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 610:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 611:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 612:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects suspend mode
 613:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 614:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SUSPEND_MODE
 615:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 616:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_IGNORE = 0 << CCU4_GCTRL_SUSCFG_Pos, /**< Suspend request ignored. The modu
 617:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_STOPS_INMEDIATELLY = 1 << CCU4_GCTRL_SUSCFG_Pos, /**< Stops all the running
 618:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_SAFE_STOP = 2 << CCU4_GCTRL_SUSCFG_Pos, /**< Stops the block immediately an
 619:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SUSPEND_MODE_WAIT_ROLL_OVER = 3 << CCU4_GCTRL_SUSCFG_Pos /**< Waits for the roll over of
 620:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SUSPEND_MODE_t;
 621:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 622:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 623:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 624:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 slice status bit
 625:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 626:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_STATUS_BIT
 627:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 628:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_STATUS_BIT_PASSIVE = false, /**< Passive */
 629:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_STATUS_BIT_ACTIVE  = true   /**< Active  */
 630:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_STATUS_BIT_t;
 631:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 632:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 633:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 634:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 635:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 636:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 637:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 638:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 639:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 640:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 641:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 642:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 643:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 644:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 645:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 646:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 647:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 648:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 649:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 650:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 651:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 652:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 653:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 654:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 655:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 656:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 657:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 658:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 659:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 660:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 661:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 662:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 663:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 664:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 665:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 666:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 667:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 668:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 669:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 670:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 671:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 672:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 673:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 674:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 675:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 676:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 677:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 678:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 679:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 680:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 681:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 682:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 683:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 684:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 685:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 686:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 687:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 688:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 689:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 690:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 691:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 692:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 693:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 694:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 695:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 696:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 697:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 698:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 699:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 700:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 701:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 702:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 703:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 704:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 705:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 706:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 707:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 708:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 709:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 710:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 711:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 712:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 713:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 714:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 715:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 716:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 717:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 718:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 719:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 720:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 721:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 722:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 723:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 724:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 725:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 726:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 727:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 728:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 729:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 730:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 731:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 732:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 733:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 734:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 735:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 736:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 737:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 738:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 739:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 740:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 741:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 742:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 743:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 744:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 745:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 746:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 747:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 748:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 749:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 750:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 751:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 752:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 753:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 754:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 755:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 756:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 757:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 758:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 759:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 760:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 761:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 762:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 763:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 764:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 765:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 766:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 767:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 768:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 769:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 770:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 771:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 772:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 773:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 774:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 775:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 776:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 777:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 778:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 779:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 780:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 781:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 782:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 783:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 784:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 785:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 786:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 787:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 788:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 789:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 790:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 791:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 792:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 793:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 794:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 795:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 796:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 797:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 798:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 799:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 800:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 801:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 802:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 803:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 804:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 805:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 806:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 807:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 808:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 809:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 810:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 811:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 812:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 813:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 814:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 815:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 816:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 817:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 818:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 819:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 820:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 821:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 822:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 823:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 824:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 825:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 826:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 827:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 828:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 829:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 830:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 831:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 832:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 833:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 834:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 835:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 836:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 837:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 838:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 839:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 840:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 841:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 842:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 843:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 844:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 845:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 846:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 847:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 848:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 849:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 850:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 851:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 852:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 853:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 854:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 855:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 856:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 857:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 858:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 859:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 860:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 861:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 862:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 863:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 864:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 865:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 866:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 867:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 868:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 869:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 870:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 871:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 872:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 873:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 874:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 875:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 876:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 877:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 878:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 879:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 880:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 881:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 882:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 883:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 884:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 885:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 886:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 887:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 888:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 889:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 890:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 891:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 892:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 893:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 894:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 895:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 896:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 897:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 898:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 899:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 900:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 901:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 902:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 903:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 904:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 905:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 906:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 907:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 908:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 909:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 910:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 911:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 912:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 913:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 914:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 915:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS = (uint32_t) CCU4_GIDLS_CPRB_Msk;
 916:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 917:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 918:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 919:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 920:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 921:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 922:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 923:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 924:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 925:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 926:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 927:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 928:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 929:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 930:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 931:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 932:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 933:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 934:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 935:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 936:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 937:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 938:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 939:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 940:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 941:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 942:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 943:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 944:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 945:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 946:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 947:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 948:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 949:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 950:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 951:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 952:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 953:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 954:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 955:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 956:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 957:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 958:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 959:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = (uint32_t) clock_mask;
 960:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 961:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 962:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 963:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 964:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 965:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 966:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 967:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 968:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 969:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 970:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 971:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 972:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 973:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 974:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 975:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 976:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 977:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 978:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 979:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  27              	 .loc 1 979 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 980:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 981:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 982:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 983:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC = ((uint32_t) 1) << slice_number;
  45              	 .loc 1 983 0
  46 000c FB78     	 ldrb r3,[r7,#3]
  47 000e 0122     	 movs r2,#1
  48 0010 9A40     	 lsls r2,r2,r3
  49 0012 7B68     	 ldr r3,[r7,#4]
  50 0014 DA60     	 str r2,[r3,#12]
 984:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  51              	 .loc 1 984 0
  52 0016 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 0018 BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001a 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 001e 7047     	 bx lr
  64              	 .cfi_endproc
  65              	.LFE153:
  67              	 .section .text.XMC_CCU4_SLICE_EnableTrap,"ax",%progbits
  68              	 .align 2
  69              	 .thumb
  70              	 .thumb_func
  72              	XMC_CCU4_SLICE_EnableTrap:
  73              	.LFB157:
 985:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 986:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 987:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 988:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 989:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 990:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 991:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 992:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 993:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 994:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 995:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 996:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 997:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 998:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 999:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1000:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1001:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
1002:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1003:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
1004:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1005:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
1006:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
1007:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1008:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS = ((uint32_t) 1) << slice_number;
1009:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1010:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1011:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1012:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU8 module
1013:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode   Selects suspend mode
1014:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1015:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1016:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1017:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1018:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the entering in suspend mode for all the CCU8 slices.
1019:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1020:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1021:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
1022:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1023:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SetSuspendMode(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SUSPEN
1024:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1025:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
1026:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCTRL = (module->GCTRL & (uint32_t)~CCU4_GCTRL_SUSCFG_Msk) | mode;
1027:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1028:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1029:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1030:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1031:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
1032:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1033:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1034:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1035:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1036:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
1037:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
1038:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
1039:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
1040:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
1041:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1042:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1043:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
1044:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1045:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
1046:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
1047:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1048:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1049:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1050:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
1051:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1052:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1053:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1054:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1055:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1056:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1057:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1058:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1059:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1060:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1061:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1062:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1063:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1064:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1065:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1066:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1067:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1068:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1069:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1070:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1071:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1072:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1073:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1074:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1075:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1076:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1077:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1078:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1079:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1080:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1081:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1082:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1083:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1084:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1085:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1086:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1087:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1088:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1089:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1090:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1091:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1092:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1093:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1094:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1095:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1096:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1097:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1098:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1099:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1368:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1369:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1370:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1371:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1372:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1373:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1374:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1375:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1376:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1377:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1378:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1379:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1380:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1381:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1382:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1383:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1384:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1385:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1386:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1387:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1388:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1389:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1390:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1391:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1392:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1393:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1394:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1395:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1396:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1397:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1398:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1399:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1400:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1401:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1402:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1403:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1404:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1405:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1406:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1407:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1408:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1409:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1410:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1411:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
  74              	 .loc 1 1411 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
1412:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1413:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
  90              	 .loc 1 1413 0
  91 0008 7B68     	 ldr r3,[r7,#4]
  92 000a 5B69     	 ldr r3,[r3,#20]
  93 000c 43F40032 	 orr r2,r3,#131072
  94 0010 7B68     	 ldr r3,[r7,#4]
  95 0012 5A61     	 str r2,[r3,#20]
1414:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
  96              	 .loc 1 1414 0
  97 0014 0C37     	 adds r7,r7,#12
  98              	.LCFI9:
  99              	 .cfi_def_cfa_offset 4
 100 0016 BD46     	 mov sp,r7
 101              	.LCFI10:
 102              	 .cfi_def_cfa_register 13
 103              	 
 104 0018 5DF8047B 	 ldr r7,[sp],#4
 105              	.LCFI11:
 106              	 .cfi_restore 7
 107              	 .cfi_def_cfa_offset 0
 108 001c 7047     	 bx lr
 109              	 .cfi_endproc
 110              	.LFE157:
 112 001e 00BF     	 .section .text.XMC_CCU4_SLICE_IsTimerRunning,"ax",%progbits
 113              	 .align 2
 114              	 .thumb
 115              	 .thumb_func
 117              	XMC_CCU4_SLICE_IsTimerRunning:
 118              	.LFB159:
1415:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1416:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1417:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1418:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1419:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1420:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1421:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1422:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1423:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1424:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1425:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1426:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1427:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1428:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1429:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1430:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1431:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1432:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1433:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1434:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1435:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1436:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1437:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1438:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1439:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1440:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1441:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1442:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1443:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1444:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1445:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1446:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1447:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1448:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 119              	 .loc 1 1448 0
 120              	 .cfi_startproc
 121              	 
 122              	 
 123              	 
 124 0000 80B4     	 push {r7}
 125              	.LCFI12:
 126              	 .cfi_def_cfa_offset 4
 127              	 .cfi_offset 7,-4
 128 0002 83B0     	 sub sp,sp,#12
 129              	.LCFI13:
 130              	 .cfi_def_cfa_offset 16
 131 0004 00AF     	 add r7,sp,#0
 132              	.LCFI14:
 133              	 .cfi_def_cfa_register 7
 134 0006 7860     	 str r0,[r7,#4]
1449:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1450:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 135              	 .loc 1 1450 0
 136 0008 7B68     	 ldr r3,[r7,#4]
 137 000a 9B68     	 ldr r3,[r3,#8]
 138 000c 03F00103 	 and r3,r3,#1
 139 0010 002B     	 cmp r3,#0
 140 0012 14BF     	 ite ne
 141 0014 0123     	 movne r3,#1
 142 0016 0023     	 moveq r3,#0
 143 0018 DBB2     	 uxtb r3,r3
1451:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 144              	 .loc 1 1451 0
 145 001a 1846     	 mov r0,r3
 146 001c 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 001e BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 0020 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 0024 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE159:
 161 0026 00BF     	 .section .text.XMC_CCU4_SLICE_StartTimer,"ax",%progbits
 162              	 .align 2
 163              	 .thumb
 164              	 .thumb_func
 166              	XMC_CCU4_SLICE_StartTimer:
 167              	.LFB161:
1452:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1453:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1454:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1455:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1456:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1457:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1458:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1459:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1460:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1461:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1462:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1463:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1464:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1465:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1466:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1467:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1468:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1469:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1470:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1471:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1472:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1473:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1474:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1475:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1476:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1477:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1478:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1479:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1480:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1481:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1482:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1483:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1484:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1485:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1486:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 168              	 .loc 1 1486 0
 169              	 .cfi_startproc
 170              	 
 171              	 
 172              	 
 173 0000 80B4     	 push {r7}
 174              	.LCFI18:
 175              	 .cfi_def_cfa_offset 4
 176              	 .cfi_offset 7,-4
 177 0002 83B0     	 sub sp,sp,#12
 178              	.LCFI19:
 179              	 .cfi_def_cfa_offset 16
 180 0004 00AF     	 add r7,sp,#0
 181              	.LCFI20:
 182              	 .cfi_def_cfa_register 7
 183 0006 7860     	 str r0,[r7,#4]
1487:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1488:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 184              	 .loc 1 1488 0
 185 0008 7B68     	 ldr r3,[r7,#4]
 186 000a 0122     	 movs r2,#1
 187 000c DA60     	 str r2,[r3,#12]
1489:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 188              	 .loc 1 1489 0
 189 000e 0C37     	 adds r7,r7,#12
 190              	.LCFI21:
 191              	 .cfi_def_cfa_offset 4
 192 0010 BD46     	 mov sp,r7
 193              	.LCFI22:
 194              	 .cfi_def_cfa_register 13
 195              	 
 196 0012 5DF8047B 	 ldr r7,[sp],#4
 197              	.LCFI23:
 198              	 .cfi_restore 7
 199              	 .cfi_def_cfa_offset 0
 200 0016 7047     	 bx lr
 201              	 .cfi_endproc
 202              	.LFE161:
 204              	 .section .text.XMC_CCU4_SLICE_StopTimer,"ax",%progbits
 205              	 .align 2
 206              	 .thumb
 207              	 .thumb_func
 209              	XMC_CCU4_SLICE_StopTimer:
 210              	.LFB162:
1490:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1491:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1492:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1493:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1494:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1495:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1496:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1497:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1498:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1499:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1500:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1501:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1502:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1503:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1504:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 211              	 .loc 1 1504 0
 212              	 .cfi_startproc
 213              	 
 214              	 
 215              	 
 216 0000 80B4     	 push {r7}
 217              	.LCFI24:
 218              	 .cfi_def_cfa_offset 4
 219              	 .cfi_offset 7,-4
 220 0002 83B0     	 sub sp,sp,#12
 221              	.LCFI25:
 222              	 .cfi_def_cfa_offset 16
 223 0004 00AF     	 add r7,sp,#0
 224              	.LCFI26:
 225              	 .cfi_def_cfa_register 7
 226 0006 7860     	 str r0,[r7,#4]
1505:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1506:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 227              	 .loc 1 1506 0
 228 0008 7B68     	 ldr r3,[r7,#4]
 229 000a 0122     	 movs r2,#1
 230 000c 1A61     	 str r2,[r3,#16]
1507:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 231              	 .loc 1 1507 0
 232 000e 0C37     	 adds r7,r7,#12
 233              	.LCFI27:
 234              	 .cfi_def_cfa_offset 4
 235 0010 BD46     	 mov sp,r7
 236              	.LCFI28:
 237              	 .cfi_def_cfa_register 13
 238              	 
 239 0012 5DF8047B 	 ldr r7,[sp],#4
 240              	.LCFI29:
 241              	 .cfi_restore 7
 242              	 .cfi_def_cfa_offset 0
 243 0016 7047     	 bx lr
 244              	 .cfi_endproc
 245              	.LFE162:
 247              	 .section .text.XMC_CCU4_SLICE_ClearTimer,"ax",%progbits
 248              	 .align 2
 249              	 .thumb
 250              	 .thumb_func
 252              	XMC_CCU4_SLICE_ClearTimer:
 253              	.LFB163:
1508:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1509:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1510:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1511:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1512:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1513:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1514:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1515:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1516:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1517:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1518:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1519:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1520:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1521:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1522:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1523:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 254              	 .loc 1 1523 0
 255              	 .cfi_startproc
 256              	 
 257              	 
 258              	 
 259 0000 80B4     	 push {r7}
 260              	.LCFI30:
 261              	 .cfi_def_cfa_offset 4
 262              	 .cfi_offset 7,-4
 263 0002 83B0     	 sub sp,sp,#12
 264              	.LCFI31:
 265              	 .cfi_def_cfa_offset 16
 266 0004 00AF     	 add r7,sp,#0
 267              	.LCFI32:
 268              	 .cfi_def_cfa_register 7
 269 0006 7860     	 str r0,[r7,#4]
1524:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1525:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 270              	 .loc 1 1525 0
 271 0008 7B68     	 ldr r3,[r7,#4]
 272 000a 0222     	 movs r2,#2
 273 000c 1A61     	 str r2,[r3,#16]
1526:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 274              	 .loc 1 1526 0
 275 000e 0C37     	 adds r7,r7,#12
 276              	.LCFI33:
 277              	 .cfi_def_cfa_offset 4
 278 0010 BD46     	 mov sp,r7
 279              	.LCFI34:
 280              	 .cfi_def_cfa_register 13
 281              	 
 282 0012 5DF8047B 	 ldr r7,[sp],#4
 283              	.LCFI35:
 284              	 .cfi_restore 7
 285              	 .cfi_def_cfa_offset 0
 286 0016 7047     	 bx lr
 287              	 .cfi_endproc
 288              	.LFE163:
 290              	 .section .text.XMC_CCU4_SLICE_SetTimerPeriodMatch,"ax",%progbits
 291              	 .align 2
 292              	 .thumb
 293              	 .thumb_func
 295              	XMC_CCU4_SLICE_SetTimerPeriodMatch:
 296              	.LFB168:
1527:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1528:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1529:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1530:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1531:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1532:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1533:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1534:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1535:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1536:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1537:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1538:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1539:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1540:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1541:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1542:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1543:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1544:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1545:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1546:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1547:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1548:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1549:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1550:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1551:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1552:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1553:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1554:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1555:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1556:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1557:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1558:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1559:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1560:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1561:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1562:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1563:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1564:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1565:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1566:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1567:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1568:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1569:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1570:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1571:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1572:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1573:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1574:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1575:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1576:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1577:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1578:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1579:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1580:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1581:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1582:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1583:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1584:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1585:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1586:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1587:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1588:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1589:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1590:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1591:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1592:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1593:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1594:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1595:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1596:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1597:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1598:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1599:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1600:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1601:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1602:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1603:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1604:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1605:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1606:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1607:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1608:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1609:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1610:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1611:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1612:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1613:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1614:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1615:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1616:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1617:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1618:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1619:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1620:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1621:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1622:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1623:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1624:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1625:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1626:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1627:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1628:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1629:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1630:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1631:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1632:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1633:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1634:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1635:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1636:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1637:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1638:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1639:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1640:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1641:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1642:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1643:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1644:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1645:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1646:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1647:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1648:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1649:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1650:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1651:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1652:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1653:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1654:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1655:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1656:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1657:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1658:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 297              	 .loc 1 1658 0
 298              	 .cfi_startproc
 299              	 
 300              	 
 301              	 
 302 0000 80B4     	 push {r7}
 303              	.LCFI36:
 304              	 .cfi_def_cfa_offset 4
 305              	 .cfi_offset 7,-4
 306 0002 83B0     	 sub sp,sp,#12
 307              	.LCFI37:
 308              	 .cfi_def_cfa_offset 16
 309 0004 00AF     	 add r7,sp,#0
 310              	.LCFI38:
 311              	 .cfi_def_cfa_register 7
 312 0006 7860     	 str r0,[r7,#4]
 313 0008 0B46     	 mov r3,r1
 314 000a 7B80     	 strh r3,[r7,#2]
1659:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1660:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
 315              	 .loc 1 1660 0
 316 000c 7A88     	 ldrh r2,[r7,#2]
 317 000e 7B68     	 ldr r3,[r7,#4]
 318 0010 5A63     	 str r2,[r3,#52]
1661:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 319              	 .loc 1 1661 0
 320 0012 0C37     	 adds r7,r7,#12
 321              	.LCFI39:
 322              	 .cfi_def_cfa_offset 4
 323 0014 BD46     	 mov sp,r7
 324              	.LCFI40:
 325              	 .cfi_def_cfa_register 13
 326              	 
 327 0016 5DF8047B 	 ldr r7,[sp],#4
 328              	.LCFI41:
 329              	 .cfi_restore 7
 330              	 .cfi_def_cfa_offset 0
 331 001a 7047     	 bx lr
 332              	 .cfi_endproc
 333              	.LFE168:
 335              	 .section .text.XMC_CCU4_SLICE_GetTimerPeriodMatch,"ax",%progbits
 336              	 .align 2
 337              	 .thumb
 338              	 .thumb_func
 340              	XMC_CCU4_SLICE_GetTimerPeriodMatch:
 341              	.LFB169:
1662:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1663:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1664:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1665:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1666:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1667:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1668:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1669:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1670:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1671:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1672:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1673:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1674:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1675:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1676:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1677:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1678:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1679:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1680:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1681:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1682:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1683:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 342              	 .loc 1 1683 0
 343              	 .cfi_startproc
 344              	 
 345              	 
 346              	 
 347 0000 80B4     	 push {r7}
 348              	.LCFI42:
 349              	 .cfi_def_cfa_offset 4
 350              	 .cfi_offset 7,-4
 351 0002 83B0     	 sub sp,sp,#12
 352              	.LCFI43:
 353              	 .cfi_def_cfa_offset 16
 354 0004 00AF     	 add r7,sp,#0
 355              	.LCFI44:
 356              	 .cfi_def_cfa_register 7
 357 0006 7860     	 str r0,[r7,#4]
1684:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1685:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
 358              	 .loc 1 1685 0
 359 0008 7B68     	 ldr r3,[r7,#4]
 360 000a 1B6B     	 ldr r3,[r3,#48]
 361 000c 9BB2     	 uxth r3,r3
1686:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 362              	 .loc 1 1686 0
 363 000e 1846     	 mov r0,r3
 364 0010 0C37     	 adds r7,r7,#12
 365              	.LCFI45:
 366              	 .cfi_def_cfa_offset 4
 367 0012 BD46     	 mov sp,r7
 368              	.LCFI46:
 369              	 .cfi_def_cfa_register 13
 370              	 
 371 0014 5DF8047B 	 ldr r7,[sp],#4
 372              	.LCFI47:
 373              	 .cfi_restore 7
 374              	 .cfi_def_cfa_offset 0
 375 0018 7047     	 bx lr
 376              	 .cfi_endproc
 377              	.LFE169:
 379 001a 00BF     	 .section .text.XMC_CCU4_SLICE_SetTimerCompareMatch,"ax",%progbits
 380              	 .align 2
 381              	 .thumb
 382              	 .thumb_func
 384              	XMC_CCU4_SLICE_SetTimerCompareMatch:
 385              	.LFB170:
1687:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1688:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1689:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1690:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1691:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1692:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1693:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1694:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1695:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1696:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1697:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1698:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1699:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1700:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1701:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1702:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1703:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1704:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1705:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1706:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 386              	 .loc 1 1706 0
 387              	 .cfi_startproc
 388              	 
 389              	 
 390              	 
 391 0000 80B4     	 push {r7}
 392              	.LCFI48:
 393              	 .cfi_def_cfa_offset 4
 394              	 .cfi_offset 7,-4
 395 0002 83B0     	 sub sp,sp,#12
 396              	.LCFI49:
 397              	 .cfi_def_cfa_offset 16
 398 0004 00AF     	 add r7,sp,#0
 399              	.LCFI50:
 400              	 .cfi_def_cfa_register 7
 401 0006 7860     	 str r0,[r7,#4]
 402 0008 0B46     	 mov r3,r1
 403 000a 7B80     	 strh r3,[r7,#2]
1707:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1708:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
 404              	 .loc 1 1708 0
 405 000c 7A88     	 ldrh r2,[r7,#2]
 406 000e 7B68     	 ldr r3,[r7,#4]
 407 0010 DA63     	 str r2,[r3,#60]
1709:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 408              	 .loc 1 1709 0
 409 0012 0C37     	 adds r7,r7,#12
 410              	.LCFI51:
 411              	 .cfi_def_cfa_offset 4
 412 0014 BD46     	 mov sp,r7
 413              	.LCFI52:
 414              	 .cfi_def_cfa_register 13
 415              	 
 416 0016 5DF8047B 	 ldr r7,[sp],#4
 417              	.LCFI53:
 418              	 .cfi_restore 7
 419              	 .cfi_def_cfa_offset 0
 420 001a 7047     	 bx lr
 421              	 .cfi_endproc
 422              	.LFE170:
 424              	 .section .text.XMC_CCU4_EnableShadowTransfer,"ax",%progbits
 425              	 .align 2
 426              	 .thumb
 427              	 .thumb_func
 429              	XMC_CCU4_EnableShadowTransfer:
 430              	.LFB172:
1710:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1711:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1712:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1713:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1714:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1715:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1716:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1717:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1718:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1719:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1720:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1721:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1722:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1723:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1724:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1725:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1726:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1727:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1728:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1729:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1730:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1731:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1732:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1733:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1734:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1735:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1736:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1737:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1738:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1739:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1740:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1741:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1742:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1743:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1744:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1745:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1746:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1747:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1748:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1749:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1750:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1751:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1752:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1753:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1754:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1755:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1756:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1757:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1758:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1759:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1760:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 431              	 .loc 1 1760 0
 432              	 .cfi_startproc
 433              	 
 434              	 
 435              	 
 436 0000 80B4     	 push {r7}
 437              	.LCFI54:
 438              	 .cfi_def_cfa_offset 4
 439              	 .cfi_offset 7,-4
 440 0002 83B0     	 sub sp,sp,#12
 441              	.LCFI55:
 442              	 .cfi_def_cfa_offset 16
 443 0004 00AF     	 add r7,sp,#0
 444              	.LCFI56:
 445              	 .cfi_def_cfa_register 7
 446 0006 7860     	 str r0,[r7,#4]
 447 0008 3960     	 str r1,[r7]
1761:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1762:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
 448              	 .loc 1 1762 0
 449 000a 7B68     	 ldr r3,[r7,#4]
 450 000c 3A68     	 ldr r2,[r7]
 451 000e 1A61     	 str r2,[r3,#16]
1763:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 452              	 .loc 1 1763 0
 453 0010 0C37     	 adds r7,r7,#12
 454              	.LCFI57:
 455              	 .cfi_def_cfa_offset 4
 456 0012 BD46     	 mov sp,r7
 457              	.LCFI58:
 458              	 .cfi_def_cfa_register 13
 459              	 
 460 0014 5DF8047B 	 ldr r7,[sp],#4
 461              	.LCFI59:
 462              	 .cfi_restore 7
 463              	 .cfi_def_cfa_offset 0
 464 0018 7047     	 bx lr
 465              	 .cfi_endproc
 466              	.LFE172:
 468 001a 00BF     	 .section .text.XMC_CCU4_SLICE_GetTimerValue,"ax",%progbits
 469              	 .align 2
 470              	 .thumb
 471              	 .thumb_func
 473              	XMC_CCU4_SLICE_GetTimerValue:
 474              	.LFB173:
1764:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1765:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1766:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1767:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1768:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer value
1769:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1770:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1771:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1772:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest timer value, from CC4yTIMER register.\n\n
1773:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1774:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1775:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerValue().
1776:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1777:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
1778:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 475              	 .loc 1 1778 0
 476              	 .cfi_startproc
 477              	 
 478              	 
 479              	 
 480 0000 80B4     	 push {r7}
 481              	.LCFI60:
 482              	 .cfi_def_cfa_offset 4
 483              	 .cfi_offset 7,-4
 484 0002 83B0     	 sub sp,sp,#12
 485              	.LCFI61:
 486              	 .cfi_def_cfa_offset 16
 487 0004 00AF     	 add r7,sp,#0
 488              	.LCFI62:
 489              	 .cfi_def_cfa_register 7
 490 0006 7860     	 str r0,[r7,#4]
1779:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1780:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->TIMER);
 491              	 .loc 1 1780 0
 492 0008 7B68     	 ldr r3,[r7,#4]
 493 000a 1B6F     	 ldr r3,[r3,#112]
 494 000c 9BB2     	 uxth r3,r3
1781:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 495              	 .loc 1 1781 0
 496 000e 1846     	 mov r0,r3
 497 0010 0C37     	 adds r7,r7,#12
 498              	.LCFI63:
 499              	 .cfi_def_cfa_offset 4
 500 0012 BD46     	 mov sp,r7
 501              	.LCFI64:
 502              	 .cfi_def_cfa_register 13
 503              	 
 504 0014 5DF8047B 	 ldr r7,[sp],#4
 505              	.LCFI65:
 506              	 .cfi_restore 7
 507              	 .cfi_def_cfa_offset 0
 508 0018 7047     	 bx lr
 509              	 .cfi_endproc
 510              	.LFE173:
 512 001a 00BF     	 .section .text.XMC_CCU4_SLICE_EnableEvent,"ax",%progbits
 513              	 .align 2
 514              	 .thumb
 515              	 .thumb_func
 517              	XMC_CCU4_SLICE_EnableEvent:
 518              	.LFB183:
1782:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1783:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1784:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
1785:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Range: [0x0 to 0xFFFF]
1786:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1787:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1788:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1789:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1790:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Loads a new timer value, by setting CC4yTIMER register.\n\n
1791:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1792:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1793:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Request to load is ignored if the timer is running.
1794:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1795:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1796:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerValue().
1797:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1798:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t tim
1799:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1800:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1801:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TIMER = (uint32_t) timer_val;
1802:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1803:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1804:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1805:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_dither Boolean instruction on dithering of period match
1806:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param duty_dither Boolean instruction on dithering of compare match
1807:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param spread Dither compare value
1808:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1809:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1810:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1811:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1812:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC4yTC.DITHE and CC4yDITS bits
1813:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
1814:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
1815:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
1816:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
1817:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
1818:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetDitherCompareValue().
1819:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1820:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1821:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After this API call, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask
1822:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to transfer the dither value.
1823:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1824:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1825:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableDithering().
1826:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1827:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1828:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool period_dither,
1829:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool duty_dither,
1830:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const uint8_t spread);
1831:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1832:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1833:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1834:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1835:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1836:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1837:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1838:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC4yTC.DITHE bits.\n\n
1839:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This disables the Dither mode that was set in XMC_CCU4_SLICE_EnableDithering().
1840:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will not clear the dither compare value.
1841:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1842:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1843:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1844:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1845:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableDithering(XMC_CCU4_SLICE_t *const slice)
1846:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1847:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1848:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
1849:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1850:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1851:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1852:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1853:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1854:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1855:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1856:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1857:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the floating prescaler, by setting CC4yTC.FPE bit.\n\n
1858:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
1859:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
1860:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
1861:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1862:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1863:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue()<BR> XMC_CCU4_SLICE_DisableFloatingPrescaler()
1864:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1865:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1866:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1867:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1868:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1869:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_FPE_Msk;
1870:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1871:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1872:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1873:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1874:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1875:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1876:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1877:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1878:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the floating prescaler, by clearing CC4yTC.FPE bit.\n\n
1879:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the prescaler to the normal mode.
1880:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler that would be applied is the value present in CC4yPSC.
1881:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1882:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1883:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableFloatingPrescaler().
1884:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1885:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1886:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1887:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1888:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_FPE_Msk);
1889:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1890:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1891:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1892:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1893:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param comp_val Dither compare value
1894:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1895:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1896:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1897:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1898:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1899:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Sets the dither spread/compare value, by setting CC4yDITS.DCVS bits.\n\n
1900:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
1901:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
1902:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU4_EnableShadowTransfer()
1903:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * called with appropriate mask.
1904:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1905:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1906:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1907:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1908:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint
1909:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1910:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
1911:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->DITS = comp_val;
1912:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1913:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1914:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1915:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1916:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param div_val Prescaler divider value. Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t
1917:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1918:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1919:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1920:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1921:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1922:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the slice specific prescaler divider, by configuring the CC4yPSC and CC4yFPC registers.
1923:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider may only be programmed after the prescaler run bit has been cleared
1924:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by calling XMC_CCU4_StopPrescaler().
1925:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1926:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1927:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue().
1928:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1929:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t di
1930:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1931:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1932:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1933:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1934:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_PRESCALER_t Prescaler divider value.<BR>
1935:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1936:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1937:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns current prescaler value.\n\n
1938:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Used to detrmine the clock frequency of the CCU8 slice XMC_SCU_CLOCK_GetCcuClockFrequency() / XM
1939:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1940:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1941:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1942:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1943:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_PRESCALER_t XMC_CCU4_SLICE_GetPrescaler(XMC_CCU4_SLICE_t *const slic
1944:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1945:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1946:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1947:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (XMC_CCU4_SLICE_PRESCALER_t)slice->PSC;
1948:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1949:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1950:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1951:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1952:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param cmp_val Prescaler divider compare value
1953:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1954:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1955:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1956:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1957:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1958:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the slice specific prescaler divider compare value, by configuring CC4yFPCS register.\n
1959:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is applicable only in floating mode of operation. The prescaler divider starts
1960:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * value and increments to the compare value steadily upon every period match. Once prescaler divid
1961:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * equals the prescaler divider compare value, the value in the former resets back to the PVAL (fro
1962:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the value, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask.
1963:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1964:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1965:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1966:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1967:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue(XMC_CCU4_SLICE_t *const slice,
1968:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                      const uint8_t cmp_val)
1969:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1970:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue:Invalid Slice Pointer", XMC_CCU4_IsVa
1971:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   /*  write to the shadow register */
1972:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->FPCS = (uint32_t) cmp_val;
1973:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1974:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1975:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1976:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1977:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1978:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1979:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1980:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the multichannel mode, by setting CC4yTC.MCME bit.<BR>\n
1981:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The output state of the Timer slices can be controlled in parallel by a single input signal.
1982:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature in motor control applications where the PWM output of multiple sli
1983:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be gated and ungated by multi-channel gating inputs connected to the slices. A peripheral like P
1984:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * motor knows exactly which of the power drive switches are to be turned on and off at any instant
1985:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a gating bus (known as multi-channel inputs) control which of the slices output stays gated/unga
1986:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1987:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1988:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultiChannelMode()<BR> XMC_CCU4_SetMultiChannelShadowTransferMode().
1989:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1990:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableMultiChannelMode(XMC_CCU4_SLICE_t *const slice)
1991:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1992:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableMultiChannelMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(s
1993:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_MCME_Msk;
1994:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1995:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1996:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1997:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1998:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1999:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2000:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2001:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2002:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the multichannel mode, by clearing CC4yTC.MCME bit.<BR>\n
2003:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the slices to the normal operation mode.
2004:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2005:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2006:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableMultiChannelMode().
2007:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2008:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableMultiChannelMode(XMC_CCU4_SLICE_t *const slice)
2009:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2010:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableMultiChannelMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
2011:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_MCME_Msk);
2012:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2013:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2014:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2015:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
2016:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_mode_msk Slices for which the configuration has to be applied.
2017:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Use ::XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t enum items to create a mask
2018:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             using a bit wise OR operation.
2019:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2020:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2021:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2022:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2023:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the Multi-channel shadow transfer request trigger signal either by software or hardware 
2024:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GCTRL.MSE0, GCTRL.MSE1, GCTRL.MSE2, and GCTRL.MSE3 based on the mask.\n\n
2025:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The shadow transfer would take place either if it was requested by software or by the CCU4x.MCSS
2026:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2027:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2028:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
2029:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** */
2030:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t sli
2031:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2032:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2033:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2034:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param reg_num The capture register from which the captured value is to be retrieved
2035:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                Range: [0,3]
2036:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2037:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t  Returns the Capture register value.
2038:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *              Range: [0 to 0x1FFFFF]
2039:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2040:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2041:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer value which has been captured in the Capture registers, by reading CC4yCV[\b reg
2042:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The signal whose timing characteristics are to be measured must be mapped to an event which in t
2043:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to the capture function. Based on the capture criteria, the timer values are captured into captu
2044:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * characteristics of the input signal may then be derived/inferred from the captured values. The f
2045:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to find out if there is a new captured value present.
2046:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2047:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2048:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetLastCapturedTimerValue().
2049:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2050:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t 
2051:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2052:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2053:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2054:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set  The capture register set, which must be evaluated
2055:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param val_ptr Out Parameter of the API.Stores the captured timer value into this out parameter.
2056:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2057:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     ::XMC_CCU4_STATUS_t Returns XMC_CCU4_STATUS_OK if there was new value present in the capture
2058:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   returns XMC_CCU4_STATUS_ERROR if there was no new value present in the capture
2059:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2060:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest captured timer value, by reading CC4yCV registers.\n\n
2062:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieve the timer value last stored by the slice. When separate capture events are used,
2063:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * users must specify the capture set to evaluate. If single capture event mode is used, all 4 capt
2064:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * evaluated.\n
2065:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The lowest register is evaluated first followed by the next higher ordered register and this con
2066:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * capture registers have been evaluated.
2067:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2068:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2069:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetCaptureRegisterValue().
2070:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2071:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
2072:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                            const XMC_CCU4_SLICE_CAP_REG_SET_t set,
2073:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                            uint32_t *val_ptr);
2074:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2075:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2076:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2077:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2078:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2079:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2080:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2081:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2082:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the generation of an interrupt pulse for the event, by configuring CC4yINTE register.\n\
2083:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2084:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API merely enables the event. Binding with SR is perform
2085:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2086:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2087:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_
2088:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2089:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2090:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
2091:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                 const XMC_CCU4_SLICE_IRQ_ID_t event)
2092:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 519              	 .loc 1 2092 0
 520              	 .cfi_startproc
 521              	 
 522              	 
 523              	 
 524 0000 80B4     	 push {r7}
 525              	.LCFI66:
 526              	 .cfi_def_cfa_offset 4
 527              	 .cfi_offset 7,-4
 528 0002 83B0     	 sub sp,sp,#12
 529              	.LCFI67:
 530              	 .cfi_def_cfa_offset 16
 531 0004 00AF     	 add r7,sp,#0
 532              	.LCFI68:
 533              	 .cfi_def_cfa_register 7
 534 0006 7860     	 str r0,[r7,#4]
 535 0008 0B46     	 mov r3,r1
 536 000a FB70     	 strb r3,[r7,#3]
2093:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2094:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2095:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 537              	 .loc 1 2095 0
 538 000c 7B68     	 ldr r3,[r7,#4]
 539 000e D3F8A420 	 ldr r2,[r3,#164]
 540 0012 FB78     	 ldrb r3,[r7,#3]
 541 0014 0121     	 movs r1,#1
 542 0016 01FA03F3 	 lsl r3,r1,r3
 543 001a 1A43     	 orrs r2,r2,r3
 544 001c 7B68     	 ldr r3,[r7,#4]
 545 001e C3F8A420 	 str r2,[r3,#164]
2096:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 546              	 .loc 1 2096 0
 547 0022 0C37     	 adds r7,r7,#12
 548              	.LCFI69:
 549              	 .cfi_def_cfa_offset 4
 550 0024 BD46     	 mov sp,r7
 551              	.LCFI70:
 552              	 .cfi_def_cfa_register 13
 553              	 
 554 0026 5DF8047B 	 ldr r7,[sp],#4
 555              	.LCFI71:
 556              	 .cfi_restore 7
 557              	 .cfi_def_cfa_offset 0
 558 002a 7047     	 bx lr
 559              	 .cfi_endproc
 560              	.LFE183:
 562              	 .section .text.XMC_CCU4_SLICE_ClearEvent,"ax",%progbits
 563              	 .align 2
 564              	 .thumb
 565              	 .thumb_func
 567              	XMC_CCU4_SLICE_ClearEvent:
 568              	.LFB188:
2097:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2098:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2099:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param intr_mask Event mask such that multiple events can be enabled.
2101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Use ::XMC_CCU4_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  using a bit wise OR operation.
2103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the generation of an interrupt pulse for the required events, by configuring CC4yINTE re
2108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API merely enables the events. Binding with SR is perfor
2110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_DisableEv
2113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableMultipleEvents(XMC_CCU4_SLICE_t *const slice, const uint1
2116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableMultipleEvents:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
2118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE |= (uint32_t)intr_mask;
2119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the generation of an interrupt pulse for the event, by clearing CC4yINTE register.\n\n
2129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Prevents the event from being asserted
2130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableEvent(XMC_CCU4_SLICE_t *const slice,
2136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                  const XMC_CCU4_SLICE_IRQ_ID_t event)
2137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event))
2140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE &= ~(((uint32_t) 1) << ((uint32_t) event));
2141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mask Event mask such that multiple events can be enabled.
2146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Use ::XMC_CCU4_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             using a bit wise OR operation.
2148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Disables the generation of an interrupt pulse for the required events, by clearing CC4yINTE reg
2153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prevents selected events of the slice from being asserted.
2154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableEvent().
2158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableMultipleEvents(XMC_CCU4_SLICE_t *const slice, const uint
2160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableMultipleEvents:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
2162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE &= ~((uint32_t) mask);
2163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Manually asserts the requested event, by setting CC4ySWS register.\n\n
2173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API manually asserts the requested event.
2175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IR
2180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->SWS = ((uint32_t) 1) << ((uint32_t) event);
2184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Asserted event which must be acknowledged.
2189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Acknowledges an asserted event, by setting CC4ySWR with respective event flag.\n\n
2194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
2197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_
2199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 569              	 .loc 1 2199 0
 570              	 .cfi_startproc
 571              	 
 572              	 
 573              	 
 574 0000 80B4     	 push {r7}
 575              	.LCFI72:
 576              	 .cfi_def_cfa_offset 4
 577              	 .cfi_offset 7,-4
 578 0002 83B0     	 sub sp,sp,#12
 579              	.LCFI73:
 580              	 .cfi_def_cfa_offset 16
 581 0004 00AF     	 add r7,sp,#0
 582              	.LCFI74:
 583              	 .cfi_def_cfa_register 7
 584 0006 7860     	 str r0,[r7,#4]
 585 0008 0B46     	 mov r3,r1
 586 000a FB70     	 strb r3,[r7,#3]
2200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 587              	 .loc 1 2202 0
 588 000c FB78     	 ldrb r3,[r7,#3]
 589 000e 0122     	 movs r2,#1
 590 0010 9A40     	 lsls r2,r2,r3
 591 0012 7B68     	 ldr r3,[r7,#4]
 592 0014 C3F8B020 	 str r2,[r3,#176]
2203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 593              	 .loc 1 2203 0
 594 0018 0C37     	 adds r7,r7,#12
 595              	.LCFI75:
 596              	 .cfi_def_cfa_offset 4
 597 001a BD46     	 mov sp,r7
 598              	.LCFI76:
 599              	 .cfi_def_cfa_register 13
 600              	 
 601 001c 5DF8047B 	 ldr r7,[sp],#4
 602              	.LCFI77:
 603              	 .cfi_restore 7
 604              	 .cfi_def_cfa_offset 0
 605 0020 7047     	 bx lr
 606              	 .cfi_endproc
 607              	.LFE188:
 609 0022 00BF     	 .section .text.XMC_CCU4_SLICE_GetEvent,"ax",%progbits
 610              	 .align 2
 611              	 .thumb
 612              	 .thumb_func
 614              	XMC_CCU4_SLICE_GetEvent:
 615              	.LFB189:
2204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event to be evaluated for assertion
2208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
2209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *         bool  Returns true if event is set else false is returned.
2210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Evaluates if a given event is asserted or not, by reading CC4yINTS register.\n\n
2213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Return true if the event is asserted. For a event to be asserted it has to be
2214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * first enabled. Only if that event is enabled the call to this API is valid.
2215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the Event is enabled and has not yet occurred then a false is returned.
2216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent().
2219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_GetEvent(const XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SL
2221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 616              	 .loc 1 2221 0
 617              	 .cfi_startproc
 618              	 
 619              	 
 620              	 
 621 0000 80B4     	 push {r7}
 622              	.LCFI78:
 623              	 .cfi_def_cfa_offset 4
 624              	 .cfi_offset 7,-4
 625 0002 83B0     	 sub sp,sp,#12
 626              	.LCFI79:
 627              	 .cfi_def_cfa_offset 16
 628 0004 00AF     	 add r7,sp,#0
 629              	.LCFI80:
 630              	 .cfi_def_cfa_register 7
 631 0006 7860     	 str r0,[r7,#4]
 632 0008 0B46     	 mov r3,r1
 633 000a FB70     	 strb r3,[r7,#3]
2222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h ****   return(((uint32_t)(slice->INTS & ((uint32_t)1 << (uint32_t)event))) != 0U);
 634              	 .loc 1 2225 0
 635 000c 7B68     	 ldr r3,[r7,#4]
 636 000e D3F8A020 	 ldr r2,[r3,#160]
 637 0012 FB78     	 ldrb r3,[r7,#3]
 638 0014 22FA03F3 	 lsr r3,r2,r3
 639 0018 03F00103 	 and r3,r3,#1
 640 001c 002B     	 cmp r3,#0
 641 001e 14BF     	 ite ne
 642 0020 0123     	 movne r3,#1
 643 0022 0023     	 moveq r3,#0
 644 0024 DBB2     	 uxtb r3,r3
2226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 645              	 .loc 1 2226 0
 646 0026 1846     	 mov r0,r3
 647 0028 0C37     	 adds r7,r7,#12
 648              	.LCFI81:
 649              	 .cfi_def_cfa_offset 4
 650 002a BD46     	 mov sp,r7
 651              	.LCFI82:
 652              	 .cfi_def_cfa_register 13
 653              	 
 654 002c 5DF8047B 	 ldr r7,[sp],#4
 655              	.LCFI83:
 656              	 .cfi_restore 7
 657              	 .cfi_def_cfa_offset 0
 658 0030 7047     	 bx lr
 659              	 .cfi_endproc
 660              	.LFE189:
 662 0032 00BF     	 .section .text.PWM_CCU4_GetAppVersion,"ax",%progbits
 663              	 .align 2
 664              	 .global PWM_CCU4_GetAppVersion
 665              	 .thumb
 666              	 .thumb_func
 668              	PWM_CCU4_GetAppVersion:
 669              	.LFB233:
 670              	 .file 2 "../Dave/Generated/PWM_CCU4/pwm_ccu4.c"
   1:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**
   2:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * @file pwm_ccu4.c
   3:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * @date 2019-09-23
   4:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
   5:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * NOTE:
   6:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
   8:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * @cond
   9:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  **************************************************************************************************
  10:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * PWM_CCU4 v4.1.26 - PWM APP using one timer slice of CCU4, with external events support, to gener
  11:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  12:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * Copyright (c) 2015 - 2019, Infineon Technologies AG
  13:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * All rights reserved.
  14:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  15:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * following conditions are met:
  17:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  18:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *   disclaimer.
  20:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  21:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  24:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  27:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  35:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  **************************************************************************************************
  38:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  39:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * Change History
  40:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * --------------
  41:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  42:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * 2015-02-14:
  43:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - Initial version for DAVEv4
  44:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  45:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * 2015-05-20:
  46:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - PWM_CCU4_AcknowledgeInterrupt() api is renamed as PWM_CCU4_ClearEvent().
  47:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  48:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * 2015-06-20:
  49:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - Copyright information updated.
  50:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  51:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * 2015-08-13:
  52:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - Added support for selection of shadow transfer mode using API "XMC_CCU4_SLICE_SetShadowTra
  53:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - Added support for selection of immediate shadow transfer using
  54:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *       API "XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer" in XMC14* devices
  55:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - Added support for automatic shadow transfer using
  56:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *       API "XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest" in XMC14* devices
  57:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  58:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * 2016-10-28:
  59:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - Changed PWM_CCU4_Stop() to set the ST output to passive value after stopping the timer.
  60:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  61:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * 2019-09-23:
  62:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *     - Fixed escaping of '%' in XMC_DEBUG()
  63:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  64:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * @endcond
  65:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  *
  66:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  */
  67:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  68:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
  69:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * HEADER FILES
  70:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  **************************************************************************************************
  71:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** #include "pwm_ccu4.h"
  72:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  73:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
  74:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * MACROS
  75:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  **************************************************************************************************
  76:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  77:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
  78:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * LOCAL DATA
  79:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  **************************************************************************************************
  80:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  81:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
  82:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * LOCAL ROUTINES
  83:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  **************************************************************************************************
  84:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  85:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /* Initialize the App Interrupts */
  86:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr);
  87:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  88:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /* Initialize the App events and configurations */
  89:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr);
  90:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  91:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
  92:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  * API IMPLEMENTATION
  93:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****  **************************************************************************************************
  94:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
  95:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /* API to retrieve App version info */
  96:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** DAVE_APP_VERSION_t PWM_CCU4_GetAppVersion(void)
  97:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 671              	 .loc 2 97 0
 672              	 .cfi_startproc
 673              	 
 674              	 
 675              	 
 676 0000 80B4     	 push {r7}
 677              	.LCFI84:
 678              	 .cfi_def_cfa_offset 4
 679              	 .cfi_offset 7,-4
 680 0002 83B0     	 sub sp,sp,#12
 681              	.LCFI85:
 682              	 .cfi_def_cfa_offset 16
 683 0004 00AF     	 add r7,sp,#0
 684              	.LCFI86:
 685              	 .cfi_def_cfa_register 7
  98:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   DAVE_APP_VERSION_t version;
  99:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 100:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   version.major = PWM_CCU4_MAJOR_VERSION;
 686              	 .loc 2 100 0
 687 0006 0423     	 movs r3,#4
 688 0008 3B70     	 strb r3,[r7]
 101:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   version.minor = PWM_CCU4_MINOR_VERSION;
 689              	 .loc 2 101 0
 690 000a 0123     	 movs r3,#1
 691 000c 7B70     	 strb r3,[r7,#1]
 102:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   version.patch = PWM_CCU4_PATCH_VERSION;
 692              	 .loc 2 102 0
 693 000e 1A23     	 movs r3,#26
 694 0010 BB70     	 strb r3,[r7,#2]
 103:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 104:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return version;
 695              	 .loc 2 104 0
 696 0012 3B1D     	 adds r3,r7,#4
 697 0014 3A46     	 mov r2,r7
 698 0016 1268     	 ldr r2,[r2]
 699 0018 1146     	 mov r1,r2
 700 001a 1980     	 strh r1,[r3]
 701 001c 0233     	 adds r3,r3,#2
 702 001e 120C     	 lsrs r2,r2,#16
 703 0020 1A70     	 strb r2,[r3]
 704 0022 0023     	 movs r3,#0
 705 0024 3A79     	 ldrb r2,[r7,#4]
 706 0026 62F30703 	 bfi r3,r2,#0,#8
 707 002a 7A79     	 ldrb r2,[r7,#5]
 708 002c 62F30F23 	 bfi r3,r2,#8,#8
 709 0030 BA79     	 ldrb r2,[r7,#6]
 710 0032 62F31743 	 bfi r3,r2,#16,#8
 105:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** }
 711              	 .loc 2 105 0
 712 0036 1846     	 mov r0,r3
 713 0038 0C37     	 adds r7,r7,#12
 714              	.LCFI87:
 715              	 .cfi_def_cfa_offset 4
 716 003a BD46     	 mov sp,r7
 717              	.LCFI88:
 718              	 .cfi_def_cfa_register 13
 719              	 
 720 003c 5DF8047B 	 ldr r7,[sp],#4
 721              	.LCFI89:
 722              	 .cfi_restore 7
 723              	 .cfi_def_cfa_offset 0
 724 0040 7047     	 bx lr
 725              	 .cfi_endproc
 726              	.LFE233:
 728 0042 00BF     	 .section .text.PWM_CCU4_Init,"ax",%progbits
 729              	 .align 2
 730              	 .global PWM_CCU4_Init
 731              	 .thumb
 732              	 .thumb_func
 734              	PWM_CCU4_Init:
 735              	.LFB234:
 106:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 107:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /* This function initializes the app */
 108:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
 109:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 736              	 .loc 2 109 0
 737              	 .cfi_startproc
 738              	 
 739              	 
 740 0000 80B5     	 push {r7,lr}
 741              	.LCFI90:
 742              	 .cfi_def_cfa_offset 8
 743              	 .cfi_offset 7,-8
 744              	 .cfi_offset 14,-4
 745 0002 86B0     	 sub sp,sp,#24
 746              	.LCFI91:
 747              	 .cfi_def_cfa_offset 32
 748 0004 00AF     	 add r7,sp,#0
 749              	.LCFI92:
 750              	 .cfi_def_cfa_register 7
 751 0006 7860     	 str r0,[r7,#4]
 110:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   PWM_CCU4_STATUS_t status;
 111:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   GLOBAL_CCU4_STATUS_t status_ccu4_global;
 112:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t frequency_module;
 113:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t prescalar;
 114:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 115:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status = PWM_CCU4_STATUS_FAILURE;
 752              	 .loc 2 115 0
 753 0008 0123     	 movs r3,#1
 754 000a FB75     	 strb r3,[r7,#23]
 116:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
 755              	 .loc 2 116 0
 756 000c 0123     	 movs r3,#1
 757 000e BB75     	 strb r3,[r7,#22]
 117:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));
 118:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 119:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
 758              	 .loc 2 119 0
 759 0010 7B68     	 ldr r3,[r7,#4]
 760 0012 1B7F     	 ldrb r3,[r3,#28]
 761 0014 002B     	 cmp r3,#0
 762 0016 40F08C80 	 bne .L22
 120:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 121:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     /* Initialize consumed Apps */
 122:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
 763              	 .loc 2 122 0
 764 001a 7B68     	 ldr r3,[r7,#4]
 765 001c 1B68     	 ldr r3,[r3]
 766 001e DB6C     	 ldr r3,[r3,#76]
 767 0020 1846     	 mov r0,r3
 768 0022 FFF7FEFF 	 bl GLOBAL_CCU4_Init
 769 0026 0346     	 mov r3,r0
 770 0028 BB75     	 strb r3,[r7,#22]
 123:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 124:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     /* Initialize CCU4x_CC4y slice */
 125:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
 771              	 .loc 2 125 0
 772 002a BB7D     	 ldrb r3,[r7,#22]
 773 002c 002B     	 cmp r3,#0
 774 002e 7CD1     	 bne .L23
 126:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 127:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");
 128:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 129:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Configure CCU4x_CC4y slice as timer */
 130:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice
 775              	 .loc 2 130 0
 776 0030 7B68     	 ldr r3,[r7,#4]
 777 0032 9A68     	 ldr r2,[r3,#8]
 778 0034 7B68     	 ldr r3,[r7,#4]
 779 0036 1B68     	 ldr r3,[r3]
 780 0038 9B6B     	 ldr r3,[r3,#56]
 781 003a 1046     	 mov r0,r2
 782 003c 1946     	 mov r1,r3
 783 003e FFF7FEFF 	 bl XMC_CCU4_SLICE_CompareInit
 131:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Set period match value of the timer  */
 132:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period
 784              	 .loc 2 132 0
 785 0042 7B68     	 ldr r3,[r7,#4]
 786 0044 9A68     	 ldr r2,[r3,#8]
 787 0046 7B68     	 ldr r3,[r7,#4]
 788 0048 1B68     	 ldr r3,[r3]
 789 004a 5B88     	 ldrh r3,[r3,#2]
 790 004c 1046     	 mov r0,r2
 791 004e 1946     	 mov r1,r3
 792 0050 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 133:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 134:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Set timer compare match value for channel 1 */
 135:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config
 793              	 .loc 2 135 0
 794 0054 7B68     	 ldr r3,[r7,#4]
 795 0056 9A68     	 ldr r2,[r3,#8]
 796 0058 7B68     	 ldr r3,[r7,#4]
 797 005a 1B68     	 ldr r3,[r3]
 798 005c 9B88     	 ldrh r3,[r3,#4]
 799 005e 1046     	 mov r0,r2
 800 0060 1946     	 mov r1,r3
 801 0062 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 136:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 137:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
 802              	 .loc 2 137 0
 803 0066 7B68     	 ldr r3,[r7,#4]
 804 0068 1B68     	 ldr r3,[r3]
 805 006a 9B6B     	 ldr r3,[r3,#56]
 806 006c DB78     	 ldrb r3,[r3,#3]
 807 006e 03F00203 	 and r3,r3,#2
 808 0072 DBB2     	 uxtb r3,r3
 809 0074 002B     	 cmp r3,#0
 810 0076 08D0     	 beq .L24
 138:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 139:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 811              	 .loc 2 139 0
 812 0078 7B68     	 ldr r3,[r7,#4]
 813 007a 5A68     	 ldr r2,[r3,#4]
 140:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                    (uint32_t) handle_ptr->config_ptr->mcm_shadow_tx
 814              	 .loc 2 140 0
 815 007c 7B68     	 ldr r3,[r7,#4]
 816 007e 1B68     	 ldr r3,[r3]
 817 0080 5B6B     	 ldr r3,[r3,#52]
 139:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                    (uint32_t) handle_ptr->config_ptr->mcm_shadow_tx
 818              	 .loc 2 139 0
 819 0082 1046     	 mov r0,r2
 820 0084 1946     	 mov r1,r3
 821 0086 FFF7FEFF 	 bl XMC_CCU4_SetMultiChannelShadowTransferMode
 822              	.L24:
 141:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 142:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 143:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** #if (UC_SERIES == XMC14) /*below feature available in XMC14xx devices */
 144:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_SetShadowTransferMode(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->shad
 145:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_WriteImmediateAfterShadowTransfer(handle_ptr->ccu4_slice_ptr,
 146:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                        handle_ptr->config_ptr->immediate_write);
 147:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_EnableAutomaticShadowTransferRequest(handle_ptr->ccu4_slice_ptr,
 148:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                           handle_ptr->config_ptr->automatic_shadow_
 149:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if((bool)true == handle_ptr->config_ptr->cascaded_shadow_txfr_enable)
 150:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 151:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
 152:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 153:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** #endif
 154:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 155:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Transfer value from shadow timer registers to actual timer registers */
 156:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 823              	 .loc 2 156 0
 824 008a 7B68     	 ldr r3,[r7,#4]
 825 008c 5A68     	 ldr r2,[r3,#4]
 826 008e 7B68     	 ldr r3,[r7,#4]
 827 0090 1B69     	 ldr r3,[r3,#16]
 828 0092 1046     	 mov r0,r2
 829 0094 1946     	 mov r1,r3
 830 0096 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 157:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk
 831              	 .loc 2 157 0
 832 009a 7B68     	 ldr r3,[r7,#4]
 833 009c 5A68     	 ldr r2,[r3,#4]
 834 009e 7B68     	 ldr r3,[r7,#4]
 835 00a0 5B69     	 ldr r3,[r3,#20]
 836 00a2 1046     	 mov r0,r2
 837 00a4 1946     	 mov r1,r3
 838 00a6 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 158:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 159:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Configure events */
 160:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       PWM_CCU4_lConfigure_Events(handle_ptr);
 839              	 .loc 2 160 0
 840 00aa 7868     	 ldr r0,[r7,#4]
 841 00ac FFF7FEFF 	 bl PWM_CCU4_lConfigure_Events
 161:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 162:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Enable the interrupts */
 163:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       PWM_CCU4_lInit_Interrupt(handle_ptr);
 842              	 .loc 2 163 0
 843 00b0 7868     	 ldr r0,[r7,#4]
 844 00b2 FFF7FEFF 	 bl PWM_CCU4_lInit_Interrupt
 164:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 165:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /*Initializes the GPIO*/
 166:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
 845              	 .loc 2 166 0
 846 00b6 7B68     	 ldr r3,[r7,#4]
 847 00b8 1B68     	 ldr r3,[r3]
 848 00ba 93F83C30 	 ldrb r3,[r3,#60]
 849 00be 002B     	 cmp r3,#0
 850 00c0 0ED0     	 beq .L25
 167:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 168:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_
 851              	 .loc 2 168 0
 852 00c2 7B68     	 ldr r3,[r7,#4]
 853 00c4 1B68     	 ldr r3,[r3]
 854 00c6 196C     	 ldr r1,[r3,#64]
 855 00c8 7B68     	 ldr r3,[r7,#4]
 856 00ca 1B68     	 ldr r3,[r3]
 857 00cc 93F84420 	 ldrb r2,[r3,#68]
 169:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                       handle_ptr->config_ptr->gpio_ch_out_config_ptr);
 858              	 .loc 2 169 0
 859 00d0 7B68     	 ldr r3,[r7,#4]
 860 00d2 1B68     	 ldr r3,[r3]
 168:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                       handle_ptr->config_ptr->gpio_ch_out_config_ptr);
 861              	 .loc 2 168 0
 862 00d4 9B6C     	 ldr r3,[r3,#72]
 863 00d6 0846     	 mov r0,r1
 864 00d8 1146     	 mov r1,r2
 865 00da 1A46     	 mov r2,r3
 866 00dc FFF7FEFF 	 bl XMC_GPIO_Init
 867              	.L25:
 170:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 171:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 172:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
 868              	 .loc 2 172 0
 869 00e0 7B68     	 ldr r3,[r7,#4]
 870 00e2 1B68     	 ldr r3,[r3]
 871 00e4 DB6C     	 ldr r3,[r3,#76]
 872 00e6 1B68     	 ldr r3,[r3]
 873 00e8 3B61     	 str r3,[r7,#16]
 173:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
 874              	 .loc 2 173 0
 875 00ea 7B68     	 ldr r3,[r7,#4]
 876 00ec 1B68     	 ldr r3,[r3]
 877 00ee 9B6B     	 ldr r3,[r3,#56]
 878 00f0 1B79     	 ldrb r3,[r3,#4]
 879 00f2 C3F30303 	 ubfx r3,r3,#0,#4
 880 00f6 DBB2     	 uxtb r3,r3
 881 00f8 FB60     	 str r3,[r7,#12]
 174:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 882              	 .loc 2 174 0
 883 00fa FB68     	 ldr r3,[r7,#12]
 884 00fc 3A69     	 ldr r2,[r7,#16]
 885 00fe 22FA03F3 	 lsr r3,r2,r3
 886 0102 3B61     	 str r3,[r7,#16]
 175:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       handle_ptr->frequency_tclk = frequency_module;
 887              	 .loc 2 175 0
 888 0104 7B68     	 ldr r3,[r7,#4]
 889 0106 3A69     	 ldr r2,[r7,#16]
 890 0108 1A62     	 str r2,[r3,#32]
 176:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 177:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
 891              	 .loc 2 177 0
 892 010a 7B68     	 ldr r3,[r7,#4]
 893 010c 0122     	 movs r2,#1
 894 010e 1A77     	 strb r2,[r3,#28]
 178:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       status = PWM_CCU4_STATUS_SUCCESS;
 895              	 .loc 2 178 0
 896 0110 0023     	 movs r3,#0
 897 0112 FB75     	 strb r3,[r7,#23]
 179:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 180:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Start the PWM generation if start at initialization is enabled */
 181:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if ((bool) true == handle_ptr->config_ptr->start_control)
 898              	 .loc 2 181 0
 899 0114 7B68     	 ldr r3,[r7,#4]
 900 0116 1B68     	 ldr r3,[r3]
 901 0118 1B78     	 ldrb r3,[r3]
 902 011a 002B     	 cmp r3,#0
 903 011c 0BD0     	 beq .L28
 182:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 183:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         status = PWM_CCU4_Start(handle_ptr);
 904              	 .loc 2 183 0
 905 011e 7868     	 ldr r0,[r7,#4]
 906 0120 FFF7FEFF 	 bl PWM_CCU4_Start
 907 0124 0346     	 mov r3,r0
 908 0126 FB75     	 strb r3,[r7,#23]
 909 0128 05E0     	 b .L28
 910              	.L23:
 184:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 185:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 186:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     else
 187:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 188:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
 911              	 .loc 2 188 0
 912 012a 7B68     	 ldr r3,[r7,#4]
 913 012c 0022     	 movs r2,#0
 914 012e 1A77     	 strb r2,[r3,#28]
 915 0130 01E0     	 b .L28
 916              	.L22:
 189:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 190:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 191:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 192:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   else
 193:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 194:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
 917              	 .loc 2 194 0
 918 0132 0223     	 movs r3,#2
 919 0134 FB75     	 strb r3,[r7,#23]
 920              	.L28:
 195:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
 196:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 197:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 198:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status);
 921              	 .loc 2 198 0
 922 0136 FB7D     	 ldrb r3,[r7,#23]
 199:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_Init() api */
 923              	 .loc 2 199 0
 924 0138 1846     	 mov r0,r3
 925 013a 1837     	 adds r7,r7,#24
 926              	.LCFI93:
 927              	 .cfi_def_cfa_offset 8
 928 013c BD46     	 mov sp,r7
 929              	.LCFI94:
 930              	 .cfi_def_cfa_register 13
 931              	 
 932 013e 80BD     	 pop {r7,pc}
 933              	 .cfi_endproc
 934              	.LFE234:
 936              	 .section .text.PWM_CCU4_lInit_Interrupt,"ax",%progbits
 937              	 .align 2
 938              	 .thumb
 939              	 .thumb_func
 941              	PWM_CCU4_lInit_Interrupt:
 942              	.LFB235:
 200:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 201:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
 202:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 943              	 .loc 2 202 0
 944              	 .cfi_startproc
 945              	 
 946              	 
 947 0000 80B5     	 push {r7,lr}
 948              	.LCFI95:
 949              	 .cfi_def_cfa_offset 8
 950              	 .cfi_offset 7,-8
 951              	 .cfi_offset 14,-4
 952 0002 82B0     	 sub sp,sp,#8
 953              	.LCFI96:
 954              	 .cfi_def_cfa_offset 16
 955 0004 00AF     	 add r7,sp,#0
 956              	.LCFI97:
 957              	 .cfi_def_cfa_register 7
 958 0006 7860     	 str r0,[r7,#4]
 203:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 204:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user ma
 205:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****    disable the interrupts by LLD calls. */
 206:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((bool) true == handle_ptr->config_ptr->int_per_match)
 959              	 .loc 2 206 0
 960 0008 7B68     	 ldr r3,[r7,#4]
 961 000a 1B68     	 ldr r3,[r3]
 962 000c 9B79     	 ldrb r3,[r3,#6]
 963 000e 002B     	 cmp r3,#0
 964 0010 0FD0     	 beq .L31
 207:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 208:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
 209:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 965              	 .loc 2 209 0
 966 0012 7B68     	 ldr r3,[r7,#4]
 967 0014 9A68     	 ldr r2,[r3,#8]
 210:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_per_match);
 968              	 .loc 2 210 0
 969 0016 7B68     	 ldr r3,[r7,#4]
 970 0018 1B68     	 ldr r3,[r3]
 209:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_per_match);
 971              	 .loc 2 209 0
 972 001a 5B7B     	 ldrb r3,[r3,#13]
 973 001c 1046     	 mov r0,r2
 974 001e 0021     	 movs r1,#0
 975 0020 1A46     	 mov r2,r3
 976 0022 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 211:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 977              	 .loc 2 211 0
 978 0026 7B68     	 ldr r3,[r7,#4]
 979 0028 9B68     	 ldr r3,[r3,#8]
 980 002a 1846     	 mov r0,r3
 981 002c 0021     	 movs r1,#0
 982 002e FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 983              	.L31:
 212:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 213:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 214:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
 984              	 .loc 2 214 0
 985 0032 7B68     	 ldr r3,[r7,#4]
 986 0034 1B68     	 ldr r3,[r3]
 987 0036 DB79     	 ldrb r3,[r3,#7]
 988 0038 002B     	 cmp r3,#0
 989 003a 0FD0     	 beq .L32
 215:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 216:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
 217:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH
 990              	 .loc 2 217 0
 991 003c 7B68     	 ldr r3,[r7,#4]
 992 003e 9A68     	 ldr r2,[r3,#8]
 218:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_cmp_match_up);
 993              	 .loc 2 218 0
 994 0040 7B68     	 ldr r3,[r7,#4]
 995 0042 1B68     	 ldr r3,[r3]
 217:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_cmp_match_up);
 996              	 .loc 2 217 0
 997 0044 9B7B     	 ldrb r3,[r3,#14]
 998 0046 1046     	 mov r0,r2
 999 0048 0221     	 movs r1,#2
 1000 004a 1A46     	 mov r2,r3
 1001 004c FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 219:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 1002              	 .loc 2 219 0
 1003 0050 7B68     	 ldr r3,[r7,#4]
 1004 0052 9B68     	 ldr r3,[r3,#8]
 1005 0054 1846     	 mov r0,r3
 1006 0056 0221     	 movs r1,#2
 1007 0058 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 1008              	.L32:
 220:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 221:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 222:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
 1009              	 .loc 2 222 0
 1010 005c 7B68     	 ldr r3,[r7,#4]
 1011 005e 1B68     	 ldr r3,[r3]
 1012 0060 1B7A     	 ldrb r3,[r3,#8]
 1013 0062 002B     	 cmp r3,#0
 1014 0064 0FD0     	 beq .L33
 223:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 224:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
 225:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH
 1015              	 .loc 2 225 0
 1016 0066 7B68     	 ldr r3,[r7,#4]
 1017 0068 9A68     	 ldr r2,[r3,#8]
 226:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_cmp_match_down);
 1018              	 .loc 2 226 0
 1019 006a 7B68     	 ldr r3,[r7,#4]
 1020 006c 1B68     	 ldr r3,[r3]
 225:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_cmp_match_down);
 1021              	 .loc 2 225 0
 1022 006e DB7B     	 ldrb r3,[r3,#15]
 1023 0070 1046     	 mov r0,r2
 1024 0072 0321     	 movs r1,#3
 1025 0074 1A46     	 mov r2,r3
 1026 0076 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 227:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN
 1027              	 .loc 2 227 0
 1028 007a 7B68     	 ldr r3,[r7,#4]
 1029 007c 9B68     	 ldr r3,[r3,#8]
 1030 007e 1846     	 mov r0,r3
 1031 0080 0321     	 movs r1,#3
 1032 0082 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 1033              	.L33:
 228:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 229:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 230:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 1034              	 .loc 2 230 0
 1035 0086 7B68     	 ldr r3,[r7,#4]
 1036 0088 1B68     	 ldr r3,[r3]
 1037 008a 5B7A     	 ldrb r3,[r3,#9]
 1038 008c 002B     	 cmp r3,#0
 1039 008e 0FD0     	 beq .L34
 231:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 232:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
 233:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 1040              	 .loc 2 233 0
 1041 0090 7B68     	 ldr r3,[r7,#4]
 1042 0092 9A68     	 ldr r2,[r3,#8]
 234:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_one_match_down);
 1043              	 .loc 2 234 0
 1044 0094 7B68     	 ldr r3,[r7,#4]
 1045 0096 1B68     	 ldr r3,[r3]
 233:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_one_match_down);
 1046              	 .loc 2 233 0
 1047 0098 1B7C     	 ldrb r3,[r3,#16]
 1048 009a 1046     	 mov r0,r2
 1049 009c 0121     	 movs r1,#1
 1050 009e 1A46     	 mov r2,r3
 1051 00a0 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 235:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
 1052              	 .loc 2 235 0
 1053 00a4 7B68     	 ldr r3,[r7,#4]
 1054 00a6 9B68     	 ldr r3,[r3,#8]
 1055 00a8 1846     	 mov r0,r3
 1056 00aa 0121     	 movs r1,#1
 1057 00ac FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 1058              	.L34:
 236:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 237:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 238:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((bool) true == handle_ptr->config_ptr->int_e0)
 1059              	 .loc 2 238 0
 1060 00b0 7B68     	 ldr r3,[r7,#4]
 1061 00b2 1B68     	 ldr r3,[r3]
 1062 00b4 9B7A     	 ldrb r3,[r3,#10]
 1063 00b6 002B     	 cmp r3,#0
 1064 00b8 0FD0     	 beq .L35
 239:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 240:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
 241:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 1065              	 .loc 2 241 0
 1066 00ba 7B68     	 ldr r3,[r7,#4]
 1067 00bc 9A68     	 ldr r2,[r3,#8]
 242:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_e0);
 1068              	 .loc 2 242 0
 1069 00be 7B68     	 ldr r3,[r7,#4]
 1070 00c0 1B68     	 ldr r3,[r3]
 241:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_e0);
 1071              	 .loc 2 241 0
 1072 00c2 5B7C     	 ldrb r3,[r3,#17]
 1073 00c4 1046     	 mov r0,r2
 1074 00c6 0821     	 movs r1,#8
 1075 00c8 1A46     	 mov r2,r3
 1076 00ca FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 243:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
 1077              	 .loc 2 243 0
 1078 00ce 7B68     	 ldr r3,[r7,#4]
 1079 00d0 9B68     	 ldr r3,[r3,#8]
 1080 00d2 1846     	 mov r0,r3
 1081 00d4 0821     	 movs r1,#8
 1082 00d6 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 1083              	.L35:
 244:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 245:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 246:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((bool) true == handle_ptr->config_ptr->int_e1)
 1084              	 .loc 2 246 0
 1085 00da 7B68     	 ldr r3,[r7,#4]
 1086 00dc 1B68     	 ldr r3,[r3]
 1087 00de DB7A     	 ldrb r3,[r3,#11]
 1088 00e0 002B     	 cmp r3,#0
 1089 00e2 0FD0     	 beq .L36
 247:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 248:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
 249:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 1090              	 .loc 2 249 0
 1091 00e4 7B68     	 ldr r3,[r7,#4]
 1092 00e6 9A68     	 ldr r2,[r3,#8]
 250:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_e1);
 1093              	 .loc 2 250 0
 1094 00e8 7B68     	 ldr r3,[r7,#4]
 1095 00ea 1B68     	 ldr r3,[r3]
 249:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_e1);
 1096              	 .loc 2 249 0
 1097 00ec 9B7C     	 ldrb r3,[r3,#18]
 1098 00ee 1046     	 mov r0,r2
 1099 00f0 0921     	 movs r1,#9
 1100 00f2 1A46     	 mov r2,r3
 1101 00f4 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 251:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
 1102              	 .loc 2 251 0
 1103 00f8 7B68     	 ldr r3,[r7,#4]
 1104 00fa 9B68     	 ldr r3,[r3,#8]
 1105 00fc 1846     	 mov r0,r3
 1106 00fe 0921     	 movs r1,#9
 1107 0100 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 1108              	.L36:
 252:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 253:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 254:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((bool) true == handle_ptr->config_ptr->int_e2)
 1109              	 .loc 2 254 0
 1110 0104 7B68     	 ldr r3,[r7,#4]
 1111 0106 1B68     	 ldr r3,[r3]
 1112 0108 1B7B     	 ldrb r3,[r3,#12]
 1113 010a 002B     	 cmp r3,#0
 1114 010c 0FD0     	 beq .L30
 255:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 256:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
 257:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 1115              	 .loc 2 257 0
 1116 010e 7B68     	 ldr r3,[r7,#4]
 1117 0110 9A68     	 ldr r2,[r3,#8]
 258:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_e2);
 1118              	 .loc 2 258 0
 1119 0112 7B68     	 ldr r3,[r7,#4]
 1120 0114 1B68     	 ldr r3,[r3]
 257:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->sr_e2);
 1121              	 .loc 2 257 0
 1122 0116 DB7C     	 ldrb r3,[r3,#19]
 1123 0118 1046     	 mov r0,r2
 1124 011a 0A21     	 movs r1,#10
 1125 011c 1A46     	 mov r2,r3
 1126 011e FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 259:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 1127              	 .loc 2 259 0
 1128 0122 7B68     	 ldr r3,[r7,#4]
 1129 0124 9B68     	 ldr r3,[r3,#8]
 1130 0126 1846     	 mov r0,r3
 1131 0128 0A21     	 movs r1,#10
 1132 012a FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 1133              	.L30:
 260:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 261:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** }
 1134              	 .loc 2 261 0
 1135 012e 0837     	 adds r7,r7,#8
 1136              	.LCFI98:
 1137              	 .cfi_def_cfa_offset 8
 1138 0130 BD46     	 mov sp,r7
 1139              	.LCFI99:
 1140              	 .cfi_def_cfa_register 13
 1141              	 
 1142 0132 80BD     	 pop {r7,pc}
 1143              	 .cfi_endproc
 1144              	.LFE235:
 1146              	 .section .text.PWM_CCU4_lConfigure_Events,"ax",%progbits
 1147              	 .align 2
 1148              	 .thumb
 1149              	 .thumb_func
 1151              	PWM_CCU4_lConfigure_Events:
 1152              	.LFB236:
 262:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 263:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
 264:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1153              	 .loc 2 264 0
 1154              	 .cfi_startproc
 1155              	 
 1156              	 
 1157 0000 80B5     	 push {r7,lr}
 1158              	.LCFI100:
 1159              	 .cfi_def_cfa_offset 8
 1160              	 .cfi_offset 7,-8
 1161              	 .cfi_offset 14,-4
 1162 0002 82B0     	 sub sp,sp,#8
 1163              	.LCFI101:
 1164              	 .cfi_def_cfa_offset 16
 1165 0004 00AF     	 add r7,sp,#0
 1166              	.LCFI102:
 1167              	 .cfi_def_cfa_register 7
 1168 0006 7860     	 str r0,[r7,#4]
 265:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 266:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* Configure slice to a external event 0 */
 267:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 1169              	 .loc 2 267 0
 1170 0008 7B68     	 ldr r3,[r7,#4]
 1171 000a 9A68     	 ldr r2,[r3,#8]
 268:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                 handle_ptr->config_ptr->event0_config_ptr);
 1172              	 .loc 2 268 0
 1173 000c 7B68     	 ldr r3,[r7,#4]
 1174 000e 1B68     	 ldr r3,[r3]
 267:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                 handle_ptr->config_ptr->event0_config_ptr);
 1175              	 .loc 2 267 0
 1176 0010 5B69     	 ldr r3,[r3,#20]
 1177 0012 1046     	 mov r0,r2
 1178 0014 0121     	 movs r1,#1
 1179 0016 1A46     	 mov r2,r3
 1180 0018 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 269:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 270:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* Configure slice to a external event 1 */
 271:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 1181              	 .loc 2 271 0
 1182 001c 7B68     	 ldr r3,[r7,#4]
 1183 001e 9A68     	 ldr r2,[r3,#8]
 272:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                 handle_ptr->config_ptr->event1_config_ptr);
 1184              	 .loc 2 272 0
 1185 0020 7B68     	 ldr r3,[r7,#4]
 1186 0022 1B68     	 ldr r3,[r3]
 271:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                 handle_ptr->config_ptr->event1_config_ptr);
 1187              	 .loc 2 271 0
 1188 0024 9B69     	 ldr r3,[r3,#24]
 1189 0026 1046     	 mov r0,r2
 1190 0028 0221     	 movs r1,#2
 1191 002a 1A46     	 mov r2,r3
 1192 002c FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 273:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 274:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* Configure slice to a external event 2 */
 275:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 1193              	 .loc 2 275 0
 1194 0030 7B68     	 ldr r3,[r7,#4]
 1195 0032 9A68     	 ldr r2,[r3,#8]
 276:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                 handle_ptr->config_ptr->event2_config_ptr);
 1196              	 .loc 2 276 0
 1197 0034 7B68     	 ldr r3,[r7,#4]
 1198 0036 1B68     	 ldr r3,[r3]
 275:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                 handle_ptr->config_ptr->event2_config_ptr);
 1199              	 .loc 2 275 0
 1200 0038 DB69     	 ldr r3,[r3,#28]
 1201 003a 1046     	 mov r0,r2
 1202 003c 0321     	 movs r1,#3
 1203 003e 1A46     	 mov r2,r3
 1204 0040 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 277:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 278:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* External signal controls start of the timer */
 279:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 1205              	 .loc 2 279 0
 1206 0044 7B68     	 ldr r3,[r7,#4]
 1207 0046 1B68     	 ldr r3,[r3]
 1208 0048 93F82030 	 ldrb r3,[r3,#32]
 1209 004c 002B     	 cmp r3,#0
 1210 004e 0ED0     	 beq .L39
 280:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 281:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 1211              	 .loc 2 281 0
 1212 0050 7B68     	 ldr r3,[r7,#4]
 1213 0052 9968     	 ldr r1,[r3,#8]
 1214 0054 7B68     	 ldr r3,[r7,#4]
 1215 0056 1B68     	 ldr r3,[r3]
 1216 0058 93F82020 	 ldrb r2,[r3,#32]
 282:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                handle_ptr->config_ptr->ext_start_mode);
 1217              	 .loc 2 282 0
 1218 005c 7B68     	 ldr r3,[r7,#4]
 1219 005e 1B68     	 ldr r3,[r3]
 281:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                handle_ptr->config_ptr->ext_start_mode);
 1220              	 .loc 2 281 0
 1221 0060 93F82130 	 ldrb r3,[r3,#33]
 1222 0064 0846     	 mov r0,r1
 1223 0066 1146     	 mov r1,r2
 1224 0068 1A46     	 mov r2,r3
 1225 006a FFF7FEFF 	 bl XMC_CCU4_SLICE_StartConfig
 1226              	.L39:
 283:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 284:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 285:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* External signal can stop the timer */
 286:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 1227              	 .loc 2 286 0
 1228 006e 7B68     	 ldr r3,[r7,#4]
 1229 0070 1B68     	 ldr r3,[r3]
 1230 0072 93F82230 	 ldrb r3,[r3,#34]
 1231 0076 002B     	 cmp r3,#0
 1232 0078 0ED0     	 beq .L40
 287:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 288:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 1233              	 .loc 2 288 0
 1234 007a 7B68     	 ldr r3,[r7,#4]
 1235 007c 9968     	 ldr r1,[r3,#8]
 1236 007e 7B68     	 ldr r3,[r7,#4]
 1237 0080 1B68     	 ldr r3,[r3]
 1238 0082 93F82220 	 ldrb r2,[r3,#34]
 289:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                               handle_ptr->config_ptr->ext_stop_mode);
 1239              	 .loc 2 289 0
 1240 0086 7B68     	 ldr r3,[r7,#4]
 1241 0088 1B68     	 ldr r3,[r3]
 288:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                               handle_ptr->config_ptr->ext_stop_mode);
 1242              	 .loc 2 288 0
 1243 008a 93F82330 	 ldrb r3,[r3,#35]
 1244 008e 0846     	 mov r0,r1
 1245 0090 1146     	 mov r1,r2
 1246 0092 1A46     	 mov r2,r3
 1247 0094 FFF7FEFF 	 bl XMC_CCU4_SLICE_StopConfig
 1248              	.L40:
 290:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 291:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 292:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* External signal can change the timer counting direction */
 293:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 1249              	 .loc 2 293 0
 1250 0098 7B68     	 ldr r3,[r7,#4]
 1251 009a 1B68     	 ldr r3,[r3]
 1252 009c 93F82430 	 ldrb r3,[r3,#36]
 1253 00a0 002B     	 cmp r3,#0
 1254 00a2 09D0     	 beq .L41
 294:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 295:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_di
 1255              	 .loc 2 295 0
 1256 00a4 7B68     	 ldr r3,[r7,#4]
 1257 00a6 9A68     	 ldr r2,[r3,#8]
 1258 00a8 7B68     	 ldr r3,[r7,#4]
 1259 00aa 1B68     	 ldr r3,[r3]
 1260 00ac 93F82430 	 ldrb r3,[r3,#36]
 1261 00b0 1046     	 mov r0,r2
 1262 00b2 1946     	 mov r1,r3
 1263 00b4 FFF7FEFF 	 bl XMC_CCU4_SLICE_DirectionConfig
 1264              	.L41:
 296:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 297:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* External signal can stop the timer and the timer value remains same */
 298:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 1265              	 .loc 2 298 0
 1266 00b8 7B68     	 ldr r3,[r7,#4]
 1267 00ba 1B68     	 ldr r3,[r3]
 1268 00bc 93F82530 	 ldrb r3,[r3,#37]
 1269 00c0 002B     	 cmp r3,#0
 1270 00c2 09D0     	 beq .L42
 299:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 300:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 1271              	 .loc 2 300 0
 1272 00c4 7B68     	 ldr r3,[r7,#4]
 1273 00c6 9A68     	 ldr r2,[r3,#8]
 1274 00c8 7B68     	 ldr r3,[r7,#4]
 1275 00ca 1B68     	 ldr r3,[r3]
 1276 00cc 93F82530 	 ldrb r3,[r3,#37]
 1277 00d0 1046     	 mov r0,r2
 1278 00d2 1946     	 mov r1,r3
 1279 00d4 FFF7FEFF 	 bl XMC_CCU4_SLICE_GateConfig
 1280              	.L42:
 301:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 302:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* Timer increments on external signal */
 303:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 1281              	 .loc 2 303 0
 1282 00d8 7B68     	 ldr r3,[r7,#4]
 1283 00da 1B68     	 ldr r3,[r3]
 1284 00dc 93F82630 	 ldrb r3,[r3,#38]
 1285 00e0 002B     	 cmp r3,#0
 1286 00e2 09D0     	 beq .L43
 304:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 305:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event)
 1287              	 .loc 2 305 0
 1288 00e4 7B68     	 ldr r3,[r7,#4]
 1289 00e6 9A68     	 ldr r2,[r3,#8]
 1290 00e8 7B68     	 ldr r3,[r7,#4]
 1291 00ea 1B68     	 ldr r3,[r3]
 1292 00ec 93F82630 	 ldrb r3,[r3,#38]
 1293 00f0 1046     	 mov r0,r2
 1294 00f2 1946     	 mov r1,r3
 1295 00f4 FFF7FEFF 	 bl XMC_CCU4_SLICE_CountConfig
 1296              	.L43:
 306:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 307:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* Timer gets loaded with compare register value or period register value on external signal */
 308:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 1297              	 .loc 2 308 0
 1298 00f8 7B68     	 ldr r3,[r7,#4]
 1299 00fa 1B68     	 ldr r3,[r3]
 1300 00fc 93F82730 	 ldrb r3,[r3,#39]
 1301 0100 002B     	 cmp r3,#0
 1302 0102 09D0     	 beq .L44
 309:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 310:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 1303              	 .loc 2 310 0
 1304 0104 7B68     	 ldr r3,[r7,#4]
 1305 0106 9A68     	 ldr r2,[r3,#8]
 1306 0108 7B68     	 ldr r3,[r7,#4]
 1307 010a 1B68     	 ldr r3,[r3]
 1308 010c 93F82730 	 ldrb r3,[r3,#39]
 1309 0110 1046     	 mov r0,r2
 1310 0112 1946     	 mov r1,r3
 1311 0114 FFF7FEFF 	 bl XMC_CCU4_SLICE_LoadConfig
 1312              	.L44:
 311:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 312:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* External signal PWM signal (ST bit) output gets modulated by external signal */
 313:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 1313              	 .loc 2 313 0
 1314 0118 7B68     	 ldr r3,[r7,#4]
 1315 011a 1B68     	 ldr r3,[r3]
 1316 011c 93F82830 	 ldrb r3,[r3,#40]
 1317 0120 002B     	 cmp r3,#0
 1318 0122 0FD0     	 beq .L45
 314:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 315:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_eve
 1319              	 .loc 2 315 0
 1320 0124 7B68     	 ldr r3,[r7,#4]
 1321 0126 9868     	 ldr r0,[r3,#8]
 1322 0128 7B68     	 ldr r3,[r7,#4]
 1323 012a 1B68     	 ldr r3,[r3]
 1324 012c 93F82810 	 ldrb r1,[r3,#40]
 316:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->e
 1325              	 .loc 2 316 0
 1326 0130 7B68     	 ldr r3,[r7,#4]
 1327 0132 1B68     	 ldr r3,[r3]
 315:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->e
 1328              	 .loc 2 315 0
 1329 0134 93F82920 	 ldrb r2,[r3,#41]
 1330              	 .loc 2 316 0
 1331 0138 7B68     	 ldr r3,[r7,#4]
 1332 013a 1B68     	 ldr r3,[r3]
 315:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                     handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->e
 1333              	 .loc 2 315 0
 1334 013c 93F82A30 	 ldrb r3,[r3,#42]
 1335 0140 FFF7FEFF 	 bl XMC_CCU4_SLICE_ModulationConfig
 1336              	.L45:
 317:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 318:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 319:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   /* PWM signal (ST bit) output gets modulated by external signal */
 320:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 1337              	 .loc 2 320 0
 1338 0144 7B68     	 ldr r3,[r7,#4]
 1339 0146 1B68     	 ldr r3,[r3]
 1340 0148 93F82E30 	 ldrb r3,[r3,#46]
 1341 014c 032B     	 cmp r3,#3
 1342 014e 19D1     	 bne .L46
 321:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 322:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 1343              	 .loc 2 322 0
 1344 0150 7B68     	 ldr r3,[r7,#4]
 1345 0152 9968     	 ldr r1,[r3,#8]
 1346 0154 7B68     	 ldr r3,[r7,#4]
 1347 0156 1B68     	 ldr r3,[r3]
 1348 0158 93F83020 	 ldrb r2,[r3,#48]
 323:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                               handle_ptr->config_ptr->ext_trap_sync);
 1349              	 .loc 2 323 0
 1350 015c 7B68     	 ldr r3,[r7,#4]
 1351 015e 1B68     	 ldr r3,[r3]
 322:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                               handle_ptr->config_ptr->ext_trap_sync);
 1352              	 .loc 2 322 0
 1353 0160 93F82F30 	 ldrb r3,[r3,#47]
 1354 0164 0846     	 mov r0,r1
 1355 0166 1146     	 mov r1,r2
 1356 0168 1A46     	 mov r2,r3
 1357 016a FFF7FEFF 	 bl XMC_CCU4_SLICE_TrapConfig
 324:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 325:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 1358              	 .loc 2 325 0
 1359 016e 7B68     	 ldr r3,[r7,#4]
 1360 0170 1B68     	 ldr r3,[r3]
 1361 0172 93F82D30 	 ldrb r3,[r3,#45]
 1362 0176 002B     	 cmp r3,#0
 1363 0178 04D0     	 beq .L46
 326:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 327:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
 1364              	 .loc 2 327 0
 1365 017a 7B68     	 ldr r3,[r7,#4]
 1366 017c 9B68     	 ldr r3,[r3,#8]
 1367 017e 1846     	 mov r0,r3
 1368 0180 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableTrap
 1369              	.L46:
 328:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 329:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 330:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLIC
 1370              	 .loc 2 330 0
 1371 0184 7B68     	 ldr r3,[r7,#4]
 1372 0186 1B68     	 ldr r3,[r3]
 1373 0188 93F82B30 	 ldrb r3,[r3,#43]
 1374 018c 022B     	 cmp r3,#2
 1375 018e 17D1     	 bne .L38
 331:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       == handle_ptr->config_ptr->ext_override_level_event))
 1376              	 .loc 2 331 0 discriminator 1
 1377 0190 7B68     	 ldr r3,[r7,#4]
 1378 0192 1B68     	 ldr r3,[r3]
 1379 0194 93F82C30 	 ldrb r3,[r3,#44]
 330:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       == handle_ptr->config_ptr->ext_override_level_event))
 1380              	 .loc 2 330 0 discriminator 1
 1381 0198 032B     	 cmp r3,#3
 1382 019a 11D1     	 bne .L38
 332:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 333:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 1383              	 .loc 2 333 0
 1384 019c 7B68     	 ldr r3,[r7,#4]
 1385 019e 9968     	 ldr r1,[r3,#8]
 334:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                    handle_ptr->config_ptr->event1_config_ptr,
 1386              	 .loc 2 334 0
 1387 01a0 7B68     	 ldr r3,[r7,#4]
 1388 01a2 1B68     	 ldr r3,[r3]
 333:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                    handle_ptr->config_ptr->event1_config_ptr,
 1389              	 .loc 2 333 0
 1390 01a4 9A69     	 ldr r2,[r3,#24]
 335:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                    handle_ptr->config_ptr->event2_config_ptr);
 1391              	 .loc 2 335 0
 1392 01a6 7B68     	 ldr r3,[r7,#4]
 1393 01a8 1B68     	 ldr r3,[r3]
 333:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****                                                    handle_ptr->config_ptr->event1_config_ptr,
 1394              	 .loc 2 333 0
 1395 01aa DB69     	 ldr r3,[r3,#28]
 1396 01ac 0846     	 mov r0,r1
 1397 01ae 1146     	 mov r1,r2
 1398 01b0 1A46     	 mov r2,r3
 1399 01b2 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
 336:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
 1400              	 .loc 2 336 0
 1401 01b6 7B68     	 ldr r3,[r7,#4]
 1402 01b8 9B68     	 ldr r3,[r3,#8]
 1403 01ba 1846     	 mov r0,r3
 1404 01bc FFF7FEFF 	 bl XMC_CCU4_SLICE_StatusBitOverrideConfig
 1405              	.L38:
 337:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 338:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 339:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** }
 1406              	 .loc 2 339 0
 1407 01c0 0837     	 adds r7,r7,#8
 1408              	.LCFI103:
 1409              	 .cfi_def_cfa_offset 8
 1410 01c2 BD46     	 mov sp,r7
 1411              	.LCFI104:
 1412              	 .cfi_def_cfa_register 13
 1413              	 
 1414 01c4 80BD     	 pop {r7,pc}
 1415              	 .cfi_endproc
 1416              	.LFE236:
 1418 01c6 00BF     	 .section .text.PWM_CCU4_Start,"ax",%progbits
 1419              	 .align 2
 1420              	 .global PWM_CCU4_Start
 1421              	 .thumb
 1422              	 .thumb_func
 1424              	PWM_CCU4_Start:
 1425              	.LFB237:
 340:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 341:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
 342:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
 343:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1426              	 .loc 2 343 0
 1427              	 .cfi_startproc
 1428              	 
 1429              	 
 1430 0000 80B5     	 push {r7,lr}
 1431              	.LCFI105:
 1432              	 .cfi_def_cfa_offset 8
 1433              	 .cfi_offset 7,-8
 1434              	 .cfi_offset 14,-4
 1435 0002 84B0     	 sub sp,sp,#16
 1436              	.LCFI106:
 1437              	 .cfi_def_cfa_offset 24
 1438 0004 00AF     	 add r7,sp,#0
 1439              	.LCFI107:
 1440              	 .cfi_def_cfa_register 7
 1441 0006 7860     	 str r0,[r7,#4]
 344:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   PWM_CCU4_STATUS_t status;
 345:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 346:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status = PWM_CCU4_STATUS_FAILURE;
 1442              	 .loc 2 346 0
 1443 0008 0123     	 movs r3,#1
 1444 000a FB73     	 strb r3,[r7,#15]
 347:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
 348:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->s
 1445              	 .loc 2 348 0
 1446 000c 7B68     	 ldr r3,[r7,#4]
 1447 000e 1B7F     	 ldrb r3,[r3,#28]
 1448 0010 012B     	 cmp r3,#1
 1449 0012 03D0     	 beq .L49
 1450              	 .loc 2 348 0 is_stmt 0 discriminator 1
 1451 0014 7B68     	 ldr r3,[r7,#4]
 1452 0016 1B7F     	 ldrb r3,[r3,#28]
 1453 0018 032B     	 cmp r3,#3
 1454 001a 17D1     	 bne .L50
 1455              	.L49:
 349:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 350:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     /* clear IDLE mode for the slice; Start timer */
 351:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
 1456              	 .loc 2 351 0 is_stmt 1
 1457 001c 7B68     	 ldr r3,[r7,#4]
 1458 001e 5A68     	 ldr r2,[r3,#4]
 1459 0020 7B68     	 ldr r3,[r7,#4]
 1460 0022 5B7B     	 ldrb r3,[r3,#13]
 1461 0024 1046     	 mov r0,r2
 1462 0026 1946     	 mov r1,r3
 1463 0028 FFF7FEFF 	 bl XMC_CCU4_EnableClock
 352:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 353:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 1464              	 .loc 2 353 0
 1465 002c 7B68     	 ldr r3,[r7,#4]
 1466 002e 1B68     	 ldr r3,[r3]
 1467 0030 93F82030 	 ldrb r3,[r3,#32]
 1468 0034 002B     	 cmp r3,#0
 1469 0036 04D1     	 bne .L51
 354:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 355:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 1470              	 .loc 2 355 0
 1471 0038 7B68     	 ldr r3,[r7,#4]
 1472 003a 9B68     	 ldr r3,[r3,#8]
 1473 003c 1846     	 mov r0,r3
 1474 003e FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 1475              	.L51:
 356:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 357:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 358:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     handle_ptr->state = PWM_CCU4_STATE_RUNNING;
 1476              	 .loc 2 358 0
 1477 0042 7B68     	 ldr r3,[r7,#4]
 1478 0044 0222     	 movs r2,#2
 1479 0046 1A77     	 strb r2,[r3,#28]
 359:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     status = PWM_CCU4_STATUS_SUCCESS;
 1480              	 .loc 2 359 0
 1481 0048 0023     	 movs r3,#0
 1482 004a FB73     	 strb r3,[r7,#15]
 1483              	.L50:
 360:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Start:start PWM");
 361:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 362:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status);
 1484              	 .loc 2 362 0
 1485 004c FB7B     	 ldrb r3,[r7,#15]
 363:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_Start() api */
 1486              	 .loc 2 363 0
 1487 004e 1846     	 mov r0,r3
 1488 0050 1037     	 adds r7,r7,#16
 1489              	.LCFI108:
 1490              	 .cfi_def_cfa_offset 8
 1491 0052 BD46     	 mov sp,r7
 1492              	.LCFI109:
 1493              	 .cfi_def_cfa_register 13
 1494              	 
 1495 0054 80BD     	 pop {r7,pc}
 1496              	 .cfi_endproc
 1497              	.LFE237:
 1499 0056 00BF     	 .section .text.PWM_CCU4_Stop,"ax",%progbits
 1500              	 .align 2
 1501              	 .global PWM_CCU4_Stop
 1502              	 .thumb
 1503              	 .thumb_func
 1505              	PWM_CCU4_Stop:
 1506              	.LFB238:
 364:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 365:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Stops the CCU4_CC4 slice. */
 366:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** PWM_CCU4_STATUS_t PWM_CCU4_Stop(PWM_CCU4_t* handle_ptr)
 367:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1507              	 .loc 2 367 0
 1508              	 .cfi_startproc
 1509              	 
 1510              	 
 1511 0000 80B5     	 push {r7,lr}
 1512              	.LCFI110:
 1513              	 .cfi_def_cfa_offset 8
 1514              	 .cfi_offset 7,-8
 1515              	 .cfi_offset 14,-4
 1516 0002 84B0     	 sub sp,sp,#16
 1517              	.LCFI111:
 1518              	 .cfi_def_cfa_offset 24
 1519 0004 00AF     	 add r7,sp,#0
 1520              	.LCFI112:
 1521              	 .cfi_def_cfa_register 7
 1522 0006 7860     	 str r0,[r7,#4]
 368:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   PWM_CCU4_STATUS_t status;
 369:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 370:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status = PWM_CCU4_STATUS_FAILURE;
 1523              	 .loc 2 370 0
 1524 0008 0123     	 movs r3,#1
 1525 000a FB73     	 strb r3,[r7,#15]
 371:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_Stop:handle_ptr NULL", (handle_ptr != NULL));
 372:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 1526              	 .loc 2 372 0
 1527 000c 7B68     	 ldr r3,[r7,#4]
 1528 000e 1B7F     	 ldrb r3,[r3,#28]
 1529 0010 002B     	 cmp r3,#0
 1530 0012 0ED0     	 beq .L54
 373:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 374:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 1531              	 .loc 2 374 0
 1532 0014 7B68     	 ldr r3,[r7,#4]
 1533 0016 9B68     	 ldr r3,[r3,#8]
 1534 0018 1846     	 mov r0,r3
 1535 001a FFF7FEFF 	 bl XMC_CCU4_SLICE_StopTimer
 375:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 1536              	 .loc 2 375 0
 1537 001e 7B68     	 ldr r3,[r7,#4]
 1538 0020 9B68     	 ldr r3,[r3,#8]
 1539 0022 1846     	 mov r0,r3
 1540 0024 FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearTimer
 376:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 377:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     handle_ptr->state = PWM_CCU4_STATE_STOPPED;
 1541              	 .loc 2 377 0
 1542 0028 7B68     	 ldr r3,[r7,#4]
 1543 002a 0322     	 movs r2,#3
 1544 002c 1A77     	 strb r2,[r3,#28]
 378:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     status = PWM_CCU4_STATUS_SUCCESS;
 1545              	 .loc 2 378 0
 1546 002e 0023     	 movs r3,#0
 1547 0030 FB73     	 strb r3,[r7,#15]
 1548              	.L54:
 379:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     XMC_DEBUG("PWM_CCU4_Stop:stop PWM");
 380:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 381:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status);
 1549              	 .loc 2 381 0
 1550 0032 FB7B     	 ldrb r3,[r7,#15]
 382:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 383:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_Stop() api */
 1551              	 .loc 2 383 0
 1552 0034 1846     	 mov r0,r3
 1553 0036 1037     	 adds r7,r7,#16
 1554              	.LCFI113:
 1555              	 .cfi_def_cfa_offset 8
 1556 0038 BD46     	 mov sp,r7
 1557              	.LCFI114:
 1558              	 .cfi_def_cfa_register 13
 1559              	 
 1560 003a 80BD     	 pop {r7,pc}
 1561              	 .cfi_endproc
 1562              	.LFE238:
 1564              	 .section .text.PWM_CCU4_GetTimerValue,"ax",%progbits
 1565              	 .align 2
 1566              	 .global PWM_CCU4_GetTimerValue
 1567              	 .thumb
 1568              	 .thumb_func
 1570              	PWM_CCU4_GetTimerValue:
 1571              	.LFB239:
 384:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 385:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Gets the timer value of  CCU4_CC4 slice. */
 386:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** uint32_t PWM_CCU4_GetTimerValue(PWM_CCU4_t* handle_ptr)
 387:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1572              	 .loc 2 387 0
 1573              	 .cfi_startproc
 1574              	 
 1575              	 
 1576 0000 80B5     	 push {r7,lr}
 1577              	.LCFI115:
 1578              	 .cfi_def_cfa_offset 8
 1579              	 .cfi_offset 7,-8
 1580              	 .cfi_offset 14,-4
 1581 0002 84B0     	 sub sp,sp,#16
 1582              	.LCFI116:
 1583              	 .cfi_def_cfa_offset 24
 1584 0004 00AF     	 add r7,sp,#0
 1585              	.LCFI117:
 1586              	 .cfi_def_cfa_register 7
 1587 0006 7860     	 str r0,[r7,#4]
 388:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t timer_value;
 389:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_GetTimerValue:handle_ptr NULL", (handle_ptr != NULL));
 390:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   timer_value = (uint32_t) XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr);
 1588              	 .loc 2 390 0
 1589 0008 7B68     	 ldr r3,[r7,#4]
 1590 000a 9B68     	 ldr r3,[r3,#8]
 1591 000c 1846     	 mov r0,r3
 1592 000e FFF7FEFF 	 bl XMC_CCU4_SLICE_GetTimerValue
 1593 0012 0346     	 mov r3,r0
 1594 0014 FB60     	 str r3,[r7,#12]
 391:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_DEBUG("PWM_CCU4_GetTimerValue:timer value");
 392:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (timer_value);
 1595              	 .loc 2 392 0
 1596 0016 FB68     	 ldr r3,[r7,#12]
 393:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** }/* end of PWM_CCU4_GetTimerValue() api */
 1597              	 .loc 2 393 0
 1598 0018 1846     	 mov r0,r3
 1599 001a 1037     	 adds r7,r7,#16
 1600              	.LCFI118:
 1601              	 .cfi_def_cfa_offset 8
 1602 001c BD46     	 mov sp,r7
 1603              	.LCFI119:
 1604              	 .cfi_def_cfa_register 13
 1605              	 
 1606 001e 80BD     	 pop {r7,pc}
 1607              	 .cfi_endproc
 1608              	.LFE239:
 1610              	 .section .text.PWM_CCU4_GetTimerStatus,"ax",%progbits
 1611              	 .align 2
 1612              	 .global PWM_CCU4_GetTimerStatus
 1613              	 .thumb
 1614              	 .thumb_func
 1616              	PWM_CCU4_GetTimerStatus:
 1617              	.LFB240:
 394:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 395:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Gets the status of  CCU4_CC4 slice. */
 396:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** bool PWM_CCU4_GetTimerStatus(PWM_CCU4_t* handle_ptr)
 397:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1618              	 .loc 2 397 0
 1619              	 .cfi_startproc
 1620              	 
 1621              	 
 1622 0000 80B5     	 push {r7,lr}
 1623              	.LCFI120:
 1624              	 .cfi_def_cfa_offset 8
 1625              	 .cfi_offset 7,-8
 1626              	 .cfi_offset 14,-4
 1627 0002 84B0     	 sub sp,sp,#16
 1628              	.LCFI121:
 1629              	 .cfi_def_cfa_offset 24
 1630 0004 00AF     	 add r7,sp,#0
 1631              	.LCFI122:
 1632              	 .cfi_def_cfa_register 7
 1633 0006 7860     	 str r0,[r7,#4]
 398:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   bool status_timer;
 399:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_GetTimerStatus:handle_ptr NULL", (handle_ptr != NULL));
 400:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status_timer = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 1634              	 .loc 2 400 0
 1635 0008 7B68     	 ldr r3,[r7,#4]
 1636 000a 9B68     	 ldr r3,[r3,#8]
 1637 000c 1846     	 mov r0,r3
 1638 000e FFF7FEFF 	 bl XMC_CCU4_SLICE_IsTimerRunning
 1639 0012 0346     	 mov r3,r0
 1640 0014 FB73     	 strb r3,[r7,#15]
 401:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status_timer);
 1641              	 .loc 2 401 0
 1642 0016 FB7B     	 ldrb r3,[r7,#15]
 402:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 403:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_GetStatus() api */
 1643              	 .loc 2 403 0
 1644 0018 1846     	 mov r0,r3
 1645 001a 1037     	 adds r7,r7,#16
 1646              	.LCFI123:
 1647              	 .cfi_def_cfa_offset 8
 1648 001c BD46     	 mov sp,r7
 1649              	.LCFI124:
 1650              	 .cfi_def_cfa_register 13
 1651              	 
 1652 001e 80BD     	 pop {r7,pc}
 1653              	 .cfi_endproc
 1654              	.LFE240:
 1656              	 .section .text.PWM_CCU4_SetFreq,"ax",%progbits
 1657              	 .align 2
 1658              	 .global PWM_CCU4_SetFreq
 1659              	 .thumb
 1660              	 .thumb_func
 1662              	PWM_CCU4_SetFreq:
 1663              	.LFB241:
 404:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 405:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 406:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 407:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Sets the frequency for CCU4_CC4 slice. */
 408:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** PWM_CCU4_STATUS_t PWM_CCU4_SetFreq(PWM_CCU4_t* handle_ptr, uint32_t pwm_freq_hz)
 409:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1664              	 .loc 2 409 0
 1665              	 .cfi_startproc
 1666              	 
 1667              	 
 1668 0000 80B5     	 push {r7,lr}
 1669              	.LCFI125:
 1670              	 .cfi_def_cfa_offset 8
 1671              	 .cfi_offset 7,-8
 1672              	 .cfi_offset 14,-4
 1673 0002 88B0     	 sub sp,sp,#32
 1674              	.LCFI126:
 1675              	 .cfi_def_cfa_offset 40
 1676 0004 00AF     	 add r7,sp,#0
 1677              	.LCFI127:
 1678              	 .cfi_def_cfa_register 7
 1679 0006 7860     	 str r0,[r7,#4]
 1680 0008 3960     	 str r1,[r7]
 410:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   PWM_CCU4_STATUS_t status;
 411:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t frequency_tclk;
 412:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t period;
 413:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t duty;
 414:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint16_t compare;
 415:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 416:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status = PWM_CCU4_STATUS_FAILURE;
 1681              	 .loc 2 416 0
 1682 000a 0123     	 movs r3,#1
 1683 000c FB77     	 strb r3,[r7,#31]
 417:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   frequency_tclk = 0U;
 1684              	 .loc 2 417 0
 1685 000e 0023     	 movs r3,#0
 1686 0010 7B61     	 str r3,[r7,#20]
 418:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_SetFreq:handle_ptr NULL", (handle_ptr != NULL));
 419:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 1687              	 .loc 2 419 0
 1688 0012 7B68     	 ldr r3,[r7,#4]
 1689 0014 1B7F     	 ldrb r3,[r3,#28]
 1690 0016 002B     	 cmp r3,#0
 1691 0018 4DD0     	 beq .L61
 420:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 421:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     if (0U == pwm_freq_hz)
 1692              	 .loc 2 421 0
 1693 001a 3B68     	 ldr r3,[r7]
 1694 001c 002B     	 cmp r3,#0
 1695 001e 4AD0     	 beq .L61
 422:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 423:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_DEBUG("PWM_CCU4_SetFreq:cannot set frequency 0Hz");
 424:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 425:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     else
 426:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 427:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       frequency_tclk = handle_ptr->frequency_tclk;
 1696              	 .loc 2 427 0
 1697 0020 7B68     	 ldr r3,[r7,#4]
 1698 0022 1B6A     	 ldr r3,[r3,#32]
 1699 0024 7B61     	 str r3,[r7,#20]
 428:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       period = frequency_tclk / pwm_freq_hz;
 1700              	 .loc 2 428 0
 1701 0026 7A69     	 ldr r2,[r7,#20]
 1702 0028 3B68     	 ldr r3,[r7]
 1703 002a B2FBF3F3 	 udiv r3,r2,r3
 1704 002e BB61     	 str r3,[r7,#24]
 429:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 430:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if ((uint32_t) XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu4_cc4_slice_t
 1705              	 .loc 2 430 0
 1706 0030 7B68     	 ldr r3,[r7,#4]
 1707 0032 1B68     	 ldr r3,[r3]
 1708 0034 9B6B     	 ldr r3,[r3,#56]
 1709 0036 1B78     	 ldrb r3,[r3]
 1710 0038 03F00103 	 and r3,r3,#1
 1711 003c DBB2     	 uxtb r3,r3
 1712 003e 002B     	 cmp r3,#0
 1713 0040 02D0     	 beq .L62
 431:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 432:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         period = period >> 1U;/*divide by 2*/
 1714              	 .loc 2 432 0
 1715 0042 BB69     	 ldr r3,[r7,#24]
 1716 0044 5B08     	 lsrs r3,r3,#1
 1717 0046 BB61     	 str r3,[r7,#24]
 1718              	.L62:
 433:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 434:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 435:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if ((period != 0U) && (period <= PWM_CCU4_MAX_TIMER_COUNT))
 1719              	 .loc 2 435 0
 1720 0048 BB69     	 ldr r3,[r7,#24]
 1721 004a 002B     	 cmp r3,#0
 1722 004c 33D0     	 beq .L61
 1723              	 .loc 2 435 0 is_stmt 0 discriminator 1
 1724 004e BB69     	 ldr r3,[r7,#24]
 1725 0050 B3F5803F 	 cmp r3,#65536
 1726 0054 2FD2     	 bcs .L61
 436:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 437:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         /*Calculate the current duty cycle in no-timer concatenation mode*/
 438:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         duty = handle_ptr->sym_duty;
 1727              	 .loc 2 438 0 is_stmt 1
 1728 0056 7B68     	 ldr r3,[r7,#4]
 1729 0058 5B6A     	 ldr r3,[r3,#36]
 1730 005a 3B61     	 str r3,[r7,#16]
 439:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 440:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         duty = (PWM_CCU4_DUTY_FULL_SCALE - duty);
 1731              	 .loc 2 440 0
 1732 005c 3B69     	 ldr r3,[r7,#16]
 1733 005e C3F51C53 	 rsb r3,r3,#9984
 1734 0062 1033     	 adds r3,r3,#16
 1735 0064 3B61     	 str r3,[r7,#16]
 441:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         duty = duty * period;
 1736              	 .loc 2 441 0
 1737 0066 3B69     	 ldr r3,[r7,#16]
 1738 0068 BA69     	 ldr r2,[r7,#24]
 1739 006a 02FB03F3 	 mul r3,r2,r3
 1740 006e 3B61     	 str r3,[r7,#16]
 442:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         duty = duty / PWM_CCU4_DUTY_FULL_SCALE;
 1741              	 .loc 2 442 0
 1742 0070 3B69     	 ldr r3,[r7,#16]
 1743 0072 134A     	 ldr r2,.L64
 1744 0074 A2FB0323 	 umull r2,r3,r2,r3
 1745 0078 5B0B     	 lsrs r3,r3,#13
 1746 007a 3B61     	 str r3,[r7,#16]
 443:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 444:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         compare = (uint16_t) duty;
 1747              	 .loc 2 444 0
 1748 007c 3B69     	 ldr r3,[r7,#16]
 1749 007e FB81     	 strh r3,[r7,#14]
 445:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 446:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)(period - 1U));
 1750              	 .loc 2 446 0
 1751 0080 7B68     	 ldr r3,[r7,#4]
 1752 0082 9A68     	 ldr r2,[r3,#8]
 1753 0084 BB69     	 ldr r3,[r7,#24]
 1754 0086 9BB2     	 uxth r3,r3
 1755 0088 013B     	 subs r3,r3,#1
 1756 008a 9BB2     	 uxth r3,r3
 1757 008c 1046     	 mov r0,r2
 1758 008e 1946     	 mov r1,r3
 1759 0090 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 447:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, compare);
 1760              	 .loc 2 447 0
 1761 0094 7B68     	 ldr r3,[r7,#4]
 1762 0096 9A68     	 ldr r2,[r3,#8]
 1763 0098 FB89     	 ldrh r3,[r7,#14]
 1764 009a 1046     	 mov r0,r2
 1765 009c 1946     	 mov r1,r3
 1766 009e FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 448:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 1767              	 .loc 2 448 0
 1768 00a2 7B68     	 ldr r3,[r7,#4]
 1769 00a4 5A68     	 ldr r2,[r3,#4]
 1770 00a6 7B68     	 ldr r3,[r7,#4]
 1771 00a8 1B69     	 ldr r3,[r3,#16]
 1772 00aa 1046     	 mov r0,r2
 1773 00ac 1946     	 mov r1,r3
 1774 00ae FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 449:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_DEBUG("PWM_CCU4_SetFreq:frequency set");
 450:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         status = PWM_CCU4_STATUS_SUCCESS;
 1775              	 .loc 2 450 0
 1776 00b2 0023     	 movs r3,#0
 1777 00b4 FB77     	 strb r3,[r7,#31]
 1778              	.L61:
 451:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 452:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 453:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 454:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status);
 1779              	 .loc 2 454 0
 1780 00b6 FB7F     	 ldrb r3,[r7,#31]
 455:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 456:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_SetFreqSymmetric() api */
 1781              	 .loc 2 456 0
 1782 00b8 1846     	 mov r0,r3
 1783 00ba 2037     	 adds r7,r7,#32
 1784              	.LCFI128:
 1785              	 .cfi_def_cfa_offset 8
 1786 00bc BD46     	 mov sp,r7
 1787              	.LCFI129:
 1788              	 .cfi_def_cfa_register 13
 1789              	 
 1790 00be 80BD     	 pop {r7,pc}
 1791              	.L65:
 1792              	 .align 2
 1793              	.L64:
 1794 00c0 5917B7D1 	 .word -776530087
 1795              	 .cfi_endproc
 1796              	.LFE241:
 1798              	 .section .text.PWM_CCU4_SetDutyCycle,"ax",%progbits
 1799              	 .align 2
 1800              	 .global PWM_CCU4_SetDutyCycle
 1801              	 .thumb
 1802              	 .thumb_func
 1804              	PWM_CCU4_SetDutyCycle:
 1805              	.LFB242:
 457:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 458:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 459:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 460:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Sets the duty cycle (uint32_t) for CCU4_CC4 slice. */
 461:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** PWM_CCU4_STATUS_t PWM_CCU4_SetDutyCycle(PWM_CCU4_t* handle_ptr, uint32_t duty_cycle)
 462:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1806              	 .loc 2 462 0
 1807              	 .cfi_startproc
 1808              	 
 1809              	 
 1810 0000 80B5     	 push {r7,lr}
 1811              	.LCFI130:
 1812              	 .cfi_def_cfa_offset 8
 1813              	 .cfi_offset 7,-8
 1814              	 .cfi_offset 14,-4
 1815 0002 86B0     	 sub sp,sp,#24
 1816              	.LCFI131:
 1817              	 .cfi_def_cfa_offset 32
 1818 0004 00AF     	 add r7,sp,#0
 1819              	.LCFI132:
 1820              	 .cfi_def_cfa_register 7
 1821 0006 7860     	 str r0,[r7,#4]
 1822 0008 3960     	 str r1,[r7]
 463:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   PWM_CCU4_STATUS_t status;
 464:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t period;
 465:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t compare;
 466:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 467:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status = PWM_CCU4_STATUS_FAILURE;
 1823              	 .loc 2 467 0
 1824 000a 0123     	 movs r3,#1
 1825 000c FB75     	 strb r3,[r7,#23]
 468:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_SetDutyCycle:handle_ptr NULL", (handle_ptr != NULL));
 469:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 1826              	 .loc 2 469 0
 1827 000e 7B68     	 ldr r3,[r7,#4]
 1828 0010 1B7F     	 ldrb r3,[r3,#28]
 1829 0012 002B     	 cmp r3,#0
 1830 0014 2DD0     	 beq .L67
 470:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 471:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     /* duty cycle has to be in between 0 and 100 */
 472:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     if ((duty_cycle > PWM_CCU4_SYM_DUTY_MAX))
 1831              	 .loc 2 472 0
 1832 0016 3B68     	 ldr r3,[r7]
 1833 0018 42F21072 	 movw r2,#10000
 1834 001c 9342     	 cmp r3,r2
 1835 001e 28D8     	 bhi .L67
 473:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 474:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_DEBUG("PWM_CCU4_SetDutyCycle:Cannot set duty cycle > 100%%");
 475:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 476:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     else
 477:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 478:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       period = (uint32_t) XMC_CCU4_SLICE_GetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr) + 1U;
 1836              	 .loc 2 478 0
 1837 0020 7B68     	 ldr r3,[r7,#4]
 1838 0022 9B68     	 ldr r3,[r3,#8]
 1839 0024 1846     	 mov r0,r3
 1840 0026 FFF7FEFF 	 bl XMC_CCU4_SLICE_GetTimerPeriodMatch
 1841 002a 0346     	 mov r3,r0
 1842 002c 0133     	 adds r3,r3,#1
 1843 002e 3B61     	 str r3,[r7,#16]
 479:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 480:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
 481:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       compare = ((period * (PWM_CCU4_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU4_DUTY_FULL_SCALE);
 1844              	 .loc 2 481 0
 1845 0030 3B68     	 ldr r3,[r7]
 1846 0032 C3F51C53 	 rsb r3,r3,#9984
 1847 0036 1033     	 adds r3,r3,#16
 1848 0038 3A69     	 ldr r2,[r7,#16]
 1849 003a 02FB03F3 	 mul r3,r2,r3
 1850 003e 0F4A     	 ldr r2,.L69
 1851 0040 A2FB0323 	 umull r2,r3,r2,r3
 1852 0044 5B0B     	 lsrs r3,r3,#13
 1853 0046 FB60     	 str r3,[r7,#12]
 482:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 483:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) compare);
 1854              	 .loc 2 483 0
 1855 0048 7B68     	 ldr r3,[r7,#4]
 1856 004a 9A68     	 ldr r2,[r3,#8]
 1857 004c FB68     	 ldr r3,[r7,#12]
 1858 004e 9BB2     	 uxth r3,r3
 1859 0050 1046     	 mov r0,r2
 1860 0052 1946     	 mov r1,r3
 1861 0054 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 484:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 1862              	 .loc 2 484 0
 1863 0058 7B68     	 ldr r3,[r7,#4]
 1864 005a 5A68     	 ldr r2,[r3,#4]
 1865 005c 7B68     	 ldr r3,[r7,#4]
 1866 005e 1B69     	 ldr r3,[r3,#16]
 1867 0060 1046     	 mov r0,r2
 1868 0062 1946     	 mov r1,r3
 1869 0064 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 485:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 486:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       handle_ptr->sym_duty = duty_cycle;
 1870              	 .loc 2 486 0
 1871 0068 7B68     	 ldr r3,[r7,#4]
 1872 006a 3A68     	 ldr r2,[r7]
 1873 006c 5A62     	 str r2,[r3,#36]
 487:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 488:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_DEBUG("PWM_CCU4_SetDutyCycle:dutycycle set");
 489:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       status = PWM_CCU4_STATUS_SUCCESS;
 1874              	 .loc 2 489 0
 1875 006e 0023     	 movs r3,#0
 1876 0070 FB75     	 strb r3,[r7,#23]
 1877              	.L67:
 490:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 491:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 492:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status);
 1878              	 .loc 2 492 0
 1879 0072 FB7D     	 ldrb r3,[r7,#23]
 493:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_SetDutyCycle() api */
 1880              	 .loc 2 493 0
 1881 0074 1846     	 mov r0,r3
 1882 0076 1837     	 adds r7,r7,#24
 1883              	.LCFI133:
 1884              	 .cfi_def_cfa_offset 8
 1885 0078 BD46     	 mov sp,r7
 1886              	.LCFI134:
 1887              	 .cfi_def_cfa_register 13
 1888              	 
 1889 007a 80BD     	 pop {r7,pc}
 1890              	.L70:
 1891              	 .align 2
 1892              	.L69:
 1893 007c 5917B7D1 	 .word -776530087
 1894              	 .cfi_endproc
 1895              	.LFE242:
 1897              	 .section .text.PWM_CCU4_SetFreqAndDutyCycle,"ax",%progbits
 1898              	 .align 2
 1899              	 .global PWM_CCU4_SetFreqAndDutyCycle
 1900              	 .thumb
 1901              	 .thumb_func
 1903              	PWM_CCU4_SetFreqAndDutyCycle:
 1904              	.LFB243:
 494:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 495:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 496:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 497:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Sets the frequency and duty cycle for CCU4_CC4 slice Symmetric Mode. */
 498:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** PWM_CCU4_STATUS_t PWM_CCU4_SetFreqAndDutyCycle(PWM_CCU4_t* handle_ptr, uint32_t pwm_freq_hz, uint32
 499:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 1905              	 .loc 2 499 0
 1906              	 .cfi_startproc
 1907              	 
 1908              	 
 1909 0000 80B5     	 push {r7,lr}
 1910              	.LCFI135:
 1911              	 .cfi_def_cfa_offset 8
 1912              	 .cfi_offset 7,-8
 1913              	 .cfi_offset 14,-4
 1914 0002 88B0     	 sub sp,sp,#32
 1915              	.LCFI136:
 1916              	 .cfi_def_cfa_offset 40
 1917 0004 00AF     	 add r7,sp,#0
 1918              	.LCFI137:
 1919              	 .cfi_def_cfa_register 7
 1920 0006 F860     	 str r0,[r7,#12]
 1921 0008 B960     	 str r1,[r7,#8]
 1922 000a 7A60     	 str r2,[r7,#4]
 500:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 501:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   PWM_CCU4_STATUS_t status;
 502:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t frequency_tclk;
 503:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t period;
 504:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   uint32_t compare;
 505:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 506:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status = PWM_CCU4_STATUS_FAILURE;
 1923              	 .loc 2 506 0
 1924 000c 0123     	 movs r3,#1
 1925 000e FB77     	 strb r3,[r7,#31]
 507:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   frequency_tclk = 0U;
 1926              	 .loc 2 507 0
 1927 0010 0023     	 movs r3,#0
 1928 0012 7B61     	 str r3,[r7,#20]
 508:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_SetFreqAndDutyCycle:handle_ptr NULL", (handle_ptr != NULL));
 509:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 1929              	 .loc 2 509 0
 1930 0014 FB68     	 ldr r3,[r7,#12]
 1931 0016 1B7F     	 ldrb r3,[r3,#28]
 1932 0018 002B     	 cmp r3,#0
 1933 001a 4DD0     	 beq .L72
 510:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   {
 511:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     if (0U == pwm_freq_hz)
 1934              	 .loc 2 511 0
 1935 001c BB68     	 ldr r3,[r7,#8]
 1936 001e 002B     	 cmp r3,#0
 1937 0020 4AD0     	 beq .L72
 512:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 513:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_DEBUG("PWM_CCU4_SetFreqAndDutyCycleSymmetric:cannot set frequency 0Hz");
 514:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 515:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     else if (duty > PWM_CCU4_SYM_DUTY_MAX)
 1938              	 .loc 2 515 0
 1939 0022 7B68     	 ldr r3,[r7,#4]
 1940 0024 42F21072 	 movw r2,#10000
 1941 0028 9342     	 cmp r3,r2
 1942 002a 45D8     	 bhi .L72
 516:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 517:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       XMC_DEBUG("PWM_CCU4_SetFreqAndDutyCycle:duty > 100%%");
 518:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 519:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     else
 520:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     {
 521:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       frequency_tclk = handle_ptr->frequency_tclk;
 1943              	 .loc 2 521 0
 1944 002c FB68     	 ldr r3,[r7,#12]
 1945 002e 1B6A     	 ldr r3,[r3,#32]
 1946 0030 7B61     	 str r3,[r7,#20]
 522:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       period = frequency_tclk / pwm_freq_hz;
 1947              	 .loc 2 522 0
 1948 0032 7A69     	 ldr r2,[r7,#20]
 1949 0034 BB68     	 ldr r3,[r7,#8]
 1950 0036 B2FBF3F3 	 udiv r3,r2,r3
 1951 003a BB61     	 str r3,[r7,#24]
 523:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 524:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if ((uint32_t) XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu4_cc4_slice_t
 1952              	 .loc 2 524 0
 1953 003c FB68     	 ldr r3,[r7,#12]
 1954 003e 1B68     	 ldr r3,[r3]
 1955 0040 9B6B     	 ldr r3,[r3,#56]
 1956 0042 1B78     	 ldrb r3,[r3]
 1957 0044 03F00103 	 and r3,r3,#1
 1958 0048 DBB2     	 uxtb r3,r3
 1959 004a 002B     	 cmp r3,#0
 1960 004c 02D0     	 beq .L73
 525:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 526:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         period = period >> 1U;/*divide by 2*/
 1961              	 .loc 2 526 0
 1962 004e BB69     	 ldr r3,[r7,#24]
 1963 0050 5B08     	 lsrs r3,r3,#1
 1964 0052 BB61     	 str r3,[r7,#24]
 1965              	.L73:
 527:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 528:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 529:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       if ((period != 0U) && (period <= PWM_CCU4_MAX_TIMER_COUNT))
 1966              	 .loc 2 529 0
 1967 0054 BB69     	 ldr r3,[r7,#24]
 1968 0056 002B     	 cmp r3,#0
 1969 0058 2ED0     	 beq .L72
 1970              	 .loc 2 529 0 is_stmt 0 discriminator 1
 1971 005a BB69     	 ldr r3,[r7,#24]
 1972 005c B3F5803F 	 cmp r3,#65536
 1973 0060 2AD2     	 bcs .L72
 530:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       {
 531:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         /*Calculate the current duty cycle in no-timer concatenation mode*/
 532:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         compare = ((period * (PWM_CCU4_DUTY_FULL_SCALE - duty)) / PWM_CCU4_DUTY_FULL_SCALE);
 1974              	 .loc 2 532 0 is_stmt 1
 1975 0062 7B68     	 ldr r3,[r7,#4]
 1976 0064 C3F51C53 	 rsb r3,r3,#9984
 1977 0068 1033     	 adds r3,r3,#16
 1978 006a BA69     	 ldr r2,[r7,#24]
 1979 006c 02FB03F3 	 mul r3,r2,r3
 1980 0070 144A     	 ldr r2,.L75
 1981 0072 A2FB0323 	 umull r2,r3,r2,r3
 1982 0076 5B0B     	 lsrs r3,r3,#13
 1983 0078 3B61     	 str r3,[r7,#16]
 533:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 534:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)(period - 1U));
 1984              	 .loc 2 534 0
 1985 007a FB68     	 ldr r3,[r7,#12]
 1986 007c 9A68     	 ldr r2,[r3,#8]
 1987 007e BB69     	 ldr r3,[r7,#24]
 1988 0080 9BB2     	 uxth r3,r3
 1989 0082 013B     	 subs r3,r3,#1
 1990 0084 9BB2     	 uxth r3,r3
 1991 0086 1046     	 mov r0,r2
 1992 0088 1946     	 mov r1,r3
 1993 008a FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 535:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) compare);
 1994              	 .loc 2 535 0
 1995 008e FB68     	 ldr r3,[r7,#12]
 1996 0090 9A68     	 ldr r2,[r3,#8]
 1997 0092 3B69     	 ldr r3,[r7,#16]
 1998 0094 9BB2     	 uxth r3,r3
 1999 0096 1046     	 mov r0,r2
 2000 0098 1946     	 mov r1,r3
 2001 009a FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 536:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 537:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 2002              	 .loc 2 537 0
 2003 009e FB68     	 ldr r3,[r7,#12]
 2004 00a0 5A68     	 ldr r2,[r3,#4]
 2005 00a2 FB68     	 ldr r3,[r7,#12]
 2006 00a4 1B69     	 ldr r3,[r3,#16]
 2007 00a6 1046     	 mov r0,r2
 2008 00a8 1946     	 mov r1,r3
 2009 00aa FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 538:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 539:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         handle_ptr->sym_duty = duty;
 2010              	 .loc 2 539 0
 2011 00ae FB68     	 ldr r3,[r7,#12]
 2012 00b0 7A68     	 ldr r2,[r7,#4]
 2013 00b2 5A62     	 str r2,[r3,#36]
 540:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 541:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         XMC_DEBUG("PWM_CCU4_SetFreqAndDutyCycle:frequency set");
 542:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****         status = PWM_CCU4_STATUS_SUCCESS;
 2014              	 .loc 2 542 0
 2015 00b4 0023     	 movs r3,#0
 2016 00b6 FB77     	 strb r3,[r7,#31]
 2017              	.L72:
 543:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****       }
 544:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****     }
 545:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   }
 546:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status);
 2018              	 .loc 2 546 0
 2019 00b8 FB7F     	 ldrb r3,[r7,#31]
 547:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 548:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** }/* end of PWM_CCU4_SetFreqAndDutyCycle() api */
 2020              	 .loc 2 548 0
 2021 00ba 1846     	 mov r0,r3
 2022 00bc 2037     	 adds r7,r7,#32
 2023              	.LCFI138:
 2024              	 .cfi_def_cfa_offset 8
 2025 00be BD46     	 mov sp,r7
 2026              	.LCFI139:
 2027              	 .cfi_def_cfa_register 13
 2028              	 
 2029 00c0 80BD     	 pop {r7,pc}
 2030              	.L76:
 2031 00c2 00BF     	 .align 2
 2032              	.L75:
 2033 00c4 5917B7D1 	 .word -776530087
 2034              	 .cfi_endproc
 2035              	.LFE243:
 2037              	 .section .text.PWM_CCU4_SetDither,"ax",%progbits
 2038              	 .align 2
 2039              	 .global PWM_CCU4_SetDither
 2040              	 .thumb
 2041              	 .thumb_func
 2043              	PWM_CCU4_SetDither:
 2044              	.LFB244:
 549:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 550:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 551:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 552:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Sets the dither value, enables the dither. */
 553:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** void PWM_CCU4_SetDither(PWM_CCU4_t* handle_ptr, bool dither_period, bool dither_comp, uint8_t dithe
 554:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 2045              	 .loc 2 554 0
 2046              	 .cfi_startproc
 2047              	 
 2048              	 
 2049 0000 80B5     	 push {r7,lr}
 2050              	.LCFI140:
 2051              	 .cfi_def_cfa_offset 8
 2052              	 .cfi_offset 7,-8
 2053              	 .cfi_offset 14,-4
 2054 0002 82B0     	 sub sp,sp,#8
 2055              	.LCFI141:
 2056              	 .cfi_def_cfa_offset 16
 2057 0004 00AF     	 add r7,sp,#0
 2058              	.LCFI142:
 2059              	 .cfi_def_cfa_register 7
 2060 0006 7860     	 str r0,[r7,#4]
 2061 0008 0846     	 mov r0,r1
 2062 000a 1146     	 mov r1,r2
 2063 000c 1A46     	 mov r2,r3
 2064 000e 0346     	 mov r3,r0
 2065 0010 FB70     	 strb r3,[r7,#3]
 2066 0012 0B46     	 mov r3,r1
 2067 0014 BB70     	 strb r3,[r7,#2]
 2068 0016 1346     	 mov r3,r2
 2069 0018 7B70     	 strb r3,[r7,#1]
 555:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 556:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_SetDither:handle_ptr NULL", (handle_ptr != NULL));
 557:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_CCU4_SLICE_EnableDithering(handle_ptr->ccu4_slice_ptr, dither_period, dither_comp, dither_val
 2070              	 .loc 2 557 0
 2071 001a 7B68     	 ldr r3,[r7,#4]
 2072 001c 9868     	 ldr r0,[r3,#8]
 2073 001e F978     	 ldrb r1,[r7,#3]
 2074 0020 BA78     	 ldrb r2,[r7,#2]
 2075 0022 7B78     	 ldrb r3,[r7,#1]
 2076 0024 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableDithering
 558:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 2077              	 .loc 2 558 0
 2078 0028 7B68     	 ldr r3,[r7,#4]
 2079 002a 5A68     	 ldr r2,[r3,#4]
 2080 002c 7B68     	 ldr r3,[r7,#4]
 2081 002e 5B69     	 ldr r3,[r3,#20]
 2082 0030 1046     	 mov r0,r2
 2083 0032 1946     	 mov r1,r3
 2084 0034 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 559:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_DEBUG("PWM_CCU4_SetDither:dither compare value set");
 560:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 561:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** }/* end of PWM_CCU4_SetDither() api */
 2085              	 .loc 2 561 0
 2086 0038 0837     	 adds r7,r7,#8
 2087              	.LCFI143:
 2088              	 .cfi_def_cfa_offset 8
 2089 003a BD46     	 mov sp,r7
 2090              	.LCFI144:
 2091              	 .cfi_def_cfa_register 13
 2092              	 
 2093 003c 80BD     	 pop {r7,pc}
 2094              	 .cfi_endproc
 2095              	.LFE244:
 2097 003e 00BF     	 .section .text.PWM_CCU4_ClearTrap,"ax",%progbits
 2098              	 .align 2
 2099              	 .global PWM_CCU4_ClearTrap
 2100              	 .thumb
 2101              	 .thumb_func
 2103              	PWM_CCU4_ClearTrap:
 2104              	.LFB245:
 562:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 563:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 564:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 565:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*exits trap condition if trap signal is inactive */
 566:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** void PWM_CCU4_ClearTrap(PWM_CCU4_t* handle_ptr)
 567:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 2105              	 .loc 2 567 0
 2106              	 .cfi_startproc
 2107              	 
 2108              	 
 2109 0000 80B5     	 push {r7,lr}
 2110              	.LCFI145:
 2111              	 .cfi_def_cfa_offset 8
 2112              	 .cfi_offset 7,-8
 2113              	 .cfi_offset 14,-4
 2114 0002 82B0     	 sub sp,sp,#8
 2115              	.LCFI146:
 2116              	 .cfi_def_cfa_offset 16
 2117 0004 00AF     	 add r7,sp,#0
 2118              	.LCFI147:
 2119              	 .cfi_def_cfa_register 7
 2120 0006 7860     	 str r0,[r7,#4]
 568:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 569:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_ClearTrap:handle_ptr NULL", (handle_ptr != NULL));
 570:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 2121              	 .loc 2 570 0
 2122 0008 7B68     	 ldr r3,[r7,#4]
 2123 000a 9B68     	 ldr r3,[r3,#8]
 2124 000c 1846     	 mov r0,r3
 2125 000e 0A21     	 movs r1,#10
 2126 0010 FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearEvent
 571:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_DEBUG("PWM_CCU4_ClearTrap:trap event cleared");
 572:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 573:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** }/* end of PWM_CCU4_ClearTrap() api */
 2127              	 .loc 2 573 0
 2128 0014 0837     	 adds r7,r7,#8
 2129              	.LCFI148:
 2130              	 .cfi_def_cfa_offset 8
 2131 0016 BD46     	 mov sp,r7
 2132              	.LCFI149:
 2133              	 .cfi_def_cfa_register 13
 2134              	 
 2135 0018 80BD     	 pop {r7,pc}
 2136              	 .cfi_endproc
 2137              	.LFE245:
 2139 001a 00BF     	 .section .text.PWM_CCU4_GetInterruptStatus,"ax",%progbits
 2140              	 .align 2
 2141              	 .global PWM_CCU4_GetInterruptStatus
 2142              	 .thumb
 2143              	 .thumb_func
 2145              	PWM_CCU4_GetInterruptStatus:
 2146              	.LFB246:
 574:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 575:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 576:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 577:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Gets the interrupt status of  CCU4_CC4 slice. */
 578:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** bool PWM_CCU4_GetInterruptStatus(PWM_CCU4_t* handle_ptr, XMC_CCU4_SLICE_IRQ_ID_t pwm_interrupt)
 579:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 2147              	 .loc 2 579 0
 2148              	 .cfi_startproc
 2149              	 
 2150              	 
 2151 0000 80B5     	 push {r7,lr}
 2152              	.LCFI150:
 2153              	 .cfi_def_cfa_offset 8
 2154              	 .cfi_offset 7,-8
 2155              	 .cfi_offset 14,-4
 2156 0002 84B0     	 sub sp,sp,#16
 2157              	.LCFI151:
 2158              	 .cfi_def_cfa_offset 24
 2159 0004 00AF     	 add r7,sp,#0
 2160              	.LCFI152:
 2161              	 .cfi_def_cfa_register 7
 2162 0006 7860     	 str r0,[r7,#4]
 2163 0008 0B46     	 mov r3,r1
 2164 000a FB70     	 strb r3,[r7,#3]
 580:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   bool status = (bool) false;
 2165              	 .loc 2 580 0
 2166 000c 0023     	 movs r3,#0
 2167 000e FB73     	 strb r3,[r7,#15]
 581:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_GetInterruptStatus:handle_ptr NULL", (handle_ptr != NULL));
 582:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, pwm_interrupt);
 2168              	 .loc 2 582 0
 2169 0010 7B68     	 ldr r3,[r7,#4]
 2170 0012 9A68     	 ldr r2,[r3,#8]
 2171 0014 FB78     	 ldrb r3,[r7,#3]
 2172 0016 1046     	 mov r0,r2
 2173 0018 1946     	 mov r1,r3
 2174 001a FFF7FEFF 	 bl XMC_CCU4_SLICE_GetEvent
 2175 001e 0346     	 mov r3,r0
 2176 0020 FB73     	 strb r3,[r7,#15]
 583:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   return (status);
 2177              	 .loc 2 583 0
 2178 0022 FB7B     	 ldrb r3,[r7,#15]
 584:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_GetInterruptStatus() api */
 2179              	 .loc 2 584 0
 2180 0024 1846     	 mov r0,r3
 2181 0026 1037     	 adds r7,r7,#16
 2182              	.LCFI153:
 2183              	 .cfi_def_cfa_offset 8
 2184 0028 BD46     	 mov sp,r7
 2185              	.LCFI154:
 2186              	 .cfi_def_cfa_register 13
 2187              	 
 2188 002a 80BD     	 pop {r7,pc}
 2189              	 .cfi_endproc
 2190              	.LFE246:
 2192              	 .section .text.PWM_CCU4_ClearEvent,"ax",%progbits
 2193              	 .align 2
 2194              	 .global PWM_CCU4_ClearEvent
 2195              	 .thumb
 2196              	 .thumb_func
 2198              	PWM_CCU4_ClearEvent:
 2199              	.LFB247:
 585:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 586:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /**************************************************************************************************
 587:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** 
 588:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** /*Acknowledges the interrupt of  CCU4_CC4 slice. */
 589:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** void PWM_CCU4_ClearEvent(PWM_CCU4_t* handle_ptr, XMC_CCU4_SLICE_IRQ_ID_t pwm_interrupt)
 590:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** {
 2200              	 .loc 2 590 0
 2201              	 .cfi_startproc
 2202              	 
 2203              	 
 2204 0000 80B5     	 push {r7,lr}
 2205              	.LCFI155:
 2206              	 .cfi_def_cfa_offset 8
 2207              	 .cfi_offset 7,-8
 2208              	 .cfi_offset 14,-4
 2209 0002 82B0     	 sub sp,sp,#8
 2210              	.LCFI156:
 2211              	 .cfi_def_cfa_offset 16
 2212 0004 00AF     	 add r7,sp,#0
 2213              	.LCFI157:
 2214              	 .cfi_def_cfa_register 7
 2215 0006 7860     	 str r0,[r7,#4]
 2216 0008 0B46     	 mov r3,r1
 2217 000a FB70     	 strb r3,[r7,#3]
 591:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_ASSERT("PWM_CCU4_ClearEvent:handle_ptr NULL", (handle_ptr != NULL));
 592:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, pwm_interrupt);
 2218              	 .loc 2 592 0
 2219 000c 7B68     	 ldr r3,[r7,#4]
 2220 000e 9A68     	 ldr r2,[r3,#8]
 2221 0010 FB78     	 ldrb r3,[r7,#3]
 2222 0012 1046     	 mov r0,r2
 2223 0014 1946     	 mov r1,r3
 2224 0016 FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearEvent
 593:../Dave/Generated/PWM_CCU4/pwm_ccu4.c ****   XMC_DEBUG("PWM_CCU4_ClearEvent:Acknowledge Interrupt");
 594:../Dave/Generated/PWM_CCU4/pwm_ccu4.c **** } /* end of PWM_CCU4_ClearEvent() api */
 2225              	 .loc 2 594 0
 2226 001a 0837     	 adds r7,r7,#8
 2227              	.LCFI158:
 2228              	 .cfi_def_cfa_offset 8
 2229 001c BD46     	 mov sp,r7
 2230              	.LCFI159:
 2231              	 .cfi_def_cfa_register 13
 2232              	 
 2233 001e 80BD     	 pop {r7,pc}
 2234              	 .cfi_endproc
 2235              	.LFE247:
 2237              	 .text
 2238              	.Letext0:
 2239              	 .file 3 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2240              	 .file 4 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2241              	 .file 5 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 2242              	 .file 6 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc_gpio.h"
 2243              	 .file 7 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc4_gpio.h"
 2244              	 .file 8 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc4_scu.h"
 2245              	 .file 9 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Dave/Generated/DAVE_Common.h"
 2246              	 .file 10 "../Dave/Generated/PWM_CCU4/../GLOBAL_CCU4/global_ccu4.h"
 2247              	 .file 11 "../Dave/Generated/PWM_CCU4/pwm_ccu4.h"
 2248              	 .file 12 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/cmsis_gcc.h"
 2249              	 .file 13 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/core_cm4.h"
 2250              	 .file 14 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pwm_ccu4.c
    {standard input}:20     .text.XMC_CCU4_EnableClock:00000000 $t
    {standard input}:24     .text.XMC_CCU4_EnableClock:00000000 XMC_CCU4_EnableClock
    {standard input}:68     .text.XMC_CCU4_SLICE_EnableTrap:00000000 $t
    {standard input}:72     .text.XMC_CCU4_SLICE_EnableTrap:00000000 XMC_CCU4_SLICE_EnableTrap
    {standard input}:113    .text.XMC_CCU4_SLICE_IsTimerRunning:00000000 $t
    {standard input}:117    .text.XMC_CCU4_SLICE_IsTimerRunning:00000000 XMC_CCU4_SLICE_IsTimerRunning
    {standard input}:162    .text.XMC_CCU4_SLICE_StartTimer:00000000 $t
    {standard input}:166    .text.XMC_CCU4_SLICE_StartTimer:00000000 XMC_CCU4_SLICE_StartTimer
    {standard input}:205    .text.XMC_CCU4_SLICE_StopTimer:00000000 $t
    {standard input}:209    .text.XMC_CCU4_SLICE_StopTimer:00000000 XMC_CCU4_SLICE_StopTimer
    {standard input}:248    .text.XMC_CCU4_SLICE_ClearTimer:00000000 $t
    {standard input}:252    .text.XMC_CCU4_SLICE_ClearTimer:00000000 XMC_CCU4_SLICE_ClearTimer
    {standard input}:291    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:295    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU4_SLICE_SetTimerPeriodMatch
    {standard input}:336    .text.XMC_CCU4_SLICE_GetTimerPeriodMatch:00000000 $t
    {standard input}:340    .text.XMC_CCU4_SLICE_GetTimerPeriodMatch:00000000 XMC_CCU4_SLICE_GetTimerPeriodMatch
    {standard input}:380    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:384    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 XMC_CCU4_SLICE_SetTimerCompareMatch
    {standard input}:425    .text.XMC_CCU4_EnableShadowTransfer:00000000 $t
    {standard input}:429    .text.XMC_CCU4_EnableShadowTransfer:00000000 XMC_CCU4_EnableShadowTransfer
    {standard input}:469    .text.XMC_CCU4_SLICE_GetTimerValue:00000000 $t
    {standard input}:473    .text.XMC_CCU4_SLICE_GetTimerValue:00000000 XMC_CCU4_SLICE_GetTimerValue
    {standard input}:513    .text.XMC_CCU4_SLICE_EnableEvent:00000000 $t
    {standard input}:517    .text.XMC_CCU4_SLICE_EnableEvent:00000000 XMC_CCU4_SLICE_EnableEvent
    {standard input}:563    .text.XMC_CCU4_SLICE_ClearEvent:00000000 $t
    {standard input}:567    .text.XMC_CCU4_SLICE_ClearEvent:00000000 XMC_CCU4_SLICE_ClearEvent
    {standard input}:610    .text.XMC_CCU4_SLICE_GetEvent:00000000 $t
    {standard input}:614    .text.XMC_CCU4_SLICE_GetEvent:00000000 XMC_CCU4_SLICE_GetEvent
    {standard input}:663    .text.PWM_CCU4_GetAppVersion:00000000 $t
    {standard input}:668    .text.PWM_CCU4_GetAppVersion:00000000 PWM_CCU4_GetAppVersion
    {standard input}:729    .text.PWM_CCU4_Init:00000000 $t
    {standard input}:734    .text.PWM_CCU4_Init:00000000 PWM_CCU4_Init
    {standard input}:1151   .text.PWM_CCU4_lConfigure_Events:00000000 PWM_CCU4_lConfigure_Events
    {standard input}:941    .text.PWM_CCU4_lInit_Interrupt:00000000 PWM_CCU4_lInit_Interrupt
    {standard input}:1424   .text.PWM_CCU4_Start:00000000 PWM_CCU4_Start
    {standard input}:937    .text.PWM_CCU4_lInit_Interrupt:00000000 $t
    {standard input}:1147   .text.PWM_CCU4_lConfigure_Events:00000000 $t
    {standard input}:1419   .text.PWM_CCU4_Start:00000000 $t
    {standard input}:1500   .text.PWM_CCU4_Stop:00000000 $t
    {standard input}:1505   .text.PWM_CCU4_Stop:00000000 PWM_CCU4_Stop
    {standard input}:1565   .text.PWM_CCU4_GetTimerValue:00000000 $t
    {standard input}:1570   .text.PWM_CCU4_GetTimerValue:00000000 PWM_CCU4_GetTimerValue
    {standard input}:1611   .text.PWM_CCU4_GetTimerStatus:00000000 $t
    {standard input}:1616   .text.PWM_CCU4_GetTimerStatus:00000000 PWM_CCU4_GetTimerStatus
    {standard input}:1657   .text.PWM_CCU4_SetFreq:00000000 $t
    {standard input}:1662   .text.PWM_CCU4_SetFreq:00000000 PWM_CCU4_SetFreq
    {standard input}:1794   .text.PWM_CCU4_SetFreq:000000c0 $d
    {standard input}:1799   .text.PWM_CCU4_SetDutyCycle:00000000 $t
    {standard input}:1804   .text.PWM_CCU4_SetDutyCycle:00000000 PWM_CCU4_SetDutyCycle
    {standard input}:1893   .text.PWM_CCU4_SetDutyCycle:0000007c $d
    {standard input}:1898   .text.PWM_CCU4_SetFreqAndDutyCycle:00000000 $t
    {standard input}:1903   .text.PWM_CCU4_SetFreqAndDutyCycle:00000000 PWM_CCU4_SetFreqAndDutyCycle
    {standard input}:2033   .text.PWM_CCU4_SetFreqAndDutyCycle:000000c4 $d
    {standard input}:2038   .text.PWM_CCU4_SetDither:00000000 $t
    {standard input}:2043   .text.PWM_CCU4_SetDither:00000000 PWM_CCU4_SetDither
    {standard input}:2098   .text.PWM_CCU4_ClearTrap:00000000 $t
    {standard input}:2103   .text.PWM_CCU4_ClearTrap:00000000 PWM_CCU4_ClearTrap
    {standard input}:2140   .text.PWM_CCU4_GetInterruptStatus:00000000 $t
    {standard input}:2145   .text.PWM_CCU4_GetInterruptStatus:00000000 PWM_CCU4_GetInterruptStatus
    {standard input}:2193   .text.PWM_CCU4_ClearEvent:00000000 $t
    {standard input}:2198   .text.PWM_CCU4_ClearEvent:00000000 PWM_CCU4_ClearEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GLOBAL_CCU4_Init
XMC_CCU4_SLICE_CompareInit
XMC_CCU4_SetMultiChannelShadowTransferMode
XMC_GPIO_Init
XMC_CCU4_SLICE_SetInterruptNode
XMC_CCU4_SLICE_ConfigureEvent
XMC_CCU4_SLICE_StartConfig
XMC_CCU4_SLICE_StopConfig
XMC_CCU4_SLICE_DirectionConfig
XMC_CCU4_SLICE_GateConfig
XMC_CCU4_SLICE_CountConfig
XMC_CCU4_SLICE_LoadConfig
XMC_CCU4_SLICE_ModulationConfig
XMC_CCU4_SLICE_TrapConfig
XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent
XMC_CCU4_SLICE_StatusBitOverrideConfig
XMC_CCU4_SLICE_EnableDithering
