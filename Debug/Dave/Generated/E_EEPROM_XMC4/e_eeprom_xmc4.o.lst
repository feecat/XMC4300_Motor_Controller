   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "e_eeprom_xmc4.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_FLASH_SetMargin,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_FLASH_SetMargin:
  25              	.LFB143:
  26              	 .file 1 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc4_flash.h"
   1:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
   2:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @file xmc4_flash.h
   3:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @date 2019-05-06
   4:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
   5:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @cond
   6:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
   7:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
   9:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * All rights reserved.                        
  11:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                             
  12:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * following conditions are met:   
  14:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                                                              
  15:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * disclaimer.                        
  17:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 
  18:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 
  21:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                                                              
  24:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *                                                                              
  32:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
  35:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
  36:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Change History
  37:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * --------------
  38:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
  39:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2014-12-10:
  40:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Initial <br>
  41:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-02-20:
  42:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Updated for Documentation related changes<br>
  43:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-06-20: 
  44:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Removed version macros and declaration of GetDriverVersion API 
  45:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-08-17: 
  46:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Added the below API's to the public interface.
  47:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *       1. XMC_FLASH_Reset
  48:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *       2. XMC_FLASH_ErasePhysicalSector
  49:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *       3. XMC_FLASH_EraseUCB
  50:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *       4. XMC_FLASH_ResumeProtection
  51:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *       5. XMC_FLASH_RepairPhysicalSector 
  52:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Added support for XMC4800/4700 devices
  53:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2015-12-07:
  54:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Fix XMC_FLASH_READ_ACCESS_TIME for XMC43, 47 and 48 devices
  55:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2016-03-18:
  56:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Fix implementation of XMC_PREFETCH_EnableInstructionBuffer and XMC_PREFETCH_DisableInstruc
  57:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2016-03-22:
  58:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Fix implementation of XMC_PREFETCH_InvalidateInstructionBuffer
  59:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
  60:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2018-02-08:
  61:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Added XMC_FLASH_InstallBMI()
  62:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 
  63:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2019-03-30:
  64:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Fix compilation warnings 
  65:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 
  66:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 2019-05-06:
  67:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *     - Moved definitions of XMC_FLASH_ProgramPage() and XMC_FLASH_EraseSector() from xmc_flash.h
  68:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * 
  69:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @endcond 
  70:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
  71:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
  72:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
  73:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #ifndef XMC4_FLASH_H
  74:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC4_FLASH_H
  75:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
  76:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
  77:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * HEADER FILES
  78:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
  79:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
  80:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #include "xmc_common.h"
  81:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
  82:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #if UC_FAMILY == XMC4
  83:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
  84:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
  85:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @addtogroup XMClib XMC Peripheral Library
  86:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @{
  87:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
  88:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
  89:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
  90:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @addtogroup FLASH
  91:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @{
  92:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
  93:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
  94:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
  95:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * MACROS
  96:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
  97:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UNCACHED_BASE    (0x0C000000U) /**< Non cached flash starting address of for
  98:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                       XMC4 family of microcontrollers */
  99:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_WORDS_PER_PAGE   (64UL)        /**< Number of words in a page (256 bytes / 4 byte
 100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_BYTES_PER_PAGE   (256UL)       /**< Number of bytes in a  page*/
 101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UCB0             (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0000UL) /**< Starting a
 103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          Configurab
 104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UCB1             (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0400UL) /**< Starting a
 105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          Configurab
 106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_UCB2             (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0800UL) /**< Starting a
 107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          Configurab
 108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_BYTES_PER_UCB    (1024UL) /**< Number of bytes in a user configurable block*/
 109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**< Note : Total number of Sectors depends on the flash size of the controller. So while using the
 111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *          operations ensure that sector is available, other may lead to flash error.
 112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_0         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x00000UL) /**<Starting a
 114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_1         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x04000UL) /**<Starting a
 115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_2         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x08000UL) /**<Starting a
 116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_3         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x0C000UL) /**<Starting a
 117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_4         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x10000UL) /**<Starting a
 118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_5         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x14000UL) /**<Starting a
 119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_6         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x18000UL) /**<Starting a
 120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_7         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x1C000UL) /**<Starting a
 121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_8         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x20000UL) /**<Starting a
 122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_9         (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x40000UL) /**<Starting a
 123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_10        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x80000UL) /**<Starting a
 124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_11        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xC0000UL) /**<Starting a
 125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_12        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x100000UL) /**<Starting 
 127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_13        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x140000UL) /**<Starting 
 128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_14        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x180000UL) /**<Starting 
 129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_SECTOR_15        (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x1C0000UL) /**<Starting 
 130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_0     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x00000UL) /**<Starting a
 132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_4     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x10000UL) /**<Starting a
 134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_8     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x20000UL) /**<Starting a
 136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_9     (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x40000UL) /**<Starting a
 138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_10    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x80000UL) /**<Starting a
 140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_11    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xC0000UL) /**<Starting a
 142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_12    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x100000UL) /**<Starting 
 144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_13    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x140000UL) /**<Starting 
 146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_14    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x180000UL) /**<Starting 
 148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_PHY_SECTOR_15    (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x1C0000UL) /**<Starting 
 150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                          physical s
 151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #if UC_SERIES == XMC45 || UC_SERIES == XMC43 || UC_SERIES == XMC47 || UC_SERIES == XMC48
 153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_READ_ACCESS_TIME (22E-9F) /* Flash read access time  */
 154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #else
 155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_READ_ACCESS_TIME (20E-9F)
 156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #endif
 157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #define XMC_FLASH_BMI_VALID (uint32_t)(0x1 << 31) /**< This is always 0 in UCB. The copy of this BM
 159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
 161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * ENUMS
 162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
 163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *  Defines the return status of the API.
 165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_STATUS
 167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_OK                               = 0U,                 /**< Operation completed 
 169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_BUSY                             = FLASH_FSR_PBUSY_Msk, /**< API cannot proceed 
 170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PROGRAMMING_STATE                = FLASH_FSR_PROG_Msk, /**< Write page is in pro
 171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_ERASE_STATE                      = FLASH_FSR_ERASE_Msk, /**< Erase page is in pr
 172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PAGE_MODE                        = FLASH_FSR_PFPAGE_Msk, /**< Flash is in page m
 173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                  of PFLASH is in us
 174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_OPERATION_ERROR                  = FLASH_FSR_PFOPER_Msk, /**< Flash Operation ab
 175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_COMMAND_SEQUENCE_ERROR           = FLASH_FSR_SQER_Msk, /**< Improper address or 
 176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                operation */ 
 177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PROTECTION_ERROR                 = FLASH_FSR_PROER_Msk, /**< Flash operation add
 178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                 sector */
 179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_SINGLE_BIT_ERROR_AND_CORRECTION  = FLASH_FSR_PFSBER_Msk, /**< Single bit error d
 180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                  corrected */
 181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_DOUBLE_BIT_ERROR                 = FLASH_FSR_PFDBER_Msk, /**< Multiple bit error
 182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_PROTECTION_INSTALLED             = FLASH_FSR_PROIN_Msk, /**< Confirmation of the
 183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                 protection is succe
 184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_READ_PROTECTION_INSTALLED        = FLASH_FSR_RPROIN_Msk, /**< Confirmation of re
 185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                  protection is succ
 186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_READ_PROTECTION_DISABLED_STATE   = FLASH_FSR_RPRODIS_Msk, /**< Read or/and write
 187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   temporarily disab
 188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_INSTALLED_UCB0  = FLASH_FSR_WPROIN0_Msk, /**< Sector write prot
 189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-0 */
 190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_INSTALLED_UCB1  = FLASH_FSR_WPROIN1_Msk, /**< Sector write prot
 191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-1 */
 192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_INSTALLED_UCB2  = FLASH_FSR_WPROIN2_Msk, /**< Sector OTP protec
 193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-2 */
 194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_DISABLED_UCB0   = FLASH_FSR_WPRODIS0_Msk, /**< Sector write pro
 195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-0 */
 196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_WRITE_PROTECTION_DISABLED_UCB1   = FLASH_FSR_WPRODIS1_Msk, /**< Sector write pro
 197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                   for user-1 */
 198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_SLEEP_MODE                       = FLASH_FSR_SLM_Msk, /**< Indicates flash in sl
 199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_STATUS_VERIFY_ERROR                     = (int32_t)FLASH_FSR_VER_Msk, /**< Write verifi
 200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                        verification
 201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_STATUS_t;
 202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *  Provides the options to select flash margin read settings of the for quality assurance.
 205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_MARGIN
 207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_MARGIN_DEFAULT = 0x0U << FLASH_MARP_MARGIN_Pos, /**< Default margin */ 
 209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_MARGIN_TIGHT0  = 0x1U << FLASH_MARP_MARGIN_Pos, /**< Sub-optimal 0-bits are read as 1s 
 210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_MARGIN_TIGHT1  = 0x4U << FLASH_MARP_MARGIN_Pos  /**< Sub-optimal 1-bits are read as 0s 
 211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_MARGIN_t;
 212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *  Provides the options to select flash operational events
 215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_EVENT
 217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_VERIFY_AND_OPERATION_ERROR = 0x01U << FLASH_FCON_VOPERM_Pos, /**< Flash verify an
 219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****                                                                                     event */
 220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_COMMAND_SEQUENCE_ERROR     = 0x02U << FLASH_FCON_VOPERM_Pos, /**< Flash command s
 221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_PROTECTION_ERROR           = 0x04U << FLASH_FCON_VOPERM_Pos, /**< Flash protectio
 222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_SINGLE_BIT_ERROR           = 0x08U << FLASH_FCON_VOPERM_Pos, /**< Flash single bi
 223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_DOUBLE_BIT_ERROR           = 0x20U << FLASH_FCON_VOPERM_Pos, /**< Flash double bi
 224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_EVENT_END_OF_BUSY                = (int32_t)(0x80U << FLASH_FCON_VOPERM_Pos) /**< Flash
 225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_EVENT_t;
 226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Provides the options to select sectors for write protection and select global read protection.
 229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * The members can be combined using 'OR' operator for multiple selection.<br>
 230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_PROTECTION
 233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_0      = 0x0001UL,  /**< Sector 0 write protection */
 235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_1      = 0x0002UL,  /**< Sector 1 write protection */
 236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_2      = 0x0004UL,  /**< Sector 3 write protection */
 237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_3      = 0x0008UL,  /**< Sector 3 write protection */
 238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_4      = 0x0010UL,  /**< Sector 4 write protection */
 239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_5      = 0x0020UL,  /**< Sector 5 write protection */
 240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_6      = 0x0040UL,  /**< Sector 6 write protection */
 241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_7      = 0x0080UL,  /**< Sector 7 write protection */
 242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_8      = 0x0100UL,  /**< Sector 8 write protection */
 243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTOR_9      = 0x0200UL,  /**< Sector 9 write protection */
 244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTORS_10_11 = 0x0400UL,  /**< Sector 10 and 11 write protection */
 245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTORS_12_13 = 0x0800UL,  /**< Sector 12 and 13 write protection */
 246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_WRITE_SECTORS_14_15 = 0x1000UL,  /**< Sector 14 and 15 write protection */
 247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_PROTECTION_READ_GLOBAL         = 0x8000UL   /**< Global read protection (Applicable for
 248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_PROTECTION_t;
 249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * BMI Word configuration
 252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** typedef enum XMC_FLASH_BMI
 254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_BOOT_MODE_NORMAL = 0x0UL, /**< Normal boot mode */
 256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_BOOT_MODE_ASC_BSL = 0x1UL, /**< ASC BSL boot mode */
 257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_BOOT_MODE_CAN_BSL = 0x3UL, /**< CAN BSL boot mode */
 258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_BOOT_MODE_PSRAM = 0x4UL, /**< PSRAM boot mode */
 259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_BOOT_MODE_ABM0 = 0x5UL, /**< ABM0 boot mode */
 260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_BOOT_MODE_ABM1 = 0x6UL, /**< ABM1 boot mode */
 261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_BOOT_MODE_FALLBACK_ABM = 0x7UL, /**< Fallback ABM boot mode */
 262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_MAC_BIT_MSK = 0x1UL << 5, /**< Valid MAC address part of BMI string */
 263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_IPV4_BIT_MSK = 0x1UL << 7, /**< Ethernet IP extension contains a IPv4 address */
 264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_IPV6_BIT_MSK = 0x1UL << 8, /**< Ethernet IP extension contains a IPv6 address */
 265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_USB_BIT_MAK = 0x1UL << 10, /**< Valid USB Serial Number part of BMI string */
 266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_PAI_PSRAM_MSK = 0x1UL << 12, /**< Parity of PSRAM to be initialized by SSW */
 267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_PAI_DSRAM_MSK = 0x1UL << 13, /**< Parity of DSRAM1 to be initialized by SSW */
 268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_PAI_CMSRAM_MSK = 0x1UL << 14, /**< Parity of DSRAM-Comm to be initialized by SSW */
 269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   XMC_FLASH_BMI_SPEEDUP_BIT_MSK = 0x1UL << 15, /**< Clock Tree of the device to be setup to maximum
 270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_BMI_t;
 271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * BMI String configuration
 274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** typedef struct XMC_FLASH_BMI_STRING
 276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   uint32_t bmi; /**< See ::XMC_FLASH_BMI_t */
 278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   uint8_t mac_addr[6]; /**< MAC address extension */
 279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   uint8_t ip_extension[16]; /**< Ethernet IP extension */
 280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   uint8_t usb_serial_no[4]; /**< USB Serial Number */
 281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   uint32_t reserved; 
 282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   uint16_t reserved1;
 283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** } XMC_FLASH_BMI_STRING_t;
 284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**************************************************************************************************
 286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * API PROTOTYPES
 287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  **************************************************************************************************
 288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #ifdef __cplusplus
 290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** extern "C" {
 291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** #endif
 292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param address    Pointer to the starting address of flash page from where the programming start
 296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param data       Pointer to the source address where targeted data is located.
 297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Programs a single flash page associated with the specified \a address.\n\n  XMC4000 flash can be
 302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * granularity of 256 bytes page using this API. Before entering into page write process, it clears
 303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * bits inside status register. It starts the write process by issuing the page mode command follow
 304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * command which loads the targeted \a data blocks into internal assembly buffer. Finally, it issue
 305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * command which programs the \a data into flash. Call XMC_FLASH_GetStatus() API after calling this
 306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * programming operation.\n
 307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Note:</b><br>
 309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Flash will be busy state during write is ongoing, hence no operations allowed until it completes
 310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * None 
 313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data);
 316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param address Pointer to the starting address of the page to be erased.
 320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Erases a sector associated with the specified \a address.\n\n  Before erase, it clears the error
 325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * FSR status register. Issues the erase sector command sequence with the specified starting \a add
 326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * erase process. Call XMC_FLASH_GetStatus() API after calling this API, to verify the erase operat
 327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * None
 330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** void XMC_FLASH_EraseSector(uint32_t *address);
 332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables the wait state for error correction.process, It enables one additional wait state for EC
 341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * bit of FCON register.\n
 342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_DisableWaitStateForECC()\n\n\n
 345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableWaitStateForECC(void)
 348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON |= FLASH_FCON_WSECPF_Msk;
 350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Disables the wait state for error correction.\n\n Removes additional wait state for ECC by reset
 360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * FCON register.\n
 361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_EnableWaitStateForECC()\n\n\n
 364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableWaitStateForECC(void)
 367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 368:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON &= (uint32_t)~FLASH_FCON_WSECPF_Msk;
 369:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 370:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 371:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 372:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 373:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 374:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 375:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 376:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 377:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 378:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables dynamic idle mode feature to save power.\n\n It switches off the PFLASH read path when n
 379:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * pending. Hence power is saved marginally. This slightly reduces the flash read performance becau
 380:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * pre-fetching is disabled.It sets the FCON register IDLE bit to enable this feature.
 381:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 382:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 383:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_DisableDynamicIdle()\n\n\n
 384:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 385:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 386:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableDynamicIdle(void)
 387:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 388:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON |= FLASH_FCON_IDLE_Msk;
 389:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 390:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 391:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 392:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 393:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 394:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 395:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 396:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 397:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 398:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Disables dynamic idle mode feature.\n\n It resets the FCON register IDLE bit to disable this fea
 399:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * flash read operation is selected.
 400:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 401:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 402:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_EnableDynamicIdle()\n\n\n
 403:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 404:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 405:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableDynamicIdle(void)
 406:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 407:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON &= (uint32_t)~FLASH_FCON_IDLE_Msk;
 408:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 409:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 410:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 411:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 412:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 413:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 414:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 415:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 416:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 417:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables sleep mode of the PFLASH.\n\n Sleep mode is enabled by setting the bit FCON.SLEEP.
 418:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 419:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Note:</b><br>
 420:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * fCPU must be equal or above 1 MHz when wake-up request is triggered.
 421:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 422:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 423:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_DisableSleepRequest()\n\n\n
 424:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 425:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 426:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableSleepRequest(void)
 427:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 428:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON |= (uint32_t)FLASH_FCON_SLEEP_Msk;
 429:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 430:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 431:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 432:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 433:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 434:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 435:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 436:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 437:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 438:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Wake-up the PFLASH from sleep.\n\n Wakes-up from sleep is done by clearing the bit FCON.SLEEP, i
 439:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * bit, or wake-up is initiated by releasing the external sleep signal from SCU.
 440:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 441:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Note:</b><br>
 442:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * fCPU must be equal or above 1 MHz when wake-up request is triggered.
 443:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 444:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 445:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * XMC_FLASH_EnableSleepRequest()\n\n\n
 446:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 447:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 448:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableSleepRequest(void)
 449:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 450:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->FCON &= (uint32_t)~FLASH_FCON_SLEEP_Msk;
 451:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 452:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 453:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 454:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 455:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param margin PFLASH margin selection. Use type @ref XMC_FLASH_MARGIN_t.
 456:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 457:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 458:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 459:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 460:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Sets the read margin levels for checking the healthiness of flash data.\n\n Configures the margi
 461:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * MARP register with the specified \a margin level. It changes the margin levels for read operatio
 462:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * problematic array bits.
 463:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 464:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 465:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * None
 466:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 467:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
 468:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
  27              	 .loc 1 468 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 0346     	 mov r3,r0
  43 0008 FB71     	 strb r3,[r7,#7]
 469:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
  44              	 .loc 1 469 0
  45 000a 0949     	 ldr r1,.L2
  46 000c 084B     	 ldr r3,.L2
  47 000e 03F58053 	 add r3,r3,#4096
  48 0012 1833     	 adds r3,r3,#24
  49 0014 1B68     	 ldr r3,[r3]
  50 0016 23F00F02 	 bic r2,r3,#15
  51 001a FB79     	 ldrb r3,[r7,#7]
  52 001c 1A43     	 orrs r2,r2,r3
  53 001e 01F58053 	 add r3,r1,#4096
  54 0022 1833     	 adds r3,r3,#24
  55 0024 1A60     	 str r2,[r3]
 470:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
  56              	 .loc 1 470 0
  57 0026 0C37     	 adds r7,r7,#12
  58              	.LCFI3:
  59              	 .cfi_def_cfa_offset 4
  60 0028 BD46     	 mov sp,r7
  61              	.LCFI4:
  62              	 .cfi_def_cfa_register 13
  63              	 
  64 002a 5DF8047B 	 ldr r7,[sp],#4
  65              	.LCFI5:
  66              	 .cfi_restore 7
  67              	 .cfi_def_cfa_offset 0
  68 002e 7047     	 bx lr
  69              	.L3:
  70              	 .align 2
  71              	.L2:
  72 0030 00100058 	 .word 1476399104
  73              	 .cfi_endproc
  74              	.LFE143:
  76              	 .section .text.XMC_FLASH_EnableDoubleBitErrorTrap,"ax",%progbits
  77              	 .align 2
  78              	 .thumb
  79              	 .thumb_func
  81              	XMC_FLASH_EnableDoubleBitErrorTrap:
  82              	.LFB144:
 471:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 472:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 473:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 474:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 475:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 476:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 477:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 478:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 479:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Enables double bit error trap.\n\n. It enables by setting MARP register bit TRAPDIS.
 480:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 481:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 482:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * None
 483:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 484:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
 485:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
  83              	 .loc 1 485 0
  84              	 .cfi_startproc
  85              	 
  86              	 
  87              	 
  88 0000 80B4     	 push {r7}
  89              	.LCFI6:
  90              	 .cfi_def_cfa_offset 4
  91              	 .cfi_offset 7,-4
  92 0002 00AF     	 add r7,sp,#0
  93              	.LCFI7:
  94              	 .cfi_def_cfa_register 7
 486:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
  95              	 .loc 1 486 0
  96 0004 0749     	 ldr r1,.L5
  97 0006 074B     	 ldr r3,.L5
  98 0008 03F58053 	 add r3,r3,#4096
  99 000c 1833     	 adds r3,r3,#24
 100 000e 1B68     	 ldr r3,[r3]
 101 0010 23F40042 	 bic r2,r3,#32768
 102 0014 01F58053 	 add r3,r1,#4096
 103 0018 1833     	 adds r3,r3,#24
 104 001a 1A60     	 str r2,[r3]
 487:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 105              	 .loc 1 487 0
 106 001c BD46     	 mov sp,r7
 107              	.LCFI8:
 108              	 .cfi_def_cfa_register 13
 109              	 
 110 001e 5DF8047B 	 ldr r7,[sp],#4
 111              	.LCFI9:
 112              	 .cfi_restore 7
 113              	 .cfi_def_cfa_offset 0
 114 0022 7047     	 bx lr
 115              	.L6:
 116              	 .align 2
 117              	.L5:
 118 0024 00100058 	 .word 1476399104
 119              	 .cfi_endproc
 120              	.LFE144:
 122              	 .section .text.XMC_FLASH_DisableDoubleBitErrorTrap,"ax",%progbits
 123              	 .align 2
 124              	 .thumb
 125              	 .thumb_func
 127              	XMC_FLASH_DisableDoubleBitErrorTrap:
 128              	.LFB145:
 488:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** 
 489:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** /**
 490:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 491:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @param None
 492:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 493:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * @return None
 494:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 495:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Description:</b><br>
 496:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * Disables the trap generation for double bit error by clearing MARP register bit TRAPDIS.\n\n The
 497:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * trap can be disabled for margin checks and also redirected to an error interrupt. Any time durin
 498:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * double bit error trap can be enabled back by calling XMC_FLASH_EnableDoubleBitErrorTrap() API.
 499:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  *
 500:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * \par<b>Related APIs:</b><BR>
 501:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  * None
 502:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****  */
 503:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** __STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
 504:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** {
 129              	 .loc 1 504 0
 130              	 .cfi_startproc
 131              	 
 132              	 
 133              	 
 134 0000 80B4     	 push {r7}
 135              	.LCFI10:
 136              	 .cfi_def_cfa_offset 4
 137              	 .cfi_offset 7,-4
 138 0002 00AF     	 add r7,sp,#0
 139              	.LCFI11:
 140              	 .cfi_def_cfa_register 7
 505:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h ****   FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 141              	 .loc 1 505 0
 142 0004 0749     	 ldr r1,.L8
 143 0006 074B     	 ldr r3,.L8
 144 0008 03F58053 	 add r3,r3,#4096
 145 000c 1833     	 adds r3,r3,#24
 146 000e 1B68     	 ldr r3,[r3]
 147 0010 43F40042 	 orr r2,r3,#32768
 148 0014 01F58053 	 add r3,r1,#4096
 149 0018 1833     	 adds r3,r3,#24
 150 001a 1A60     	 str r2,[r3]
 506:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_flash.h **** }
 151              	 .loc 1 506 0
 152 001c BD46     	 mov sp,r7
 153              	.LCFI12:
 154              	 .cfi_def_cfa_register 13
 155              	 
 156 001e 5DF8047B 	 ldr r7,[sp],#4
 157              	.LCFI13:
 158              	 .cfi_restore 7
 159              	 .cfi_def_cfa_offset 0
 160 0022 7047     	 bx lr
 161              	.L9:
 162              	 .align 2
 163              	.L8:
 164 0024 00100058 	 .word 1476399104
 165              	 .cfi_endproc
 166              	.LFE145:
 168              	 .section .text.XMC_FCE_InitializeSeedValue,"ax",%progbits
 169              	 .align 2
 170              	 .thumb
 171              	 .thumb_func
 173              	XMC_FCE_InitializeSeedValue:
 174              	.LFB155:
 175              	 .file 2 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc_fce.h"
   1:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
   2:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @file xmc_fce.h
   3:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @date 2019-03-30
   4:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
   5:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @cond
   6:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
   7:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
   9:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * All rights reserved.                        
  11:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *                                             
  12:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * following conditions are met:   
  14:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *                                                                              
  15:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * disclaimer.                        
  17:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
  18:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
  21:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *                                                                              
  24:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *                                                                              
  32:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
  35:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
  36:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Change History
  37:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * --------------
  38:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
  39:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 2015-02-20:
  40:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *     - Initial
  41:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *      
  42:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 2015-05-20:
  43:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *     - Description updated <br>
  44:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *   
  45:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 2015-06-20:
  46:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  47:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
  48:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 2019-03-30:
  49:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *     - Added XMC_FCE_CalculateCRC16Ex() and XMC_FCE_CalculateCRC32Ex()
  50:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
  51:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @endcond 
  52:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
  53:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
  54:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
  55:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #ifndef XMC_FCE_H
  56:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_H
  57:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
  58:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
  59:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * HEADER FILES
  60:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
  61:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  
  62:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #include <xmc_common.h>
  63:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
  64:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #if defined (FCE)
  65:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
  66:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
  67:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @addtogroup XMClib
  68:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @{
  69:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
  70:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
  71:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
  72:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @addtogroup FCE
  73:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @brief Flexible CRC Engine(FCE) driver for the XMC microcontroller family.
  74:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
  75:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The FCE provides a parallel implementation of Cyclic Redundancy Code (CRC)
  76:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * algorithms. The current FCE version for the XMC4000 microcontroller family implements the
  77:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * IEEE 802.3 ethernet CRC32, the CCITT CRC16 and the SAE J1850 CRC8 polynomials.
  78:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The primary target of FCE is to be used as an hardware acceleration engine for software
  79:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * applications or operating systems services using CRC signatures.
  80:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
  81:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @image html fce_overview.png	 
  82:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @image latex ../images/fce_overview.png	 
  83:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE Features: <br>
  84:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @image html fce_polynomials.png
  85:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @image latex ../images/fce_polynomials.png
  86:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *    * CRC kernel 0 and 1: IEEE 802.3 CRC32 ethernet polynomial: 0x04C11DB71 <br>
  87:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *    * CRC kernel 2: CCITT CRC16 polynomial: 0x1021 <br>
  88:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *    * CRC kernel 3: SAE J1850 CRC8 polynomial: 0x1D <br>
  89:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *    * Configuration Registers enable to control the CRC operation and perform automatic checksum 
  90:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *      the end of a message. <br>
  91:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *    * Extended register interface to control reliability of FCE execution in safety applications.
  92:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *    * Error notification scheme via dedicated interrupt node for: <br>
  93:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****         a)Transient error detection: Error interrupt generation (maskable) with local status regist
  94:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 		  (cleared by software) <br>
  95:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****         b)Checksum failure: Error interrupt generation (maskable) with local status register (clear
  96:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 		
  97:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****      FCE provides one interrupt line to the interrupt system. Each CRC engine has its own set of fl
  98:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
  99:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @{
 100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  
 102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
 103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * MACROS
 104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  
 106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC32_0        FCE_KE0 /**< Kernel 0 <br> */
 107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC32_1        FCE_KE1 /**< Kernel 1 <br> */
 108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC16          FCE_KE2 /**< Kernel 2 <br> */
 109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_CRC8           FCE_KE3 /**< Kernel 3 <br> */
 110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFIN_SET      (1U) /**< Enables input reflection */
 112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFIN_RESET    (0U) /**< Disables input reflection */
 113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFOUT_SET     (1U) /**< Enables output reflection */
 114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_REFOUT_RESET   (0U) /**< Disables output reflection */
 115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_INVSEL_SET     (1U) /**< Enables output inversion */
 116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #define XMC_FCE_INVSEL_RESET   (0U) /**< Disables output inversion */
 117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
 119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * ENUMS
 120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  
 122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE interrupt configuration
 124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CONFIG_INTERRUPT
 126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_CMI = FCE_KE_CFG_CMI_Msk, /**< Enables CRC Mismatch interrupt \n*/
 128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_CEI = FCE_KE_CFG_CEI_Msk, /**< Enables Configuration error interrupt \n*/
 129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_LEI = FCE_KE_CFG_LEI_Msk, /**< Enables Length error interrupt \n*/
 130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_BEI = FCE_KE_CFG_BEI_Msk  /**< Enables Bus error interrupt \n*/
 131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_INTERRUPT_t;
 132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE operation configuration
 135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CONFIG_OPERATION
 137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_CCE = FCE_KE_CFG_CCE_Msk, /**< Enables CRC check */
 139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_ALR = FCE_KE_CFG_ALR_Msk  /**< Enables Automatic length reload */
 140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_OPERATION_t;
 141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE algorithm configuration
 144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CONFIG_ALGO
 146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_REFIN  = FCE_KE_CFG_REFIN_Msk,  /**< Enables input byte reflection */
 148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_REFOUT = FCE_KE_CFG_REFOUT_Msk, /**< Enables Final CRC reflection */
 149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CFG_CONFIG_XSEL   = FCE_KE_CFG_XSEL_Msk    /**< Enables output inversion */
 150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_ALGO_t;
 151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE status flag configuration
 154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_STS_FLAG
 156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_MISMATCH_CRC = FCE_KE_STS_CMF_Msk, /**< CRC Mismatch flag */
 158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_CONFIG_ERROR = FCE_KE_STS_CEF_Msk, /**< Configuration Error flag */
 159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_LENGTH_ERROR = FCE_KE_STS_LEF_Msk, /**< Length Error flag */
 160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STS_BUS_ERROR    = FCE_KE_STS_BEF_Msk	 /**< Bus Error flag */
 161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_STS_FLAG_t;
 162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE control configuration
 165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_CTR_TEST
 167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CTR_MISMATCH_CRC   = FCE_KE_CTR_FCM_Msk,      /**< Forces CRC mismatch */
 169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CTR_MISMATCH_CFG   = FCE_KE_CTR_FRM_CFG_Msk,	/**< Forces CFG Register mismatch */
 170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CTR_MISMATCH_CHECK = FCE_KE_CTR_FRM_CHECK_Msk /**< Forces CRC Check Register mismatch */
 171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CTR_TEST_t;
 172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE status enumeration
 175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef enum XMC_FCE_STATUS
 177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STATUS_OK = 0, /**< Returns OK on success */
 179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STATUS_BUSY,   /**< Returns BUSY when API is busy with a previous request */
 180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_STATUS_ERROR   /**< Returns ERROR when API cannot fulfil request */
 181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_STATUS_t;
 182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
 184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * DATA STRUCTURES
 185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE kernel
 189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */ 
 190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef FCE_KE_TypeDef XMC_FCE_Kernel_t;
 191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /* Anonymous structure/union guard start */
 193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #if defined (__CC_ARM)
 194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma push
 195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma anon_unions
 196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #elif defined (__TASKING__)
 197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma warning 586
 198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #endif
 199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @brief XMC_FCE configuration structure
 202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef struct XMC_FCE_CONFIG
 204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   union
 206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   {
 207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****     uint32_t regval;
 208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****     struct
 209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****     {
 210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 	  uint32_t               : 8;
 211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t config_refin  : 1;  /**< Enables byte-wise reflection */
 212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t config_refout : 1;  /**< Enables bit-wise reflection */
 213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t config_xsel   : 1;  /**< Enables output inversion */
 214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****       uint32_t               : 21; /**< Reserved bits */	  
 215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****     };
 216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   };
 217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_CONFIG_t;
 218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /* Anonymous structure/union guard end */
 220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #if defined (__CC_ARM)
 221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma pop
 222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #elif defined (__TASKING__)
 223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   #pragma warning restore
 224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #endif
 225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * FCE handler
 228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** typedef struct XMC_FCE
 230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_Kernel_t *kernel_ptr;    /**< FCE Kernel Pointer */
 232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   XMC_FCE_CONFIG_t fce_cfg_update; /**< FCE CFG register update */
 233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   uint32_t seedvalue;              /**< CRC seed value to be used */
 234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** } XMC_FCE_t;
 235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**************************************************************************************************
 237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * API PROTOTYPES
 238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  **************************************************************************************************
 239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  
 240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #ifdef __cplusplus
 241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** extern "C" {
 242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** #endif
 243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  
 244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return uint32_t Module revision number
 247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Read FCE module revision number <br>
 250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The value of a module revision starts with 0x01 (first revision). The current revision
 253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * number is 0x01.
 254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE uint32_t XMC_FCE_ReadModuleRev(void)
 256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   return (uint32_t)(FCE->ID & FCE_ID_MOD_REV_Msk);
 258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** }
 259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return uint32_t Module type
 263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Read the FCE module type <br>
 266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The return value is currently 0xC0. It defines the module as a 32-bit module.
 269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE uint32_t XMC_FCE_ReadModuleType(void)
 271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   return (uint32_t)((FCE->ID & FCE_ID_MOD_TYPE_Msk) >> FCE_ID_MOD_TYPE_Pos);
 273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** }
 274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return uint32_t Module number
 278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Read FCE module number <br>
 281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The return value for FCE module is currently 0x00CA.
 284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE uint32_t XMC_FCE_ReadModuleNumber(void)
 286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   return ((uint32_t)((FCE->ID & FCE_ID_MOD_NUMBER_Msk) >> FCE_ID_MOD_NUMBER_Pos));
 288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** }
 289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return bool Disable status
 293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Return the disable status <br>
 297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The function reads the FCE module disable status (DISS) bit. It returns "true" if
 300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * set, "false" otherwise.
 301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE bool XMC_FCE_Get_DisableStatus(void)
 303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   return (bool)(FCE->CLC &= (uint32_t)~FCE_CLC_DISS_Msk);
 305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** }
 306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return None
 310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Disable the FCE module <br>
 313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The function asserts the FCE peripheral reset and sets the DISR bit in the CLC
 316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * register.
 317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Note: </b><br>
 319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * All pending transactions running on the bus slave interface must be completed before
 320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * entering the disabled state.
 321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** void XMC_FCE_Disable(void);
 323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param None
 326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return None
 327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Enable the FCE module <br>
 330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The function de-asserts the peripheral reset and clears the DISR bit CLC register.
 333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** void XMC_FCE_Enable(void);
 335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param engine Constant pointer to ::XMC_FCE_t, pointing to the FCE base address
 338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return ::XMC_FCE_STATUS_t
 339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Initialize the FCE engine <br>
 342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * 
 343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The function sets to the CFG and CRC registers with the FCE configuration and
 345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * seeds values. The function always returns XMC_FCE_STATUS_SUCCESS.
 346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Note: </b><br>
 348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The software must first ensure that the CRC kernel is properly configured with the
 349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * initial CRC value (seed value).
 350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine);
 352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** 
 353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** /**
 354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param engine Constant pointer to ::XMC_FCE_t, pointing to the FCE base address
 355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @param seedvalue Initial CRC value
 356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * @return None
 357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par<b>Description: </b><br>
 359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * Initialize FCE seed value
 360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  *
 361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * \par
 362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  * The function sets the initial CRC (seed) value in the CRC register.
 363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****  */
 364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** __STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
 365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** {
 176              	 .loc 2 365 0
 177              	 .cfi_startproc
 178              	 
 179              	 
 180              	 
 181 0000 80B4     	 push {r7}
 182              	.LCFI14:
 183              	 .cfi_def_cfa_offset 4
 184              	 .cfi_offset 7,-4
 185 0002 83B0     	 sub sp,sp,#12
 186              	.LCFI15:
 187              	 .cfi_def_cfa_offset 16
 188 0004 00AF     	 add r7,sp,#0
 189              	.LCFI16:
 190              	 .cfi_def_cfa_register 7
 191 0006 7860     	 str r0,[r7,#4]
 192 0008 3960     	 str r1,[r7]
 366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h ****   engine->kernel_ptr->CRC = seedvalue;
 193              	 .loc 2 366 0
 194 000a 7B68     	 ldr r3,[r7,#4]
 195 000c 1B68     	 ldr r3,[r3]
 196 000e 3A68     	 ldr r2,[r7]
 197 0010 9A61     	 str r2,[r3,#24]
 367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_fce.h **** }
 198              	 .loc 2 367 0
 199 0012 0C37     	 adds r7,r7,#12
 200              	.LCFI17:
 201              	 .cfi_def_cfa_offset 4
 202 0014 BD46     	 mov sp,r7
 203              	.LCFI18:
 204              	 .cfi_def_cfa_register 13
 205              	 
 206 0016 5DF8047B 	 ldr r7,[sp],#4
 207              	.LCFI19:
 208              	 .cfi_restore 7
 209              	 .cfi_def_cfa_offset 0
 210 001a 7047     	 bx lr
 211              	 .cfi_endproc
 212              	.LFE155:
 214              	 .section .bss.e_eeprom_xmc4_data_buffer,"aw",%nobits
 215              	 .align 2
 218              	e_eeprom_xmc4_data_buffer:
 219 0000 00000000 	 .space 4096
 219      00000000 
 219      00000000 
 219      00000000 
 219      00000000 
 220              	 .section .data.e_eeprom_xmc4_sector_info,"aw",%progbits
 221              	 .align 2
 224              	e_eeprom_xmc4_sector_info:
 225 0000 00000000 	 .word 0
 226 0004 00000000 	 .word 0
 227 0008 FFFFFFFF 	 .word -1
 228 000c 00000000 	 .word 0
 229              	 .section .rodata.e_eeprom_xmc4_fce,"a",%progbits
 230              	 .align 2
 233              	e_eeprom_xmc4_fce:
 234 0000 20000250 	 .word 1342308384
 235 0004 00       	 .space 1
 236 0005 07       	 .byte 7
 237 0006 0000     	 .space 2
 238 0008 00000000 	 .word 0
 239              	 .section .text.E_EEPROM_XMC4_GetAppVersion,"ax",%progbits
 240              	 .align 2
 241              	 .global E_EEPROM_XMC4_GetAppVersion
 242              	 .thumb
 243              	 .thumb_func
 245              	E_EEPROM_XMC4_GetAppVersion:
 246              	.LFB167:
 247              	 .file 3 "../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c"
   1:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**
   2:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * @file e_eeprom_xmc4.c
   3:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * @date 2017-02-16
   4:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
   5:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * NOTE:
   6:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
   8:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * @cond
   9:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  10:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * E_EEPROM_XMC4 v4.0.16 - The E_EEPROM_XMC4 APP is used to Emulates a portion of program flash as 
  11:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *                        data storage.
  12:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  13:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Copyright (c) 2016, Infineon Technologies AG
  14:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * All rights reserved.
  15:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  16:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * following conditions are met:
  18:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  19:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   disclaimer.
  21:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  22:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  25:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  28:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  36:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  39:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  40:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Change History
  41:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * --------------
  42:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  43:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * 2016-01-20
  44:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *     - Initial version
  45:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  46:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * 2016-07-08:
  47:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *     - Fixed incorrect case for an included header.<br>
  48:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  49:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * 2017-02-16:
  50:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *     - E_EEPROM_XMC4_WriteByte() and E_EEPROM_XMC4_WriteArray() returns a boolean indicating if c
  51:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  *
  52:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  */
  53:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  54:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
  55:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * HEADER FILES
  56:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  57:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #include "e_eeprom_xmc4.h"
  58:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  59:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
  60:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * MACROS
  61:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  62:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  63:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* EEPROM SECTOR numbers definitions */
  64:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_0    ((uint32_t)0U)
  65:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_1    ((uint32_t)1U)
  66:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_2    ((uint32_t)2U)
  67:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_3    ((uint32_t)3U)
  68:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MAX_SECTORS ((uint32_t)4U)
  69:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  70:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Offset positions for CRC and user DATA definitions*/
  71:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_BCC_OFFSET  ((uint8_t)1U)
  72:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_DATA_OFFSET ((uint8_t)2U)
  73:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  74:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* All four logical sector starting addresses defined */
  75:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR0_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x10000U)
  76:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR1_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x14000U)
  77:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR2_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x18000U)
  78:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR3_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x1C000U)
  79:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR4_START_ADDR   (XMC_FLASH_UNCACHED_BASE + 0x20000U)
  80:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  81:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local definitions for internal usage*/
  82:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_EMPTY                   ((uint32_t)0x0U)
  83:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_ALL_SECTORS_FILLED      ((uint8_t)0x0FU)
  84:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MIN_WORDS_PER_PAGE      ((uint32_t)64U)
  85:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_SIZE             ((uint32_t)0x00004000U)
  86:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_POSITION_MASK    ((uint32_t)0x0000C000U)
  87:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_SECTOR_POSITION         ((uint32_t)14U)
  88:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_WORKING_BUFFER_SIZE     ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE - (u
  89:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_DATA_SIZE_FOR_CRC       ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE - (u
  90:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MAX_PAGES               ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE >> (
  91:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** #define E_EEPROM_XMC4_MAX_WORDS               ((uint32_t)E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE >> (
  92:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  93:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  94:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
  95:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Data structure Configurations
  96:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
  97:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
  98:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /** Data structure to hold the complete state data information of sector*/
  99:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** typedef struct E_EEPROM_XMC4_SECTOR_INFO
 100:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 101:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t next_free_start_addr;
 102:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 103:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t flash_data_addr;
 104:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 105:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t  current_sector;
 106:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 107:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t  erase_state;
 108:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 109:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** } E_EEPROM_XMC4_SECTOR_INFO_t;
 110:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 111:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Data structure to hold the User Data block information (BCC + CRC + DATA)*/
 112:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** typedef struct E_EEPROM_XMC4_RAM_BUFFER
 113:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 114:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t crc;
 115:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 116:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t block_cycle_count;
 117:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 118:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t  eeprom_data[E_EEPROM_XMC4_WORKING_BUFFER_SIZE];
 119:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 120:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** } E_EEPROM_XMC4_RAM_BUFFER_t;
 121:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 122:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* RAM data buffer structure definition */
 123:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_RAM_BUFFER_t e_eeprom_xmc4_data_buffer;
 124:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 125:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Sector info data structure definition */
 126:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_SECTOR_INFO_t  e_eeprom_xmc4_sector_info  =
 127:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 128:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .next_free_start_addr = 0U,
 129:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .flash_data_addr      = 0U,
 130:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .current_sector       = 0xFFFFFFFFU,
 131:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   .erase_state          = 0U
 132:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** };
 133:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 134:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* FCE configuration data structure definition */
 135:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static const XMC_FCE_t e_eeprom_xmc4_fce =
 136:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 137:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  .kernel_ptr     = (XMC_FCE_Kernel_t*)(void*)E_EEPROM_XMC4_FCE_KERNEL_BASE,
 138:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  .fce_cfg_update = {{
 139:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      .config_refin  = 1U,
 140:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      .config_refout = 1U,
 141:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      .config_xsel   = 1U
 142:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                    }},
 143:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  .seedvalue      = 0U
 144:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** };
 145:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 146:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
 147:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * Local Function Prototypes
 148:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
 149:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void);
 150:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 151:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lCopyFlashToRam(void);
 152:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 153:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lInitReadSectorInfo(uint32_t sector);
 154:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 155:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void);
 156:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 157:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr);
 158:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 159:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
 160:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * API IMPLEMENTATION
 161:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
 162:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 163:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** DAVE_APP_VERSION_t E_EEPROM_XMC4_GetAppVersion(void)
 164:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 248              	 .loc 3 164 0
 249              	 .cfi_startproc
 250              	 
 251              	 
 252              	 
 253 0000 80B4     	 push {r7}
 254              	.LCFI20:
 255              	 .cfi_def_cfa_offset 4
 256              	 .cfi_offset 7,-4
 257 0002 83B0     	 sub sp,sp,#12
 258              	.LCFI21:
 259              	 .cfi_def_cfa_offset 16
 260 0004 00AF     	 add r7,sp,#0
 261              	.LCFI22:
 262              	 .cfi_def_cfa_register 7
 165:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   DAVE_APP_VERSION_t version;
 166:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 167:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   version.major = (uint8_t)E_EEPROM_XMC4_MAJOR_VERSION;
 263              	 .loc 3 167 0
 264 0006 0423     	 movs r3,#4
 265 0008 3B70     	 strb r3,[r7]
 168:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   version.minor = (uint8_t)E_EEPROM_XMC4_MINOR_VERSION;
 266              	 .loc 3 168 0
 267 000a 0023     	 movs r3,#0
 268 000c 7B70     	 strb r3,[r7,#1]
 169:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   version.patch = (uint8_t)E_EEPROM_XMC4_PATCH_VERSION;
 269              	 .loc 3 169 0
 270 000e 1023     	 movs r3,#16
 271 0010 BB70     	 strb r3,[r7,#2]
 170:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 171:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (version);
 272              	 .loc 3 171 0
 273 0012 3B1D     	 adds r3,r7,#4
 274 0014 3A46     	 mov r2,r7
 275 0016 1268     	 ldr r2,[r2]
 276 0018 1146     	 mov r1,r2
 277 001a 1980     	 strh r1,[r3]
 278 001c 0233     	 adds r3,r3,#2
 279 001e 120C     	 lsrs r2,r2,#16
 280 0020 1A70     	 strb r2,[r3]
 281 0022 0023     	 movs r3,#0
 282 0024 3A79     	 ldrb r2,[r7,#4]
 283 0026 62F30703 	 bfi r3,r2,#0,#8
 284 002a 7A79     	 ldrb r2,[r7,#5]
 285 002c 62F30F23 	 bfi r3,r2,#8,#8
 286 0030 BA79     	 ldrb r2,[r7,#6]
 287 0032 62F31743 	 bfi r3,r2,#16,#8
 172:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 288              	 .loc 3 172 0
 289 0036 1846     	 mov r0,r3
 290 0038 0C37     	 adds r7,r7,#12
 291              	.LCFI23:
 292              	 .cfi_def_cfa_offset 4
 293 003a BD46     	 mov sp,r7
 294              	.LCFI24:
 295              	 .cfi_def_cfa_register 13
 296              	 
 297 003c 5DF8047B 	 ldr r7,[sp],#4
 298              	.LCFI25:
 299              	 .cfi_restore 7
 300              	 .cfi_def_cfa_offset 0
 301 0040 7047     	 bx lr
 302              	 .cfi_endproc
 303              	.LFE167:
 305 0042 00BF     	 .section .text.E_EEPROM_XMC4_Init,"ax",%progbits
 306              	 .align 2
 307              	 .global E_EEPROM_XMC4_Init
 308              	 .thumb
 309              	 .thumb_func
 311              	E_EEPROM_XMC4_Init:
 312              	.LFB168:
 173:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 174:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
 175:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 313              	 .loc 3 175 0
 314              	 .cfi_startproc
 315              	 
 316              	 
 317 0000 80B5     	 push {r7,lr}
 318              	.LCFI26:
 319              	 .cfi_def_cfa_offset 8
 320              	 .cfi_offset 7,-8
 321              	 .cfi_offset 14,-4
 322 0002 84B0     	 sub sp,sp,#16
 323              	.LCFI27:
 324              	 .cfi_def_cfa_offset 24
 325 0004 00AF     	 add r7,sp,#0
 326              	.LCFI28:
 327              	 .cfi_def_cfa_register 7
 328 0006 7860     	 str r0,[r7,#4]
 176:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_count;
 177:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status ;
 178:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 179:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL))
 180:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 181:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 329              	 .loc 3 181 0
 330 0008 0023     	 movs r3,#0
 331 000a FB72     	 strb r3,[r7,#11]
 182:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 183:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if (handle->initialized == (bool)false)
 332              	 .loc 3 183 0
 333 000c 7B68     	 ldr r3,[r7,#4]
 334 000e 1B78     	 ldrb r3,[r3]
 335 0010 83F00103 	 eor r3,r3,#1
 336 0014 DBB2     	 uxtb r3,r3
 337 0016 002B     	 cmp r3,#0
 338 0018 4CD0     	 beq .L14
 184:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 185:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 339              	 .loc 3 185 0
 340 001a 294B     	 ldr r3,.L21
 341 001c 0022     	 movs r2,#0
 342 001e 5A60     	 str r2,[r3,#4]
 186:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 343              	 .loc 3 186 0
 344 0020 284B     	 ldr r3,.L21+4
 345 0022 0022     	 movs r2,#0
 346 0024 5A60     	 str r2,[r3,#4]
 187:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 188:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 347              	 .loc 3 188 0
 348 0026 0120     	 movs r0,#1
 349 0028 FFF7FEFF 	 bl XMC_FLASH_SetMargin
 189:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_DisableDoubleBitErrorTrap();
 350              	 .loc 3 189 0
 351 002c FFF7FEFF 	 bl XMC_FLASH_DisableDoubleBitErrorTrap
 190:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 191:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FCE_Enable();
 352              	 .loc 3 191 0
 353 0030 FFF7FEFF 	 bl XMC_FCE_Enable
 192:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 193:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Initialize FCE module for Hardware calculations */
 194:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 354              	 .loc 3 194 0
 355 0034 2448     	 ldr r0,.L21+8
 356 0036 FFF7FEFF 	 bl XMC_FCE_Init
 195:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 196:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
 197:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 357              	 .loc 3 197 0
 358 003a 0023     	 movs r3,#0
 359 003c FB60     	 str r3,[r7,#12]
 360 003e 05E0     	 b .L15
 361              	.L16:
 198:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 199:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 362              	 .loc 3 199 0 discriminator 3
 363 0040 F868     	 ldr r0,[r7,#12]
 364 0042 FFF7FEFF 	 bl E_EEPROM_XMC4_lInitReadSectorInfo
 197:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 365              	 .loc 3 197 0 discriminator 3
 366 0046 FB68     	 ldr r3,[r7,#12]
 367 0048 0133     	 adds r3,r3,#1
 368 004a FB60     	 str r3,[r7,#12]
 369              	.L15:
 197:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 370              	 .loc 3 197 0 is_stmt 0 discriminator 1
 371 004c FB68     	 ldr r3,[r7,#12]
 372 004e 032B     	 cmp r3,#3
 373 0050 F6D9     	 bls .L16
 200:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }  
 201:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 202:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 374              	 .loc 3 202 0 is_stmt 1
 375 0052 0020     	 movs r0,#0
 376 0054 FFF7FEFF 	 bl XMC_FLASH_SetMargin
 203:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 204:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Implement the OVER ERASE CHECK code here and return the status*/
 205:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 206:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If Read was successful*/
 207:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (status == E_EEPROM_XMC4_STATUS_OK)
 377              	 .loc 3 207 0
 378 0058 FB7A     	 ldrb r3,[r7,#11]
 379 005a 002B     	 cmp r3,#0
 380 005c 25D1     	 bne .L17
 208:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 209:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Execute erase state machine to free up the unwanted sectors and keep
 210:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        * only the sector which has latest valid block. If no valid block found then all sectors are
 211:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        */
 212:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       status = E_EEPROM_XMC4_lInitEraseStateMachine();
 381              	 .loc 3 212 0
 382 005e FFF7FEFF 	 bl E_EEPROM_XMC4_lInitEraseStateMachine
 383 0062 0346     	 mov r3,r0
 384 0064 FB72     	 strb r3,[r7,#11]
 213:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 214:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* If erase operations were successful, continue block data updates to RAM buffer */
 215:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if (status == E_EEPROM_XMC4_STATUS_OK)
 385              	 .loc 3 215 0
 386 0066 FB7A     	 ldrb r3,[r7,#11]
 387 0068 002B     	 cmp r3,#0
 388 006a 1ED1     	 bne .L17
 216:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 217:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 218:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         /* If a valid latest block were not detected, we shall assume that all sectors may be empty
 219:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          * Then make Sector-0 as current sector and next free address as Sector0 start address
 220:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          */
 221:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 389              	 .loc 3 221 0
 390 006c 154B     	 ldr r3,.L21+4
 391 006e 5B68     	 ldr r3,[r3,#4]
 392 0070 002B     	 cmp r3,#0
 393 0072 06D1     	 bne .L18
 222:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 223:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 394              	 .loc 3 223 0
 395 0074 134B     	 ldr r3,.L21+4
 396 0076 0022     	 movs r2,#0
 397 0078 9A60     	 str r2,[r3,#8]
 224:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 398              	 .loc 3 224 0
 399 007a 124B     	 ldr r3,.L21+4
 400 007c 134A     	 ldr r2,.L21+12
 401 007e 1A60     	 str r2,[r3]
 402 0080 13E0     	 b .L17
 403              	.L18:
 225:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 226:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         else
 227:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 228:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           /* If a valid latest block was detected, copy the valid block from flash to RAM. */
 229:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           E_EEPROM_XMC4_lCopyFlashToRam();
 404              	 .loc 3 229 0
 405 0082 FFF7FEFF 	 bl E_EEPROM_XMC4_lCopyFlashToRam
 230:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 231:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_dat
 406              	 .loc 3 231 0
 407 0086 0F4B     	 ldr r3,.L21+4
 408 0088 1A68     	 ldr r2,[r3]
 409 008a 0E4B     	 ldr r3,.L21+4
 410 008c 5B68     	 ldr r3,[r3,#4]
 411 008e D31A     	 subs r3,r2,r3
 412 0090 B3F5805F 	 cmp r3,#4096
 413 0094 01D0     	 beq .L19
 232:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****               E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
 233:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           {
 234:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****             status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 414              	 .loc 3 234 0
 415 0096 0123     	 movs r3,#1
 416 0098 FB72     	 strb r3,[r7,#11]
 417              	.L19:
 235:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           }
 236:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 237:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 418              	 .loc 3 237 0
 419 009a 0A4B     	 ldr r3,.L21+4
 420 009c 1B68     	 ldr r3,[r3]
 421 009e 0C4A     	 ldr r2,.L21+16
 422 00a0 9342     	 cmp r3,r2
 423 00a2 02D9     	 bls .L17
 238:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           {
 239:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****             e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 424              	 .loc 3 239 0
 425 00a4 074B     	 ldr r3,.L21+4
 426 00a6 094A     	 ldr r2,.L21+12
 427 00a8 1A60     	 str r2,[r3]
 428              	.L17:
 240:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           }
 241:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   
 242:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 243:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 244:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 245:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 246:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_EnableDoubleBitErrorTrap();
 429              	 .loc 3 246 0
 430 00aa FFF7FEFF 	 bl XMC_FLASH_EnableDoubleBitErrorTrap
 247:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 248:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     handle->initialized = (bool)true;
 431              	 .loc 3 248 0
 432 00ae 7B68     	 ldr r3,[r7,#4]
 433 00b0 0122     	 movs r2,#1
 434 00b2 1A70     	 strb r2,[r3]
 435              	.L14:
 249:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 250:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 251:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 436              	 .loc 3 251 0
 437 00b4 FB7A     	 ldrb r3,[r7,#11]
 252:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 438              	 .loc 3 252 0
 439 00b6 1846     	 mov r0,r3
 440 00b8 1037     	 adds r7,r7,#16
 441              	.LCFI29:
 442              	 .cfi_def_cfa_offset 8
 443 00ba BD46     	 mov sp,r7
 444              	.LCFI30:
 445              	 .cfi_def_cfa_register 13
 446              	 
 447 00bc 80BD     	 pop {r7,pc}
 448              	.L22:
 449 00be 00BF     	 .align 2
 450              	.L21:
 451 00c0 00000000 	 .word e_eeprom_xmc4_data_buffer
 452 00c4 00000000 	 .word e_eeprom_xmc4_sector_info
 453 00c8 00000000 	 .word e_eeprom_xmc4_fce
 454 00cc 0000010C 	 .word 201392128
 455 00d0 FFFF010C 	 .word 201457663
 456              	 .cfi_endproc
 457              	.LFE168:
 459              	 .section .text.E_EEPROM_XMC4_WriteByte,"ax",%progbits
 460              	 .align 2
 461              	 .global E_EEPROM_XMC4_WriteByte
 462              	 .thumb
 463              	 .thumb_func
 465              	E_EEPROM_XMC4_WriteByte:
 466              	.LFB169:
 253:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 254:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 255:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 256:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Update a single byte to RAM buffer*/
 257:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** bool E_EEPROM_XMC4_WriteByte(const uint16_t offset_address, const uint8_t value)
 258:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 467              	 .loc 3 258 0
 468              	 .cfi_startproc
 469              	 
 470              	 
 471              	 
 472 0000 80B4     	 push {r7}
 473              	.LCFI31:
 474              	 .cfi_def_cfa_offset 4
 475              	 .cfi_offset 7,-4
 476 0002 85B0     	 sub sp,sp,#20
 477              	.LCFI32:
 478              	 .cfi_def_cfa_offset 24
 479 0004 00AF     	 add r7,sp,#0
 480              	.LCFI33:
 481              	 .cfi_def_cfa_register 7
 482 0006 0346     	 mov r3,r0
 483 0008 0A46     	 mov r2,r1
 484 000a FB80     	 strh r3,[r7,#6]
 485 000c 1346     	 mov r3,r2
 486 000e 7B71     	 strb r3,[r7,#5]
 259:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t *address_ptr;
 260:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   bool status;
 261:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 262:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_WriteByte: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA
 263:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 487              	 .loc 3 263 0
 488 0010 FB88     	 ldrh r3,[r7,#6]
 489 0012 0833     	 adds r3,r3,#8
 490 0014 0A4A     	 ldr r2,.L25
 491 0016 1344     	 add r3,r3,r2
 492 0018 FB60     	 str r3,[r7,#12]
 264:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = (*address_ptr != value);
 493              	 .loc 3 264 0
 494 001a FB68     	 ldr r3,[r7,#12]
 495 001c 1B78     	 ldrb r3,[r3]
 496 001e 7A79     	 ldrb r2,[r7,#5]
 497 0020 9A42     	 cmp r2,r3
 498 0022 14BF     	 ite ne
 499 0024 0123     	 movne r3,#1
 500 0026 0023     	 moveq r3,#0
 501 0028 FB72     	 strb r3,[r7,#11]
 265:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 266:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   *address_ptr = value;
 502              	 .loc 3 266 0
 503 002a FB68     	 ldr r3,[r7,#12]
 504 002c 7A79     	 ldrb r2,[r7,#5]
 505 002e 1A70     	 strb r2,[r3]
 267:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 268:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return status;
 506              	 .loc 3 268 0
 507 0030 FB7A     	 ldrb r3,[r7,#11]
 269:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 508              	 .loc 3 269 0
 509 0032 1846     	 mov r0,r3
 510 0034 1437     	 adds r7,r7,#20
 511              	.LCFI34:
 512              	 .cfi_def_cfa_offset 4
 513 0036 BD46     	 mov sp,r7
 514              	.LCFI35:
 515              	 .cfi_def_cfa_register 13
 516              	 
 517 0038 5DF8047B 	 ldr r7,[sp],#4
 518              	.LCFI36:
 519              	 .cfi_restore 7
 520              	 .cfi_def_cfa_offset 0
 521 003c 7047     	 bx lr
 522              	.L26:
 523 003e 00BF     	 .align 2
 524              	.L25:
 525 0040 00000000 	 .word e_eeprom_xmc4_data_buffer
 526              	 .cfi_endproc
 527              	.LFE169:
 529              	 .section .text.E_EEPROM_XMC4_WriteArray,"ax",%progbits
 530              	 .align 2
 531              	 .global E_EEPROM_XMC4_WriteArray
 532              	 .thumb
 533              	 .thumb_func
 535              	E_EEPROM_XMC4_WriteArray:
 536              	.LFB170:
 270:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 271:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 272:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 273:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Update a set of bytes to RAM buffer*/
 274:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** bool E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint1
 275:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 537              	 .loc 3 275 0
 538              	 .cfi_startproc
 539              	 
 540              	 
 541 0000 80B5     	 push {r7,lr}
 542              	.LCFI37:
 543              	 .cfi_def_cfa_offset 8
 544              	 .cfi_offset 7,-8
 545              	 .cfi_offset 14,-4
 546 0002 86B0     	 sub sp,sp,#24
 547              	.LCFI38:
 548              	 .cfi_def_cfa_offset 32
 549 0004 00AF     	 add r7,sp,#0
 550              	.LCFI39:
 551              	 .cfi_def_cfa_register 7
 552 0006 0346     	 mov r3,r0
 553 0008 3960     	 str r1,[r7]
 554 000a FB80     	 strh r3,[r7,#6]
 555 000c 1346     	 mov r3,r2
 556 000e BB80     	 strh r3,[r7,#4]
 276:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint16_t i;
 277:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t  *address_ptr;
 278:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   bool status;
 279:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 280:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DAT
 281:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
 282:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                     ((offset_address + length)  < E_EEPROM_XMC4_DAT
 283:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 284:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 557              	 .loc 3 284 0
 558 0010 FB88     	 ldrh r3,[r7,#6]
 559 0012 0833     	 adds r3,r3,#8
 560 0014 124A     	 ldr r2,.L31
 561 0016 1344     	 add r3,r3,r2
 562 0018 3B61     	 str r3,[r7,#16]
 285:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = (memcmp(address_ptr, data, length) != 0);
 563              	 .loc 3 285 0
 564 001a BB88     	 ldrh r3,[r7,#4]
 565 001c 3869     	 ldr r0,[r7,#16]
 566 001e 3968     	 ldr r1,[r7]
 567 0020 1A46     	 mov r2,r3
 568 0022 FFF7FEFF 	 bl memcmp
 569 0026 0346     	 mov r3,r0
 570 0028 002B     	 cmp r3,#0
 571 002a 14BF     	 ite ne
 572 002c 0123     	 movne r3,#1
 573 002e 0023     	 moveq r3,#0
 574 0030 FB73     	 strb r3,[r7,#15]
 286:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 287:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for (i = 0U; i < length; i++)
 575              	 .loc 3 287 0
 576 0032 0023     	 movs r3,#0
 577 0034 FB82     	 strh r3,[r7,#22]
 578 0036 0AE0     	 b .L28
 579              	.L29:
 288:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 289:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       *(address_ptr + i) = *(data + i);
 580              	 .loc 3 289 0 discriminator 3
 581 0038 FB8A     	 ldrh r3,[r7,#22]
 582 003a 3A69     	 ldr r2,[r7,#16]
 583 003c 1344     	 add r3,r3,r2
 584 003e FA8A     	 ldrh r2,[r7,#22]
 585 0040 3968     	 ldr r1,[r7]
 586 0042 0A44     	 add r2,r2,r1
 587 0044 1278     	 ldrb r2,[r2]
 588 0046 1A70     	 strb r2,[r3]
 287:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 589              	 .loc 3 287 0 discriminator 3
 590 0048 FB8A     	 ldrh r3,[r7,#22]
 591 004a 0133     	 adds r3,r3,#1
 592 004c FB82     	 strh r3,[r7,#22]
 593              	.L28:
 287:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 594              	 .loc 3 287 0 is_stmt 0 discriminator 1
 595 004e FA8A     	 ldrh r2,[r7,#22]
 596 0050 BB88     	 ldrh r3,[r7,#4]
 597 0052 9A42     	 cmp r2,r3
 598 0054 F0D3     	 bcc .L29
 290:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 291:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 292:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return status;
 599              	 .loc 3 292 0 is_stmt 1
 600 0056 FB7B     	 ldrb r3,[r7,#15]
 293:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 601              	 .loc 3 293 0
 602 0058 1846     	 mov r0,r3
 603 005a 1837     	 adds r7,r7,#24
 604              	.LCFI40:
 605              	 .cfi_def_cfa_offset 8
 606 005c BD46     	 mov sp,r7
 607              	.LCFI41:
 608              	 .cfi_def_cfa_register 13
 609              	 
 610 005e 80BD     	 pop {r7,pc}
 611              	.L32:
 612              	 .align 2
 613              	.L31:
 614 0060 00000000 	 .word e_eeprom_xmc4_data_buffer
 615              	 .cfi_endproc
 616              	.LFE170:
 618              	 .section .text.E_EEPROM_XMC4_ReadByte,"ax",%progbits
 619              	 .align 2
 620              	 .global E_EEPROM_XMC4_ReadByte
 621              	 .thumb
 622              	 .thumb_func
 624              	E_EEPROM_XMC4_ReadByte:
 625              	.LFB171:
 294:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 295:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 296:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 297:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Read one byte from RAM Buffer */
 298:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** void E_EEPROM_XMC4_ReadByte(const uint16_t offset_address, uint8_t *const value)
 299:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 626              	 .loc 3 299 0
 627              	 .cfi_startproc
 628              	 
 629              	 
 630              	 
 631 0000 80B4     	 push {r7}
 632              	.LCFI42:
 633              	 .cfi_def_cfa_offset 4
 634              	 .cfi_offset 7,-4
 635 0002 85B0     	 sub sp,sp,#20
 636              	.LCFI43:
 637              	 .cfi_def_cfa_offset 24
 638 0004 00AF     	 add r7,sp,#0
 639              	.LCFI44:
 640              	 .cfi_def_cfa_register 7
 641 0006 0346     	 mov r3,r0
 642 0008 3960     	 str r1,[r7]
 643 000a FB80     	 strh r3,[r7,#6]
 300:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t *address_ptr;
 301:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_ReadByte: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_
 302:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 644              	 .loc 3 302 0
 645 000c FB88     	 ldrh r3,[r7,#6]
 646 000e 0833     	 adds r3,r3,#8
 647 0010 054A     	 ldr r2,.L34
 648 0012 1344     	 add r3,r3,r2
 649 0014 FB60     	 str r3,[r7,#12]
 303:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 304:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   *value = *address_ptr;
 650              	 .loc 3 304 0
 651 0016 FB68     	 ldr r3,[r7,#12]
 652 0018 1A78     	 ldrb r2,[r3]
 653 001a 3B68     	 ldr r3,[r7]
 654 001c 1A70     	 strb r2,[r3]
 305:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 655              	 .loc 3 305 0
 656 001e 1437     	 adds r7,r7,#20
 657              	.LCFI45:
 658              	 .cfi_def_cfa_offset 4
 659 0020 BD46     	 mov sp,r7
 660              	.LCFI46:
 661              	 .cfi_def_cfa_register 13
 662              	 
 663 0022 5DF8047B 	 ldr r7,[sp],#4
 664              	.LCFI47:
 665              	 .cfi_restore 7
 666              	 .cfi_def_cfa_offset 0
 667 0026 7047     	 bx lr
 668              	.L35:
 669              	 .align 2
 670              	.L34:
 671 0028 00000000 	 .word e_eeprom_xmc4_data_buffer
 672              	 .cfi_endproc
 673              	.LFE171:
 675              	 .section .text.E_EEPROM_XMC4_ReadArray,"ax",%progbits
 676              	 .align 2
 677              	 .global E_EEPROM_XMC4_ReadArray
 678              	 .thumb
 679              	 .thumb_func
 681              	E_EEPROM_XMC4_ReadArray:
 682              	.LFB172:
 306:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 307:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 308:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 309:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Read a set of bytes from RAM Buffer */
 310:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t len
 311:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 683              	 .loc 3 311 0
 684              	 .cfi_startproc
 685              	 
 686              	 
 687              	 
 688 0000 80B4     	 push {r7}
 689              	.LCFI48:
 690              	 .cfi_def_cfa_offset 4
 691              	 .cfi_offset 7,-4
 692 0002 85B0     	 sub sp,sp,#20
 693              	.LCFI49:
 694              	 .cfi_def_cfa_offset 24
 695 0004 00AF     	 add r7,sp,#0
 696              	.LCFI50:
 697              	 .cfi_def_cfa_register 7
 698 0006 0346     	 mov r3,r0
 699 0008 3960     	 str r1,[r7]
 700 000a FB80     	 strh r3,[r7,#6]
 701 000c 1346     	 mov r3,r2
 702 000e BB80     	 strh r3,[r7,#4]
 312:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint16_t i;
 313:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint8_t  *address_ptr;
 314:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA
 315:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
 316:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                     ((offset_address + length)  < E_EEPROM_XMC4_DAT
 317:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_addres
 703              	 .loc 3 317 0
 704 0010 FB88     	 ldrh r3,[r7,#6]
 705 0012 0833     	 adds r3,r3,#8
 706 0014 0C4A     	 ldr r2,.L39
 707 0016 1344     	 add r3,r3,r2
 708 0018 BB60     	 str r3,[r7,#8]
 318:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 319:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for (i=0U; i<length; i++)
 709              	 .loc 3 319 0
 710 001a 0023     	 movs r3,#0
 711 001c FB81     	 strh r3,[r7,#14]
 712 001e 0AE0     	 b .L37
 713              	.L38:
 320:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 321:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     *(data + i) = *(address_ptr + i);
 714              	 .loc 3 321 0 discriminator 3
 715 0020 FB89     	 ldrh r3,[r7,#14]
 716 0022 3A68     	 ldr r2,[r7]
 717 0024 1344     	 add r3,r3,r2
 718 0026 FA89     	 ldrh r2,[r7,#14]
 719 0028 B968     	 ldr r1,[r7,#8]
 720 002a 0A44     	 add r2,r2,r1
 721 002c 1278     	 ldrb r2,[r2]
 722 002e 1A70     	 strb r2,[r3]
 319:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 723              	 .loc 3 319 0 discriminator 3
 724 0030 FB89     	 ldrh r3,[r7,#14]
 725 0032 0133     	 adds r3,r3,#1
 726 0034 FB81     	 strh r3,[r7,#14]
 727              	.L37:
 319:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 728              	 .loc 3 319 0 is_stmt 0 discriminator 1
 729 0036 FA89     	 ldrh r2,[r7,#14]
 730 0038 BB88     	 ldrh r3,[r7,#4]
 731 003a 9A42     	 cmp r2,r3
 732 003c F0D3     	 bcc .L38
 322:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 323:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 733              	 .loc 3 323 0 is_stmt 1
 734 003e 1437     	 adds r7,r7,#20
 735              	.LCFI51:
 736              	 .cfi_def_cfa_offset 4
 737 0040 BD46     	 mov sp,r7
 738              	.LCFI52:
 739              	 .cfi_def_cfa_register 13
 740              	 
 741 0042 5DF8047B 	 ldr r7,[sp],#4
 742              	.LCFI53:
 743              	 .cfi_restore 7
 744              	 .cfi_def_cfa_offset 0
 745 0046 7047     	 bx lr
 746              	.L40:
 747              	 .align 2
 748              	.L39:
 749 0048 00000000 	 .word e_eeprom_xmc4_data_buffer
 750              	 .cfi_endproc
 751              	.LFE172:
 753              	 .section .text.E_EEPROM_XMC4_UpdateFlashContents,"ax",%progbits
 754              	 .align 2
 755              	 .global E_EEPROM_XMC4_UpdateFlashContents
 756              	 .thumb
 757              	 .thumb_func
 759              	E_EEPROM_XMC4_UpdateFlashContents:
 760              	.LFB173:
 324:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 325:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 326:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 327:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Copy data blocks from RAM to FLASH */
 328:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
 329:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 761              	 .loc 3 329 0
 762              	 .cfi_startproc
 763              	 
 764              	 
 765 0000 80B5     	 push {r7,lr}
 766              	.LCFI54:
 767              	 .cfi_def_cfa_offset 8
 768              	 .cfi_offset 7,-8
 769              	 .cfi_offset 14,-4
 770 0002 82B0     	 sub sp,sp,#8
 771              	.LCFI55:
 772              	 .cfi_def_cfa_offset 16
 773 0004 00AF     	 add r7,sp,#0
 774              	.LCFI56:
 775              	 .cfi_def_cfa_register 7
 330:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status;
 331:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_start_addr;
 332:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 333:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 776              	 .loc 3 333 0
 777 0006 0023     	 movs r3,#0
 778 0008 FB71     	 strb r3,[r7,#7]
 334:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 335:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Calculate the starting address of the active sector from where the first write started for the
 336:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 337:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 779              	 .loc 3 337 0
 780 000a 224B     	 ldr r3,.L46
 781 000c 9B68     	 ldr r3,[r3,#8]
 336:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                      (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 782              	 .loc 3 336 0
 783 000e 03F54053 	 add r3,r3,#12288
 784 0012 0433     	 adds r3,r3,#4
 785 0014 9B03     	 lsls r3,r3,#14
 786 0016 3B60     	 str r3,[r7]
 338:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 339:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* If the next free address crosses current active sector starting address, then all the sectors 
 340:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 787              	 .loc 3 340 0
 788 0018 1E4B     	 ldr r3,.L46
 789 001a 1A68     	 ldr r2,[r3]
 790 001c 3B68     	 ldr r3,[r7]
 791 001e 9A42     	 cmp r2,r3
 792 0020 11D1     	 bne .L42
 341:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****      (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 793              	 .loc 3 341 0 discriminator 1
 794 0022 1D4B     	 ldr r3,.L46+4
 795 0024 5B68     	 ldr r3,[r3,#4]
 340:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****      (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 796              	 .loc 3 340 0 discriminator 1
 797 0026 002B     	 cmp r3,#0
 798 0028 0DD0     	 beq .L42
 342:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 343:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Update the current sector to the latest sector on which the last write was executed. */
 344:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 799              	 .loc 3 344 0
 800 002a 1A4B     	 ldr r3,.L46
 801 002c 5B68     	 ldr r3,[r3,#4]
 802 002e 03F44043 	 and r3,r3,#49152
 345:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                 E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 803              	 .loc 3 345 0
 804 0032 9B0B     	 lsrs r3,r3,#14
 344:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                 E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 805              	 .loc 3 344 0
 806 0034 174A     	 ldr r2,.L46
 807 0036 9360     	 str r3,[r2,#8]
 346:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                 E_EEPROM_XMC4_SECTOR_POSITION);
 347:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 348:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Mark all the sectors as filled with data */
 349:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 808              	 .loc 3 349 0
 809 0038 164B     	 ldr r3,.L46
 810 003a 0F22     	 movs r2,#15
 811 003c DA60     	 str r2,[r3,#12]
 350:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 351:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Execute erase state machine to free up the unwanted sectors and keep only the sector which h
 352:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     status = E_EEPROM_XMC4_lInitEraseStateMachine();
 812              	 .loc 3 352 0
 813 003e FFF7FEFF 	 bl E_EEPROM_XMC4_lInitEraseStateMachine
 814 0042 0346     	 mov r3,r0
 815 0044 FB71     	 strb r3,[r7,#7]
 816              	.L42:
 353:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 354:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 355:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if (status ==  E_EEPROM_XMC4_STATUS_OK)
 817              	 .loc 3 355 0
 818 0046 FB79     	 ldrb r3,[r7,#7]
 819 0048 002B     	 cmp r3,#0
 820 004a 1DD1     	 bne .L43
 356:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 357:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_data_buffer.block_cycle_count++;
 821              	 .loc 3 357 0
 822 004c 124B     	 ldr r3,.L46+4
 823 004e 5B68     	 ldr r3,[r3,#4]
 824 0050 0133     	 adds r3,r3,#1
 825 0052 114A     	 ldr r2,.L46+4
 826 0054 5360     	 str r3,[r2,#4]
 358:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 359:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     status = E_EEPROM_XMC4_lWriteToFlash();
 827              	 .loc 3 359 0
 828 0056 FFF7FEFF 	 bl E_EEPROM_XMC4_lWriteToFlash
 829 005a 0346     	 mov r3,r0
 830 005c FB71     	 strb r3,[r7,#7]
 360:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 361:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If the flash write succeeds, update the latest flash data location in RAM for reference */
 362:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (status == E_EEPROM_XMC4_STATUS_OK)
 831              	 .loc 3 362 0
 832 005e FB79     	 ldrb r3,[r7,#7]
 833 0060 002B     	 cmp r3,#0
 834 0062 03D1     	 bne .L44
 363:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 364:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 835              	 .loc 3 364 0
 836 0064 0B4B     	 ldr r3,.L46
 837 0066 1B68     	 ldr r3,[r3]
 838 0068 0A4A     	 ldr r2,.L46
 839 006a 5360     	 str r3,[r2,#4]
 840              	.L44:
 365:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 366:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 367:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Update the next free address to write the new data block*/
 368:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 841              	 .loc 3 368 0
 842 006c 094B     	 ldr r3,.L46
 843 006e 1B68     	 ldr r3,[r3]
 844 0070 03F58053 	 add r3,r3,#4096
 845 0074 074A     	 ldr r2,.L46
 846 0076 1360     	 str r3,[r2]
 369:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 370:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If the next free address crosses 3rd sector end address relocate the address to 0th sector s
 371:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 847              	 .loc 3 371 0
 848 0078 064B     	 ldr r3,.L46
 849 007a 1B68     	 ldr r3,[r3]
 850 007c 074A     	 ldr r2,.L46+8
 851 007e 9342     	 cmp r3,r2
 852 0080 02D9     	 bls .L43
 372:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 373:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 853              	 .loc 3 373 0
 854 0082 044B     	 ldr r3,.L46
 855 0084 064A     	 ldr r2,.L46+12
 856 0086 1A60     	 str r2,[r3]
 857              	.L43:
 374:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 375:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 376:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 377:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 858              	 .loc 3 377 0
 859 0088 FB79     	 ldrb r3,[r7,#7]
 378:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 860              	 .loc 3 378 0
 861 008a 1846     	 mov r0,r3
 862 008c 0837     	 adds r7,r7,#8
 863              	.LCFI57:
 864              	 .cfi_def_cfa_offset 8
 865 008e BD46     	 mov sp,r7
 866              	.LCFI58:
 867              	 .cfi_def_cfa_register 13
 868              	 
 869 0090 80BD     	 pop {r7,pc}
 870              	.L47:
 871 0092 00BF     	 .align 2
 872              	.L46:
 873 0094 00000000 	 .word e_eeprom_xmc4_sector_info
 874 0098 00000000 	 .word e_eeprom_xmc4_data_buffer
 875 009c FFFF010C 	 .word 201457663
 876 00a0 0000010C 	 .word 201392128
 877              	 .cfi_endproc
 878              	.LFE173:
 880              	 .section .text.E_EEPROM_XMC4_IsFlashEmpty,"ax",%progbits
 881              	 .align 2
 882              	 .global E_EEPROM_XMC4_IsFlashEmpty
 883              	 .thumb
 884              	 .thumb_func
 886              	E_EEPROM_XMC4_IsFlashEmpty:
 887              	.LFB174:
 379:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 380:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 381:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Check the availability data in the flash emulated EEPROM area */
 382:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** bool E_EEPROM_XMC4_IsFlashEmpty(void)
 383:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 888              	 .loc 3 383 0
 889              	 .cfi_startproc
 890              	 
 891              	 
 892              	 
 893 0000 80B4     	 push {r7}
 894              	.LCFI59:
 895              	 .cfi_def_cfa_offset 4
 896              	 .cfi_offset 7,-4
 897 0002 83B0     	 sub sp,sp,#12
 898              	.LCFI60:
 899              	 .cfi_def_cfa_offset 16
 900 0004 00AF     	 add r7,sp,#0
 901              	.LCFI61:
 902              	 .cfi_def_cfa_register 7
 384:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   bool status = false;
 903              	 .loc 3 384 0
 904 0006 0023     	 movs r3,#0
 905 0008 FB71     	 strb r3,[r7,#7]
 385:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 386:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* If data available flash_data_addr will have a valid address*/
 387:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 906              	 .loc 3 387 0
 907 000a 064B     	 ldr r3,.L51
 908 000c 5B68     	 ldr r3,[r3,#4]
 909 000e 002B     	 cmp r3,#0
 910 0010 01D1     	 bne .L49
 388:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 389:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     status = true;
 911              	 .loc 3 389 0
 912 0012 0123     	 movs r3,#1
 913 0014 FB71     	 strb r3,[r7,#7]
 914              	.L49:
 390:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 391:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 915              	 .loc 3 391 0
 916 0016 FB79     	 ldrb r3,[r7,#7]
 392:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 917              	 .loc 3 392 0
 918 0018 1846     	 mov r0,r3
 919 001a 0C37     	 adds r7,r7,#12
 920              	.LCFI62:
 921              	 .cfi_def_cfa_offset 4
 922 001c BD46     	 mov sp,r7
 923              	.LCFI63:
 924              	 .cfi_def_cfa_register 13
 925              	 
 926 001e 5DF8047B 	 ldr r7,[sp],#4
 927              	.LCFI64:
 928              	 .cfi_restore 7
 929              	 .cfi_def_cfa_offset 0
 930 0022 7047     	 bx lr
 931              	.L52:
 932              	 .align 2
 933              	.L51:
 934 0024 00000000 	 .word e_eeprom_xmc4_sector_info
 935              	 .cfi_endproc
 936              	.LFE174:
 938              	 .section .text.E_EEPROM_XMC4_lWriteToFlash,"ax",%progbits
 939              	 .align 2
 940              	 .thumb
 941              	 .thumb_func
 943              	E_EEPROM_XMC4_lWriteToFlash:
 944              	.LFB175:
 393:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 394:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /**************************************************************************************************
 395:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  * LOCAL ROUTINES
 396:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****  **************************************************************************************************
 397:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 398:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local function to program data blocks from RAM into FLASH */
 399:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
 400:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 945              	 .loc 3 400 0
 946              	 .cfi_startproc
 947              	 
 948              	 
 949 0000 80B5     	 push {r7,lr}
 950              	.LCFI65:
 951              	 .cfi_def_cfa_offset 8
 952              	 .cfi_offset 7,-8
 953              	 .cfi_offset 14,-4
 954 0002 84B0     	 sub sp,sp,#16
 955              	.LCFI66:
 956              	 .cfi_def_cfa_offset 24
 957 0004 00AF     	 add r7,sp,#0
 958              	.LCFI67:
 959              	 .cfi_def_cfa_register 7
 401:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *flash_addr_ptr;
 402:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *ram_addr_ptr;
 403:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t  page_index;
 404:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status;
 405:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 406:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 960              	 .loc 3 406 0
 961 0006 0023     	 movs r3,#0
 962 0008 FB70     	 strb r3,[r7,#3]
 407:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 963              	 .loc 3 407 0
 964 000a 184B     	 ldr r3,.L59
 965 000c 1B68     	 ldr r3,[r3]
 966 000e FB60     	 str r3,[r7,#12]
 408:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 967              	 .loc 3 408 0
 968 0010 174B     	 ldr r3,.L59+4
 969 0012 BB60     	 str r3,[r7,#8]
 409:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 410:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 970              	 .loc 3 410 0
 971 0014 1748     	 ldr r0,.L59+8
 972 0016 FFF7FEFF 	 bl E_EEPROM_XMC4_lCalculateCRC
 973 001a 0246     	 mov r2,r0
 974 001c 144B     	 ldr r3,.L59+4
 975 001e 1A60     	 str r2,[r3]
 411:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****                                                              (&(e_eeprom_xmc4_data_buffer.block_cyc
 412:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 413:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 976              	 .loc 3 413 0
 977 0020 0023     	 movs r3,#0
 978 0022 7B60     	 str r3,[r7,#4]
 979 0024 19E0     	 b .L54
 980              	.L57:
 414:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 415:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_ClearStatus();
 981              	 .loc 3 415 0
 982 0026 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
 416:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 417:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 983              	 .loc 3 417 0
 984 002a F868     	 ldr r0,[r7,#12]
 985 002c B968     	 ldr r1,[r7,#8]
 986 002e FFF7FEFF 	 bl XMC_FLASH_ProgramPage
 418:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 419:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (XMC_FLASH_GetStatus() == (uint32_t)XMC_FLASH_STATUS_VERIFY_ERROR)
 987              	 .loc 3 419 0
 988 0032 FFF7FEFF 	 bl XMC_FLASH_GetStatus
 989 0036 0346     	 mov r3,r0
 990 0038 B3F1004F 	 cmp r3,#-2147483648
 991 003c 02D1     	 bne .L55
 420:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 421:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 992              	 .loc 3 421 0
 993 003e 0323     	 movs r3,#3
 994 0040 FB70     	 strb r3,[r7,#3]
 422:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       break;
 995              	 .loc 3 422 0
 996 0042 0DE0     	 b .L56
 997              	.L55:
 423:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 424:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 998              	 .loc 3 424 0 discriminator 2
 999 0044 BB68     	 ldr r3,[r7,#8]
 1000 0046 03F58073 	 add r3,r3,#256
 1001 004a BB60     	 str r3,[r7,#8]
 425:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 1002              	 .loc 3 425 0 discriminator 2
 1003 004c FB68     	 ldr r3,[r7,#12]
 1004 004e 03F58073 	 add r3,r3,#256
 1005 0052 FB60     	 str r3,[r7,#12]
 413:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 1006              	 .loc 3 413 0 discriminator 2
 1007 0054 7B68     	 ldr r3,[r7,#4]
 1008 0056 0133     	 adds r3,r3,#1
 1009 0058 7B60     	 str r3,[r7,#4]
 1010              	.L54:
 413:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 1011              	 .loc 3 413 0 is_stmt 0 discriminator 1
 1012 005a 7B68     	 ldr r3,[r7,#4]
 1013 005c 0F2B     	 cmp r3,#15
 1014 005e E2D9     	 bls .L57
 1015              	.L56:
 426:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 427:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 428:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 1016              	 .loc 3 428 0 is_stmt 1
 1017 0060 FB78     	 ldrb r3,[r7,#3]
 429:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1018              	 .loc 3 429 0
 1019 0062 1846     	 mov r0,r3
 1020 0064 1037     	 adds r7,r7,#16
 1021              	.LCFI68:
 1022              	 .cfi_def_cfa_offset 8
 1023 0066 BD46     	 mov sp,r7
 1024              	.LCFI69:
 1025              	 .cfi_def_cfa_register 13
 1026              	 
 1027 0068 80BD     	 pop {r7,pc}
 1028              	.L60:
 1029 006a 00BF     	 .align 2
 1030              	.L59:
 1031 006c 00000000 	 .word e_eeprom_xmc4_sector_info
 1032 0070 00000000 	 .word e_eeprom_xmc4_data_buffer
 1033 0074 04000000 	 .word e_eeprom_xmc4_data_buffer+4
 1034              	 .cfi_endproc
 1035              	.LFE175:
 1037              	 .section .text.E_EEPROM_XMC4_lInitReadSectorInfo,"ax",%progbits
 1038              	 .align 2
 1039              	 .thumb
 1040              	 .thumb_func
 1042              	E_EEPROM_XMC4_lInitReadSectorInfo:
 1043              	.LFB176:
 430:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 431:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 432:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 433:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
 434:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1044              	 .loc 3 434 0
 1045              	 .cfi_startproc
 1046              	 
 1047              	 
 1048 0000 80B5     	 push {r7,lr}
 1049              	.LCFI70:
 1050              	 .cfi_def_cfa_offset 8
 1051              	 .cfi_offset 7,-8
 1052              	 .cfi_offset 14,-4
 1053 0002 8AB0     	 sub sp,sp,#40
 1054              	.LCFI71:
 1055              	 .cfi_def_cfa_offset 48
 1056 0004 00AF     	 add r7,sp,#0
 1057              	.LCFI72:
 1058              	 .cfi_def_cfa_register 7
 1059 0006 7860     	 str r0,[r7,#4]
 435:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t block_read_addr;
 436:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_start_addr;
 437:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t free_block_addr;
 438:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *data_ptr;
 439:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t block_cycle_count;
 440:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t written_crc;
 441:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t calculated_crc;
 442:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 443:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Initialize starting address and last block address of the sector. */
 444:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sec
 1060              	 .loc 3 444 0
 1061 0008 7B68     	 ldr r3,[r7,#4]
 1062 000a 03F54053 	 add r3,r3,#12288
 1063 000e 0433     	 adds r3,r3,#4
 1064 0010 9B03     	 lsls r3,r3,#14
 1065 0012 FB61     	 str r3,[r7,#28]
 445:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BL
 1066              	 .loc 3 445 0
 1067 0014 FB69     	 ldr r3,[r7,#28]
 1068 0016 03F54053 	 add r3,r3,#12288
 1069 001a 7B62     	 str r3,[r7,#36]
 446:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   free_block_addr = E_EEPROM_XMC4_EMPTY;
 1070              	 .loc 3 446 0
 1071 001c 0023     	 movs r3,#0
 1072 001e 3B62     	 str r3,[r7,#32]
 1073              	.L65:
 447:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 448:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   do
 449:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 450:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Read first 32 bit data from the block which indicates the block cycle counter. */
 451:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     data_ptr = (uint32_t*)block_read_addr;
 1074              	 .loc 3 451 0
 1075 0020 7B6A     	 ldr r3,[r7,#36]
 1076 0022 BB61     	 str r3,[r7,#24]
 452:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 1077              	 .loc 3 452 0
 1078 0024 BB69     	 ldr r3,[r7,#24]
 1079 0026 5B68     	 ldr r3,[r3,#4]
 1080 0028 7B61     	 str r3,[r7,#20]
 453:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 454:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Check if block cycle count is a non zero value*/
 455:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 1081              	 .loc 3 455 0
 1082 002a 7B69     	 ldr r3,[r7,#20]
 1083 002c 002B     	 cmp r3,#0
 1084 002e 2ED0     	 beq .L62
 456:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 457:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Mark sector as non-empty sector*/
 458:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 1085              	 .loc 3 458 0
 1086 0030 1C4B     	 ldr r3,.L66
 1087 0032 DA68     	 ldr r2,[r3,#12]
 1088 0034 7B68     	 ldr r3,[r7,#4]
 1089 0036 0121     	 movs r1,#1
 1090 0038 01FA03F3 	 lsl r3,r1,r3
 1091 003c 1343     	 orrs r3,r3,r2
 1092 003e 194A     	 ldr r2,.L66
 1093 0040 D360     	 str r3,[r2,#12]
 459:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 460:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* If this is the first non empty block identified, then store the address as next free addre
 461:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 1094              	 .loc 3 461 0
 1095 0042 3B6A     	 ldr r3,[r7,#32]
 1096 0044 002B     	 cmp r3,#0
 1097 0046 03D1     	 bne .L63
 462:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 463:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 1098              	 .loc 3 463 0
 1099 0048 7B6A     	 ldr r3,[r7,#36]
 1100 004a 03F58053 	 add r3,r3,#4096
 1101 004e 3B62     	 str r3,[r7,#32]
 1102              	.L63:
 464:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 465:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 466:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Read the second 32bit data which indicates the CRC */
 467:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       written_crc = *data_ptr;
 1103              	 .loc 3 467 0
 1104 0050 BB69     	 ldr r3,[r7,#24]
 1105 0052 1B68     	 ldr r3,[r3]
 1106 0054 3B61     	 str r3,[r7,#16]
 468:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
 469:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 1107              	 .loc 3 469 0
 1108 0056 BB69     	 ldr r3,[r7,#24]
 1109 0058 0433     	 adds r3,r3,#4
 1110 005a 1846     	 mov r0,r3
 1111 005c FFF7FEFF 	 bl E_EEPROM_XMC4_lCalculateCRC
 1112 0060 F860     	 str r0,[r7,#12]
 470:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 471:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if (calculated_crc == written_crc)
 1113              	 .loc 3 471 0
 1114 0062 FA68     	 ldr r2,[r7,#12]
 1115 0064 3B69     	 ldr r3,[r7,#16]
 1116 0066 9A42     	 cmp r2,r3
 1117 0068 11D1     	 bne .L62
 472:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 473:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         /* If both CRC matches and the current block cycle counter is greater than the previous rec
 474:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          * Update the Data structure with the current block as the "latest" one and the current sec
 475:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          * Exit from the function.
 476:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****          */
 477:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 1118              	 .loc 3 477 0
 1119 006a 0F4B     	 ldr r3,.L66+4
 1120 006c 5A68     	 ldr r2,[r3,#4]
 1121 006e 7B69     	 ldr r3,[r7,#20]
 1122 0070 9A42     	 cmp r2,r3
 1123 0072 0CD2     	 bcs .L62
 478:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 479:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 1124              	 .loc 3 479 0
 1125 0074 0C4A     	 ldr r2,.L66+4
 1126 0076 7B69     	 ldr r3,[r7,#20]
 1127 0078 5360     	 str r3,[r2,#4]
 480:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.current_sector = sector;
 1128              	 .loc 3 480 0
 1129 007a 0A4A     	 ldr r2,.L66
 1130 007c 7B68     	 ldr r3,[r7,#4]
 1131 007e 9360     	 str r3,[r2,#8]
 481:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 1132              	 .loc 3 481 0
 1133 0080 084A     	 ldr r2,.L66
 1134 0082 7B6A     	 ldr r3,[r7,#36]
 1135 0084 5360     	 str r3,[r2,#4]
 482:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 1136              	 .loc 3 482 0
 1137 0086 074A     	 ldr r2,.L66
 1138 0088 3B6A     	 ldr r3,[r7,#32]
 1139 008a 1360     	 str r3,[r2]
 483:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           break;
 1140              	 .loc 3 483 0
 1141 008c 07E0     	 b .L61
 1142              	.L62:
 484:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 485:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 486:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 487:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Move the block read address to one block size up starting from the bottom of sector */
 488:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 1143              	 .loc 3 488 0
 1144 008e 7B6A     	 ldr r3,[r7,#36]
 1145 0090 A3F58053 	 sub r3,r3,#4096
 1146 0094 7B62     	 str r3,[r7,#36]
 489:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 490:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Iterate the read process until the block read address crosses sector start address or a
 491:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****    * latest valid block is identified.
 492:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****    */
 493:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   } while ( block_read_addr >= sector_start_addr );
 1147              	 .loc 3 493 0
 1148 0096 7A6A     	 ldr r2,[r7,#36]
 1149 0098 FB69     	 ldr r3,[r7,#28]
 1150 009a 9A42     	 cmp r2,r3
 1151 009c C0D2     	 bcs .L65
 1152              	.L61:
 494:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 495:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1153              	 .loc 3 495 0
 1154 009e 2837     	 adds r7,r7,#40
 1155              	.LCFI73:
 1156              	 .cfi_def_cfa_offset 8
 1157 00a0 BD46     	 mov sp,r7
 1158              	.LCFI74:
 1159              	 .cfi_def_cfa_register 13
 1160              	 
 1161 00a2 80BD     	 pop {r7,pc}
 1162              	.L67:
 1163              	 .align 2
 1164              	.L66:
 1165 00a4 00000000 	 .word e_eeprom_xmc4_sector_info
 1166 00a8 00000000 	 .word e_eeprom_xmc4_data_buffer
 1167              	 .cfi_endproc
 1168              	.LFE176:
 1170              	 .section .text.E_EEPROM_XMC4_lInitEraseStateMachine,"ax",%progbits
 1171              	 .align 2
 1172              	 .thumb
 1173              	 .thumb_func
 1175              	E_EEPROM_XMC4_lInitEraseStateMachine:
 1176              	.LFB177:
 496:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 497:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 498:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 499:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
 500:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1177              	 .loc 3 500 0
 1178              	 .cfi_startproc
 1179              	 
 1180              	 
 1181 0000 80B5     	 push {r7,lr}
 1182              	.LCFI75:
 1183              	 .cfi_def_cfa_offset 8
 1184              	 .cfi_offset 7,-8
 1185              	 .cfi_offset 14,-4
 1186 0002 84B0     	 sub sp,sp,#16
 1187              	.LCFI76:
 1188              	 .cfi_def_cfa_offset 24
 1189 0004 00AF     	 add r7,sp,#0
 1190              	.LCFI77:
 1191              	 .cfi_def_cfa_register 7
 501:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_count;
 502:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t sector_start_addr;
 503:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   E_EEPROM_XMC4_STATUS_t status ;
 504:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 505:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   status = E_EEPROM_XMC4_STATUS_OK;
 1192              	 .loc 3 505 0
 1193 0006 0023     	 movs r3,#0
 1194 0008 FB72     	 strb r3,[r7,#11]
 506:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   sector_count = 0U;
 1195              	 .loc 3 506 0
 1196 000a 0023     	 movs r3,#0
 1197 000c FB60     	 str r3,[r7,#12]
 1198              	.L72:
 507:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 508:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   do
 509:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 510:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* If the non empty sector is the current active sector, then do not erase it*/
 511:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 1199              	 .loc 3 511 0
 1200 000e 1B4B     	 ldr r3,.L74
 1201 0010 9A68     	 ldr r2,[r3,#8]
 1202 0012 FB68     	 ldr r3,[r7,#12]
 1203 0014 9A42     	 cmp r2,r3
 1204 0016 26D0     	 beq .L69
 512:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     {
 513:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       /* Check if the sector was previously identified as non-empty. i.e It is having old data or c
 514:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        * If so erase the sector and mark it as erase attempted.
 515:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****        */
 516:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 1205              	 .loc 3 516 0
 1206 0018 184B     	 ldr r3,.L74
 1207 001a DA68     	 ldr r2,[r3,#12]
 1208 001c FB68     	 ldr r3,[r7,#12]
 1209 001e 22FA03F3 	 lsr r3,r2,r3
 1210 0022 03F00103 	 and r3,r3,#1
 1211 0026 002B     	 cmp r3,#0
 1212 0028 1DD0     	 beq .L69
 517:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       {
 518:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32
 1213              	 .loc 3 518 0
 1214 002a FB68     	 ldr r3,[r7,#12]
 1215 002c 03F54053 	 add r3,r3,#12288
 1216 0030 0433     	 adds r3,r3,#4
 1217 0032 9B03     	 lsls r3,r3,#14
 1218 0034 7B60     	 str r3,[r7,#4]
 519:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 520:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         XMC_FLASH_ClearStatus();
 1219              	 .loc 3 520 0
 1220 0036 FFF7FEFF 	 bl XMC_FLASH_ClearStatus
 521:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 1221              	 .loc 3 521 0
 1222 003a 7B68     	 ldr r3,[r7,#4]
 1223 003c 1846     	 mov r0,r3
 1224 003e FFF7FEFF 	 bl XMC_FLASH_EraseSector
 522:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 523:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 1225              	 .loc 3 523 0
 1226 0042 FFF7FEFF 	 bl XMC_FLASH_GetStatus
 1227 0046 0346     	 mov r3,r0
 1228 0048 202B     	 cmp r3,#32
 1229 004a 02D0     	 beq .L70
 524:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         {
 525:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 1230              	 .loc 3 525 0
 1231 004c 0423     	 movs r3,#4
 1232 004e FB72     	 strb r3,[r7,#11]
 526:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****           break;
 1233              	 .loc 3 526 0
 1234 0050 0FE0     	 b .L71
 1235              	.L70:
 527:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         }
 528:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****         e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 1236              	 .loc 3 528 0
 1237 0052 0A4B     	 ldr r3,.L74
 1238 0054 DA68     	 ldr r2,[r3,#12]
 1239 0056 FB68     	 ldr r3,[r7,#12]
 1240 0058 0121     	 movs r1,#1
 1241 005a 01FA03F3 	 lsl r3,r1,r3
 1242 005e DB43     	 mvns r3,r3
 1243 0060 1340     	 ands r3,r3,r2
 1244 0062 064A     	 ldr r2,.L74
 1245 0064 D360     	 str r3,[r2,#12]
 1246              	.L69:
 529:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****       }
 530:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     }
 531:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     sector_count++;
 1247              	 .loc 3 531 0
 1248 0066 FB68     	 ldr r3,[r7,#12]
 1249 0068 0133     	 adds r3,r3,#1
 1250 006a FB60     	 str r3,[r7,#12]
 532:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sect
 533:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 1251              	 .loc 3 533 0
 1252 006c FB68     	 ldr r3,[r7,#12]
 1253 006e 032B     	 cmp r3,#3
 1254 0070 CDD9     	 bls .L72
 1255              	.L71:
 534:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 535:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (status);
 1256              	 .loc 3 535 0
 1257 0072 FB7A     	 ldrb r3,[r7,#11]
 536:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1258              	 .loc 3 536 0
 1259 0074 1846     	 mov r0,r3
 1260 0076 1037     	 adds r7,r7,#16
 1261              	.LCFI78:
 1262              	 .cfi_def_cfa_offset 8
 1263 0078 BD46     	 mov sp,r7
 1264              	.LCFI79:
 1265              	 .cfi_def_cfa_register 13
 1266              	 
 1267 007a 80BD     	 pop {r7,pc}
 1268              	.L75:
 1269              	 .align 2
 1270              	.L74:
 1271 007c 00000000 	 .word e_eeprom_xmc4_sector_info
 1272              	 .cfi_endproc
 1273              	.LFE177:
 1275              	 .section .text.E_EEPROM_XMC4_lCalculateCRC,"ax",%progbits
 1276              	 .align 2
 1277              	 .thumb
 1278              	 .thumb_func
 1280              	E_EEPROM_XMC4_lCalculateCRC:
 1281              	.LFB178:
 537:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 538:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local function to CRC */
 539:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
 540:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1282              	 .loc 3 540 0
 1283              	 .cfi_startproc
 1284              	 
 1285              	 
 1286 0000 80B5     	 push {r7,lr}
 1287              	.LCFI80:
 1288              	 .cfi_def_cfa_offset 8
 1289              	 .cfi_offset 7,-8
 1290              	 .cfi_offset 14,-4
 1291 0002 84B0     	 sub sp,sp,#16
 1292              	.LCFI81:
 1293              	 .cfi_def_cfa_offset 24
 1294 0004 00AF     	 add r7,sp,#0
 1295              	.LCFI82:
 1296              	 .cfi_def_cfa_register 7
 1297 0006 7860     	 str r0,[r7,#4]
 541:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t result;
 542:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 543:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   /* Reset the CRC result register before new CRC calculation */
 544:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 1298              	 .loc 3 544 0
 1299 0008 0848     	 ldr r0,.L78
 1300 000a 0021     	 movs r1,#0
 1301 000c FFF7FEFF 	 bl XMC_FCE_InitializeSeedValue
 545:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 546:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC
 1302              	 .loc 3 546 0
 1303 0010 07F10C03 	 add r3,r7,#12
 1304 0014 0548     	 ldr r0,.L78
 1305 0016 7968     	 ldr r1,[r7,#4]
 1306 0018 40F6FC72 	 movw r2,#4092
 1307 001c FFF7FEFF 	 bl XMC_FCE_CalculateCRC32
 547:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 548:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   return (result);
 1308              	 .loc 3 548 0
 1309 0020 FB68     	 ldr r3,[r7,#12]
 549:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1310              	 .loc 3 549 0
 1311 0022 1846     	 mov r0,r3
 1312 0024 1037     	 adds r7,r7,#16
 1313              	.LCFI83:
 1314              	 .cfi_def_cfa_offset 8
 1315 0026 BD46     	 mov sp,r7
 1316              	.LCFI84:
 1317              	 .cfi_def_cfa_register 13
 1318              	 
 1319 0028 80BD     	 pop {r7,pc}
 1320              	.L79:
 1321 002a 00BF     	 .align 2
 1322              	.L78:
 1323 002c 00000000 	 .word e_eeprom_xmc4_fce
 1324              	 .cfi_endproc
 1325              	.LFE178:
 1327              	 .section .text.E_EEPROM_XMC4_lCopyFlashToRam,"ax",%progbits
 1328              	 .align 2
 1329              	 .thumb
 1330              	 .thumb_func
 1332              	E_EEPROM_XMC4_lCopyFlashToRam:
 1333              	.LFB179:
 550:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 551:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 552:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 553:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** /* Local function to copy data blocks from FLASH to RAM */
 554:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** static void E_EEPROM_XMC4_lCopyFlashToRam(void)
 555:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** {
 1334              	 .loc 3 555 0
 1335              	 .cfi_startproc
 1336              	 
 1337              	 
 1338              	 
 1339 0000 80B4     	 push {r7}
 1340              	.LCFI85:
 1341              	 .cfi_def_cfa_offset 4
 1342              	 .cfi_offset 7,-4
 1343 0002 85B0     	 sub sp,sp,#20
 1344              	.LCFI86:
 1345              	 .cfi_def_cfa_offset 24
 1346 0004 00AF     	 add r7,sp,#0
 1347              	.LCFI87:
 1348              	 .cfi_def_cfa_register 7
 556:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *flash_addr_ptr;
 557:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t *ram_addr_ptr;
 558:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   uint32_t byte_index;
 559:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 560:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 1349              	 .loc 3 560 0
 1350 0006 0F4B     	 ldr r3,.L83
 1351 0008 5B68     	 ldr r3,[r3,#4]
 1352 000a BB60     	 str r3,[r7,#8]
 561:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 1353              	 .loc 3 561 0
 1354 000c 0E4B     	 ldr r3,.L83+4
 1355 000e 7B60     	 str r3,[r7,#4]
 562:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** 
 563:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 1356              	 .loc 3 563 0
 1357 0010 0023     	 movs r3,#0
 1358 0012 FB60     	 str r3,[r7,#12]
 1359 0014 0CE0     	 b .L81
 1360              	.L82:
 564:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 565:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****     *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 1361              	 .loc 3 565 0 discriminator 3
 1362 0016 FB68     	 ldr r3,[r7,#12]
 1363 0018 9B00     	 lsls r3,r3,#2
 1364 001a 7A68     	 ldr r2,[r7,#4]
 1365 001c 1344     	 add r3,r3,r2
 1366 001e FA68     	 ldr r2,[r7,#12]
 1367 0020 9200     	 lsls r2,r2,#2
 1368 0022 B968     	 ldr r1,[r7,#8]
 1369 0024 0A44     	 add r2,r2,r1
 1370 0026 1268     	 ldr r2,[r2]
 1371 0028 1A60     	 str r2,[r3]
 563:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 1372              	 .loc 3 563 0 discriminator 3
 1373 002a FB68     	 ldr r3,[r7,#12]
 1374 002c 0133     	 adds r3,r3,#1
 1375 002e FB60     	 str r3,[r7,#12]
 1376              	.L81:
 563:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   {
 1377              	 .loc 3 563 0 is_stmt 0 discriminator 1
 1378 0030 FB68     	 ldr r3,[r7,#12]
 1379 0032 B3F5806F 	 cmp r3,#1024
 1380 0036 EED3     	 bcc .L82
 566:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c ****   }
 567:../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.c **** }
 1381              	 .loc 3 567 0 is_stmt 1
 1382 0038 1437     	 adds r7,r7,#20
 1383              	.LCFI88:
 1384              	 .cfi_def_cfa_offset 4
 1385 003a BD46     	 mov sp,r7
 1386              	.LCFI89:
 1387              	 .cfi_def_cfa_register 13
 1388              	 
 1389 003c 5DF8047B 	 ldr r7,[sp],#4
 1390              	.LCFI90:
 1391              	 .cfi_restore 7
 1392              	 .cfi_def_cfa_offset 0
 1393 0040 7047     	 bx lr
 1394              	.L84:
 1395 0042 00BF     	 .align 2
 1396              	.L83:
 1397 0044 00000000 	 .word e_eeprom_xmc4_sector_info
 1398 0048 00000000 	 .word e_eeprom_xmc4_data_buffer
 1399              	 .cfi_endproc
 1400              	.LFE179:
 1402              	 .text
 1403              	.Letext0:
 1404              	 .file 4 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1405              	 .file 5 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1406              	 .file 6 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 1407              	 .file 7 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Dave/Generated/DAVE_Common.h"
 1408              	 .file 8 "../Dave/Generated/E_EEPROM_XMC4/e_eeprom_xmc4.h"
 1409              	 .file 9 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/cmsis_gcc.h"
 1410              	 .file 10 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 e_eeprom_xmc4.c
    {standard input}:20     .text.XMC_FLASH_SetMargin:00000000 $t
    {standard input}:24     .text.XMC_FLASH_SetMargin:00000000 XMC_FLASH_SetMargin
    {standard input}:72     .text.XMC_FLASH_SetMargin:00000030 $d
    {standard input}:77     .text.XMC_FLASH_EnableDoubleBitErrorTrap:00000000 $t
    {standard input}:81     .text.XMC_FLASH_EnableDoubleBitErrorTrap:00000000 XMC_FLASH_EnableDoubleBitErrorTrap
    {standard input}:118    .text.XMC_FLASH_EnableDoubleBitErrorTrap:00000024 $d
    {standard input}:123    .text.XMC_FLASH_DisableDoubleBitErrorTrap:00000000 $t
    {standard input}:127    .text.XMC_FLASH_DisableDoubleBitErrorTrap:00000000 XMC_FLASH_DisableDoubleBitErrorTrap
    {standard input}:164    .text.XMC_FLASH_DisableDoubleBitErrorTrap:00000024 $d
    {standard input}:169    .text.XMC_FCE_InitializeSeedValue:00000000 $t
    {standard input}:173    .text.XMC_FCE_InitializeSeedValue:00000000 XMC_FCE_InitializeSeedValue
    {standard input}:215    .bss.e_eeprom_xmc4_data_buffer:00000000 $d
    {standard input}:218    .bss.e_eeprom_xmc4_data_buffer:00000000 e_eeprom_xmc4_data_buffer
    {standard input}:221    .data.e_eeprom_xmc4_sector_info:00000000 $d
    {standard input}:224    .data.e_eeprom_xmc4_sector_info:00000000 e_eeprom_xmc4_sector_info
    {standard input}:230    .rodata.e_eeprom_xmc4_fce:00000000 $d
    {standard input}:233    .rodata.e_eeprom_xmc4_fce:00000000 e_eeprom_xmc4_fce
    {standard input}:240    .text.E_EEPROM_XMC4_GetAppVersion:00000000 $t
    {standard input}:245    .text.E_EEPROM_XMC4_GetAppVersion:00000000 E_EEPROM_XMC4_GetAppVersion
    {standard input}:306    .text.E_EEPROM_XMC4_Init:00000000 $t
    {standard input}:311    .text.E_EEPROM_XMC4_Init:00000000 E_EEPROM_XMC4_Init
    {standard input}:1042   .text.E_EEPROM_XMC4_lInitReadSectorInfo:00000000 E_EEPROM_XMC4_lInitReadSectorInfo
    {standard input}:1175   .text.E_EEPROM_XMC4_lInitEraseStateMachine:00000000 E_EEPROM_XMC4_lInitEraseStateMachine
    {standard input}:1332   .text.E_EEPROM_XMC4_lCopyFlashToRam:00000000 E_EEPROM_XMC4_lCopyFlashToRam
    {standard input}:451    .text.E_EEPROM_XMC4_Init:000000c0 $d
    {standard input}:460    .text.E_EEPROM_XMC4_WriteByte:00000000 $t
    {standard input}:465    .text.E_EEPROM_XMC4_WriteByte:00000000 E_EEPROM_XMC4_WriteByte
    {standard input}:525    .text.E_EEPROM_XMC4_WriteByte:00000040 $d
    {standard input}:530    .text.E_EEPROM_XMC4_WriteArray:00000000 $t
    {standard input}:535    .text.E_EEPROM_XMC4_WriteArray:00000000 E_EEPROM_XMC4_WriteArray
    {standard input}:614    .text.E_EEPROM_XMC4_WriteArray:00000060 $d
    {standard input}:619    .text.E_EEPROM_XMC4_ReadByte:00000000 $t
    {standard input}:624    .text.E_EEPROM_XMC4_ReadByte:00000000 E_EEPROM_XMC4_ReadByte
    {standard input}:671    .text.E_EEPROM_XMC4_ReadByte:00000028 $d
    {standard input}:676    .text.E_EEPROM_XMC4_ReadArray:00000000 $t
    {standard input}:681    .text.E_EEPROM_XMC4_ReadArray:00000000 E_EEPROM_XMC4_ReadArray
    {standard input}:749    .text.E_EEPROM_XMC4_ReadArray:00000048 $d
    {standard input}:754    .text.E_EEPROM_XMC4_UpdateFlashContents:00000000 $t
    {standard input}:759    .text.E_EEPROM_XMC4_UpdateFlashContents:00000000 E_EEPROM_XMC4_UpdateFlashContents
    {standard input}:943    .text.E_EEPROM_XMC4_lWriteToFlash:00000000 E_EEPROM_XMC4_lWriteToFlash
    {standard input}:873    .text.E_EEPROM_XMC4_UpdateFlashContents:00000094 $d
    {standard input}:881    .text.E_EEPROM_XMC4_IsFlashEmpty:00000000 $t
    {standard input}:886    .text.E_EEPROM_XMC4_IsFlashEmpty:00000000 E_EEPROM_XMC4_IsFlashEmpty
    {standard input}:934    .text.E_EEPROM_XMC4_IsFlashEmpty:00000024 $d
    {standard input}:939    .text.E_EEPROM_XMC4_lWriteToFlash:00000000 $t
    {standard input}:1280   .text.E_EEPROM_XMC4_lCalculateCRC:00000000 E_EEPROM_XMC4_lCalculateCRC
    {standard input}:1031   .text.E_EEPROM_XMC4_lWriteToFlash:0000006c $d
    {standard input}:1038   .text.E_EEPROM_XMC4_lInitReadSectorInfo:00000000 $t
    {standard input}:1165   .text.E_EEPROM_XMC4_lInitReadSectorInfo:000000a4 $d
    {standard input}:1171   .text.E_EEPROM_XMC4_lInitEraseStateMachine:00000000 $t
    {standard input}:1271   .text.E_EEPROM_XMC4_lInitEraseStateMachine:0000007c $d
    {standard input}:1276   .text.E_EEPROM_XMC4_lCalculateCRC:00000000 $t
    {standard input}:1323   .text.E_EEPROM_XMC4_lCalculateCRC:0000002c $d
    {standard input}:1328   .text.E_EEPROM_XMC4_lCopyFlashToRam:00000000 $t
    {standard input}:1397   .text.E_EEPROM_XMC4_lCopyFlashToRam:00000044 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_FCE_Enable
XMC_FCE_Init
memcmp
XMC_FLASH_ClearStatus
XMC_FLASH_ProgramPage
XMC_FLASH_GetStatus
XMC_FLASH_EraseSector
XMC_FCE_CalculateCRC32
