   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB137:
  26              	 .file 1 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc/xmc_dma.h"
   1:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
   2:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
   5:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @cond
   6:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
   7:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library
   8:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
   9:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * All rights reserved.                        
  11:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *                                             
  12:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * following conditions are met:   
  14:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  15:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer.                        
  17:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  18:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * 
  21:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  24:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *                                                                              
  32:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
  35:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  36:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Change History
  37:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * --------------
  38:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  39:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  40:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  41:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  42:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  43:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  44:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  45:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  46:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  47:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  48:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  50:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  51:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  52:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  53:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  54:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  55:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  56:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  57:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  58:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  59:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @endcond
  60:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
  61:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  62:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  63:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  64:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  65:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  66:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  67:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  68:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  69:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  70:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  71:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  72:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  73:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  74:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  75:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
  76:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  77:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  78:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
  79:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  80:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
  81:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  82:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  83:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  84:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  85:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  86:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  87:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  88:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  89:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  90:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  91:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
  92:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  93:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  94:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @{
  95:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
  96:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
  97:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  98:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * MACROS
  99:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 100:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 101:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 102:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 103:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 104:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 105:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 106:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 107:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 108:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 109:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 110:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 111:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 112:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * ENUMS
 113:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 114:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 115:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 116:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 117:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 118:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 119:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 120:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 121:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 122:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 123:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 124:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 125:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 126:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 127:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 128:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 129:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 130:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 131:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 132:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 133:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 134:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 135:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 136:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 137:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 138:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 139:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 140:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 141:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 142:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 143:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 144:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 145:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 146:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 147:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 148:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 149:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 150:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 151:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 152:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 153:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 154:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 155:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 156:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 157:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 158:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 159:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 160:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 161:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 162:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 163:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 164:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 165:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 166:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 167:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 168:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 169:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 170:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 171:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 172:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 173:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 174:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 175:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 176:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 177:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 178:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 179:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 180:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 181:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 182:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 183:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 184:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 185:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 186:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 187:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 188:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 189:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 190:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 191:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 192:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 193:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 194:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 195:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 196:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 197:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 198:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 199:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 200:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 201:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 202:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 203:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 204:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 205:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 206:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 207:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 208:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 209:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 210:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 211:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 212:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 213:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 214:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 215:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 216:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 217:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 218:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 219:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 220:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 221:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 222:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 223:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 224:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 225:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 226:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA events
 227:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 228:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 229:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 230:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 231:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 232:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 233:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 234:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 235:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 236:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 237:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 238:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Transaction types
 239:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 240:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 241:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 242:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 243:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 244:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 245:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 246:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 247:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 248:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 249:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 250:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 251:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 252:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 253:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 254:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 255:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 256:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 257:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 258:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 259:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 260:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 261:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 262:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 263:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 264:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 265:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 266:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 267:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 268:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 269:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  
 270:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 271:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 272:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 273:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 274:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 275:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 276:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 277:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 278:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 279:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 280:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 281:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 282:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 283:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 284:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 285:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 286:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 287:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 288:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 289:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 290:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 291:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 292:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 293:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 294:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 295:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 296:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 297:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 298:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 299:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 300:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 301:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 302:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct {
 303:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 304:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 305:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 306:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 307:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 308:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 309:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 310:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 311:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 312:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 313:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 314:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 315:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 316:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 317:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 318:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 319:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 320:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 321:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 322:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 323:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 324:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 325:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 326:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 327:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 328:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 329:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 330:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 331:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 332:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 333:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 334:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 335:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma push
 336:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma anon_unions
 337:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 338:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning 586
 339:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 340:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 341:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 342:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 343:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 344:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 345:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 346:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 347:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 348:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 349:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 350:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   union
 351:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   {
 352:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 353:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     {
 354:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 355:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 356:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 357:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 358:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 359:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 360:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 361:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 362:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 363:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 364:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 365:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 366:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 367:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 368:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 369:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     };
 370:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 371:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   };
 372:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 373:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 374:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 375:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 376:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 377:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 378:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 379:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 380:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 381:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 382:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 383:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 384:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   union
 385:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   {
 386:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 387:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 388:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     {
 389:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 390:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 391:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 392:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 393:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 394:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 395:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 396:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 397:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 398:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             
 399:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 400:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;                             
 401:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     };
 402:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   };
 403:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 404:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 405:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 406:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 407:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   
 408:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   union
 409:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   {
 410:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 411:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 412:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     {
 413:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 414:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 415:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     };
 416:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   };
 417:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 418:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   union
 419:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   {
 420:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 421:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     struct
 422:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     {
 423:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 424:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 425:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****     };
 426:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   };
 427:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   
 428:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 429:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 430:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 431:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 432:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 433:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 434:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 435:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 436:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 437:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 438:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 439:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma pop
 440:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 441:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   #pragma warning restore
 442:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 443:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 444:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 445:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 446:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 447:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 448:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 449:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 450:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 451:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 452:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 453:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 454:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** extern "C" {
 455:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** #endif
 456:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 457:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 458:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 459:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 460:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 461:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 462:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 463:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 464:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 465:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 466:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral.
 467:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 468:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 469:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 470:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 471:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 472:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 473:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 474:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 475:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 476:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 477:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 478:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 479:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 480:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 481:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 482:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 483:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 484:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 485:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 486:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return None
 487:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 488:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 489:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 490:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 491:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 492:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 493:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 494:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 495:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 496:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 497:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 498:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 499:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 500:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return bool
 501:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 502:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 503:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 504:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 505:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 506:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 507:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 508:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 509:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * is enabled.
 510:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 511:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 512:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 513:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 514:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 515:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 516:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 517:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 518:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 519:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 520:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 521:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 522:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 523:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 524:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 525:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 526:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 527:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 528:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 529:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 530:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 531:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 532:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 533:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 534:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
  27              	 .loc 1 534 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 535:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  43              	 .loc 1 535 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F86033 	 ldr r3,[r3,#864]
 536:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** }
  46              	 .loc 1 536 0
  47 000e 1846     	 mov r0,r3
  48 0010 0C37     	 adds r7,r7,#12
  49              	.LCFI3:
  50              	 .cfi_def_cfa_offset 4
  51 0012 BD46     	 mov sp,r7
  52              	.LCFI4:
  53              	 .cfi_def_cfa_register 13
  54              	 
  55 0014 5DF8047B 	 ldr r7,[sp],#4
  56              	.LCFI5:
  57              	 .cfi_restore 7
  58              	 .cfi_def_cfa_offset 0
  59 0018 7047     	 bx lr
  60              	 .cfi_endproc
  61              	.LFE137:
  63 001a 00BF     	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	XMC_DMA_GetChannelsTransferCompleteStatus:
  69              	.LFB138:
 537:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 538:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 539:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 540:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 541:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 542:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 543:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 544:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 545:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 546:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 547:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 548:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 549:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
  70              	 .loc 1 549 0
  71              	 .cfi_startproc
  72              	 
  73              	 
  74              	 
  75 0000 80B4     	 push {r7}
  76              	.LCFI6:
  77              	 .cfi_def_cfa_offset 4
  78              	 .cfi_offset 7,-4
  79 0002 83B0     	 sub sp,sp,#12
  80              	.LCFI7:
  81              	 .cfi_def_cfa_offset 16
  82 0004 00AF     	 add r7,sp,#0
  83              	.LCFI8:
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 550:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  86              	 .loc 1 550 0
  87 0008 7B68     	 ldr r3,[r7,#4]
  88 000a D3F8E832 	 ldr r3,[r3,#744]
 551:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** }
  89              	 .loc 1 551 0
  90 000e 1846     	 mov r0,r3
  91 0010 0C37     	 adds r7,r7,#12
  92              	.LCFI9:
  93              	 .cfi_def_cfa_offset 4
  94 0012 BD46     	 mov sp,r7
  95              	.LCFI10:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0014 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI11:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0018 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE138:
 106 001a 00BF     	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
 107              	 .align 2
 108              	 .thumb
 109              	 .thumb_func
 111              	XMC_DMA_GetChannelsBlockCompleteStatus:
 112              	.LFB139:
 552:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 553:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 554:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 555:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 556:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 557:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 558:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 559:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 560:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 561:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 562:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 563:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 564:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 113              	 .loc 1 564 0
 114              	 .cfi_startproc
 115              	 
 116              	 
 117              	 
 118 0000 80B4     	 push {r7}
 119              	.LCFI12:
 120              	 .cfi_def_cfa_offset 4
 121              	 .cfi_offset 7,-4
 122 0002 83B0     	 sub sp,sp,#12
 123              	.LCFI13:
 124              	 .cfi_def_cfa_offset 16
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI14:
 127              	 .cfi_def_cfa_register 7
 128 0006 7860     	 str r0,[r7,#4]
 565:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 129              	 .loc 1 565 0
 130 0008 7B68     	 ldr r3,[r7,#4]
 131 000a D3F8F032 	 ldr r3,[r3,#752]
 566:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** }
 132              	 .loc 1 566 0
 133 000e 1846     	 mov r0,r3
 134 0010 0C37     	 adds r7,r7,#12
 135              	.LCFI15:
 136              	 .cfi_def_cfa_offset 4
 137 0012 BD46     	 mov sp,r7
 138              	.LCFI16:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 0014 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI17:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0018 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE139:
 149 001a 00BF     	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 155              	.LFB140:
 567:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 568:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 569:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 570:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 571:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 572:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 573:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 574:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 575:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 576:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 577:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 578:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 579:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 580:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * ignored.
 581:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 582:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 583:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 156              	 .loc 1 583 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160              	 
 161 0000 80B4     	 push {r7}
 162              	.LCFI18:
 163              	 .cfi_def_cfa_offset 4
 164              	 .cfi_offset 7,-4
 165 0002 83B0     	 sub sp,sp,#12
 166              	.LCFI19:
 167              	 .cfi_def_cfa_offset 16
 168 0004 00AF     	 add r7,sp,#0
 169              	.LCFI20:
 170              	 .cfi_def_cfa_register 7
 171 0006 7860     	 str r0,[r7,#4]
 584:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 172              	 .loc 1 584 0
 173 0008 7B68     	 ldr r3,[r7,#4]
 174 000a D3F8F832 	 ldr r3,[r3,#760]
 585:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** }
 175              	 .loc 1 585 0
 176 000e 1846     	 mov r0,r3
 177 0010 0C37     	 adds r7,r7,#12
 178              	.LCFI21:
 179              	 .cfi_def_cfa_offset 4
 180 0012 BD46     	 mov sp,r7
 181              	.LCFI22:
 182              	 .cfi_def_cfa_register 13
 183              	 
 184 0014 5DF8047B 	 ldr r7,[sp],#4
 185              	.LCFI23:
 186              	 .cfi_restore 7
 187              	 .cfi_def_cfa_offset 0
 188 0018 7047     	 bx lr
 189              	 .cfi_endproc
 190              	.LFE140:
 192 001a 00BF     	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 193              	 .align 2
 194              	 .thumb
 195              	 .thumb_func
 197              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 198              	.LFB141:
 586:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 587:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 588:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 589:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 590:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 591:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 592:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 593:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 594:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 595:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 596:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 597:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 598:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 599:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 600:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 601:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 602:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 199              	 .loc 1 602 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	 
 204 0000 80B4     	 push {r7}
 205              	.LCFI24:
 206              	 .cfi_def_cfa_offset 4
 207              	 .cfi_offset 7,-4
 208 0002 83B0     	 sub sp,sp,#12
 209              	.LCFI25:
 210              	 .cfi_def_cfa_offset 16
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI26:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 603:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 215              	 .loc 1 603 0
 216 0008 7B68     	 ldr r3,[r7,#4]
 217 000a D3F80033 	 ldr r3,[r3,#768]
 604:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** }
 218              	 .loc 1 604 0
 219 000e 1846     	 mov r0,r3
 220 0010 0C37     	 adds r7,r7,#12
 221              	.LCFI27:
 222              	 .cfi_def_cfa_offset 4
 223 0012 BD46     	 mov sp,r7
 224              	.LCFI28:
 225              	 .cfi_def_cfa_register 13
 226              	 
 227 0014 5DF8047B 	 ldr r7,[sp],#4
 228              	.LCFI29:
 229              	 .cfi_restore 7
 230              	 .cfi_def_cfa_offset 0
 231 0018 7047     	 bx lr
 232              	 .cfi_endproc
 233              	.LFE141:
 235 001a 00BF     	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 236              	 .align 2
 237              	 .thumb
 238              	 .thumb_func
 240              	XMC_DMA_GetChannelsErrorStatus:
 241              	.LFB142:
 605:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** 
 606:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** /**
 607:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 608:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 609:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 610:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 611:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 612:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  *
 613:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * \par
 614:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 615:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****  */
 616:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 617:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** {
 242              	 .loc 1 617 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247 0000 80B4     	 push {r7}
 248              	.LCFI30:
 249              	 .cfi_def_cfa_offset 4
 250              	 .cfi_offset 7,-4
 251 0002 83B0     	 sub sp,sp,#12
 252              	.LCFI31:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI32:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 618:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 258              	 .loc 1 618 0
 259 0008 7B68     	 ldr r3,[r7,#4]
 260 000a D3F80833 	 ldr r3,[r3,#776]
 619:C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc\xmc_dma.h **** }
 261              	 .loc 1 619 0
 262 000e 1846     	 mov r0,r3
 263 0010 0C37     	 adds r7,r7,#12
 264              	.LCFI33:
 265              	 .cfi_def_cfa_offset 4
 266 0012 BD46     	 mov sp,r7
 267              	.LCFI34:
 268              	 .cfi_def_cfa_register 13
 269              	 
 270 0014 5DF8047B 	 ldr r7,[sp],#4
 271              	.LCFI35:
 272              	 .cfi_restore 7
 273              	 .cfi_def_cfa_offset 0
 274 0018 7047     	 bx lr
 275              	 .cfi_endproc
 276              	.LFE142:
 278              	 .comm dma0_event_handlers,32,4
 279 001a 00BF     	 .section .text.XMC_DMA_Init,"ax",%progbits
 280              	 .align 2
 281              	 .global XMC_DMA_Init
 282              	 .thumb
 283              	 .thumb_func
 285              	XMC_DMA_Init:
 286              	.LFB191:
 287              	 .file 2 "../Libraries/XMCLib/src/xmc_dma.c"
   1:../Libraries/XMCLib/src/xmc_dma.c **** 
   2:../Libraries/XMCLib/src/xmc_dma.c **** /**
   3:../Libraries/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../Libraries/XMCLib/src/xmc_dma.c ****  * @date 2019-05-07
   5:../Libraries/XMCLib/src/xmc_dma.c ****  *
   6:../Libraries/XMCLib/src/xmc_dma.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_dma.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_dma.c ****  *
  10:../Libraries/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_dma.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_dma.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_dma.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  19:../Libraries/XMCLib/src/xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_dma.c ****  * 
  22:../Libraries/XMCLib/src/xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_dma.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_dma.c ****  *
  37:../Libraries/XMCLib/src/xmc_dma.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_dma.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_dma.c ****  *
  40:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_dma.c ****  *
  43:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  44:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:../Libraries/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  50:../Libraries/XMCLib/src/xmc_dma.c ****  *
  51:../Libraries/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:../Libraries/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:../Libraries/XMCLib/src/xmc_dma.c ****  *
  57:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  58:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  59:../Libraries/XMCLib/src/xmc_dma.c ****  *
  60:../Libraries/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  61:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  62:../Libraries/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV 
  63:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  64:../Libraries/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  65:../Libraries/XMCLib/src/xmc_dma.c ****  *
  66:../Libraries/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  67:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  68:../Libraries/XMCLib/src/xmc_dma.c ****  *
  69:../Libraries/XMCLib/src/xmc_dma.c ****  * 2019-05-07:
  70:../Libraries/XMCLib/src/xmc_dma.c ****  *     - Fixed compilation warnings
  71:../Libraries/XMCLib/src/xmc_dma.c ****  *
  72:../Libraries/XMCLib/src/xmc_dma.c ****  * @endcond
  73:../Libraries/XMCLib/src/xmc_dma.c ****  */
  74:../Libraries/XMCLib/src/xmc_dma.c **** 
  75:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  76:../Libraries/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  77:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  78:../Libraries/XMCLib/src/xmc_dma.c **** 
  79:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  80:../Libraries/XMCLib/src/xmc_dma.c **** 
  81:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  82:../Libraries/XMCLib/src/xmc_dma.c **** 
  83:../Libraries/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  84:../Libraries/XMCLib/src/xmc_dma.c **** 
  85:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  86:../Libraries/XMCLib/src/xmc_dma.c ****  * MACROS
  87:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  88:../Libraries/XMCLib/src/xmc_dma.c **** 
  89:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  90:../Libraries/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  91:../Libraries/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  92:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  93:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  94:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  95:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  96:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  97:../Libraries/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  98:../Libraries/XMCLib/src/xmc_dma.c **** 
  99:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 100:../Libraries/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
 101:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 102:../Libraries/XMCLib/src/xmc_dma.c **** 
 103:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 104:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 105:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 106:../Libraries/XMCLib/src/xmc_dma.c **** 
 107:../Libraries/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 108:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 109:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 110:../Libraries/XMCLib/src/xmc_dma.c ****  
 111:../Libraries/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 112:../Libraries/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 113:../Libraries/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 114:../Libraries/XMCLib/src/xmc_dma.c **** 
 115:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 116:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 117:../Libraries/XMCLib/src/xmc_dma.c **** {
 288              	 .loc 2 117 0
 289              	 .cfi_startproc
 290              	 
 291              	 
 292 0000 80B5     	 push {r7,lr}
 293              	.LCFI36:
 294              	 .cfi_def_cfa_offset 8
 295              	 .cfi_offset 7,-8
 296              	 .cfi_offset 14,-4
 297 0002 82B0     	 sub sp,sp,#8
 298              	.LCFI37:
 299              	 .cfi_def_cfa_offset 16
 300 0004 00AF     	 add r7,sp,#0
 301              	.LCFI38:
 302              	 .cfi_def_cfa_register 7
 303 0006 7860     	 str r0,[r7,#4]
 118:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 304              	 .loc 2 118 0
 305 0008 7868     	 ldr r0,[r7,#4]
 306 000a FFF7FEFF 	 bl XMC_DMA_Enable
 119:../Libraries/XMCLib/src/xmc_dma.c **** }
 307              	 .loc 2 119 0
 308 000e 0837     	 adds r7,r7,#8
 309              	.LCFI39:
 310              	 .cfi_def_cfa_offset 8
 311 0010 BD46     	 mov sp,r7
 312              	.LCFI40:
 313              	 .cfi_def_cfa_register 13
 314              	 
 315 0012 80BD     	 pop {r7,pc}
 316              	 .cfi_endproc
 317              	.LFE191:
 319              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 320              	 .align 2
 321              	 .global XMC_DMA_Enable
 322              	 .thumb
 323              	 .thumb_func
 325              	XMC_DMA_Enable:
 326              	.LFB192:
 120:../Libraries/XMCLib/src/xmc_dma.c **** 
 121:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 122:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 123:../Libraries/XMCLib/src/xmc_dma.c **** {
 327              	 .loc 2 123 0
 328              	 .cfi_startproc
 329              	 
 330              	 
 331 0000 80B5     	 push {r7,lr}
 332              	.LCFI41:
 333              	 .cfi_def_cfa_offset 8
 334              	 .cfi_offset 7,-8
 335              	 .cfi_offset 14,-4
 336 0002 82B0     	 sub sp,sp,#8
 337              	.LCFI42:
 338              	 .cfi_def_cfa_offset 16
 339 0004 00AF     	 add r7,sp,#0
 340              	.LCFI43:
 341              	 .cfi_def_cfa_register 7
 342 0006 7860     	 str r0,[r7,#4]
 124:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 125:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 126:../Libraries/XMCLib/src/xmc_dma.c ****   {
 127:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 128:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 129:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 343              	 .loc 2 129 0
 344 0008 0648     	 ldr r0,.L15
 345 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 130:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 131:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 346              	 .loc 2 131 0
 347 000e 0548     	 ldr r0,.L15
 348 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 132:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 133:../Libraries/XMCLib/src/xmc_dma.c ****   }
 134:../Libraries/XMCLib/src/xmc_dma.c ****   else
 135:../Libraries/XMCLib/src/xmc_dma.c ****   {
 136:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 137:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 138:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 139:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 140:../Libraries/XMCLib/src/xmc_dma.c ****   }
 141:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 142:../Libraries/XMCLib/src/xmc_dma.c **** 
 143:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 349              	 .loc 2 143 0
 350 0014 7B68     	 ldr r3,[r7,#4]
 351 0016 0122     	 movs r2,#1
 352 0018 C3F89823 	 str r2,[r3,#920]
 144:../Libraries/XMCLib/src/xmc_dma.c **** }
 353              	 .loc 2 144 0
 354 001c 0837     	 adds r7,r7,#8
 355              	.LCFI44:
 356              	 .cfi_def_cfa_offset 8
 357 001e BD46     	 mov sp,r7
 358              	.LCFI45:
 359              	 .cfi_def_cfa_register 13
 360              	 
 361 0020 80BD     	 pop {r7,pc}
 362              	.L16:
 363 0022 00BF     	 .align 2
 364              	.L15:
 365 0024 10000020 	 .word 536870928
 366              	 .cfi_endproc
 367              	.LFE192:
 369              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 370              	 .align 2
 371              	 .global XMC_DMA_Disable
 372              	 .thumb
 373              	 .thumb_func
 375              	XMC_DMA_Disable:
 376              	.LFB193:
 145:../Libraries/XMCLib/src/xmc_dma.c **** 
 146:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 147:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 148:../Libraries/XMCLib/src/xmc_dma.c **** {
 377              	 .loc 2 148 0
 378              	 .cfi_startproc
 379              	 
 380              	 
 381 0000 80B5     	 push {r7,lr}
 382              	.LCFI46:
 383              	 .cfi_def_cfa_offset 8
 384              	 .cfi_offset 7,-8
 385              	 .cfi_offset 14,-4
 386 0002 82B0     	 sub sp,sp,#8
 387              	.LCFI47:
 388              	 .cfi_def_cfa_offset 16
 389 0004 00AF     	 add r7,sp,#0
 390              	.LCFI48:
 391              	 .cfi_def_cfa_register 7
 392 0006 7860     	 str r0,[r7,#4]
 149:../Libraries/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 393              	 .loc 2 149 0
 394 0008 7B68     	 ldr r3,[r7,#4]
 395 000a 0022     	 movs r2,#0
 396 000c C3F89823 	 str r2,[r3,#920]
 150:../Libraries/XMCLib/src/xmc_dma.c **** 
 151:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 152:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 153:../Libraries/XMCLib/src/xmc_dma.c ****   {
 154:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 155:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 397              	 .loc 2 155 0
 398 0010 0448     	 ldr r0,.L18
 399 0012 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 156:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 157:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 400              	 .loc 2 157 0
 401 0016 0348     	 ldr r0,.L18
 402 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 158:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 159:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 160:../Libraries/XMCLib/src/xmc_dma.c ****   }
 161:../Libraries/XMCLib/src/xmc_dma.c ****   else
 162:../Libraries/XMCLib/src/xmc_dma.c ****   {
 163:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 164:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 165:../Libraries/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 166:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 167:../Libraries/XMCLib/src/xmc_dma.c ****   }
 168:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 169:../Libraries/XMCLib/src/xmc_dma.c **** }
 403              	 .loc 2 169 0
 404 001c 0837     	 adds r7,r7,#8
 405              	.LCFI49:
 406              	 .cfi_def_cfa_offset 8
 407 001e BD46     	 mov sp,r7
 408              	.LCFI50:
 409              	 .cfi_def_cfa_register 13
 410              	 
 411 0020 80BD     	 pop {r7,pc}
 412              	.L19:
 413 0022 00BF     	 .align 2
 414              	.L18:
 415 0024 10000020 	 .word 536870928
 416              	 .cfi_endproc
 417              	.LFE193:
 419              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 420              	 .align 2
 421              	 .global XMC_DMA_IsEnabled
 422              	 .thumb
 423              	 .thumb_func
 425              	XMC_DMA_IsEnabled:
 426              	.LFB194:
 170:../Libraries/XMCLib/src/xmc_dma.c **** 
 171:../Libraries/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 172:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 173:../Libraries/XMCLib/src/xmc_dma.c **** {
 427              	 .loc 2 173 0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431 0000 80B5     	 push {r7,lr}
 432              	.LCFI51:
 433              	 .cfi_def_cfa_offset 8
 434              	 .cfi_offset 7,-8
 435              	 .cfi_offset 14,-4
 436 0002 84B0     	 sub sp,sp,#16
 437              	.LCFI52:
 438              	 .cfi_def_cfa_offset 24
 439 0004 00AF     	 add r7,sp,#0
 440              	.LCFI53:
 441              	 .cfi_def_cfa_register 7
 442 0006 7860     	 str r0,[r7,#4]
 174:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 175:../Libraries/XMCLib/src/xmc_dma.c **** 
 176:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 177:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 178:../Libraries/XMCLib/src/xmc_dma.c ****   {
 179:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 180:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 443              	 .loc 2 180 0
 444 0008 1E48     	 ldr r0,.L27
 445 000a FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 446 000e 0346     	 mov r3,r0
 447 0010 002B     	 cmp r3,#0
 448 0012 14BF     	 ite ne
 449 0014 0123     	 movne r3,#1
 450 0016 0023     	 moveq r3,#0
 451 0018 DBB2     	 uxtb r3,r3
 452 001a 83F00103 	 eor r3,r3,#1
 453 001e DBB2     	 uxtb r3,r3
 454 0020 FB73     	 strb r3,[r7,#15]
 455 0022 FB7B     	 ldrb r3,[r7,#15]
 456 0024 03F00103 	 and r3,r3,#1
 457 0028 FB73     	 strb r3,[r7,#15]
 181:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 182:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 458              	 .loc 2 182 0
 459 002a FB7B     	 ldrb r3,[r7,#15]
 460 002c 002B     	 cmp r3,#0
 461 002e 0AD0     	 beq .L21
 462              	 .loc 2 182 0 is_stmt 0 discriminator 1
 463 0030 1448     	 ldr r0,.L27
 464 0032 FFF7FEFF 	 bl XMC_SCU_CLOCK_IsPeripheralClockGated
 465 0036 0346     	 mov r3,r0
 466 0038 83F00103 	 eor r3,r3,#1
 467 003c DBB2     	 uxtb r3,r3
 468 003e 002B     	 cmp r3,#0
 469 0040 01D0     	 beq .L21
 470              	 .loc 2 182 0 discriminator 3
 471 0042 0123     	 movs r3,#1
 472 0044 00E0     	 b .L22
 473              	.L21:
 474              	 .loc 2 182 0 discriminator 4
 475 0046 0023     	 movs r3,#0
 476              	.L22:
 477              	 .loc 2 182 0 discriminator 6
 478 0048 FB73     	 strb r3,[r7,#15]
 479 004a FB7B     	 ldrb r3,[r7,#15]
 480 004c 03F00103 	 and r3,r3,#1
 481 0050 FB73     	 strb r3,[r7,#15]
 183:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 184:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 185:../Libraries/XMCLib/src/xmc_dma.c ****   }
 186:../Libraries/XMCLib/src/xmc_dma.c ****   else
 187:../Libraries/XMCLib/src/xmc_dma.c ****   {
 188:../Libraries/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 189:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 190:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 191:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 192:../Libraries/XMCLib/src/xmc_dma.c ****   }
 193:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 194:../Libraries/XMCLib/src/xmc_dma.c **** 
 195:../Libraries/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 196:../Libraries/XMCLib/src/xmc_dma.c ****   if (status == true)
 482              	 .loc 2 196 0 is_stmt 1 discriminator 6
 483 0052 FB7B     	 ldrb r3,[r7,#15]
 484 0054 002B     	 cmp r3,#0
 485 0056 0FD0     	 beq .L23
 197:../Libraries/XMCLib/src/xmc_dma.c ****   {
 198:../Libraries/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 486              	 .loc 2 198 0
 487 0058 FB7B     	 ldrb r3,[r7,#15]
 488 005a 002B     	 cmp r3,#0
 489 005c 06D0     	 beq .L24
 490              	 .loc 2 198 0 is_stmt 0 discriminator 1
 491 005e 7B68     	 ldr r3,[r7,#4]
 492 0060 D3F89833 	 ldr r3,[r3,#920]
 493 0064 002B     	 cmp r3,#0
 494 0066 01D0     	 beq .L24
 495              	 .loc 2 198 0 discriminator 3
 496 0068 0123     	 movs r3,#1
 497 006a 00E0     	 b .L25
 498              	.L24:
 499              	 .loc 2 198 0 discriminator 4
 500 006c 0023     	 movs r3,#0
 501              	.L25:
 502              	 .loc 2 198 0 discriminator 6
 503 006e FB73     	 strb r3,[r7,#15]
 504 0070 FB7B     	 ldrb r3,[r7,#15]
 505 0072 03F00103 	 and r3,r3,#1
 506 0076 FB73     	 strb r3,[r7,#15]
 507              	.L23:
 199:../Libraries/XMCLib/src/xmc_dma.c ****   }
 200:../Libraries/XMCLib/src/xmc_dma.c **** 
 201:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 508              	 .loc 2 201 0 is_stmt 1
 509 0078 FB7B     	 ldrb r3,[r7,#15]
 202:../Libraries/XMCLib/src/xmc_dma.c **** }
 510              	 .loc 2 202 0
 511 007a 1846     	 mov r0,r3
 512 007c 1037     	 adds r7,r7,#16
 513              	.LCFI54:
 514              	 .cfi_def_cfa_offset 8
 515 007e BD46     	 mov sp,r7
 516              	.LCFI55:
 517              	 .cfi_def_cfa_register 13
 518              	 
 519 0080 80BD     	 pop {r7,pc}
 520              	.L28:
 521 0082 00BF     	 .align 2
 522              	.L27:
 523 0084 10000020 	 .word 536870928
 524              	 .cfi_endproc
 525              	.LFE194:
 527              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 528              	 .align 2
 529              	 .global XMC_DMA_EnableRequestLine
 530              	 .thumb
 531              	 .thumb_func
 533              	XMC_DMA_EnableRequestLine:
 534              	.LFB195:
 203:../Libraries/XMCLib/src/xmc_dma.c **** 
 204:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable request line */
 205:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 206:../Libraries/XMCLib/src/xmc_dma.c **** {
 535              	 .loc 2 206 0
 536              	 .cfi_startproc
 537              	 
 538              	 
 539              	 
 540 0000 80B4     	 push {r7}
 541              	.LCFI56:
 542              	 .cfi_def_cfa_offset 4
 543              	 .cfi_offset 7,-4
 544 0002 83B0     	 sub sp,sp,#12
 545              	.LCFI57:
 546              	 .cfi_def_cfa_offset 16
 547 0004 00AF     	 add r7,sp,#0
 548              	.LCFI58:
 549              	 .cfi_def_cfa_register 7
 550 0006 7860     	 str r0,[r7,#4]
 551 0008 0B46     	 mov r3,r1
 552 000a FB70     	 strb r3,[r7,#3]
 553 000c 1346     	 mov r3,r2
 554 000e BB70     	 strb r3,[r7,#2]
 207:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 208:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 209:../Libraries/XMCLib/src/xmc_dma.c ****   {
 210:../Libraries/XMCLib/src/xmc_dma.c **** #else
 211:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 212:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 213:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 555              	 .loc 2 213 0
 556 0010 0F48     	 ldr r0,.L30
 557 0012 0F4B     	 ldr r3,.L30
 558 0014 9A68     	 ldr r2,[r3,#8]
 559 0016 FB78     	 ldrb r3,[r7,#3]
 560 0018 9B00     	 lsls r3,r3,#2
 561 001a 1946     	 mov r1,r3
 562 001c 0F23     	 movs r3,#15
 563 001e 8B40     	 lsls r3,r3,r1
 564 0020 DB43     	 mvns r3,r3
 565 0022 1A40     	 ands r2,r2,r3
 214:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 566              	 .loc 2 214 0
 567 0024 BB78     	 ldrb r3,[r7,#2]
 568 0026 F978     	 ldrb r1,[r7,#3]
 569 0028 8900     	 lsls r1,r1,#2
 570 002a 8B40     	 lsls r3,r3,r1
 213:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 571              	 .loc 2 213 0
 572 002c 1343     	 orrs r3,r3,r2
 573 002e 8360     	 str r3,[r0,#8]
 215:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 574              	 .loc 2 215 0
 575 0030 0749     	 ldr r1,.L30
 576 0032 074B     	 ldr r3,.L30
 577 0034 1A69     	 ldr r2,[r3,#16]
 578 0036 FB78     	 ldrb r3,[r7,#3]
 579 0038 03F00703 	 and r3,r3,#7
 580 003c 0120     	 movs r0,#1
 581 003e 00FA03F3 	 lsl r3,r0,r3
 582 0042 1343     	 orrs r3,r3,r2
 583 0044 0B61     	 str r3,[r1,#16]
 216:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 217:../Libraries/XMCLib/src/xmc_dma.c ****   }
 218:../Libraries/XMCLib/src/xmc_dma.c ****   else
 219:../Libraries/XMCLib/src/xmc_dma.c ****   {
 220:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 221:../Libraries/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 222:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 223:../Libraries/XMCLib/src/xmc_dma.c ****   }
 224:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 225:../Libraries/XMCLib/src/xmc_dma.c **** }
 584              	 .loc 2 225 0
 585 0046 0C37     	 adds r7,r7,#12
 586              	.LCFI59:
 587              	 .cfi_def_cfa_offset 4
 588 0048 BD46     	 mov sp,r7
 589              	.LCFI60:
 590              	 .cfi_def_cfa_register 13
 591              	 
 592 004a 5DF8047B 	 ldr r7,[sp],#4
 593              	.LCFI61:
 594              	 .cfi_restore 7
 595              	 .cfi_def_cfa_offset 0
 596 004e 7047     	 bx lr
 597              	.L31:
 598              	 .align 2
 599              	.L30:
 600 0050 00490050 	 .word 1342195968
 601              	 .cfi_endproc
 602              	.LFE195:
 604              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 605              	 .align 2
 606              	 .global XMC_DMA_DisableRequestLine
 607              	 .thumb
 608              	 .thumb_func
 610              	XMC_DMA_DisableRequestLine:
 611              	.LFB196:
 226:../Libraries/XMCLib/src/xmc_dma.c **** 
 227:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 228:../Libraries/XMCLib/src/xmc_dma.c **** {
 612              	 .loc 2 228 0
 613              	 .cfi_startproc
 614              	 
 615              	 
 616              	 
 617 0000 80B4     	 push {r7}
 618              	.LCFI62:
 619              	 .cfi_def_cfa_offset 4
 620              	 .cfi_offset 7,-4
 621 0002 83B0     	 sub sp,sp,#12
 622              	.LCFI63:
 623              	 .cfi_def_cfa_offset 16
 624 0004 00AF     	 add r7,sp,#0
 625              	.LCFI64:
 626              	 .cfi_def_cfa_register 7
 627 0006 7860     	 str r0,[r7,#4]
 628 0008 0B46     	 mov r3,r1
 629 000a FB70     	 strb r3,[r7,#3]
 229:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 230:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 231:../Libraries/XMCLib/src/xmc_dma.c ****   {
 232:../Libraries/XMCLib/src/xmc_dma.c **** #else
 233:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 234:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 235:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 630              	 .loc 2 235 0
 631 000c 0749     	 ldr r1,.L33
 632 000e 074B     	 ldr r3,.L33
 633 0010 1A69     	 ldr r2,[r3,#16]
 634 0012 FB78     	 ldrb r3,[r7,#3]
 635 0014 0120     	 movs r0,#1
 636 0016 00FA03F3 	 lsl r3,r0,r3
 637 001a DB43     	 mvns r3,r3
 638 001c 1340     	 ands r3,r3,r2
 639 001e 0B61     	 str r3,[r1,#16]
 236:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 237:../Libraries/XMCLib/src/xmc_dma.c ****   }
 238:../Libraries/XMCLib/src/xmc_dma.c ****   else
 239:../Libraries/XMCLib/src/xmc_dma.c ****   {
 240:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 241:../Libraries/XMCLib/src/xmc_dma.c ****   }
 242:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 243:../Libraries/XMCLib/src/xmc_dma.c **** }
 640              	 .loc 2 243 0
 641 0020 0C37     	 adds r7,r7,#12
 642              	.LCFI65:
 643              	 .cfi_def_cfa_offset 4
 644 0022 BD46     	 mov sp,r7
 645              	.LCFI66:
 646              	 .cfi_def_cfa_register 13
 647              	 
 648 0024 5DF8047B 	 ldr r7,[sp],#4
 649              	.LCFI67:
 650              	 .cfi_restore 7
 651              	 .cfi_def_cfa_offset 0
 652 0028 7047     	 bx lr
 653              	.L34:
 654 002a 00BF     	 .align 2
 655              	.L33:
 656 002c 00490050 	 .word 1342195968
 657              	 .cfi_endproc
 658              	.LFE196:
 660              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 661              	 .align 2
 662              	 .global XMC_DMA_ClearRequestLine
 663              	 .thumb
 664              	 .thumb_func
 666              	XMC_DMA_ClearRequestLine:
 667              	.LFB197:
 244:../Libraries/XMCLib/src/xmc_dma.c **** 
 245:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 246:../Libraries/XMCLib/src/xmc_dma.c **** {
 668              	 .loc 2 246 0
 669              	 .cfi_startproc
 670              	 
 671              	 
 672              	 
 673 0000 80B4     	 push {r7}
 674              	.LCFI68:
 675              	 .cfi_def_cfa_offset 4
 676              	 .cfi_offset 7,-4
 677 0002 83B0     	 sub sp,sp,#12
 678              	.LCFI69:
 679              	 .cfi_def_cfa_offset 16
 680 0004 00AF     	 add r7,sp,#0
 681              	.LCFI70:
 682              	 .cfi_def_cfa_register 7
 683 0006 7860     	 str r0,[r7,#4]
 684 0008 0B46     	 mov r3,r1
 685 000a FB70     	 strb r3,[r7,#3]
 247:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 248:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 249:../Libraries/XMCLib/src/xmc_dma.c ****   {
 250:../Libraries/XMCLib/src/xmc_dma.c **** #else
 251:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 252:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 253:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 686              	 .loc 2 253 0
 687 000c 0B49     	 ldr r1,.L36
 688 000e 0B4B     	 ldr r3,.L36
 689 0010 1A69     	 ldr r2,[r3,#16]
 690 0012 FB78     	 ldrb r3,[r7,#3]
 691 0014 0120     	 movs r0,#1
 692 0016 00FA03F3 	 lsl r3,r0,r3
 693 001a DB43     	 mvns r3,r3
 694 001c 1340     	 ands r3,r3,r2
 695 001e 0B61     	 str r3,[r1,#16]
 254:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 696              	 .loc 2 254 0
 697 0020 0649     	 ldr r1,.L36
 698 0022 064B     	 ldr r3,.L36
 699 0024 1A69     	 ldr r2,[r3,#16]
 700 0026 FB78     	 ldrb r3,[r7,#3]
 701 0028 0120     	 movs r0,#1
 702 002a 00FA03F3 	 lsl r3,r0,r3
 703 002e 1343     	 orrs r3,r3,r2
 704 0030 0B61     	 str r3,[r1,#16]
 255:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 256:../Libraries/XMCLib/src/xmc_dma.c ****   }
 257:../Libraries/XMCLib/src/xmc_dma.c ****   else
 258:../Libraries/XMCLib/src/xmc_dma.c ****   {
 259:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 260:../Libraries/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 261:../Libraries/XMCLib/src/xmc_dma.c ****   }
 262:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 263:../Libraries/XMCLib/src/xmc_dma.c **** }
 705              	 .loc 2 263 0
 706 0032 0C37     	 adds r7,r7,#12
 707              	.LCFI71:
 708              	 .cfi_def_cfa_offset 4
 709 0034 BD46     	 mov sp,r7
 710              	.LCFI72:
 711              	 .cfi_def_cfa_register 13
 712              	 
 713 0036 5DF8047B 	 ldr r7,[sp],#4
 714              	.LCFI73:
 715              	 .cfi_restore 7
 716              	 .cfi_def_cfa_offset 0
 717 003a 7047     	 bx lr
 718              	.L37:
 719              	 .align 2
 720              	.L36:
 721 003c 00490050 	 .word 1342195968
 722              	 .cfi_endproc
 723              	.LFE197:
 725              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 726              	 .align 2
 727              	 .global XMC_DMA_GetOverrunStatus
 728              	 .thumb
 729              	 .thumb_func
 731              	XMC_DMA_GetOverrunStatus:
 732              	.LFB198:
 264:../Libraries/XMCLib/src/xmc_dma.c **** 
 265:../Libraries/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 266:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 267:../Libraries/XMCLib/src/xmc_dma.c **** {
 733              	 .loc 2 267 0
 734              	 .cfi_startproc
 735              	 
 736              	 
 737              	 
 738 0000 80B4     	 push {r7}
 739              	.LCFI74:
 740              	 .cfi_def_cfa_offset 4
 741              	 .cfi_offset 7,-4
 742 0002 85B0     	 sub sp,sp,#20
 743              	.LCFI75:
 744              	 .cfi_def_cfa_offset 24
 745 0004 00AF     	 add r7,sp,#0
 746              	.LCFI76:
 747              	 .cfi_def_cfa_register 7
 748 0006 7860     	 str r0,[r7,#4]
 749 0008 0B46     	 mov r3,r1
 750 000a FB70     	 strb r3,[r7,#3]
 268:../Libraries/XMCLib/src/xmc_dma.c ****   bool status;
 269:../Libraries/XMCLib/src/xmc_dma.c **** 
 270:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 271:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 272:../Libraries/XMCLib/src/xmc_dma.c ****   {
 273:../Libraries/XMCLib/src/xmc_dma.c **** #else
 274:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 275:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 276:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 751              	 .loc 2 276 0
 752 000c 094B     	 ldr r3,.L40
 753 000e 1A68     	 ldr r2,[r3]
 754 0010 FB78     	 ldrb r3,[r7,#3]
 755 0012 22FA03F3 	 lsr r3,r2,r3
 756 0016 03F00103 	 and r3,r3,#1
 757 001a 002B     	 cmp r3,#0
 758 001c 14BF     	 ite ne
 759 001e 0123     	 movne r3,#1
 760 0020 0023     	 moveq r3,#0
 761 0022 FB73     	 strb r3,[r7,#15]
 277:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 278:../Libraries/XMCLib/src/xmc_dma.c ****   }
 279:../Libraries/XMCLib/src/xmc_dma.c ****   else
 280:../Libraries/XMCLib/src/xmc_dma.c ****   {
 281:../Libraries/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 282:../Libraries/XMCLib/src/xmc_dma.c ****   }
 283:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 284:../Libraries/XMCLib/src/xmc_dma.c **** 
 285:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 762              	 .loc 2 285 0
 763 0024 FB7B     	 ldrb r3,[r7,#15]
 286:../Libraries/XMCLib/src/xmc_dma.c **** }
 764              	 .loc 2 286 0
 765 0026 1846     	 mov r0,r3
 766 0028 1437     	 adds r7,r7,#20
 767              	.LCFI77:
 768              	 .cfi_def_cfa_offset 4
 769 002a BD46     	 mov sp,r7
 770              	.LCFI78:
 771              	 .cfi_def_cfa_register 13
 772              	 
 773 002c 5DF8047B 	 ldr r7,[sp],#4
 774              	.LCFI79:
 775              	 .cfi_restore 7
 776              	 .cfi_def_cfa_offset 0
 777 0030 7047     	 bx lr
 778              	.L41:
 779 0032 00BF     	 .align 2
 780              	.L40:
 781 0034 00490050 	 .word 1342195968
 782              	 .cfi_endproc
 783              	.LFE198:
 785              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 786              	 .align 2
 787              	 .global XMC_DMA_ClearOverrunStatus
 788              	 .thumb
 789              	 .thumb_func
 791              	XMC_DMA_ClearOverrunStatus:
 792              	.LFB199:
 287:../Libraries/XMCLib/src/xmc_dma.c **** 
 288:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 289:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 290:../Libraries/XMCLib/src/xmc_dma.c **** {
 793              	 .loc 2 290 0
 794              	 .cfi_startproc
 795              	 
 796              	 
 797              	 
 798 0000 80B4     	 push {r7}
 799              	.LCFI80:
 800              	 .cfi_def_cfa_offset 4
 801              	 .cfi_offset 7,-4
 802 0002 83B0     	 sub sp,sp,#12
 803              	.LCFI81:
 804              	 .cfi_def_cfa_offset 16
 805 0004 00AF     	 add r7,sp,#0
 806              	.LCFI82:
 807              	 .cfi_def_cfa_register 7
 808 0006 7860     	 str r0,[r7,#4]
 809 0008 0B46     	 mov r3,r1
 810 000a FB70     	 strb r3,[r7,#3]
 291:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 292:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 293:../Libraries/XMCLib/src/xmc_dma.c ****   {
 294:../Libraries/XMCLib/src/xmc_dma.c **** #else
 295:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 296:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 297:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 811              	 .loc 2 297 0
 812 000c 054A     	 ldr r2,.L43
 813 000e FB78     	 ldrb r3,[r7,#3]
 814 0010 0121     	 movs r1,#1
 815 0012 01FA03F3 	 lsl r3,r1,r3
 816 0016 5360     	 str r3,[r2,#4]
 298:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 299:../Libraries/XMCLib/src/xmc_dma.c ****   }
 300:../Libraries/XMCLib/src/xmc_dma.c ****   else
 301:../Libraries/XMCLib/src/xmc_dma.c ****   {
 302:../Libraries/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 303:../Libraries/XMCLib/src/xmc_dma.c ****   }
 304:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 305:../Libraries/XMCLib/src/xmc_dma.c **** }
 817              	 .loc 2 305 0
 818 0018 0C37     	 adds r7,r7,#12
 819              	.LCFI83:
 820              	 .cfi_def_cfa_offset 4
 821 001a BD46     	 mov sp,r7
 822              	.LCFI84:
 823              	 .cfi_def_cfa_register 13
 824              	 
 825 001c 5DF8047B 	 ldr r7,[sp],#4
 826              	.LCFI85:
 827              	 .cfi_restore 7
 828              	 .cfi_def_cfa_offset 0
 829 0020 7047     	 bx lr
 830              	.L44:
 831 0022 00BF     	 .align 2
 832              	.L43:
 833 0024 00490050 	 .word 1342195968
 834              	 .cfi_endproc
 835              	.LFE199:
 837              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 838              	 .align 2
 839              	 .global XMC_DMA_CH_Disable
 840              	 .thumb
 841              	 .thumb_func
 843              	XMC_DMA_CH_Disable:
 844              	.LFB200:
 306:../Libraries/XMCLib/src/xmc_dma.c **** 
 307:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 308:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 309:../Libraries/XMCLib/src/xmc_dma.c **** {
 845              	 .loc 2 309 0
 846              	 .cfi_startproc
 847              	 
 848              	 
 849              	 
 850 0000 80B4     	 push {r7}
 851              	.LCFI86:
 852              	 .cfi_def_cfa_offset 4
 853              	 .cfi_offset 7,-4
 854 0002 83B0     	 sub sp,sp,#12
 855              	.LCFI87:
 856              	 .cfi_def_cfa_offset 16
 857 0004 00AF     	 add r7,sp,#0
 858              	.LCFI88:
 859              	 .cfi_def_cfa_register 7
 860 0006 7860     	 str r0,[r7,#4]
 861 0008 0B46     	 mov r3,r1
 862 000a FB70     	 strb r3,[r7,#3]
 310:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 863              	 .loc 2 310 0
 864 000c FB78     	 ldrb r3,[r7,#3]
 865 000e 4FF48072 	 mov r2,#256
 866 0012 9A40     	 lsls r2,r2,r3
 867 0014 7B68     	 ldr r3,[r7,#4]
 868 0016 C3F8A023 	 str r2,[r3,#928]
 311:../Libraries/XMCLib/src/xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 869              	 .loc 2 311 0
 870 001a 00BF     	 nop
 871              	.L46:
 872              	 .loc 2 311 0 is_stmt 0 discriminator 1
 873 001c 7B68     	 ldr r3,[r7,#4]
 874 001e D3F8A023 	 ldr r2,[r3,#928]
 875 0022 FB78     	 ldrb r3,[r7,#3]
 876 0024 22FA03F3 	 lsr r3,r2,r3
 877 0028 03F00103 	 and r3,r3,#1
 878 002c 002B     	 cmp r3,#0
 879 002e F5D1     	 bne .L46
 312:../Libraries/XMCLib/src/xmc_dma.c ****   {
 313:../Libraries/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 314:../Libraries/XMCLib/src/xmc_dma.c ****   }
 315:../Libraries/XMCLib/src/xmc_dma.c **** }
 880              	 .loc 2 315 0 is_stmt 1
 881 0030 0C37     	 adds r7,r7,#12
 882              	.LCFI89:
 883              	 .cfi_def_cfa_offset 4
 884 0032 BD46     	 mov sp,r7
 885              	.LCFI90:
 886              	 .cfi_def_cfa_register 13
 887              	 
 888 0034 5DF8047B 	 ldr r7,[sp],#4
 889              	.LCFI91:
 890              	 .cfi_restore 7
 891              	 .cfi_def_cfa_offset 0
 892 0038 7047     	 bx lr
 893              	 .cfi_endproc
 894              	.LFE200:
 896 003a 00BF     	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 897              	 .align 2
 898              	 .global XMC_DMA_CH_IsEnabled
 899              	 .thumb
 900              	 .thumb_func
 902              	XMC_DMA_CH_IsEnabled:
 903              	.LFB201:
 316:../Libraries/XMCLib/src/xmc_dma.c **** 
 317:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 318:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 319:../Libraries/XMCLib/src/xmc_dma.c **** {
 904              	 .loc 2 319 0
 905              	 .cfi_startproc
 906              	 
 907              	 
 908              	 
 909 0000 80B4     	 push {r7}
 910              	.LCFI92:
 911              	 .cfi_def_cfa_offset 4
 912              	 .cfi_offset 7,-4
 913 0002 83B0     	 sub sp,sp,#12
 914              	.LCFI93:
 915              	 .cfi_def_cfa_offset 16
 916 0004 00AF     	 add r7,sp,#0
 917              	.LCFI94:
 918              	 .cfi_def_cfa_register 7
 919 0006 7860     	 str r0,[r7,#4]
 920 0008 0B46     	 mov r3,r1
 921 000a FB70     	 strb r3,[r7,#3]
 320:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 922              	 .loc 2 320 0
 923 000c 7B68     	 ldr r3,[r7,#4]
 924 000e D3F8A023 	 ldr r2,[r3,#928]
 925 0012 FB78     	 ldrb r3,[r7,#3]
 926 0014 22FA03F3 	 lsr r3,r2,r3
 927 0018 03F00103 	 and r3,r3,#1
 928 001c 002B     	 cmp r3,#0
 929 001e 14BF     	 ite ne
 930 0020 0123     	 movne r3,#1
 931 0022 0023     	 moveq r3,#0
 932 0024 DBB2     	 uxtb r3,r3
 321:../Libraries/XMCLib/src/xmc_dma.c **** }
 933              	 .loc 2 321 0
 934 0026 1846     	 mov r0,r3
 935 0028 0C37     	 adds r7,r7,#12
 936              	.LCFI95:
 937              	 .cfi_def_cfa_offset 4
 938 002a BD46     	 mov sp,r7
 939              	.LCFI96:
 940              	 .cfi_def_cfa_register 13
 941              	 
 942 002c 5DF8047B 	 ldr r7,[sp],#4
 943              	.LCFI97:
 944              	 .cfi_restore 7
 945              	 .cfi_def_cfa_offset 0
 946 0030 7047     	 bx lr
 947              	 .cfi_endproc
 948              	.LFE201:
 950 0032 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 951              	 .align 2
 952              	 .global XMC_DMA_CH_Init
 953              	 .thumb
 954              	 .thumb_func
 956              	XMC_DMA_CH_Init:
 957              	.LFB202:
 322:../Libraries/XMCLib/src/xmc_dma.c **** 
 323:../Libraries/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 324:../Libraries/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 325:../Libraries/XMCLib/src/xmc_dma.c **** {
 958              	 .loc 2 325 0
 959              	 .cfi_startproc
 960              	 
 961              	 
 962 0000 80B5     	 push {r7,lr}
 963              	.LCFI98:
 964              	 .cfi_def_cfa_offset 8
 965              	 .cfi_offset 7,-8
 966              	 .cfi_offset 14,-4
 967 0002 86B0     	 sub sp,sp,#24
 968              	.LCFI99:
 969              	 .cfi_def_cfa_offset 32
 970 0004 00AF     	 add r7,sp,#0
 971              	.LCFI100:
 972              	 .cfi_def_cfa_register 7
 973 0006 F860     	 str r0,[r7,#12]
 974 0008 0B46     	 mov r3,r1
 975 000a 7A60     	 str r2,[r7,#4]
 976 000c FB72     	 strb r3,[r7,#11]
 326:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 327:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t line;
 328:../Libraries/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 329:../Libraries/XMCLib/src/xmc_dma.c **** 
 330:../Libraries/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 977              	 .loc 2 330 0
 978 000e F868     	 ldr r0,[r7,#12]
 979 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 980 0014 0346     	 mov r3,r0
 981 0016 002B     	 cmp r3,#0
 982 0018 00F0DB81 	 beq .L50
 331:../Libraries/XMCLib/src/xmc_dma.c ****   {
 332:../Libraries/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 983              	 .loc 2 332 0
 984 001c FB7A     	 ldrb r3,[r7,#11]
 985 001e F868     	 ldr r0,[r7,#12]
 986 0020 1946     	 mov r1,r3
 987 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 988 0026 0346     	 mov r3,r0
 989 0028 83F00103 	 eor r3,r3,#1
 990 002c DBB2     	 uxtb r3,r3
 991 002e 002B     	 cmp r3,#0
 992 0030 00F0CC81 	 beq .L51
 333:../Libraries/XMCLib/src/xmc_dma.c ****     {
 334:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 993              	 .loc 2 334 0
 994 0034 FB7A     	 ldrb r3,[r7,#11]
 995 0036 7A68     	 ldr r2,[r7,#4]
 996 0038 5268     	 ldr r2,[r2,#4]
 997 003a F968     	 ldr r1,[r7,#12]
 998 003c 5820     	 movs r0,#88
 999 003e 00FB03F3 	 mul r3,r0,r3
 1000 0042 0B44     	 add r3,r3,r1
 1001 0044 1A60     	 str r2,[r3]
 335:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1002              	 .loc 2 335 0
 1003 0046 FB7A     	 ldrb r3,[r7,#11]
 1004 0048 7A68     	 ldr r2,[r7,#4]
 1005 004a 9268     	 ldr r2,[r2,#8]
 1006 004c F968     	 ldr r1,[r7,#12]
 1007 004e 5820     	 movs r0,#88
 1008 0050 00FB03F3 	 mul r3,r0,r3
 1009 0054 0B44     	 add r3,r3,r1
 1010 0056 0833     	 adds r3,r3,#8
 1011 0058 1A60     	 str r2,[r3]
 336:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1012              	 .loc 2 336 0
 1013 005a FB7A     	 ldrb r3,[r7,#11]
 1014 005c 7A68     	 ldr r2,[r7,#4]
 1015 005e D268     	 ldr r2,[r2,#12]
 1016 0060 1046     	 mov r0,r2
 1017 0062 FA68     	 ldr r2,[r7,#12]
 1018 0064 5821     	 movs r1,#88
 1019 0066 01FB03F3 	 mul r3,r1,r3
 1020 006a 1344     	 add r3,r3,r2
 1021 006c 1033     	 adds r3,r3,#16
 1022 006e 1860     	 str r0,[r3]
 337:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1023              	 .loc 2 337 0
 1024 0070 FB7A     	 ldrb r3,[r7,#11]
 1025 0072 7A68     	 ldr r2,[r7,#4]
 1026 0074 128B     	 ldrh r2,[r2,#24]
 1027 0076 1046     	 mov r0,r2
 1028 0078 FA68     	 ldr r2,[r7,#12]
 1029 007a 5821     	 movs r1,#88
 1030 007c 01FB03F3 	 mul r3,r1,r3
 1031 0080 1344     	 add r3,r3,r2
 1032 0082 1833     	 adds r3,r3,#24
 1033 0084 5860     	 str r0,[r3,#4]
 338:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1034              	 .loc 2 338 0
 1035 0086 FB7A     	 ldrb r3,[r7,#11]
 1036 0088 7A68     	 ldr r2,[r7,#4]
 1037 008a 1268     	 ldr r2,[r2]
 1038 008c F968     	 ldr r1,[r7,#12]
 1039 008e 5820     	 movs r0,#88
 1040 0090 00FB03F3 	 mul r3,r0,r3
 1041 0094 0B44     	 add r3,r3,r1
 1042 0096 1833     	 adds r3,r3,#24
 1043 0098 1A60     	 str r2,[r3]
 339:../Libraries/XMCLib/src/xmc_dma.c **** 
 340:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1044              	 .loc 2 340 0
 1045 009a FB7A     	 ldrb r3,[r7,#11]
 1046 009c 7A68     	 ldr r2,[r7,#4]
 1047 009e D27E     	 ldrb r2,[r2,#27]
 1048 00a0 42F44062 	 orr r2,r2,#3072
 1049 00a4 F968     	 ldr r1,[r7,#12]
 1050 00a6 5820     	 movs r0,#88
 1051 00a8 00FB03F3 	 mul r3,r0,r3
 1052 00ac 0B44     	 add r3,r3,r1
 1053 00ae 4033     	 adds r3,r3,#64
 1054 00b0 1A60     	 str r2,[r3]
 341:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 342:../Libraries/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 343:../Libraries/XMCLib/src/xmc_dma.c **** 
 344:../Libraries/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1055              	 .loc 2 344 0
 1056 00b2 FB68     	 ldr r3,[r7,#12]
 1057 00b4 A64A     	 ldr r2,.L73
 1058 00b6 9342     	 cmp r3,r2
 1059 00b8 16D1     	 bne .L52
 1060              	 .loc 2 344 0 is_stmt 0 discriminator 1
 1061 00ba FB7A     	 ldrb r3,[r7,#11]
 1062 00bc 012B     	 cmp r3,#1
 1063 00be 13D8     	 bhi .L52
 345:../Libraries/XMCLib/src/xmc_dma.c ****       {
 346:../Libraries/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 347:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1064              	 .loc 2 347 0 is_stmt 1
 1065 00c0 FB7A     	 ldrb r3,[r7,#11]
 1066 00c2 7A68     	 ldr r2,[r7,#4]
 1067 00c4 1269     	 ldr r2,[r2,#16]
 1068 00c6 F968     	 ldr r1,[r7,#12]
 1069 00c8 5820     	 movs r0,#88
 1070 00ca 00FB03F3 	 mul r3,r0,r3
 1071 00ce 0B44     	 add r3,r3,r1
 1072 00d0 4833     	 adds r3,r3,#72
 1073 00d2 1A60     	 str r2,[r3]
 348:../Libraries/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1074              	 .loc 2 348 0
 1075 00d4 FB7A     	 ldrb r3,[r7,#11]
 1076 00d6 7A68     	 ldr r2,[r7,#4]
 1077 00d8 5269     	 ldr r2,[r2,#20]
 1078 00da F968     	 ldr r1,[r7,#12]
 1079 00dc 5820     	 movs r0,#88
 1080 00de 00FB03F3 	 mul r3,r0,r3
 1081 00e2 0B44     	 add r3,r3,r1
 1082 00e4 5033     	 adds r3,r3,#80
 1083 00e6 1A60     	 str r2,[r3]
 1084              	.L52:
 349:../Libraries/XMCLib/src/xmc_dma.c ****       }
 350:../Libraries/XMCLib/src/xmc_dma.c **** 
 351:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1085              	 .loc 2 351 0
 1086 00e8 7B68     	 ldr r3,[r7,#4]
 1087 00ea 1B8C     	 ldrh r3,[r3,#32]
 1088 00ec 002B     	 cmp r3,#0
 1089 00ee 44D1     	 bne .L53
 352:../Libraries/XMCLib/src/xmc_dma.c ****       {
 353:../Libraries/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 354:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1090              	 .loc 2 354 0
 1091 00f0 7B68     	 ldr r3,[r7,#4]
 1092 00f2 9B78     	 ldrb r3,[r3,#2]
 1093 00f4 03F07003 	 and r3,r3,#112
 1094 00f8 DBB2     	 uxtb r3,r3
 1095 00fa 102B     	 cmp r3,#16
 1096 00fc 06D0     	 beq .L54
 355:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1097              	 .loc 2 355 0 discriminator 1
 1098 00fe 7B68     	 ldr r3,[r7,#4]
 1099 0100 9B78     	 ldrb r3,[r3,#2]
 1100 0102 03F07003 	 and r3,r3,#112
 1101 0106 DBB2     	 uxtb r3,r3
 354:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1102              	 .loc 2 354 0 discriminator 1
 1103 0108 302B     	 cmp r3,#48
 1104 010a 36D1     	 bne .L53
 1105              	.L54:
 356:../Libraries/XMCLib/src/xmc_dma.c ****         {
 357:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 358:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 359:../Libraries/XMCLib/src/xmc_dma.c ****           {
 360:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 361:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1106              	 .loc 2 361 0
 1107 010c 7B68     	 ldr r3,[r7,#4]
 1108 010e 93F82230 	 ldrb r3,[r3,#34]
 1109 0112 03F00703 	 and r3,r3,#7
 1110 0116 BB75     	 strb r3,[r7,#22]
 362:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 363:../Libraries/XMCLib/src/xmc_dma.c ****           }
 364:../Libraries/XMCLib/src/xmc_dma.c ****           else
 365:../Libraries/XMCLib/src/xmc_dma.c ****           {
 366:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 367:../Libraries/XMCLib/src/xmc_dma.c ****           }
 368:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 369:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1111              	 .loc 2 369 0
 1112 0118 7B68     	 ldr r3,[r7,#4]
 1113 011a 93F82230 	 ldrb r3,[r3,#34]
 1114 011e 1B09     	 lsrs r3,r3,#4
 1115 0120 7B75     	 strb r3,[r7,#21]
 370:../Libraries/XMCLib/src/xmc_dma.c **** 
 371:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1116              	 .loc 2 371 0
 1117 0122 FB7A     	 ldrb r3,[r7,#11]
 1118 0124 FA7A     	 ldrb r2,[r7,#11]
 1119 0126 F968     	 ldr r1,[r7,#12]
 1120 0128 5820     	 movs r0,#88
 1121 012a 00FB02F2 	 mul r2,r0,r2
 1122 012e 0A44     	 add r2,r2,r1
 1123 0130 4032     	 adds r2,r2,#64
 1124 0132 5168     	 ldr r1,[r2,#4]
 1125 0134 BA7D     	 ldrb r2,[r7,#22]
 1126 0136 D202     	 lsls r2,r2,#11
 1127 0138 0A43     	 orrs r2,r2,r1
 1128 013a F968     	 ldr r1,[r7,#12]
 1129 013c 5820     	 movs r0,#88
 1130 013e 00FB03F3 	 mul r3,r0,r3
 1131 0142 0B44     	 add r3,r3,r1
 1132 0144 4033     	 adds r3,r3,#64
 1133 0146 5A60     	 str r2,[r3,#4]
 372:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1134              	 .loc 2 372 0
 1135 0148 BA7D     	 ldrb r2,[r7,#22]
 1136 014a 7B7D     	 ldrb r3,[r7,#21]
 1137 014c F868     	 ldr r0,[r7,#12]
 1138 014e 1146     	 mov r1,r2
 1139 0150 1A46     	 mov r2,r3
 1140 0152 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 373:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1141              	 .loc 2 373 0
 1142 0156 FB7A     	 ldrb r3,[r7,#11]
 1143 0158 FA7A     	 ldrb r2,[r7,#11]
 1144 015a F968     	 ldr r1,[r7,#12]
 1145 015c 5820     	 movs r0,#88
 1146 015e 00FB02F2 	 mul r2,r0,r2
 1147 0162 0A44     	 add r2,r2,r1
 1148 0164 4032     	 adds r2,r2,#64
 1149 0166 1268     	 ldr r2,[r2]
 1150 0168 22F48062 	 bic r2,r2,#1024
 1151 016c F968     	 ldr r1,[r7,#12]
 1152 016e 5820     	 movs r0,#88
 1153 0170 00FB03F3 	 mul r3,r0,r3
 1154 0174 0B44     	 add r3,r3,r1
 1155 0176 4033     	 adds r3,r3,#64
 1156 0178 1A60     	 str r2,[r3]
 1157              	.L53:
 374:../Libraries/XMCLib/src/xmc_dma.c ****         }
 375:../Libraries/XMCLib/src/xmc_dma.c ****       }
 376:../Libraries/XMCLib/src/xmc_dma.c **** 
 377:../Libraries/XMCLib/src/xmc_dma.c **** 
 378:../Libraries/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1158              	 .loc 2 378 0
 1159 017a 7B68     	 ldr r3,[r7,#4]
 1160 017c 9B8B     	 ldrh r3,[r3,#28]
 1161 017e 002B     	 cmp r3,#0
 1162 0180 42D1     	 bne .L55
 379:../Libraries/XMCLib/src/xmc_dma.c ****       {
 380:../Libraries/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1163              	 .loc 2 380 0
 1164 0182 7B68     	 ldr r3,[r7,#4]
 1165 0184 9B78     	 ldrb r3,[r3,#2]
 1166 0186 03F07003 	 and r3,r3,#112
 1167 018a DBB2     	 uxtb r3,r3
 1168 018c 202B     	 cmp r3,#32
 1169 018e 06D0     	 beq .L56
 381:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1170              	 .loc 2 381 0 discriminator 1
 1171 0190 7B68     	 ldr r3,[r7,#4]
 1172 0192 9B78     	 ldrb r3,[r3,#2]
 1173 0194 03F07003 	 and r3,r3,#112
 1174 0198 DBB2     	 uxtb r3,r3
 380:../Libraries/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1175              	 .loc 2 380 0 discriminator 1
 1176 019a 302B     	 cmp r3,#48
 1177 019c 34D1     	 bne .L55
 1178              	.L56:
 382:../Libraries/XMCLib/src/xmc_dma.c ****         {
 383:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 384:../Libraries/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 385:../Libraries/XMCLib/src/xmc_dma.c ****           {
 386:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 387:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1179              	 .loc 2 387 0
 1180 019e 7B68     	 ldr r3,[r7,#4]
 1181 01a0 9B7F     	 ldrb r3,[r3,#30]
 1182 01a2 03F00703 	 and r3,r3,#7
 1183 01a6 BB75     	 strb r3,[r7,#22]
 388:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 389:../Libraries/XMCLib/src/xmc_dma.c ****           }
 390:../Libraries/XMCLib/src/xmc_dma.c ****           else
 391:../Libraries/XMCLib/src/xmc_dma.c ****           {
 392:../Libraries/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 393:../Libraries/XMCLib/src/xmc_dma.c ****           }
 394:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 395:../Libraries/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1184              	 .loc 2 395 0
 1185 01a8 7B68     	 ldr r3,[r7,#4]
 1186 01aa 9B7F     	 ldrb r3,[r3,#30]
 1187 01ac 1B09     	 lsrs r3,r3,#4
 1188 01ae 7B75     	 strb r3,[r7,#21]
 396:../Libraries/XMCLib/src/xmc_dma.c **** 
 397:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1189              	 .loc 2 397 0
 1190 01b0 FB7A     	 ldrb r3,[r7,#11]
 1191 01b2 FA7A     	 ldrb r2,[r7,#11]
 1192 01b4 F968     	 ldr r1,[r7,#12]
 1193 01b6 5820     	 movs r0,#88
 1194 01b8 00FB02F2 	 mul r2,r0,r2
 1195 01bc 0A44     	 add r2,r2,r1
 1196 01be 4032     	 adds r2,r2,#64
 1197 01c0 5168     	 ldr r1,[r2,#4]
 1198 01c2 BA7D     	 ldrb r2,[r7,#22]
 1199 01c4 D201     	 lsls r2,r2,#7
 1200 01c6 0A43     	 orrs r2,r2,r1
 1201 01c8 F968     	 ldr r1,[r7,#12]
 1202 01ca 5820     	 movs r0,#88
 1203 01cc 00FB03F3 	 mul r3,r0,r3
 1204 01d0 0B44     	 add r3,r3,r1
 1205 01d2 4033     	 adds r3,r3,#64
 1206 01d4 5A60     	 str r2,[r3,#4]
 398:../Libraries/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1207              	 .loc 2 398 0
 1208 01d6 BA7D     	 ldrb r2,[r7,#22]
 1209 01d8 7B7D     	 ldrb r3,[r7,#21]
 1210 01da F868     	 ldr r0,[r7,#12]
 1211 01dc 1146     	 mov r1,r2
 1212 01de 1A46     	 mov r2,r3
 1213 01e0 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 399:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1214              	 .loc 2 399 0
 1215 01e4 FB7A     	 ldrb r3,[r7,#11]
 1216 01e6 FA7A     	 ldrb r2,[r7,#11]
 1217 01e8 F968     	 ldr r1,[r7,#12]
 1218 01ea 5820     	 movs r0,#88
 1219 01ec 00FB02F2 	 mul r2,r0,r2
 1220 01f0 0A44     	 add r2,r2,r1
 1221 01f2 4032     	 adds r2,r2,#64
 1222 01f4 1268     	 ldr r2,[r2]
 1223 01f6 22F40062 	 bic r2,r2,#2048
 1224 01fa F968     	 ldr r1,[r7,#12]
 1225 01fc 5820     	 movs r0,#88
 1226 01fe 00FB03F3 	 mul r3,r0,r3
 1227 0202 0B44     	 add r3,r3,r1
 1228 0204 4033     	 adds r3,r3,#64
 1229 0206 1A60     	 str r2,[r3]
 1230              	.L55:
 400:../Libraries/XMCLib/src/xmc_dma.c ****         }
 401:../Libraries/XMCLib/src/xmc_dma.c ****       }
 402:../Libraries/XMCLib/src/xmc_dma.c ****       
 403:../Libraries/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1231              	 .loc 2 403 0
 1232 0208 FB7A     	 ldrb r3,[r7,#11]
 1233 020a F868     	 ldr r0,[r7,#12]
 1234 020c 1946     	 mov r1,r3
 1235 020e 1F22     	 movs r2,#31
 1236 0210 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 404:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 405:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 406:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 407:../Libraries/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 408:../Libraries/XMCLib/src/xmc_dma.c **** 
 409:../Libraries/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1237              	 .loc 2 409 0
 1238 0214 7B68     	 ldr r3,[r7,#4]
 1239 0216 9B7E     	 ldrb r3,[r3,#26]
 1240 0218 082B     	 cmp r3,#8
 1241 021a 00F2D380 	 bhi .L72
 1242 021e 01A2     	 adr r2,.L59
 1243 0220 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1244              	 .p2align 2
 1245              	.L59:
 1246 0224 C5030000 	 .word .L72+1
 1247 0228 49020000 	 .word .L60+1
 1248 022c 6F020000 	 .word .L61+1
 1249 0230 95020000 	 .word .L62+1
 1250 0234 BB020000 	 .word .L63+1
 1251 0238 E1020000 	 .word .L64+1
 1252 023c 2B030000 	 .word .L65+1
 1253 0240 55030000 	 .word .L66+1
 1254 0244 9F030000 	 .word .L67+1
 1255              	 .p2align 1
 1256              	.L60:
 410:../Libraries/XMCLib/src/xmc_dma.c ****       {
 411:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 412:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 413:../Libraries/XMCLib/src/xmc_dma.c **** 
 414:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 415:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1257              	 .loc 2 415 0
 1258 0248 FB7A     	 ldrb r3,[r7,#11]
 1259 024a FA7A     	 ldrb r2,[r7,#11]
 1260 024c F968     	 ldr r1,[r7,#12]
 1261 024e 5820     	 movs r0,#88
 1262 0250 00FB02F2 	 mul r2,r0,r2
 1263 0254 0A44     	 add r2,r2,r1
 1264 0256 4032     	 adds r2,r2,#64
 1265 0258 1268     	 ldr r2,[r2]
 1266 025a 42F00042 	 orr r2,r2,#-2147483648
 1267 025e F968     	 ldr r1,[r7,#12]
 1268 0260 5820     	 movs r0,#88
 1269 0262 00FB03F3 	 mul r3,r0,r3
 1270 0266 0B44     	 add r3,r3,r1
 1271 0268 4033     	 adds r3,r3,#64
 1272 026a 1A60     	 str r2,[r3]
 416:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1273              	 .loc 2 416 0
 1274 026c ABE0     	 b .L68
 1275              	.L61:
 417:../Libraries/XMCLib/src/xmc_dma.c **** 
 418:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 419:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1276              	 .loc 2 419 0
 1277 026e FB7A     	 ldrb r3,[r7,#11]
 1278 0270 FA7A     	 ldrb r2,[r7,#11]
 1279 0272 F968     	 ldr r1,[r7,#12]
 1280 0274 5820     	 movs r0,#88
 1281 0276 00FB02F2 	 mul r2,r0,r2
 1282 027a 0A44     	 add r2,r2,r1
 1283 027c 4032     	 adds r2,r2,#64
 1284 027e 1268     	 ldr r2,[r2]
 1285 0280 42F08042 	 orr r2,r2,#1073741824
 1286 0284 F968     	 ldr r1,[r7,#12]
 1287 0286 5820     	 movs r0,#88
 1288 0288 00FB03F3 	 mul r3,r0,r3
 1289 028c 0B44     	 add r3,r3,r1
 1290 028e 4033     	 adds r3,r3,#64
 1291 0290 1A60     	 str r2,[r3]
 420:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1292              	 .loc 2 420 0
 1293 0292 98E0     	 b .L68
 1294              	.L62:
 421:../Libraries/XMCLib/src/xmc_dma.c **** 
 422:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 423:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1295              	 .loc 2 423 0
 1296 0294 FB7A     	 ldrb r3,[r7,#11]
 1297 0296 FA7A     	 ldrb r2,[r7,#11]
 1298 0298 F968     	 ldr r1,[r7,#12]
 1299 029a 5820     	 movs r0,#88
 1300 029c 00FB02F2 	 mul r2,r0,r2
 1301 02a0 0A44     	 add r2,r2,r1
 1302 02a2 4032     	 adds r2,r2,#64
 1303 02a4 1268     	 ldr r2,[r2]
 1304 02a6 42F04042 	 orr r2,r2,#-1073741824
 1305 02aa F968     	 ldr r1,[r7,#12]
 1306 02ac 5820     	 movs r0,#88
 1307 02ae 00FB03F3 	 mul r3,r0,r3
 1308 02b2 0B44     	 add r3,r3,r1
 1309 02b4 4033     	 adds r3,r3,#64
 1310 02b6 1A60     	 str r2,[r3]
 424:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 425:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1311              	 .loc 2 425 0
 1312 02b8 85E0     	 b .L68
 1313              	.L63:
 426:../Libraries/XMCLib/src/xmc_dma.c **** 
 427:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 428:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1314              	 .loc 2 428 0
 1315 02ba FB7A     	 ldrb r3,[r7,#11]
 1316 02bc FA7A     	 ldrb r2,[r7,#11]
 1317 02be F968     	 ldr r1,[r7,#12]
 1318 02c0 5820     	 movs r0,#88
 1319 02c2 00FB02F2 	 mul r2,r0,r2
 1320 02c6 0A44     	 add r2,r2,r1
 1321 02c8 1832     	 adds r2,r2,#24
 1322 02ca 1268     	 ldr r2,[r2]
 1323 02cc 42F00062 	 orr r2,r2,#134217728
 1324 02d0 F968     	 ldr r1,[r7,#12]
 1325 02d2 5820     	 movs r0,#88
 1326 02d4 00FB03F3 	 mul r3,r0,r3
 1327 02d8 0B44     	 add r3,r3,r1
 1328 02da 1833     	 adds r3,r3,#24
 1329 02dc 1A60     	 str r2,[r3]
 429:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1330              	 .loc 2 429 0
 1331 02de 72E0     	 b .L68
 1332              	.L64:
 430:../Libraries/XMCLib/src/xmc_dma.c **** 
 431:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 432:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1333              	 .loc 2 432 0
 1334 02e0 FB7A     	 ldrb r3,[r7,#11]
 1335 02e2 FA7A     	 ldrb r2,[r7,#11]
 1336 02e4 F968     	 ldr r1,[r7,#12]
 1337 02e6 5820     	 movs r0,#88
 1338 02e8 00FB02F2 	 mul r2,r0,r2
 1339 02ec 0A44     	 add r2,r2,r1
 1340 02ee 4032     	 adds r2,r2,#64
 1341 02f0 1268     	 ldr r2,[r2]
 1342 02f2 42F08042 	 orr r2,r2,#1073741824
 1343 02f6 F968     	 ldr r1,[r7,#12]
 1344 02f8 5820     	 movs r0,#88
 1345 02fa 00FB03F3 	 mul r3,r0,r3
 1346 02fe 0B44     	 add r3,r3,r1
 1347 0300 4033     	 adds r3,r3,#64
 1348 0302 1A60     	 str r2,[r3]
 433:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1349              	 .loc 2 433 0
 1350 0304 FB7A     	 ldrb r3,[r7,#11]
 1351 0306 FA7A     	 ldrb r2,[r7,#11]
 1352 0308 F968     	 ldr r1,[r7,#12]
 1353 030a 5820     	 movs r0,#88
 1354 030c 00FB02F2 	 mul r2,r0,r2
 1355 0310 0A44     	 add r2,r2,r1
 1356 0312 1832     	 adds r2,r2,#24
 1357 0314 1268     	 ldr r2,[r2]
 1358 0316 42F00062 	 orr r2,r2,#134217728
 1359 031a F968     	 ldr r1,[r7,#12]
 1360 031c 5820     	 movs r0,#88
 1361 031e 00FB03F3 	 mul r3,r0,r3
 1362 0322 0B44     	 add r3,r3,r1
 1363 0324 1833     	 adds r3,r3,#24
 1364 0326 1A60     	 str r2,[r3]
 434:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1365              	 .loc 2 434 0
 1366 0328 4DE0     	 b .L68
 1367              	.L65:
 435:../Libraries/XMCLib/src/xmc_dma.c **** 
 436:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 437:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1368              	 .loc 2 437 0
 1369 032a FB7A     	 ldrb r3,[r7,#11]
 1370 032c FA7A     	 ldrb r2,[r7,#11]
 1371 032e F968     	 ldr r1,[r7,#12]
 1372 0330 5820     	 movs r0,#88
 1373 0332 00FB02F2 	 mul r2,r0,r2
 1374 0336 0A44     	 add r2,r2,r1
 1375 0338 1832     	 adds r2,r2,#24
 1376 033a 1268     	 ldr r2,[r2]
 1377 033c 42F08052 	 orr r2,r2,#268435456
 1378 0340 F968     	 ldr r1,[r7,#12]
 1379 0342 5820     	 movs r0,#88
 1380 0344 00FB03F3 	 mul r3,r0,r3
 1381 0348 0B44     	 add r3,r3,r1
 1382 034a 1833     	 adds r3,r3,#24
 1383 034c 1A60     	 str r2,[r3]
 438:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1384              	 .loc 2 438 0
 1385 034e 3AE0     	 b .L68
 1386              	.L74:
 1387              	 .align 2
 1388              	.L73:
 1389 0350 00400150 	 .word 1342259200
 1390              	.L66:
 439:../Libraries/XMCLib/src/xmc_dma.c **** 
 440:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 441:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1391              	 .loc 2 441 0
 1392 0354 FB7A     	 ldrb r3,[r7,#11]
 1393 0356 FA7A     	 ldrb r2,[r7,#11]
 1394 0358 F968     	 ldr r1,[r7,#12]
 1395 035a 5820     	 movs r0,#88
 1396 035c 00FB02F2 	 mul r2,r0,r2
 1397 0360 0A44     	 add r2,r2,r1
 1398 0362 4032     	 adds r2,r2,#64
 1399 0364 1268     	 ldr r2,[r2]
 1400 0366 42F00042 	 orr r2,r2,#-2147483648
 1401 036a F968     	 ldr r1,[r7,#12]
 1402 036c 5820     	 movs r0,#88
 1403 036e 00FB03F3 	 mul r3,r0,r3
 1404 0372 0B44     	 add r3,r3,r1
 1405 0374 4033     	 adds r3,r3,#64
 1406 0376 1A60     	 str r2,[r3]
 442:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1407              	 .loc 2 442 0
 1408 0378 FB7A     	 ldrb r3,[r7,#11]
 1409 037a FA7A     	 ldrb r2,[r7,#11]
 1410 037c F968     	 ldr r1,[r7,#12]
 1411 037e 5820     	 movs r0,#88
 1412 0380 00FB02F2 	 mul r2,r0,r2
 1413 0384 0A44     	 add r2,r2,r1
 1414 0386 1832     	 adds r2,r2,#24
 1415 0388 1268     	 ldr r2,[r2]
 1416 038a 42F08052 	 orr r2,r2,#268435456
 1417 038e F968     	 ldr r1,[r7,#12]
 1418 0390 5820     	 movs r0,#88
 1419 0392 00FB03F3 	 mul r3,r0,r3
 1420 0396 0B44     	 add r3,r3,r1
 1421 0398 1833     	 adds r3,r3,#24
 1422 039a 1A60     	 str r2,[r3]
 443:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1423              	 .loc 2 443 0
 1424 039c 13E0     	 b .L68
 1425              	.L67:
 444:../Libraries/XMCLib/src/xmc_dma.c **** 
 445:../Libraries/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 446:../Libraries/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1426              	 .loc 2 446 0
 1427 039e FB7A     	 ldrb r3,[r7,#11]
 1428 03a0 FA7A     	 ldrb r2,[r7,#11]
 1429 03a2 F968     	 ldr r1,[r7,#12]
 1430 03a4 5820     	 movs r0,#88
 1431 03a6 00FB02F2 	 mul r2,r0,r2
 1432 03aa 0A44     	 add r2,r2,r1
 1433 03ac 1832     	 adds r2,r2,#24
 1434 03ae 1268     	 ldr r2,[r2]
 1435 03b0 42F0C052 	 orr r2,r2,#402653184
 1436 03b4 F968     	 ldr r1,[r7,#12]
 1437 03b6 5820     	 movs r0,#88
 1438 03b8 00FB03F3 	 mul r3,r0,r3
 1439 03bc 0B44     	 add r3,r3,r1
 1440 03be 1833     	 adds r3,r3,#24
 1441 03c0 1A60     	 str r2,[r3]
 447:../Libraries/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 448:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1442              	 .loc 2 448 0
 1443 03c2 00E0     	 b .L68
 1444              	.L72:
 449:../Libraries/XMCLib/src/xmc_dma.c **** 
 450:../Libraries/XMCLib/src/xmc_dma.c ****         default:
 451:../Libraries/XMCLib/src/xmc_dma.c ****           break;
 1445              	 .loc 2 451 0
 1446 03c4 00BF     	 nop
 1447              	.L68:
 452:../Libraries/XMCLib/src/xmc_dma.c ****       }
 453:../Libraries/XMCLib/src/xmc_dma.c **** 
 454:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1448              	 .loc 2 454 0
 1449 03c6 0023     	 movs r3,#0
 1450 03c8 FB75     	 strb r3,[r7,#23]
 1451 03ca 04E0     	 b .L70
 1452              	.L51:
 455:../Libraries/XMCLib/src/xmc_dma.c **** 
 456:../Libraries/XMCLib/src/xmc_dma.c ****     }
 457:../Libraries/XMCLib/src/xmc_dma.c ****     else
 458:../Libraries/XMCLib/src/xmc_dma.c ****     {
 459:../Libraries/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1453              	 .loc 2 459 0
 1454 03cc 0223     	 movs r3,#2
 1455 03ce FB75     	 strb r3,[r7,#23]
 1456 03d0 01E0     	 b .L70
 1457              	.L50:
 460:../Libraries/XMCLib/src/xmc_dma.c ****     }
 461:../Libraries/XMCLib/src/xmc_dma.c ****   }
 462:../Libraries/XMCLib/src/xmc_dma.c ****   else 
 463:../Libraries/XMCLib/src/xmc_dma.c ****   {
 464:../Libraries/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1458              	 .loc 2 464 0
 1459 03d2 0123     	 movs r3,#1
 1460 03d4 FB75     	 strb r3,[r7,#23]
 1461              	.L70:
 465:../Libraries/XMCLib/src/xmc_dma.c ****   }
 466:../Libraries/XMCLib/src/xmc_dma.c ****   
 467:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1462              	 .loc 2 467 0
 1463 03d6 FB7D     	 ldrb r3,[r7,#23]
 468:../Libraries/XMCLib/src/xmc_dma.c **** }
 1464              	 .loc 2 468 0
 1465 03d8 1846     	 mov r0,r3
 1466 03da 1837     	 adds r7,r7,#24
 1467              	.LCFI101:
 1468              	 .cfi_def_cfa_offset 8
 1469 03dc BD46     	 mov sp,r7
 1470              	.LCFI102:
 1471              	 .cfi_def_cfa_register 13
 1472              	 
 1473 03de 80BD     	 pop {r7,pc}
 1474              	 .cfi_endproc
 1475              	.LFE202:
 1477              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1478              	 .align 2
 1479              	 .global XMC_DMA_CH_Suspend
 1480              	 .thumb
 1481              	 .thumb_func
 1483              	XMC_DMA_CH_Suspend:
 1484              	.LFB203:
 469:../Libraries/XMCLib/src/xmc_dma.c **** 
 470:../Libraries/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 471:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 472:../Libraries/XMCLib/src/xmc_dma.c **** {
 1485              	 .loc 2 472 0
 1486              	 .cfi_startproc
 1487              	 
 1488              	 
 1489              	 
 1490 0000 80B4     	 push {r7}
 1491              	.LCFI103:
 1492              	 .cfi_def_cfa_offset 4
 1493              	 .cfi_offset 7,-4
 1494 0002 83B0     	 sub sp,sp,#12
 1495              	.LCFI104:
 1496              	 .cfi_def_cfa_offset 16
 1497 0004 00AF     	 add r7,sp,#0
 1498              	.LCFI105:
 1499              	 .cfi_def_cfa_register 7
 1500 0006 7860     	 str r0,[r7,#4]
 1501 0008 0B46     	 mov r3,r1
 1502 000a FB70     	 strb r3,[r7,#3]
 473:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1503              	 .loc 2 473 0
 1504 000c FB78     	 ldrb r3,[r7,#3]
 1505 000e FA78     	 ldrb r2,[r7,#3]
 1506 0010 7968     	 ldr r1,[r7,#4]
 1507 0012 5820     	 movs r0,#88
 1508 0014 00FB02F2 	 mul r2,r0,r2
 1509 0018 0A44     	 add r2,r2,r1
 1510 001a 4032     	 adds r2,r2,#64
 1511 001c 1268     	 ldr r2,[r2]
 1512 001e 42F48072 	 orr r2,r2,#256
 1513 0022 7968     	 ldr r1,[r7,#4]
 1514 0024 5820     	 movs r0,#88
 1515 0026 00FB03F3 	 mul r3,r0,r3
 1516 002a 0B44     	 add r3,r3,r1
 1517 002c 4033     	 adds r3,r3,#64
 1518 002e 1A60     	 str r2,[r3]
 474:../Libraries/XMCLib/src/xmc_dma.c **** }
 1519              	 .loc 2 474 0
 1520 0030 0C37     	 adds r7,r7,#12
 1521              	.LCFI106:
 1522              	 .cfi_def_cfa_offset 4
 1523 0032 BD46     	 mov sp,r7
 1524              	.LCFI107:
 1525              	 .cfi_def_cfa_register 13
 1526              	 
 1527 0034 5DF8047B 	 ldr r7,[sp],#4
 1528              	.LCFI108:
 1529              	 .cfi_restore 7
 1530              	 .cfi_def_cfa_offset 0
 1531 0038 7047     	 bx lr
 1532              	 .cfi_endproc
 1533              	.LFE203:
 1535 003a 00BF     	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1536              	 .align 2
 1537              	 .global XMC_DMA_CH_Resume
 1538              	 .thumb
 1539              	 .thumb_func
 1541              	XMC_DMA_CH_Resume:
 1542              	.LFB204:
 475:../Libraries/XMCLib/src/xmc_dma.c **** 
 476:../Libraries/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 477:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 478:../Libraries/XMCLib/src/xmc_dma.c **** {
 1543              	 .loc 2 478 0
 1544              	 .cfi_startproc
 1545              	 
 1546              	 
 1547              	 
 1548 0000 80B4     	 push {r7}
 1549              	.LCFI109:
 1550              	 .cfi_def_cfa_offset 4
 1551              	 .cfi_offset 7,-4
 1552 0002 83B0     	 sub sp,sp,#12
 1553              	.LCFI110:
 1554              	 .cfi_def_cfa_offset 16
 1555 0004 00AF     	 add r7,sp,#0
 1556              	.LCFI111:
 1557              	 .cfi_def_cfa_register 7
 1558 0006 7860     	 str r0,[r7,#4]
 1559 0008 0B46     	 mov r3,r1
 1560 000a FB70     	 strb r3,[r7,#3]
 479:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1561              	 .loc 2 479 0
 1562 000c FB78     	 ldrb r3,[r7,#3]
 1563 000e FA78     	 ldrb r2,[r7,#3]
 1564 0010 7968     	 ldr r1,[r7,#4]
 1565 0012 5820     	 movs r0,#88
 1566 0014 00FB02F2 	 mul r2,r0,r2
 1567 0018 0A44     	 add r2,r2,r1
 1568 001a 4032     	 adds r2,r2,#64
 1569 001c 1268     	 ldr r2,[r2]
 1570 001e 22F48072 	 bic r2,r2,#256
 1571 0022 7968     	 ldr r1,[r7,#4]
 1572 0024 5820     	 movs r0,#88
 1573 0026 00FB03F3 	 mul r3,r0,r3
 1574 002a 0B44     	 add r3,r3,r1
 1575 002c 4033     	 adds r3,r3,#64
 1576 002e 1A60     	 str r2,[r3]
 480:../Libraries/XMCLib/src/xmc_dma.c **** }
 1577              	 .loc 2 480 0
 1578 0030 0C37     	 adds r7,r7,#12
 1579              	.LCFI112:
 1580              	 .cfi_def_cfa_offset 4
 1581 0032 BD46     	 mov sp,r7
 1582              	.LCFI113:
 1583              	 .cfi_def_cfa_register 13
 1584              	 
 1585 0034 5DF8047B 	 ldr r7,[sp],#4
 1586              	.LCFI114:
 1587              	 .cfi_restore 7
 1588              	 .cfi_def_cfa_offset 0
 1589 0038 7047     	 bx lr
 1590              	 .cfi_endproc
 1591              	.LFE204:
 1593 003a 00BF     	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1594              	 .align 2
 1595              	 .global XMC_DMA_CH_IsSuspended
 1596              	 .thumb
 1597              	 .thumb_func
 1599              	XMC_DMA_CH_IsSuspended:
 1600              	.LFB205:
 481:../Libraries/XMCLib/src/xmc_dma.c **** 
 482:../Libraries/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 483:../Libraries/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 484:../Libraries/XMCLib/src/xmc_dma.c **** {
 1601              	 .loc 2 484 0
 1602              	 .cfi_startproc
 1603              	 
 1604              	 
 1605              	 
 1606 0000 80B4     	 push {r7}
 1607              	.LCFI115:
 1608              	 .cfi_def_cfa_offset 4
 1609              	 .cfi_offset 7,-4
 1610 0002 83B0     	 sub sp,sp,#12
 1611              	.LCFI116:
 1612              	 .cfi_def_cfa_offset 16
 1613 0004 00AF     	 add r7,sp,#0
 1614              	.LCFI117:
 1615              	 .cfi_def_cfa_register 7
 1616 0006 7860     	 str r0,[r7,#4]
 1617 0008 0B46     	 mov r3,r1
 1618 000a FB70     	 strb r3,[r7,#3]
 485:../Libraries/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1619              	 .loc 2 485 0
 1620 000c FB78     	 ldrb r3,[r7,#3]
 1621 000e 7A68     	 ldr r2,[r7,#4]
 1622 0010 5821     	 movs r1,#88
 1623 0012 01FB03F3 	 mul r3,r1,r3
 1624 0016 1344     	 add r3,r3,r2
 1625 0018 4033     	 adds r3,r3,#64
 1626 001a 1B68     	 ldr r3,[r3]
 1627 001c 03F48073 	 and r3,r3,#256
 1628 0020 002B     	 cmp r3,#0
 1629 0022 14BF     	 ite ne
 1630 0024 0123     	 movne r3,#1
 1631 0026 0023     	 moveq r3,#0
 1632 0028 DBB2     	 uxtb r3,r3
 486:../Libraries/XMCLib/src/xmc_dma.c **** }
 1633              	 .loc 2 486 0
 1634 002a 1846     	 mov r0,r3
 1635 002c 0C37     	 adds r7,r7,#12
 1636              	.LCFI118:
 1637              	 .cfi_def_cfa_offset 4
 1638 002e BD46     	 mov sp,r7
 1639              	.LCFI119:
 1640              	 .cfi_def_cfa_register 13
 1641              	 
 1642 0030 5DF8047B 	 ldr r7,[sp],#4
 1643              	.LCFI120:
 1644              	 .cfi_restore 7
 1645              	 .cfi_def_cfa_offset 0
 1646 0034 7047     	 bx lr
 1647              	 .cfi_endproc
 1648              	.LFE205:
 1650 0036 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1651              	 .align 2
 1652              	 .global XMC_DMA_CH_EnableEvent
 1653              	 .thumb
 1654              	 .thumb_func
 1656              	XMC_DMA_CH_EnableEvent:
 1657              	.LFB206:
 487:../Libraries/XMCLib/src/xmc_dma.c **** 
 488:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 489:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 490:../Libraries/XMCLib/src/xmc_dma.c **** {
 1658              	 .loc 2 490 0
 1659              	 .cfi_startproc
 1660              	 
 1661              	 
 1662              	 
 1663 0000 80B4     	 push {r7}
 1664              	.LCFI121:
 1665              	 .cfi_def_cfa_offset 4
 1666              	 .cfi_offset 7,-4
 1667 0002 87B0     	 sub sp,sp,#28
 1668              	.LCFI122:
 1669              	 .cfi_def_cfa_offset 32
 1670 0004 00AF     	 add r7,sp,#0
 1671              	.LCFI123:
 1672              	 .cfi_def_cfa_register 7
 1673 0006 F860     	 str r0,[r7,#12]
 1674 0008 0B46     	 mov r3,r1
 1675 000a 7A60     	 str r2,[r7,#4]
 1676 000c FB72     	 strb r3,[r7,#11]
 491:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 492:../Libraries/XMCLib/src/xmc_dma.c **** 
 493:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1677              	 .loc 2 493 0
 1678 000e 0023     	 movs r3,#0
 1679 0010 7B61     	 str r3,[r7,#20]
 1680 0012 14E0     	 b .L80
 1681              	.L82:
 494:../Libraries/XMCLib/src/xmc_dma.c ****   {
 495:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1682              	 .loc 2 495 0
 1683 0014 7B69     	 ldr r3,[r7,#20]
 1684 0016 7A68     	 ldr r2,[r7,#4]
 1685 0018 22FA03F3 	 lsr r3,r2,r3
 1686 001c 03F00103 	 and r3,r3,#1
 1687 0020 002B     	 cmp r3,#0
 1688 0022 09D0     	 beq .L81
 496:../Libraries/XMCLib/src/xmc_dma.c ****     {
 497:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 1689              	 .loc 2 497 0
 1690 0024 7B69     	 ldr r3,[r7,#20]
 1691 0026 5A00     	 lsls r2,r3,#1
 1692 0028 FB7A     	 ldrb r3,[r7,#11]
 1693 002a 40F20111 	 movw r1,#257
 1694 002e 9940     	 lsls r1,r1,r3
 1695 0030 FB68     	 ldr r3,[r7,#12]
 1696 0032 C432     	 adds r2,r2,#196
 1697 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 1698              	.L81:
 493:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1699              	 .loc 2 493 0 discriminator 2
 1700 0038 7B69     	 ldr r3,[r7,#20]
 1701 003a 0133     	 adds r3,r3,#1
 1702 003c 7B61     	 str r3,[r7,#20]
 1703              	.L80:
 493:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1704              	 .loc 2 493 0 is_stmt 0 discriminator 1
 1705 003e 7B69     	 ldr r3,[r7,#20]
 1706 0040 042B     	 cmp r3,#4
 1707 0042 E7D9     	 bls .L82
 498:../Libraries/XMCLib/src/xmc_dma.c ****     }
 499:../Libraries/XMCLib/src/xmc_dma.c ****   }
 500:../Libraries/XMCLib/src/xmc_dma.c **** }
 1708              	 .loc 2 500 0 is_stmt 1
 1709 0044 1C37     	 adds r7,r7,#28
 1710              	.LCFI124:
 1711              	 .cfi_def_cfa_offset 4
 1712 0046 BD46     	 mov sp,r7
 1713              	.LCFI125:
 1714              	 .cfi_def_cfa_register 13
 1715              	 
 1716 0048 5DF8047B 	 ldr r7,[sp],#4
 1717              	.LCFI126:
 1718              	 .cfi_restore 7
 1719              	 .cfi_def_cfa_offset 0
 1720 004c 7047     	 bx lr
 1721              	 .cfi_endproc
 1722              	.LFE206:
 1724 004e 00BF     	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 1725              	 .align 2
 1726              	 .global XMC_DMA_CH_DisableEvent
 1727              	 .thumb
 1728              	 .thumb_func
 1730              	XMC_DMA_CH_DisableEvent:
 1731              	.LFB207:
 501:../Libraries/XMCLib/src/xmc_dma.c **** 
 502:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 503:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 504:../Libraries/XMCLib/src/xmc_dma.c **** {
 1732              	 .loc 2 504 0
 1733              	 .cfi_startproc
 1734              	 
 1735              	 
 1736              	 
 1737 0000 80B4     	 push {r7}
 1738              	.LCFI127:
 1739              	 .cfi_def_cfa_offset 4
 1740              	 .cfi_offset 7,-4
 1741 0002 87B0     	 sub sp,sp,#28
 1742              	.LCFI128:
 1743              	 .cfi_def_cfa_offset 32
 1744 0004 00AF     	 add r7,sp,#0
 1745              	.LCFI129:
 1746              	 .cfi_def_cfa_register 7
 1747 0006 F860     	 str r0,[r7,#12]
 1748 0008 0B46     	 mov r3,r1
 1749 000a 7A60     	 str r2,[r7,#4]
 1750 000c FB72     	 strb r3,[r7,#11]
 505:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 506:../Libraries/XMCLib/src/xmc_dma.c **** 
 507:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1751              	 .loc 2 507 0
 1752 000e 0023     	 movs r3,#0
 1753 0010 7B61     	 str r3,[r7,#20]
 1754 0012 14E0     	 b .L84
 1755              	.L86:
 508:../Libraries/XMCLib/src/xmc_dma.c ****   {
 509:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 1756              	 .loc 2 509 0
 1757 0014 7B69     	 ldr r3,[r7,#20]
 1758 0016 7A68     	 ldr r2,[r7,#4]
 1759 0018 22FA03F3 	 lsr r3,r2,r3
 1760 001c 03F00103 	 and r3,r3,#1
 1761 0020 002B     	 cmp r3,#0
 1762 0022 09D0     	 beq .L85
 510:../Libraries/XMCLib/src/xmc_dma.c ****     {
 511:../Libraries/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 1763              	 .loc 2 511 0
 1764 0024 7B69     	 ldr r3,[r7,#20]
 1765 0026 5A00     	 lsls r2,r3,#1
 1766 0028 FB7A     	 ldrb r3,[r7,#11]
 1767 002a 4FF48071 	 mov r1,#256
 1768 002e 9940     	 lsls r1,r1,r3
 1769 0030 FB68     	 ldr r3,[r7,#12]
 1770 0032 C432     	 adds r2,r2,#196
 1771 0034 43F82210 	 str r1,[r3,r2,lsl#2]
 1772              	.L85:
 507:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1773              	 .loc 2 507 0 discriminator 2
 1774 0038 7B69     	 ldr r3,[r7,#20]
 1775 003a 0133     	 adds r3,r3,#1
 1776 003c 7B61     	 str r3,[r7,#20]
 1777              	.L84:
 507:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1778              	 .loc 2 507 0 is_stmt 0 discriminator 1
 1779 003e 7B69     	 ldr r3,[r7,#20]
 1780 0040 042B     	 cmp r3,#4
 1781 0042 E7D9     	 bls .L86
 512:../Libraries/XMCLib/src/xmc_dma.c ****     }
 513:../Libraries/XMCLib/src/xmc_dma.c ****   }
 514:../Libraries/XMCLib/src/xmc_dma.c **** }
 1782              	 .loc 2 514 0 is_stmt 1
 1783 0044 1C37     	 adds r7,r7,#28
 1784              	.LCFI130:
 1785              	 .cfi_def_cfa_offset 4
 1786 0046 BD46     	 mov sp,r7
 1787              	.LCFI131:
 1788              	 .cfi_def_cfa_register 13
 1789              	 
 1790 0048 5DF8047B 	 ldr r7,[sp],#4
 1791              	.LCFI132:
 1792              	 .cfi_restore 7
 1793              	 .cfi_def_cfa_offset 0
 1794 004c 7047     	 bx lr
 1795              	 .cfi_endproc
 1796              	.LFE207:
 1798 004e 00BF     	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 1799              	 .align 2
 1800              	 .global XMC_DMA_CH_ClearEventStatus
 1801              	 .thumb
 1802              	 .thumb_func
 1804              	XMC_DMA_CH_ClearEventStatus:
 1805              	.LFB208:
 515:../Libraries/XMCLib/src/xmc_dma.c **** 
 516:../Libraries/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 517:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 518:../Libraries/XMCLib/src/xmc_dma.c **** {
 1806              	 .loc 2 518 0
 1807              	 .cfi_startproc
 1808              	 
 1809              	 
 1810              	 
 1811 0000 80B4     	 push {r7}
 1812              	.LCFI133:
 1813              	 .cfi_def_cfa_offset 4
 1814              	 .cfi_offset 7,-4
 1815 0002 87B0     	 sub sp,sp,#28
 1816              	.LCFI134:
 1817              	 .cfi_def_cfa_offset 32
 1818 0004 00AF     	 add r7,sp,#0
 1819              	.LCFI135:
 1820              	 .cfi_def_cfa_register 7
 1821 0006 F860     	 str r0,[r7,#12]
 1822 0008 0B46     	 mov r3,r1
 1823 000a 7A60     	 str r2,[r7,#4]
 1824 000c FB72     	 strb r3,[r7,#11]
 519:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 520:../Libraries/XMCLib/src/xmc_dma.c **** 
 521:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1825              	 .loc 2 521 0
 1826 000e 0023     	 movs r3,#0
 1827 0010 7B61     	 str r3,[r7,#20]
 1828 0012 13E0     	 b .L88
 1829              	.L90:
 522:../Libraries/XMCLib/src/xmc_dma.c ****   {
 523:../Libraries/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 1830              	 .loc 2 523 0
 1831 0014 7B69     	 ldr r3,[r7,#20]
 1832 0016 7A68     	 ldr r2,[r7,#4]
 1833 0018 22FA03F3 	 lsr r3,r2,r3
 1834 001c 03F00103 	 and r3,r3,#1
 1835 0020 002B     	 cmp r3,#0
 1836 0022 08D0     	 beq .L89
 524:../Libraries/XMCLib/src/xmc_dma.c ****     {
 525:../Libraries/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 1837              	 .loc 2 525 0
 1838 0024 7B69     	 ldr r3,[r7,#20]
 1839 0026 5A00     	 lsls r2,r3,#1
 1840 0028 FB7A     	 ldrb r3,[r7,#11]
 1841 002a 0121     	 movs r1,#1
 1842 002c 9940     	 lsls r1,r1,r3
 1843 002e FB68     	 ldr r3,[r7,#12]
 1844 0030 CE32     	 adds r2,r2,#206
 1845 0032 43F82210 	 str r1,[r3,r2,lsl#2]
 1846              	.L89:
 521:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1847              	 .loc 2 521 0 discriminator 2
 1848 0036 7B69     	 ldr r3,[r7,#20]
 1849 0038 0133     	 adds r3,r3,#1
 1850 003a 7B61     	 str r3,[r7,#20]
 1851              	.L88:
 521:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1852              	 .loc 2 521 0 is_stmt 0 discriminator 1
 1853 003c 7B69     	 ldr r3,[r7,#20]
 1854 003e 042B     	 cmp r3,#4
 1855 0040 E8D9     	 bls .L90
 526:../Libraries/XMCLib/src/xmc_dma.c ****     }
 527:../Libraries/XMCLib/src/xmc_dma.c ****   }
 528:../Libraries/XMCLib/src/xmc_dma.c **** 
 529:../Libraries/XMCLib/src/xmc_dma.c **** }
 1856              	 .loc 2 529 0 is_stmt 1
 1857 0042 1C37     	 adds r7,r7,#28
 1858              	.LCFI136:
 1859              	 .cfi_def_cfa_offset 4
 1860 0044 BD46     	 mov sp,r7
 1861              	.LCFI137:
 1862              	 .cfi_def_cfa_register 13
 1863              	 
 1864 0046 5DF8047B 	 ldr r7,[sp],#4
 1865              	.LCFI138:
 1866              	 .cfi_restore 7
 1867              	 .cfi_def_cfa_offset 0
 1868 004a 7047     	 bx lr
 1869              	 .cfi_endproc
 1870              	.LFE208:
 1872              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 1873              	 .align 2
 1874              	 .global XMC_DMA_CH_GetEventStatus
 1875              	 .thumb
 1876              	 .thumb_func
 1878              	XMC_DMA_CH_GetEventStatus:
 1879              	.LFB209:
 530:../Libraries/XMCLib/src/xmc_dma.c **** 
 531:../Libraries/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 532:../Libraries/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 533:../Libraries/XMCLib/src/xmc_dma.c **** {
 1880              	 .loc 2 533 0
 1881              	 .cfi_startproc
 1882              	 
 1883              	 
 1884              	 
 1885 0000 80B4     	 push {r7}
 1886              	.LCFI139:
 1887              	 .cfi_def_cfa_offset 4
 1888              	 .cfi_offset 7,-4
 1889 0002 85B0     	 sub sp,sp,#20
 1890              	.LCFI140:
 1891              	 .cfi_def_cfa_offset 24
 1892 0004 00AF     	 add r7,sp,#0
 1893              	.LCFI141:
 1894              	 .cfi_def_cfa_register 7
 1895 0006 7860     	 str r0,[r7,#4]
 1896 0008 0B46     	 mov r3,r1
 1897 000a FB70     	 strb r3,[r7,#3]
 534:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 535:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 1898              	 .loc 2 535 0
 1899 000c 0023     	 movs r3,#0
 1900 000e BB60     	 str r3,[r7,#8]
 536:../Libraries/XMCLib/src/xmc_dma.c **** 
 537:../Libraries/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 1901              	 .loc 2 537 0
 1902 0010 0023     	 movs r3,#0
 1903 0012 FB60     	 str r3,[r7,#12]
 1904 0014 18E0     	 b .L92
 1905              	.L95:
 538:../Libraries/XMCLib/src/xmc_dma.c ****   {
 539:../Libraries/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 1906              	 .loc 2 539 0
 1907 0016 FB68     	 ldr r3,[r7,#12]
 1908 0018 5A00     	 lsls r2,r3,#1
 1909 001a 7B68     	 ldr r3,[r7,#4]
 1910 001c BA32     	 adds r2,r2,#186
 1911 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 1912 0022 FB78     	 ldrb r3,[r7,#3]
 1913 0024 22FA03F3 	 lsr r3,r2,r3
 1914 0028 03F00103 	 and r3,r3,#1
 1915 002c 002B     	 cmp r3,#0
 1916 002e 04D0     	 beq .L93
 1917              	 .loc 2 539 0 is_stmt 0 discriminator 1
 1918 0030 FB68     	 ldr r3,[r7,#12]
 1919 0032 0122     	 movs r2,#1
 1920 0034 02FA03F3 	 lsl r3,r2,r3
 1921 0038 00E0     	 b .L94
 1922              	.L93:
 1923              	 .loc 2 539 0 discriminator 2
 1924 003a 0023     	 movs r3,#0
 1925              	.L94:
 1926              	 .loc 2 539 0 discriminator 4
 1927 003c BA68     	 ldr r2,[r7,#8]
 1928 003e 1343     	 orrs r3,r3,r2
 1929 0040 BB60     	 str r3,[r7,#8]
 537:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1930              	 .loc 2 537 0 is_stmt 1 discriminator 4
 1931 0042 FB68     	 ldr r3,[r7,#12]
 1932 0044 0133     	 adds r3,r3,#1
 1933 0046 FB60     	 str r3,[r7,#12]
 1934              	.L92:
 537:../Libraries/XMCLib/src/xmc_dma.c ****   {
 1935              	 .loc 2 537 0 is_stmt 0 discriminator 2
 1936 0048 FB68     	 ldr r3,[r7,#12]
 1937 004a 042B     	 cmp r3,#4
 1938 004c E3D9     	 bls .L95
 540:../Libraries/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 541:../Libraries/XMCLib/src/xmc_dma.c ****   }
 542:../Libraries/XMCLib/src/xmc_dma.c **** 
 543:../Libraries/XMCLib/src/xmc_dma.c ****   return status;
 1939              	 .loc 2 543 0 is_stmt 1
 1940 004e BB68     	 ldr r3,[r7,#8]
 544:../Libraries/XMCLib/src/xmc_dma.c **** }
 1941              	 .loc 2 544 0
 1942 0050 1846     	 mov r0,r3
 1943 0052 1437     	 adds r7,r7,#20
 1944              	.LCFI142:
 1945              	 .cfi_def_cfa_offset 4
 1946 0054 BD46     	 mov sp,r7
 1947              	.LCFI143:
 1948              	 .cfi_def_cfa_register 13
 1949              	 
 1950 0056 5DF8047B 	 ldr r7,[sp],#4
 1951              	.LCFI144:
 1952              	 .cfi_restore 7
 1953              	 .cfi_def_cfa_offset 0
 1954 005a 7047     	 bx lr
 1955              	 .cfi_endproc
 1956              	.LFE209:
 1958              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 1959              	 .align 2
 1960              	 .global XMC_DMA_CH_EnableSourceGather
 1961              	 .thumb
 1962              	 .thumb_func
 1964              	XMC_DMA_CH_EnableSourceGather:
 1965              	.LFB210:
 545:../Libraries/XMCLib/src/xmc_dma.c **** 
 546:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 547:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 548:../Libraries/XMCLib/src/xmc_dma.c **** {
 1966              	 .loc 2 548 0
 1967              	 .cfi_startproc
 1968              	 
 1969              	 
 1970              	 
 1971 0000 80B4     	 push {r7}
 1972              	.LCFI145:
 1973              	 .cfi_def_cfa_offset 4
 1974              	 .cfi_offset 7,-4
 1975 0002 85B0     	 sub sp,sp,#20
 1976              	.LCFI146:
 1977              	 .cfi_def_cfa_offset 24
 1978 0004 00AF     	 add r7,sp,#0
 1979              	.LCFI147:
 1980              	 .cfi_def_cfa_register 7
 1981 0006 F860     	 str r0,[r7,#12]
 1982 0008 7A60     	 str r2,[r7,#4]
 1983 000a 1A46     	 mov r2,r3
 1984 000c 0B46     	 mov r3,r1
 1985 000e FB72     	 strb r3,[r7,#11]
 1986 0010 1346     	 mov r3,r2
 1987 0012 3B81     	 strh r3,[r7,#8]
 549:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 1988              	 .loc 2 549 0
 1989 0014 FB7A     	 ldrb r3,[r7,#11]
 1990 0016 FA7A     	 ldrb r2,[r7,#11]
 1991 0018 F968     	 ldr r1,[r7,#12]
 1992 001a 5820     	 movs r0,#88
 1993 001c 00FB02F2 	 mul r2,r0,r2
 1994 0020 0A44     	 add r2,r2,r1
 1995 0022 1832     	 adds r2,r2,#24
 1996 0024 1268     	 ldr r2,[r2]
 1997 0026 42F40032 	 orr r2,r2,#131072
 1998 002a F968     	 ldr r1,[r7,#12]
 1999 002c 5820     	 movs r0,#88
 2000 002e 00FB03F3 	 mul r3,r0,r3
 2001 0032 0B44     	 add r3,r3,r1
 2002 0034 1833     	 adds r3,r3,#24
 2003 0036 1A60     	 str r2,[r3]
 550:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2004              	 .loc 2 550 0
 2005 0038 FB7A     	 ldrb r3,[r7,#11]
 2006 003a 3A89     	 ldrh r2,[r7,#8]
 2007 003c 1105     	 lsls r1,r2,#20
 2008 003e 7A68     	 ldr r2,[r7,#4]
 2009 0040 0A43     	 orrs r2,r2,r1
 2010 0042 F968     	 ldr r1,[r7,#12]
 2011 0044 5820     	 movs r0,#88
 2012 0046 00FB03F3 	 mul r3,r0,r3
 2013 004a 0B44     	 add r3,r3,r1
 2014 004c 4833     	 adds r3,r3,#72
 2015 004e 1A60     	 str r2,[r3]
 551:../Libraries/XMCLib/src/xmc_dma.c **** }
 2016              	 .loc 2 551 0
 2017 0050 1437     	 adds r7,r7,#20
 2018              	.LCFI148:
 2019              	 .cfi_def_cfa_offset 4
 2020 0052 BD46     	 mov sp,r7
 2021              	.LCFI149:
 2022              	 .cfi_def_cfa_register 13
 2023              	 
 2024 0054 5DF8047B 	 ldr r7,[sp],#4
 2025              	.LCFI150:
 2026              	 .cfi_restore 7
 2027              	 .cfi_def_cfa_offset 0
 2028 0058 7047     	 bx lr
 2029              	 .cfi_endproc
 2030              	.LFE210:
 2032 005a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2033              	 .align 2
 2034              	 .global XMC_DMA_CH_DisableSourceGather
 2035              	 .thumb
 2036              	 .thumb_func
 2038              	XMC_DMA_CH_DisableSourceGather:
 2039              	.LFB211:
 552:../Libraries/XMCLib/src/xmc_dma.c **** 
 553:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 554:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 555:../Libraries/XMCLib/src/xmc_dma.c **** {
 2040              	 .loc 2 555 0
 2041              	 .cfi_startproc
 2042              	 
 2043              	 
 2044              	 
 2045 0000 80B4     	 push {r7}
 2046              	.LCFI151:
 2047              	 .cfi_def_cfa_offset 4
 2048              	 .cfi_offset 7,-4
 2049 0002 83B0     	 sub sp,sp,#12
 2050              	.LCFI152:
 2051              	 .cfi_def_cfa_offset 16
 2052 0004 00AF     	 add r7,sp,#0
 2053              	.LCFI153:
 2054              	 .cfi_def_cfa_register 7
 2055 0006 7860     	 str r0,[r7,#4]
 2056 0008 0B46     	 mov r3,r1
 2057 000a FB70     	 strb r3,[r7,#3]
 556:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2058              	 .loc 2 556 0
 2059 000c FB78     	 ldrb r3,[r7,#3]
 2060 000e FA78     	 ldrb r2,[r7,#3]
 2061 0010 7968     	 ldr r1,[r7,#4]
 2062 0012 5820     	 movs r0,#88
 2063 0014 00FB02F2 	 mul r2,r0,r2
 2064 0018 0A44     	 add r2,r2,r1
 2065 001a 1832     	 adds r2,r2,#24
 2066 001c 1268     	 ldr r2,[r2]
 2067 001e 22F40032 	 bic r2,r2,#131072
 2068 0022 7968     	 ldr r1,[r7,#4]
 2069 0024 5820     	 movs r0,#88
 2070 0026 00FB03F3 	 mul r3,r0,r3
 2071 002a 0B44     	 add r3,r3,r1
 2072 002c 1833     	 adds r3,r3,#24
 2073 002e 1A60     	 str r2,[r3]
 557:../Libraries/XMCLib/src/xmc_dma.c **** }
 2074              	 .loc 2 557 0
 2075 0030 0C37     	 adds r7,r7,#12
 2076              	.LCFI154:
 2077              	 .cfi_def_cfa_offset 4
 2078 0032 BD46     	 mov sp,r7
 2079              	.LCFI155:
 2080              	 .cfi_def_cfa_register 13
 2081              	 
 2082 0034 5DF8047B 	 ldr r7,[sp],#4
 2083              	.LCFI156:
 2084              	 .cfi_restore 7
 2085              	 .cfi_def_cfa_offset 0
 2086 0038 7047     	 bx lr
 2087              	 .cfi_endproc
 2088              	.LFE211:
 2090 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2091              	 .align 2
 2092              	 .global XMC_DMA_CH_EnableDestinationScatter
 2093              	 .thumb
 2094              	 .thumb_func
 2096              	XMC_DMA_CH_EnableDestinationScatter:
 2097              	.LFB212:
 558:../Libraries/XMCLib/src/xmc_dma.c **** 
 559:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 560:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 561:../Libraries/XMCLib/src/xmc_dma.c **** {
 2098              	 .loc 2 561 0
 2099              	 .cfi_startproc
 2100              	 
 2101              	 
 2102              	 
 2103 0000 80B4     	 push {r7}
 2104              	.LCFI157:
 2105              	 .cfi_def_cfa_offset 4
 2106              	 .cfi_offset 7,-4
 2107 0002 85B0     	 sub sp,sp,#20
 2108              	.LCFI158:
 2109              	 .cfi_def_cfa_offset 24
 2110 0004 00AF     	 add r7,sp,#0
 2111              	.LCFI159:
 2112              	 .cfi_def_cfa_register 7
 2113 0006 F860     	 str r0,[r7,#12]
 2114 0008 7A60     	 str r2,[r7,#4]
 2115 000a 1A46     	 mov r2,r3
 2116 000c 0B46     	 mov r3,r1
 2117 000e FB72     	 strb r3,[r7,#11]
 2118 0010 1346     	 mov r3,r2
 2119 0012 3B81     	 strh r3,[r7,#8]
 562:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2120              	 .loc 2 562 0
 2121 0014 FB7A     	 ldrb r3,[r7,#11]
 2122 0016 FA7A     	 ldrb r2,[r7,#11]
 2123 0018 F968     	 ldr r1,[r7,#12]
 2124 001a 5820     	 movs r0,#88
 2125 001c 00FB02F2 	 mul r2,r0,r2
 2126 0020 0A44     	 add r2,r2,r1
 2127 0022 1832     	 adds r2,r2,#24
 2128 0024 1268     	 ldr r2,[r2]
 2129 0026 42F48022 	 orr r2,r2,#262144
 2130 002a F968     	 ldr r1,[r7,#12]
 2131 002c 5820     	 movs r0,#88
 2132 002e 00FB03F3 	 mul r3,r0,r3
 2133 0032 0B44     	 add r3,r3,r1
 2134 0034 1833     	 adds r3,r3,#24
 2135 0036 1A60     	 str r2,[r3]
 563:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2136              	 .loc 2 563 0
 2137 0038 FB7A     	 ldrb r3,[r7,#11]
 2138 003a 3A89     	 ldrh r2,[r7,#8]
 2139 003c 1105     	 lsls r1,r2,#20
 2140 003e 7A68     	 ldr r2,[r7,#4]
 2141 0040 0A43     	 orrs r2,r2,r1
 2142 0042 F968     	 ldr r1,[r7,#12]
 2143 0044 5820     	 movs r0,#88
 2144 0046 00FB03F3 	 mul r3,r0,r3
 2145 004a 0B44     	 add r3,r3,r1
 2146 004c 5033     	 adds r3,r3,#80
 2147 004e 1A60     	 str r2,[r3]
 564:../Libraries/XMCLib/src/xmc_dma.c **** }
 2148              	 .loc 2 564 0
 2149 0050 1437     	 adds r7,r7,#20
 2150              	.LCFI160:
 2151              	 .cfi_def_cfa_offset 4
 2152 0052 BD46     	 mov sp,r7
 2153              	.LCFI161:
 2154              	 .cfi_def_cfa_register 13
 2155              	 
 2156 0054 5DF8047B 	 ldr r7,[sp],#4
 2157              	.LCFI162:
 2158              	 .cfi_restore 7
 2159              	 .cfi_def_cfa_offset 0
 2160 0058 7047     	 bx lr
 2161              	 .cfi_endproc
 2162              	.LFE212:
 2164 005a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2165              	 .align 2
 2166              	 .global XMC_DMA_CH_DisableDestinationScatter
 2167              	 .thumb
 2168              	 .thumb_func
 2170              	XMC_DMA_CH_DisableDestinationScatter:
 2171              	.LFB213:
 565:../Libraries/XMCLib/src/xmc_dma.c **** 
 566:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 567:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 568:../Libraries/XMCLib/src/xmc_dma.c **** {
 2172              	 .loc 2 568 0
 2173              	 .cfi_startproc
 2174              	 
 2175              	 
 2176              	 
 2177 0000 80B4     	 push {r7}
 2178              	.LCFI163:
 2179              	 .cfi_def_cfa_offset 4
 2180              	 .cfi_offset 7,-4
 2181 0002 83B0     	 sub sp,sp,#12
 2182              	.LCFI164:
 2183              	 .cfi_def_cfa_offset 16
 2184 0004 00AF     	 add r7,sp,#0
 2185              	.LCFI165:
 2186              	 .cfi_def_cfa_register 7
 2187 0006 7860     	 str r0,[r7,#4]
 2188 0008 0B46     	 mov r3,r1
 2189 000a FB70     	 strb r3,[r7,#3]
 569:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2190              	 .loc 2 569 0
 2191 000c FB78     	 ldrb r3,[r7,#3]
 2192 000e FA78     	 ldrb r2,[r7,#3]
 2193 0010 7968     	 ldr r1,[r7,#4]
 2194 0012 5820     	 movs r0,#88
 2195 0014 00FB02F2 	 mul r2,r0,r2
 2196 0018 0A44     	 add r2,r2,r1
 2197 001a 1832     	 adds r2,r2,#24
 2198 001c 1268     	 ldr r2,[r2]
 2199 001e 22F48022 	 bic r2,r2,#262144
 2200 0022 7968     	 ldr r1,[r7,#4]
 2201 0024 5820     	 movs r0,#88
 2202 0026 00FB03F3 	 mul r3,r0,r3
 2203 002a 0B44     	 add r3,r3,r1
 2204 002c 1833     	 adds r3,r3,#24
 2205 002e 1A60     	 str r2,[r3]
 570:../Libraries/XMCLib/src/xmc_dma.c **** }
 2206              	 .loc 2 570 0
 2207 0030 0C37     	 adds r7,r7,#12
 2208              	.LCFI166:
 2209              	 .cfi_def_cfa_offset 4
 2210 0032 BD46     	 mov sp,r7
 2211              	.LCFI167:
 2212              	 .cfi_def_cfa_register 13
 2213              	 
 2214 0034 5DF8047B 	 ldr r7,[sp],#4
 2215              	.LCFI168:
 2216              	 .cfi_restore 7
 2217              	 .cfi_def_cfa_offset 0
 2218 0038 7047     	 bx lr
 2219              	 .cfi_endproc
 2220              	.LFE213:
 2222 003a 00BF     	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2223              	 .align 2
 2224              	 .global XMC_DMA_CH_TriggerSourceRequest
 2225              	 .thumb
 2226              	 .thumb_func
 2228              	XMC_DMA_CH_TriggerSourceRequest:
 2229              	.LFB214:
 571:../Libraries/XMCLib/src/xmc_dma.c **** 
 572:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 573:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 574:../Libraries/XMCLib/src/xmc_dma.c **** {
 2230              	 .loc 2 574 0
 2231              	 .cfi_startproc
 2232              	 
 2233              	 
 2234              	 
 2235 0000 80B4     	 push {r7}
 2236              	.LCFI169:
 2237              	 .cfi_def_cfa_offset 4
 2238              	 .cfi_offset 7,-4
 2239 0002 83B0     	 sub sp,sp,#12
 2240              	.LCFI170:
 2241              	 .cfi_def_cfa_offset 16
 2242 0004 00AF     	 add r7,sp,#0
 2243              	.LCFI171:
 2244              	 .cfi_def_cfa_register 7
 2245 0006 7860     	 str r0,[r7,#4]
 2246 0008 0846     	 mov r0,r1
 2247 000a 1146     	 mov r1,r2
 2248 000c 1A46     	 mov r2,r3
 2249 000e 0346     	 mov r3,r0
 2250 0010 FB70     	 strb r3,[r7,#3]
 2251 0012 0B46     	 mov r3,r1
 2252 0014 BB70     	 strb r3,[r7,#2]
 2253 0016 1346     	 mov r3,r2
 2254 0018 7B70     	 strb r3,[r7,#1]
 575:../Libraries/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2255              	 .loc 2 575 0
 2256 001a BB78     	 ldrb r3,[r7,#2]
 2257 001c 002B     	 cmp r3,#0
 2258 001e 06D1     	 bne .L102
 576:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 577:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2259              	 .loc 2 577 0
 2260 0020 FB78     	 ldrb r3,[r7,#3]
 2261 0022 40F20112 	 movw r2,#257
 2262 0026 9A40     	 lsls r2,r2,r3
 2263 0028 7B68     	 ldr r3,[r7,#4]
 2264 002a C3F87823 	 str r2,[r3,#888]
 2265              	.L102:
 578:../Libraries/XMCLib/src/xmc_dma.c ****   }
 579:../Libraries/XMCLib/src/xmc_dma.c **** 
 580:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2266              	 .loc 2 580 0
 2267 002e 7B78     	 ldrb r3,[r7,#1]
 2268 0030 002B     	 cmp r3,#0
 2269 0032 06D0     	 beq .L103
 581:../Libraries/XMCLib/src/xmc_dma.c ****   {
 582:../Libraries/XMCLib/src/xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2270              	 .loc 2 582 0
 2271 0034 FB78     	 ldrb r3,[r7,#3]
 2272 0036 40F20112 	 movw r2,#257
 2273 003a 9A40     	 lsls r2,r2,r3
 2274 003c 7B68     	 ldr r3,[r7,#4]
 2275 003e C3F88823 	 str r2,[r3,#904]
 2276              	.L103:
 583:../Libraries/XMCLib/src/xmc_dma.c ****   }
 584:../Libraries/XMCLib/src/xmc_dma.c ****   
 585:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2277              	 .loc 2 585 0
 2278 0042 FB78     	 ldrb r3,[r7,#3]
 2279 0044 40F20112 	 movw r2,#257
 2280 0048 9A40     	 lsls r2,r2,r3
 2281 004a 7B68     	 ldr r3,[r7,#4]
 2282 004c C3F86823 	 str r2,[r3,#872]
 586:../Libraries/XMCLib/src/xmc_dma.c **** }
 2283              	 .loc 2 586 0
 2284 0050 0C37     	 adds r7,r7,#12
 2285              	.LCFI172:
 2286              	 .cfi_def_cfa_offset 4
 2287 0052 BD46     	 mov sp,r7
 2288              	.LCFI173:
 2289              	 .cfi_def_cfa_register 13
 2290              	 
 2291 0054 5DF8047B 	 ldr r7,[sp],#4
 2292              	.LCFI174:
 2293              	 .cfi_restore 7
 2294              	 .cfi_def_cfa_offset 0
 2295 0058 7047     	 bx lr
 2296              	 .cfi_endproc
 2297              	.LFE214:
 2299 005a 00BF     	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2300              	 .align 2
 2301              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2302              	 .thumb
 2303              	 .thumb_func
 2305              	XMC_DMA_CH_TriggerDestinationRequest:
 2306              	.LFB215:
 587:../Libraries/XMCLib/src/xmc_dma.c **** 
 588:../Libraries/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 589:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 590:../Libraries/XMCLib/src/xmc_dma.c **** {
 2307              	 .loc 2 590 0
 2308              	 .cfi_startproc
 2309              	 
 2310              	 
 2311              	 
 2312 0000 80B4     	 push {r7}
 2313              	.LCFI175:
 2314              	 .cfi_def_cfa_offset 4
 2315              	 .cfi_offset 7,-4
 2316 0002 83B0     	 sub sp,sp,#12
 2317              	.LCFI176:
 2318              	 .cfi_def_cfa_offset 16
 2319 0004 00AF     	 add r7,sp,#0
 2320              	.LCFI177:
 2321              	 .cfi_def_cfa_register 7
 2322 0006 7860     	 str r0,[r7,#4]
 2323 0008 0846     	 mov r0,r1
 2324 000a 1146     	 mov r1,r2
 2325 000c 1A46     	 mov r2,r3
 2326 000e 0346     	 mov r3,r0
 2327 0010 FB70     	 strb r3,[r7,#3]
 2328 0012 0B46     	 mov r3,r1
 2329 0014 BB70     	 strb r3,[r7,#2]
 2330 0016 1346     	 mov r3,r2
 2331 0018 7B70     	 strb r3,[r7,#1]
 591:../Libraries/XMCLib/src/xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2332              	 .loc 2 591 0
 2333 001a BB78     	 ldrb r3,[r7,#2]
 2334 001c 002B     	 cmp r3,#0
 2335 001e 06D1     	 bne .L105
 592:../Libraries/XMCLib/src/xmc_dma.c ****   {  
 593:../Libraries/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2336              	 .loc 2 593 0
 2337 0020 FB78     	 ldrb r3,[r7,#3]
 2338 0022 40F20112 	 movw r2,#257
 2339 0026 9A40     	 lsls r2,r2,r3
 2340 0028 7B68     	 ldr r3,[r7,#4]
 2341 002a C3F88023 	 str r2,[r3,#896]
 2342              	.L105:
 594:../Libraries/XMCLib/src/xmc_dma.c ****   }
 595:../Libraries/XMCLib/src/xmc_dma.c **** 
 596:../Libraries/XMCLib/src/xmc_dma.c ****   if (last == true)
 2343              	 .loc 2 596 0
 2344 002e 7B78     	 ldrb r3,[r7,#1]
 2345 0030 002B     	 cmp r3,#0
 2346 0032 06D0     	 beq .L106
 597:../Libraries/XMCLib/src/xmc_dma.c ****   {
 598:../Libraries/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2347              	 .loc 2 598 0
 2348 0034 FB78     	 ldrb r3,[r7,#3]
 2349 0036 40F20112 	 movw r2,#257
 2350 003a 9A40     	 lsls r2,r2,r3
 2351 003c 7B68     	 ldr r3,[r7,#4]
 2352 003e C3F89023 	 str r2,[r3,#912]
 2353              	.L106:
 599:../Libraries/XMCLib/src/xmc_dma.c ****   }
 600:../Libraries/XMCLib/src/xmc_dma.c **** 
 601:../Libraries/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2354              	 .loc 2 601 0
 2355 0042 FB78     	 ldrb r3,[r7,#3]
 2356 0044 40F20112 	 movw r2,#257
 2357 0048 9A40     	 lsls r2,r2,r3
 2358 004a 7B68     	 ldr r3,[r7,#4]
 2359 004c C3F87023 	 str r2,[r3,#880]
 602:../Libraries/XMCLib/src/xmc_dma.c **** }
 2360              	 .loc 2 602 0
 2361 0050 0C37     	 adds r7,r7,#12
 2362              	.LCFI178:
 2363              	 .cfi_def_cfa_offset 4
 2364 0052 BD46     	 mov sp,r7
 2365              	.LCFI179:
 2366              	 .cfi_def_cfa_register 13
 2367              	 
 2368 0054 5DF8047B 	 ldr r7,[sp],#4
 2369              	.LCFI180:
 2370              	 .cfi_restore 7
 2371              	 .cfi_def_cfa_offset 0
 2372 0058 7047     	 bx lr
 2373              	 .cfi_endproc
 2374              	.LFE215:
 2376 005a 00BF     	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2377              	 .align 2
 2378              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2379              	 .thumb
 2380              	 .thumb_func
 2382              	XMC_DMA_CH_EnableSourceAddressReload:
 2383              	.LFB216:
 603:../Libraries/XMCLib/src/xmc_dma.c **** 
 604:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 605:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 606:../Libraries/XMCLib/src/xmc_dma.c **** {
 2384              	 .loc 2 606 0
 2385              	 .cfi_startproc
 2386              	 
 2387              	 
 2388              	 
 2389 0000 80B4     	 push {r7}
 2390              	.LCFI181:
 2391              	 .cfi_def_cfa_offset 4
 2392              	 .cfi_offset 7,-4
 2393 0002 83B0     	 sub sp,sp,#12
 2394              	.LCFI182:
 2395              	 .cfi_def_cfa_offset 16
 2396 0004 00AF     	 add r7,sp,#0
 2397              	.LCFI183:
 2398              	 .cfi_def_cfa_register 7
 2399 0006 7860     	 str r0,[r7,#4]
 2400 0008 0B46     	 mov r3,r1
 2401 000a FB70     	 strb r3,[r7,#3]
 607:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2402              	 .loc 2 607 0
 2403 000c FB78     	 ldrb r3,[r7,#3]
 2404 000e FA78     	 ldrb r2,[r7,#3]
 2405 0010 7968     	 ldr r1,[r7,#4]
 2406 0012 5820     	 movs r0,#88
 2407 0014 00FB02F2 	 mul r2,r0,r2
 2408 0018 0A44     	 add r2,r2,r1
 2409 001a 4032     	 adds r2,r2,#64
 2410 001c 1268     	 ldr r2,[r2]
 2411 001e 42F08042 	 orr r2,r2,#1073741824
 2412 0022 7968     	 ldr r1,[r7,#4]
 2413 0024 5820     	 movs r0,#88
 2414 0026 00FB03F3 	 mul r3,r0,r3
 2415 002a 0B44     	 add r3,r3,r1
 2416 002c 4033     	 adds r3,r3,#64
 2417 002e 1A60     	 str r2,[r3]
 608:../Libraries/XMCLib/src/xmc_dma.c **** }
 2418              	 .loc 2 608 0
 2419 0030 0C37     	 adds r7,r7,#12
 2420              	.LCFI184:
 2421              	 .cfi_def_cfa_offset 4
 2422 0032 BD46     	 mov sp,r7
 2423              	.LCFI185:
 2424              	 .cfi_def_cfa_register 13
 2425              	 
 2426 0034 5DF8047B 	 ldr r7,[sp],#4
 2427              	.LCFI186:
 2428              	 .cfi_restore 7
 2429              	 .cfi_def_cfa_offset 0
 2430 0038 7047     	 bx lr
 2431              	 .cfi_endproc
 2432              	.LFE216:
 2434 003a 00BF     	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2435              	 .align 2
 2436              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2437              	 .thumb
 2438              	 .thumb_func
 2440              	XMC_DMA_CH_DisableSourceAddressReload:
 2441              	.LFB217:
 609:../Libraries/XMCLib/src/xmc_dma.c **** 
 610:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 611:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 612:../Libraries/XMCLib/src/xmc_dma.c **** {
 2442              	 .loc 2 612 0
 2443              	 .cfi_startproc
 2444              	 
 2445              	 
 2446              	 
 2447 0000 80B4     	 push {r7}
 2448              	.LCFI187:
 2449              	 .cfi_def_cfa_offset 4
 2450              	 .cfi_offset 7,-4
 2451 0002 83B0     	 sub sp,sp,#12
 2452              	.LCFI188:
 2453              	 .cfi_def_cfa_offset 16
 2454 0004 00AF     	 add r7,sp,#0
 2455              	.LCFI189:
 2456              	 .cfi_def_cfa_register 7
 2457 0006 7860     	 str r0,[r7,#4]
 2458 0008 0B46     	 mov r3,r1
 2459 000a FB70     	 strb r3,[r7,#3]
 613:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2460              	 .loc 2 613 0
 2461 000c FB78     	 ldrb r3,[r7,#3]
 2462 000e FA78     	 ldrb r2,[r7,#3]
 2463 0010 7968     	 ldr r1,[r7,#4]
 2464 0012 5820     	 movs r0,#88
 2465 0014 00FB02F2 	 mul r2,r0,r2
 2466 0018 0A44     	 add r2,r2,r1
 2467 001a 4032     	 adds r2,r2,#64
 2468 001c 1268     	 ldr r2,[r2]
 2469 001e 22F08042 	 bic r2,r2,#1073741824
 2470 0022 7968     	 ldr r1,[r7,#4]
 2471 0024 5820     	 movs r0,#88
 2472 0026 00FB03F3 	 mul r3,r0,r3
 2473 002a 0B44     	 add r3,r3,r1
 2474 002c 4033     	 adds r3,r3,#64
 2475 002e 1A60     	 str r2,[r3]
 614:../Libraries/XMCLib/src/xmc_dma.c **** }
 2476              	 .loc 2 614 0
 2477 0030 0C37     	 adds r7,r7,#12
 2478              	.LCFI190:
 2479              	 .cfi_def_cfa_offset 4
 2480 0032 BD46     	 mov sp,r7
 2481              	.LCFI191:
 2482              	 .cfi_def_cfa_register 13
 2483              	 
 2484 0034 5DF8047B 	 ldr r7,[sp],#4
 2485              	.LCFI192:
 2486              	 .cfi_restore 7
 2487              	 .cfi_def_cfa_offset 0
 2488 0038 7047     	 bx lr
 2489              	 .cfi_endproc
 2490              	.LFE217:
 2492 003a 00BF     	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2493              	 .align 2
 2494              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2495              	 .thumb
 2496              	 .thumb_func
 2498              	XMC_DMA_CH_EnableDestinationAddressReload:
 2499              	.LFB218:
 615:../Libraries/XMCLib/src/xmc_dma.c **** 
 616:../Libraries/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 617:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 618:../Libraries/XMCLib/src/xmc_dma.c **** {
 2500              	 .loc 2 618 0
 2501              	 .cfi_startproc
 2502              	 
 2503              	 
 2504              	 
 2505 0000 80B4     	 push {r7}
 2506              	.LCFI193:
 2507              	 .cfi_def_cfa_offset 4
 2508              	 .cfi_offset 7,-4
 2509 0002 83B0     	 sub sp,sp,#12
 2510              	.LCFI194:
 2511              	 .cfi_def_cfa_offset 16
 2512 0004 00AF     	 add r7,sp,#0
 2513              	.LCFI195:
 2514              	 .cfi_def_cfa_register 7
 2515 0006 7860     	 str r0,[r7,#4]
 2516 0008 0B46     	 mov r3,r1
 2517 000a FB70     	 strb r3,[r7,#3]
 619:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2518              	 .loc 2 619 0
 2519 000c FB78     	 ldrb r3,[r7,#3]
 2520 000e FA78     	 ldrb r2,[r7,#3]
 2521 0010 7968     	 ldr r1,[r7,#4]
 2522 0012 5820     	 movs r0,#88
 2523 0014 00FB02F2 	 mul r2,r0,r2
 2524 0018 0A44     	 add r2,r2,r1
 2525 001a 4032     	 adds r2,r2,#64
 2526 001c 1268     	 ldr r2,[r2]
 2527 001e 42F00042 	 orr r2,r2,#-2147483648
 2528 0022 7968     	 ldr r1,[r7,#4]
 2529 0024 5820     	 movs r0,#88
 2530 0026 00FB03F3 	 mul r3,r0,r3
 2531 002a 0B44     	 add r3,r3,r1
 2532 002c 4033     	 adds r3,r3,#64
 2533 002e 1A60     	 str r2,[r3]
 620:../Libraries/XMCLib/src/xmc_dma.c **** }
 2534              	 .loc 2 620 0
 2535 0030 0C37     	 adds r7,r7,#12
 2536              	.LCFI196:
 2537              	 .cfi_def_cfa_offset 4
 2538 0032 BD46     	 mov sp,r7
 2539              	.LCFI197:
 2540              	 .cfi_def_cfa_register 13
 2541              	 
 2542 0034 5DF8047B 	 ldr r7,[sp],#4
 2543              	.LCFI198:
 2544              	 .cfi_restore 7
 2545              	 .cfi_def_cfa_offset 0
 2546 0038 7047     	 bx lr
 2547              	 .cfi_endproc
 2548              	.LFE218:
 2550 003a 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2551              	 .align 2
 2552              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2553              	 .thumb
 2554              	 .thumb_func
 2556              	XMC_DMA_CH_DisableDestinationAddressReload:
 2557              	.LFB219:
 621:../Libraries/XMCLib/src/xmc_dma.c **** 
 622:../Libraries/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 623:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 624:../Libraries/XMCLib/src/xmc_dma.c **** {
 2558              	 .loc 2 624 0
 2559              	 .cfi_startproc
 2560              	 
 2561              	 
 2562              	 
 2563 0000 80B4     	 push {r7}
 2564              	.LCFI199:
 2565              	 .cfi_def_cfa_offset 4
 2566              	 .cfi_offset 7,-4
 2567 0002 83B0     	 sub sp,sp,#12
 2568              	.LCFI200:
 2569              	 .cfi_def_cfa_offset 16
 2570 0004 00AF     	 add r7,sp,#0
 2571              	.LCFI201:
 2572              	 .cfi_def_cfa_register 7
 2573 0006 7860     	 str r0,[r7,#4]
 2574 0008 0B46     	 mov r3,r1
 2575 000a FB70     	 strb r3,[r7,#3]
 625:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2576              	 .loc 2 625 0
 2577 000c FB78     	 ldrb r3,[r7,#3]
 2578 000e FA78     	 ldrb r2,[r7,#3]
 2579 0010 7968     	 ldr r1,[r7,#4]
 2580 0012 5820     	 movs r0,#88
 2581 0014 00FB02F2 	 mul r2,r0,r2
 2582 0018 0A44     	 add r2,r2,r1
 2583 001a 4032     	 adds r2,r2,#64
 2584 001c 1268     	 ldr r2,[r2]
 2585 001e 22F00042 	 bic r2,r2,#-2147483648
 2586 0022 7968     	 ldr r1,[r7,#4]
 2587 0024 5820     	 movs r0,#88
 2588 0026 00FB03F3 	 mul r3,r0,r3
 2589 002a 0B44     	 add r3,r3,r1
 2590 002c 4033     	 adds r3,r3,#64
 2591 002e 1A60     	 str r2,[r3]
 626:../Libraries/XMCLib/src/xmc_dma.c **** }
 2592              	 .loc 2 626 0
 2593 0030 0C37     	 adds r7,r7,#12
 2594              	.LCFI202:
 2595              	 .cfi_def_cfa_offset 4
 2596 0032 BD46     	 mov sp,r7
 2597              	.LCFI203:
 2598              	 .cfi_def_cfa_register 13
 2599              	 
 2600 0034 5DF8047B 	 ldr r7,[sp],#4
 2601              	.LCFI204:
 2602              	 .cfi_restore 7
 2603              	 .cfi_def_cfa_offset 0
 2604 0038 7047     	 bx lr
 2605              	 .cfi_endproc
 2606              	.LFE219:
 2608 003a 00BF     	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 2609              	 .align 2
 2610              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 2611              	 .thumb
 2612              	 .thumb_func
 2614              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 2615              	.LFB220:
 627:../Libraries/XMCLib/src/xmc_dma.c **** 
 628:../Libraries/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 629:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 630:../Libraries/XMCLib/src/xmc_dma.c **** {
 2616              	 .loc 2 630 0
 2617              	 .cfi_startproc
 2618              	 
 2619              	 
 2620              	 
 2621 0000 80B4     	 push {r7}
 2622              	.LCFI205:
 2623              	 .cfi_def_cfa_offset 4
 2624              	 .cfi_offset 7,-4
 2625 0002 83B0     	 sub sp,sp,#12
 2626              	.LCFI206:
 2627              	 .cfi_def_cfa_offset 16
 2628 0004 00AF     	 add r7,sp,#0
 2629              	.LCFI207:
 2630              	 .cfi_def_cfa_register 7
 2631 0006 7860     	 str r0,[r7,#4]
 2632 0008 0B46     	 mov r3,r1
 2633 000a FB70     	 strb r3,[r7,#3]
 631:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 2634              	 .loc 2 631 0
 2635 000c FB78     	 ldrb r3,[r7,#3]
 2636 000e FA78     	 ldrb r2,[r7,#3]
 2637 0010 7968     	 ldr r1,[r7,#4]
 2638 0012 5820     	 movs r0,#88
 2639 0014 00FB02F2 	 mul r2,r0,r2
 2640 0018 0A44     	 add r2,r2,r1
 2641 001a 4032     	 adds r2,r2,#64
 2642 001c 1268     	 ldr r2,[r2]
 2643 001e 22F04042 	 bic r2,r2,#-1073741824
 2644 0022 7968     	 ldr r1,[r7,#4]
 2645 0024 5820     	 movs r0,#88
 2646 0026 00FB03F3 	 mul r3,r0,r3
 2647 002a 0B44     	 add r3,r3,r1
 2648 002c 4033     	 adds r3,r3,#64
 2649 002e 1A60     	 str r2,[r3]
 632:../Libraries/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 2650              	 .loc 2 632 0
 2651 0030 FB78     	 ldrb r3,[r7,#3]
 2652 0032 FA78     	 ldrb r2,[r7,#3]
 2653 0034 7968     	 ldr r1,[r7,#4]
 2654 0036 5820     	 movs r0,#88
 2655 0038 00FB02F2 	 mul r2,r0,r2
 2656 003c 0A44     	 add r2,r2,r1
 2657 003e 1832     	 adds r2,r2,#24
 2658 0040 1268     	 ldr r2,[r2]
 2659 0042 22F0C052 	 bic r2,r2,#402653184
 2660 0046 7968     	 ldr r1,[r7,#4]
 2661 0048 5820     	 movs r0,#88
 2662 004a 00FB03F3 	 mul r3,r0,r3
 2663 004e 0B44     	 add r3,r3,r1
 2664 0050 1833     	 adds r3,r3,#24
 2665 0052 1A60     	 str r2,[r3]
 633:../Libraries/XMCLib/src/xmc_dma.c **** }
 2666              	 .loc 2 633 0
 2667 0054 0C37     	 adds r7,r7,#12
 2668              	.LCFI208:
 2669              	 .cfi_def_cfa_offset 4
 2670 0056 BD46     	 mov sp,r7
 2671              	.LCFI209:
 2672              	 .cfi_def_cfa_register 13
 2673              	 
 2674 0058 5DF8047B 	 ldr r7,[sp],#4
 2675              	.LCFI210:
 2676              	 .cfi_restore 7
 2677              	 .cfi_def_cfa_offset 0
 2678 005c 7047     	 bx lr
 2679              	 .cfi_endproc
 2680              	.LFE220:
 2682 005e 00BF     	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 2683              	 .align 2
 2684              	 .global XMC_DMA_CH_SetEventHandler
 2685              	 .thumb
 2686              	 .thumb_func
 2688              	XMC_DMA_CH_SetEventHandler:
 2689              	.LFB221:
 634:../Libraries/XMCLib/src/xmc_dma.c **** 
 635:../Libraries/XMCLib/src/xmc_dma.c **** /* Set event handler */
 636:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 637:../Libraries/XMCLib/src/xmc_dma.c **** {
 2690              	 .loc 2 637 0
 2691              	 .cfi_startproc
 2692              	 
 2693              	 
 2694              	 
 2695 0000 80B4     	 push {r7}
 2696              	.LCFI211:
 2697              	 .cfi_def_cfa_offset 4
 2698              	 .cfi_offset 7,-4
 2699 0002 85B0     	 sub sp,sp,#20
 2700              	.LCFI212:
 2701              	 .cfi_def_cfa_offset 24
 2702 0004 00AF     	 add r7,sp,#0
 2703              	.LCFI213:
 2704              	 .cfi_def_cfa_register 7
 2705 0006 F860     	 str r0,[r7,#12]
 2706 0008 0B46     	 mov r3,r1
 2707 000a 7A60     	 str r2,[r7,#4]
 2708 000c FB72     	 strb r3,[r7,#11]
 638:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 639:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 640:../Libraries/XMCLib/src/xmc_dma.c ****   {
 641:../Libraries/XMCLib/src/xmc_dma.c **** #else
 642:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_UNUSED_ARG(dma);
 643:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 644:../Libraries/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 2709              	 .loc 2 644 0
 2710 000e FB7A     	 ldrb r3,[r7,#11]
 2711 0010 0449     	 ldr r1,.L113
 2712 0012 7A68     	 ldr r2,[r7,#4]
 2713 0014 41F82320 	 str r2,[r1,r3,lsl#2]
 645:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 646:../Libraries/XMCLib/src/xmc_dma.c ****   }
 647:../Libraries/XMCLib/src/xmc_dma.c ****   else
 648:../Libraries/XMCLib/src/xmc_dma.c ****   {
 649:../Libraries/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 650:../Libraries/XMCLib/src/xmc_dma.c ****   }
 651:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 652:../Libraries/XMCLib/src/xmc_dma.c **** }
 2714              	 .loc 2 652 0
 2715 0018 1437     	 adds r7,r7,#20
 2716              	.LCFI214:
 2717              	 .cfi_def_cfa_offset 4
 2718 001a BD46     	 mov sp,r7
 2719              	.LCFI215:
 2720              	 .cfi_def_cfa_register 13
 2721              	 
 2722 001c 5DF8047B 	 ldr r7,[sp],#4
 2723              	.LCFI216:
 2724              	 .cfi_restore 7
 2725              	 .cfi_def_cfa_offset 0
 2726 0020 7047     	 bx lr
 2727              	.L114:
 2728 0022 00BF     	 .align 2
 2729              	.L113:
 2730 0024 00000000 	 .word dma0_event_handlers
 2731              	 .cfi_endproc
 2732              	.LFE221:
 2734              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 2735              	 .align 2
 2736              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 2737              	 .thumb
 2738              	 .thumb_func
 2740              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 2741              	.LFB222:
 653:../Libraries/XMCLib/src/xmc_dma.c **** 
 654:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 655:../Libraries/XMCLib/src/xmc_dma.c **** {
 2742              	 .loc 2 655 0
 2743              	 .cfi_startproc
 2744              	 
 2745              	 
 2746 0000 80B5     	 push {r7,lr}
 2747              	.LCFI217:
 2748              	 .cfi_def_cfa_offset 8
 2749              	 .cfi_offset 7,-8
 2750              	 .cfi_offset 14,-4
 2751 0002 84B0     	 sub sp,sp,#16
 2752              	.LCFI218:
 2753              	 .cfi_def_cfa_offset 24
 2754 0004 00AF     	 add r7,sp,#0
 2755              	.LCFI219:
 2756              	 .cfi_def_cfa_register 7
 2757 0006 7860     	 str r0,[r7,#4]
 2758 0008 0B46     	 mov r3,r1
 2759 000a FB70     	 strb r3,[r7,#3]
 656:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 657:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 2760              	 .loc 2 657 0
 2761 000c FB78     	 ldrb r3,[r7,#3]
 2762 000e 7A68     	 ldr r2,[r7,#4]
 2763 0010 5821     	 movs r1,#88
 2764 0012 01FB03F3 	 mul r3,r1,r3
 2765 0016 1344     	 add r3,r3,r2
 2766 0018 4033     	 adds r3,r3,#64
 2767 001a 5B68     	 ldr r3,[r3,#4]
 2768 001c 03F4F063 	 and r3,r3,#1920
 2769 0020 DB09     	 lsrs r3,r3,#7
 2770 0022 FB60     	 str r3,[r7,#12]
 658:../Libraries/XMCLib/src/xmc_dma.c **** 
 659:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 2771              	 .loc 2 659 0
 2772 0024 FB68     	 ldr r3,[r7,#12]
 2773 0026 DBB2     	 uxtb r3,r3
 2774 0028 7868     	 ldr r0,[r7,#4]
 2775 002a 1946     	 mov r1,r3
 2776 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 660:../Libraries/XMCLib/src/xmc_dma.c **** }
 2777              	 .loc 2 660 0
 2778 0030 1037     	 adds r7,r7,#16
 2779              	.LCFI220:
 2780              	 .cfi_def_cfa_offset 8
 2781 0032 BD46     	 mov sp,r7
 2782              	.LCFI221:
 2783              	 .cfi_def_cfa_register 13
 2784              	 
 2785 0034 80BD     	 pop {r7,pc}
 2786              	 .cfi_endproc
 2787              	.LFE222:
 2789 0036 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 2790              	 .align 2
 2791              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 2792              	 .thumb
 2793              	 .thumb_func
 2795              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 2796              	.LFB223:
 661:../Libraries/XMCLib/src/xmc_dma.c **** 
 662:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 663:../Libraries/XMCLib/src/xmc_dma.c **** {
 2797              	 .loc 2 663 0
 2798              	 .cfi_startproc
 2799              	 
 2800              	 
 2801 0000 80B5     	 push {r7,lr}
 2802              	.LCFI222:
 2803              	 .cfi_def_cfa_offset 8
 2804              	 .cfi_offset 7,-8
 2805              	 .cfi_offset 14,-4
 2806 0002 84B0     	 sub sp,sp,#16
 2807              	.LCFI223:
 2808              	 .cfi_def_cfa_offset 24
 2809 0004 00AF     	 add r7,sp,#0
 2810              	.LCFI224:
 2811              	 .cfi_def_cfa_register 7
 2812 0006 7860     	 str r0,[r7,#4]
 2813 0008 0B46     	 mov r3,r1
 2814 000a FB70     	 strb r3,[r7,#3]
 664:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t line;
 665:../Libraries/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 2815              	 .loc 2 665 0
 2816 000c FB78     	 ldrb r3,[r7,#3]
 2817 000e 7A68     	 ldr r2,[r7,#4]
 2818 0010 5821     	 movs r1,#88
 2819 0012 01FB03F3 	 mul r3,r1,r3
 2820 0016 1344     	 add r3,r3,r2
 2821 0018 4033     	 adds r3,r3,#64
 2822 001a 5B68     	 ldr r3,[r3,#4]
 2823 001c 03F4F043 	 and r3,r3,#30720
 2824 0020 DB0A     	 lsrs r3,r3,#11
 2825 0022 FB60     	 str r3,[r7,#12]
 666:../Libraries/XMCLib/src/xmc_dma.c **** 
 667:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 2826              	 .loc 2 667 0
 2827 0024 FB68     	 ldr r3,[r7,#12]
 2828 0026 DBB2     	 uxtb r3,r3
 2829 0028 7868     	 ldr r0,[r7,#4]
 2830 002a 1946     	 mov r1,r3
 2831 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 668:../Libraries/XMCLib/src/xmc_dma.c **** }
 2832              	 .loc 2 668 0
 2833 0030 1037     	 adds r7,r7,#16
 2834              	.LCFI225:
 2835              	 .cfi_def_cfa_offset 8
 2836 0032 BD46     	 mov sp,r7
 2837              	.LCFI226:
 2838              	 .cfi_def_cfa_register 13
 2839              	 
 2840 0034 80BD     	 pop {r7,pc}
 2841              	 .cfi_endproc
 2842              	.LFE223:
 2844 0036 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 2845              	 .align 2
 2846              	 .global XMC_DMA_IRQHandler
 2847              	 .thumb
 2848              	 .thumb_func
 2850              	XMC_DMA_IRQHandler:
 2851              	.LFB224:
 669:../Libraries/XMCLib/src/xmc_dma.c **** 
 670:../Libraries/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 671:../Libraries/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 672:../Libraries/XMCLib/src/xmc_dma.c **** {
 2852              	 .loc 2 672 0
 2853              	 .cfi_startproc
 2854              	 
 2855              	 
 2856 0000 80B5     	 push {r7,lr}
 2857              	.LCFI227:
 2858              	 .cfi_def_cfa_offset 8
 2859              	 .cfi_offset 7,-8
 2860              	 .cfi_offset 14,-4
 2861 0002 88B0     	 sub sp,sp,#32
 2862              	.LCFI228:
 2863              	 .cfi_def_cfa_offset 40
 2864 0004 00AF     	 add r7,sp,#0
 2865              	.LCFI229:
 2866              	 .cfi_def_cfa_register 7
 2867 0006 7860     	 str r0,[r7,#4]
 673:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t event;
 674:../Libraries/XMCLib/src/xmc_dma.c ****   int32_t channel;
 675:../Libraries/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 676:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 677:../Libraries/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 678:../Libraries/XMCLib/src/xmc_dma.c **** 
 679:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 680:../Libraries/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 681:../Libraries/XMCLib/src/xmc_dma.c ****   {
 682:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 683:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 2868              	 .loc 2 683 0
 2869 0008 7F4B     	 ldr r3,.L148
 2870 000a BB61     	 str r3,[r7,#24]
 684:../Libraries/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 685:../Libraries/XMCLib/src/xmc_dma.c ****   }
 686:../Libraries/XMCLib/src/xmc_dma.c ****   else
 687:../Libraries/XMCLib/src/xmc_dma.c ****   {
 688:../Libraries/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 689:../Libraries/XMCLib/src/xmc_dma.c ****   }
 690:../Libraries/XMCLib/src/xmc_dma.c **** #endif
 691:../Libraries/XMCLib/src/xmc_dma.c ****   
 692:../Libraries/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 2871              	 .loc 2 692 0
 2872 000c 7868     	 ldr r0,[r7,#4]
 2873 000e FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 2874 0012 7861     	 str r0,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_dma.c ****   channel = 0;
 2875              	 .loc 2 693 0
 2876 0014 0023     	 movs r3,#0
 2877 0016 FB61     	 str r3,[r7,#28]
 694:../Libraries/XMCLib/src/xmc_dma.c **** 
 695:../Libraries/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 2878              	 .loc 2 695 0
 2879 0018 7B69     	 ldr r3,[r7,#20]
 2880 001a 03F01003 	 and r3,r3,#16
 2881 001e 002B     	 cmp r3,#0
 2882 0020 2BD0     	 beq .L118
 696:../Libraries/XMCLib/src/xmc_dma.c ****   {
 697:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 2883              	 .loc 2 697 0
 2884 0022 7868     	 ldr r0,[r7,#4]
 2885 0024 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 2886 0028 7861     	 str r0,[r7,#20]
 698:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 2887              	 .loc 2 698 0
 2888 002a 21E0     	 b .L119
 2889              	.L123:
 699:../Libraries/XMCLib/src/xmc_dma.c ****     {
 700:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 2890              	 .loc 2 700 0
 2891 002c 0122     	 movs r2,#1
 2892 002e FB69     	 ldr r3,[r7,#28]
 2893 0030 02FA03F3 	 lsl r3,r2,r3
 2894 0034 3B61     	 str r3,[r7,#16]
 701:../Libraries/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 2895              	 .loc 2 701 0
 2896 0036 7A69     	 ldr r2,[r7,#20]
 2897 0038 3B69     	 ldr r3,[r7,#16]
 2898 003a 1340     	 ands r3,r3,r2
 2899 003c 002B     	 cmp r3,#0
 2900 003e 14D0     	 beq .L120
 702:../Libraries/XMCLib/src/xmc_dma.c ****       {
 703:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 2901              	 .loc 2 703 0
 2902 0040 FB69     	 ldr r3,[r7,#28]
 2903 0042 DBB2     	 uxtb r3,r3
 2904 0044 7868     	 ldr r0,[r7,#4]
 2905 0046 1946     	 mov r1,r3
 2906 0048 1022     	 movs r2,#16
 2907 004a FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 704:../Libraries/XMCLib/src/xmc_dma.c **** 
 705:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 706:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 2908              	 .loc 2 706 0
 2909 004e FB69     	 ldr r3,[r7,#28]
 2910 0050 9B00     	 lsls r3,r3,#2
 2911 0052 BA69     	 ldr r2,[r7,#24]
 2912 0054 1344     	 add r3,r3,r2
 2913 0056 1B68     	 ldr r3,[r3]
 2914 0058 FB60     	 str r3,[r7,#12]
 707:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 2915              	 .loc 2 707 0
 2916 005a FB68     	 ldr r3,[r7,#12]
 2917 005c 002B     	 cmp r3,#0
 2918 005e 03D0     	 beq .L121
 708:../Libraries/XMCLib/src/xmc_dma.c ****         {
 709:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 2919              	 .loc 2 709 0
 2920 0060 FB68     	 ldr r3,[r7,#12]
 2921 0062 1020     	 movs r0,#16
 2922 0064 9847     	 blx r3
 710:../Libraries/XMCLib/src/xmc_dma.c ****         }
 711:../Libraries/XMCLib/src/xmc_dma.c ****        
 712:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 2923              	 .loc 2 712 0
 2924 0066 07E0     	 b .L122
 2925              	.L121:
 2926 0068 06E0     	 b .L122
 2927              	.L120:
 713:../Libraries/XMCLib/src/xmc_dma.c ****       }
 714:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 2928              	 .loc 2 714 0
 2929 006a FB69     	 ldr r3,[r7,#28]
 2930 006c 0133     	 adds r3,r3,#1
 2931 006e FB61     	 str r3,[r7,#28]
 2932              	.L119:
 698:../Libraries/XMCLib/src/xmc_dma.c ****     {
 2933              	 .loc 2 698 0
 2934 0070 7B69     	 ldr r3,[r7,#20]
 2935 0072 002B     	 cmp r3,#0
 2936 0074 DAD1     	 bne .L123
 2937 0076 C3E0     	 b .L117
 2938              	.L122:
 2939 0078 C2E0     	 b .L117
 2940              	.L118:
 715:../Libraries/XMCLib/src/xmc_dma.c ****     }
 716:../Libraries/XMCLib/src/xmc_dma.c ****   }
 717:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 2941              	 .loc 2 717 0
 2942 007a 7B69     	 ldr r3,[r7,#20]
 2943 007c 03F00103 	 and r3,r3,#1
 2944 0080 002B     	 cmp r3,#0
 2945 0082 2BD0     	 beq .L125
 718:../Libraries/XMCLib/src/xmc_dma.c ****   {
 719:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 2946              	 .loc 2 719 0
 2947 0084 7868     	 ldr r0,[r7,#4]
 2948 0086 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 2949 008a 7861     	 str r0,[r7,#20]
 720:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 2950              	 .loc 2 720 0
 2951 008c 21E0     	 b .L126
 2952              	.L130:
 721:../Libraries/XMCLib/src/xmc_dma.c ****     {
 722:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 2953              	 .loc 2 722 0
 2954 008e 0122     	 movs r2,#1
 2955 0090 FB69     	 ldr r3,[r7,#28]
 2956 0092 02FA03F3 	 lsl r3,r2,r3
 2957 0096 3B61     	 str r3,[r7,#16]
 723:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 2958              	 .loc 2 723 0
 2959 0098 7A69     	 ldr r2,[r7,#20]
 2960 009a 3B69     	 ldr r3,[r7,#16]
 2961 009c 1340     	 ands r3,r3,r2
 2962 009e 002B     	 cmp r3,#0
 2963 00a0 14D0     	 beq .L127
 724:../Libraries/XMCLib/src/xmc_dma.c ****       {
 725:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 2964              	 .loc 2 725 0
 2965 00a2 FB69     	 ldr r3,[r7,#28]
 2966 00a4 DBB2     	 uxtb r3,r3
 2967 00a6 7868     	 ldr r0,[r7,#4]
 2968 00a8 1946     	 mov r1,r3
 2969 00aa 0F22     	 movs r2,#15
 2970 00ac FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 726:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 727:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 728:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 729:../Libraries/XMCLib/src/xmc_dma.c **** 
 730:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 731:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 2971              	 .loc 2 731 0
 2972 00b0 FB69     	 ldr r3,[r7,#28]
 2973 00b2 9B00     	 lsls r3,r3,#2
 2974 00b4 BA69     	 ldr r2,[r7,#24]
 2975 00b6 1344     	 add r3,r3,r2
 2976 00b8 1B68     	 ldr r3,[r3]
 2977 00ba FB60     	 str r3,[r7,#12]
 732:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 2978              	 .loc 2 732 0
 2979 00bc FB68     	 ldr r3,[r7,#12]
 2980 00be 002B     	 cmp r3,#0
 2981 00c0 03D0     	 beq .L128
 733:../Libraries/XMCLib/src/xmc_dma.c ****         {
 734:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 2982              	 .loc 2 734 0
 2983 00c2 FB68     	 ldr r3,[r7,#12]
 2984 00c4 0120     	 movs r0,#1
 2985 00c6 9847     	 blx r3
 735:../Libraries/XMCLib/src/xmc_dma.c ****         }
 736:../Libraries/XMCLib/src/xmc_dma.c **** 																	  
 737:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 2986              	 .loc 2 737 0
 2987 00c8 07E0     	 b .L129
 2988              	.L128:
 2989 00ca 06E0     	 b .L129
 2990              	.L127:
 738:../Libraries/XMCLib/src/xmc_dma.c ****       }
 739:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 2991              	 .loc 2 739 0
 2992 00cc FB69     	 ldr r3,[r7,#28]
 2993 00ce 0133     	 adds r3,r3,#1
 2994 00d0 FB61     	 str r3,[r7,#28]
 2995              	.L126:
 720:../Libraries/XMCLib/src/xmc_dma.c ****     {
 2996              	 .loc 2 720 0
 2997 00d2 7B69     	 ldr r3,[r7,#20]
 2998 00d4 002B     	 cmp r3,#0
 2999 00d6 DAD1     	 bne .L130
 3000 00d8 92E0     	 b .L117
 3001              	.L129:
 3002 00da 91E0     	 b .L117
 3003              	.L125:
 740:../Libraries/XMCLib/src/xmc_dma.c ****     }
 741:../Libraries/XMCLib/src/xmc_dma.c ****   }
 742:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3004              	 .loc 2 742 0
 3005 00dc 7B69     	 ldr r3,[r7,#20]
 3006 00de 03F00203 	 and r3,r3,#2
 3007 00e2 002B     	 cmp r3,#0
 3008 00e4 2BD0     	 beq .L131
 743:../Libraries/XMCLib/src/xmc_dma.c ****   {
 744:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 3009              	 .loc 2 744 0
 3010 00e6 7868     	 ldr r0,[r7,#4]
 3011 00e8 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 3012 00ec 7861     	 str r0,[r7,#20]
 745:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3013              	 .loc 2 745 0
 3014 00ee 21E0     	 b .L132
 3015              	.L136:
 746:../Libraries/XMCLib/src/xmc_dma.c ****     {
 747:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3016              	 .loc 2 747 0
 3017 00f0 0122     	 movs r2,#1
 3018 00f2 FB69     	 ldr r3,[r7,#28]
 3019 00f4 02FA03F3 	 lsl r3,r2,r3
 3020 00f8 3B61     	 str r3,[r7,#16]
 748:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3021              	 .loc 2 748 0
 3022 00fa 7A69     	 ldr r2,[r7,#20]
 3023 00fc 3B69     	 ldr r3,[r7,#16]
 3024 00fe 1340     	 ands r3,r3,r2
 3025 0100 002B     	 cmp r3,#0
 3026 0102 14D0     	 beq .L133
 749:../Libraries/XMCLib/src/xmc_dma.c ****       {
 750:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 3027              	 .loc 2 750 0
 3028 0104 FB69     	 ldr r3,[r7,#28]
 3029 0106 DBB2     	 uxtb r3,r3
 3030 0108 7868     	 ldr r0,[r7,#4]
 3031 010a 1946     	 mov r1,r3
 3032 010c 0E22     	 movs r2,#14
 3033 010e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 751:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 752:../Libraries/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 753:../Libraries/XMCLib/src/xmc_dma.c **** 
 754:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 755:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3034              	 .loc 2 755 0
 3035 0112 FB69     	 ldr r3,[r7,#28]
 3036 0114 9B00     	 lsls r3,r3,#2
 3037 0116 BA69     	 ldr r2,[r7,#24]
 3038 0118 1344     	 add r3,r3,r2
 3039 011a 1B68     	 ldr r3,[r3]
 3040 011c FB60     	 str r3,[r7,#12]
 756:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3041              	 .loc 2 756 0
 3042 011e FB68     	 ldr r3,[r7,#12]
 3043 0120 002B     	 cmp r3,#0
 3044 0122 03D0     	 beq .L134
 757:../Libraries/XMCLib/src/xmc_dma.c ****         {
 758:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 3045              	 .loc 2 758 0
 3046 0124 FB68     	 ldr r3,[r7,#12]
 3047 0126 0220     	 movs r0,#2
 3048 0128 9847     	 blx r3
 759:../Libraries/XMCLib/src/xmc_dma.c ****         }
 760:../Libraries/XMCLib/src/xmc_dma.c **** 
 761:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3049              	 .loc 2 761 0
 3050 012a 07E0     	 b .L135
 3051              	.L134:
 3052 012c 06E0     	 b .L135
 3053              	.L133:
 762:../Libraries/XMCLib/src/xmc_dma.c ****       }
 763:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3054              	 .loc 2 763 0
 3055 012e FB69     	 ldr r3,[r7,#28]
 3056 0130 0133     	 adds r3,r3,#1
 3057 0132 FB61     	 str r3,[r7,#28]
 3058              	.L132:
 745:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3059              	 .loc 2 745 0
 3060 0134 7B69     	 ldr r3,[r7,#20]
 3061 0136 002B     	 cmp r3,#0
 3062 0138 DAD1     	 bne .L136
 3063 013a 61E0     	 b .L117
 3064              	.L135:
 3065 013c 60E0     	 b .L117
 3066              	.L131:
 764:../Libraries/XMCLib/src/xmc_dma.c ****     }
 765:../Libraries/XMCLib/src/xmc_dma.c ****   }
 766:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3067              	 .loc 2 766 0
 3068 013e 7B69     	 ldr r3,[r7,#20]
 3069 0140 03F00403 	 and r3,r3,#4
 3070 0144 002B     	 cmp r3,#0
 3071 0146 2BD0     	 beq .L137
 767:../Libraries/XMCLib/src/xmc_dma.c ****   {
 768:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 3072              	 .loc 2 768 0
 3073 0148 7868     	 ldr r0,[r7,#4]
 3074 014a FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3075 014e 7861     	 str r0,[r7,#20]
 769:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3076              	 .loc 2 769 0
 3077 0150 21E0     	 b .L138
 3078              	.L142:
 770:../Libraries/XMCLib/src/xmc_dma.c ****     {
 771:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3079              	 .loc 2 771 0
 3080 0152 0122     	 movs r2,#1
 3081 0154 FB69     	 ldr r3,[r7,#28]
 3082 0156 02FA03F3 	 lsl r3,r2,r3
 3083 015a 3B61     	 str r3,[r7,#16]
 772:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3084              	 .loc 2 772 0
 3085 015c 7A69     	 ldr r2,[r7,#20]
 3086 015e 3B69     	 ldr r3,[r7,#16]
 3087 0160 1340     	 ands r3,r3,r2
 3088 0162 002B     	 cmp r3,#0
 3089 0164 14D0     	 beq .L139
 773:../Libraries/XMCLib/src/xmc_dma.c ****       {
 774:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 3090              	 .loc 2 774 0
 3091 0166 FB69     	 ldr r3,[r7,#28]
 3092 0168 DBB2     	 uxtb r3,r3
 3093 016a 7868     	 ldr r0,[r7,#4]
 3094 016c 1946     	 mov r1,r3
 3095 016e 0422     	 movs r2,#4
 3096 0170 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 775:../Libraries/XMCLib/src/xmc_dma.c **** 
 776:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 777:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3097              	 .loc 2 777 0
 3098 0174 FB69     	 ldr r3,[r7,#28]
 3099 0176 9B00     	 lsls r3,r3,#2
 3100 0178 BA69     	 ldr r2,[r7,#24]
 3101 017a 1344     	 add r3,r3,r2
 3102 017c 1B68     	 ldr r3,[r3]
 3103 017e FB60     	 str r3,[r7,#12]
 778:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3104              	 .loc 2 778 0
 3105 0180 FB68     	 ldr r3,[r7,#12]
 3106 0182 002B     	 cmp r3,#0
 3107 0184 03D0     	 beq .L140
 779:../Libraries/XMCLib/src/xmc_dma.c ****         {
 780:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 3108              	 .loc 2 780 0
 3109 0186 FB68     	 ldr r3,[r7,#12]
 3110 0188 0420     	 movs r0,#4
 3111 018a 9847     	 blx r3
 781:../Libraries/XMCLib/src/xmc_dma.c ****         }
 782:../Libraries/XMCLib/src/xmc_dma.c ****         
 783:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3112              	 .loc 2 783 0
 3113 018c 07E0     	 b .L141
 3114              	.L140:
 3115 018e 06E0     	 b .L141
 3116              	.L139:
 784:../Libraries/XMCLib/src/xmc_dma.c ****       }
 785:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3117              	 .loc 2 785 0
 3118 0190 FB69     	 ldr r3,[r7,#28]
 3119 0192 0133     	 adds r3,r3,#1
 3120 0194 FB61     	 str r3,[r7,#28]
 3121              	.L138:
 769:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3122              	 .loc 2 769 0
 3123 0196 7B69     	 ldr r3,[r7,#20]
 3124 0198 002B     	 cmp r3,#0
 3125 019a DAD1     	 bne .L142
 3126 019c 30E0     	 b .L117
 3127              	.L141:
 3128 019e 2FE0     	 b .L117
 3129              	.L137:
 786:../Libraries/XMCLib/src/xmc_dma.c ****     }
 787:../Libraries/XMCLib/src/xmc_dma.c ****   }
 788:../Libraries/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3130              	 .loc 2 788 0
 3131 01a0 7B69     	 ldr r3,[r7,#20]
 3132 01a2 03F00803 	 and r3,r3,#8
 3133 01a6 002B     	 cmp r3,#0
 3134 01a8 2AD0     	 beq .L117
 789:../Libraries/XMCLib/src/xmc_dma.c ****   {
 790:../Libraries/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 3135              	 .loc 2 790 0
 3136 01aa 7868     	 ldr r0,[r7,#4]
 3137 01ac FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3138 01b0 7861     	 str r0,[r7,#20]
 791:../Libraries/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3139              	 .loc 2 791 0
 3140 01b2 21E0     	 b .L143
 3141              	.L147:
 792:../Libraries/XMCLib/src/xmc_dma.c ****     {
 793:../Libraries/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3142              	 .loc 2 793 0
 3143 01b4 0122     	 movs r2,#1
 3144 01b6 FB69     	 ldr r3,[r7,#28]
 3145 01b8 02FA03F3 	 lsl r3,r2,r3
 3146 01bc 3B61     	 str r3,[r7,#16]
 794:../Libraries/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3147              	 .loc 2 794 0
 3148 01be 7A69     	 ldr r2,[r7,#20]
 3149 01c0 3B69     	 ldr r3,[r7,#16]
 3150 01c2 1340     	 ands r3,r3,r2
 3151 01c4 002B     	 cmp r3,#0
 3152 01c6 14D0     	 beq .L144
 795:../Libraries/XMCLib/src/xmc_dma.c ****       {
 796:../Libraries/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 3153              	 .loc 2 796 0
 3154 01c8 FB69     	 ldr r3,[r7,#28]
 3155 01ca DBB2     	 uxtb r3,r3
 3156 01cc 7868     	 ldr r0,[r7,#4]
 3157 01ce 1946     	 mov r1,r3
 3158 01d0 0822     	 movs r2,#8
 3159 01d2 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 797:../Libraries/XMCLib/src/xmc_dma.c **** 
 798:../Libraries/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 799:../Libraries/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3160              	 .loc 2 799 0
 3161 01d6 FB69     	 ldr r3,[r7,#28]
 3162 01d8 9B00     	 lsls r3,r3,#2
 3163 01da BA69     	 ldr r2,[r7,#24]
 3164 01dc 1344     	 add r3,r3,r2
 3165 01de 1B68     	 ldr r3,[r3]
 3166 01e0 FB60     	 str r3,[r7,#12]
 800:../Libraries/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3167              	 .loc 2 800 0
 3168 01e2 FB68     	 ldr r3,[r7,#12]
 3169 01e4 002B     	 cmp r3,#0
 3170 01e6 03D0     	 beq .L145
 801:../Libraries/XMCLib/src/xmc_dma.c ****         {
 802:../Libraries/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 3171              	 .loc 2 802 0
 3172 01e8 FB68     	 ldr r3,[r7,#12]
 3173 01ea 0820     	 movs r0,#8
 3174 01ec 9847     	 blx r3
 803:../Libraries/XMCLib/src/xmc_dma.c ****         }      
 804:../Libraries/XMCLib/src/xmc_dma.c **** 
 805:../Libraries/XMCLib/src/xmc_dma.c ****         break;
 3175              	 .loc 2 805 0
 3176 01ee 07E0     	 b .L146
 3177              	.L145:
 3178 01f0 06E0     	 b .L146
 3179              	.L144:
 806:../Libraries/XMCLib/src/xmc_dma.c ****       }
 807:../Libraries/XMCLib/src/xmc_dma.c ****       ++channel;
 3180              	 .loc 2 807 0
 3181 01f2 FB69     	 ldr r3,[r7,#28]
 3182 01f4 0133     	 adds r3,r3,#1
 3183 01f6 FB61     	 str r3,[r7,#28]
 3184              	.L143:
 791:../Libraries/XMCLib/src/xmc_dma.c ****     {
 3185              	 .loc 2 791 0
 3186 01f8 7B69     	 ldr r3,[r7,#20]
 3187 01fa 002B     	 cmp r3,#0
 3188 01fc DAD1     	 bne .L147
 3189 01fe FFE7     	 b .L117
 3190              	.L146:
 3191              	.L117:
 808:../Libraries/XMCLib/src/xmc_dma.c ****     }
 809:../Libraries/XMCLib/src/xmc_dma.c ****   }
 810:../Libraries/XMCLib/src/xmc_dma.c ****   else
 811:../Libraries/XMCLib/src/xmc_dma.c ****   {
 812:../Libraries/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 813:../Libraries/XMCLib/src/xmc_dma.c ****   }
 814:../Libraries/XMCLib/src/xmc_dma.c **** 
 815:../Libraries/XMCLib/src/xmc_dma.c **** }
 3192              	 .loc 2 815 0
 3193 0200 2037     	 adds r7,r7,#32
 3194              	.LCFI230:
 3195              	 .cfi_def_cfa_offset 8
 3196 0202 BD46     	 mov sp,r7
 3197              	.LCFI231:
 3198              	 .cfi_def_cfa_register 13
 3199              	 
 3200 0204 80BD     	 pop {r7,pc}
 3201              	.L149:
 3202 0206 00BF     	 .align 2
 3203              	.L148:
 3204 0208 00000000 	 .word dma0_event_handlers
 3205              	 .cfi_endproc
 3206              	.LFE224:
 3208              	 .text
 3209              	.Letext0:
 3210              	 .file 3 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3211              	 .file 4 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3212              	 .file 5 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 3213              	 .file 6 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/XMCLib/inc/xmc4_scu.h"
 3214              	 .file 7 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Include/cmsis_gcc.h"
 3215              	 .file 8 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Include/core_cm4.h"
 3216              	 .file 9 "C:/Users/Admin/DaveWorkspaces/XMC4300_PWMTest/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:64     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:68     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:107    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:111    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:150    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:154    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:193    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:197    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:236    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:240    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
                            *COM*:00000020 dma0_event_handlers
    {standard input}:280    .text.XMC_DMA_Init:00000000 $t
    {standard input}:285    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:325    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:320    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:365    .text.XMC_DMA_Enable:00000024 $d
    {standard input}:370    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:375    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:415    .text.XMC_DMA_Disable:00000024 $d
    {standard input}:420    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:425    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:523    .text.XMC_DMA_IsEnabled:00000084 $d
    {standard input}:528    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:533    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:600    .text.XMC_DMA_EnableRequestLine:00000050 $d
    {standard input}:605    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:610    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:656    .text.XMC_DMA_DisableRequestLine:0000002c $d
    {standard input}:661    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:666    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:721    .text.XMC_DMA_ClearRequestLine:0000003c $d
    {standard input}:726    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:731    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:781    .text.XMC_DMA_GetOverrunStatus:00000034 $d
    {standard input}:786    .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:791    .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:833    .text.XMC_DMA_ClearOverrunStatus:00000024 $d
    {standard input}:838    .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:843    .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:897    .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:902    .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:951    .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:956    .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:1804   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1246   .text.XMC_DMA_CH_Init:00000224 $d
    {standard input}:1255   .text.XMC_DMA_CH_Init:00000248 $t
    {standard input}:1389   .text.XMC_DMA_CH_Init:00000350 $d
    {standard input}:1392   .text.XMC_DMA_CH_Init:00000354 $t
    {standard input}:1478   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1483   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1536   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1541   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1594   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1599   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1651   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:1656   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:1725   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:1730   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:1799   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:1873   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:1878   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:1959   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:1964   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2033   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2038   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2091   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2096   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2165   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2170   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2223   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2228   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2300   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2305   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2377   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2382   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2435   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2440   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2493   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2498   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2551   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2556   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:2609   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:2614   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:2683   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:2688   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:2730   .text.XMC_DMA_CH_SetEventHandler:00000024 $d
    {standard input}:2735   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:2740   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:2790   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:2795   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:2845   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:2850   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3204   .text.XMC_DMA_IRQHandler:00000208 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_RESET_IsPeripheralResetAsserted
XMC_SCU_CLOCK_IsPeripheralClockGated
