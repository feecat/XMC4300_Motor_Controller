   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_eth_mac.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_ETH_MAC_Reset,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_ETH_MAC_Reset:
  25              	.LFB137:
  26              	 .file 1 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc_eth_mac.h"
   1:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
   2:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
   3:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @file xmc_eth_mac.h
   4:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @date 2018-08-08
   5:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
   6:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @cond
   7:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
   8:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   9:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  10:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * All rights reserved.                        
  12:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                             
  13:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * following conditions are met:   
  15:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  16:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer.                        
  18:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  19:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  22:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * products derived from this software without specific prior written permission.                  
  24:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  25:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *                                                                              
  33:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
  36:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  37:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Change History
  38:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * --------------
  39:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  40:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2015-06-20:
  41:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Initial
  42:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  43:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-04-25:
  44:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Change XMC_ETH_MAC_BUF_SIZE to 1524 to allow for Tagged MAC frame format
  45:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *  
  46:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-05-19:
  47:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_GetTxBuffer() and XMC_ETH_MAC_GetRxBuffer()
  48:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_SetTxBufferSize()
  49:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  50:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2016-06-08:
  51:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - Added XMC_ETH_MAC_IsRxDescriptorOwnedByDma()
  52:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 
  53:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-02-25:
  54:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *      - XMC_ETH_MAC_SetPortControl() fixed compilation warning
  55:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  56:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-02:
  57:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitPTPEx()
  58:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_SetPTPTime()
  59:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_UpdateAddend()
  60:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  61:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-11:
  62:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_EnablePTPAlarm() and XMC_ETH_MAC_DisablePTPAlarm
  63:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  64:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-04-17:
  65:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Fixed ordering of PTP nanoseconds and seconds in XMC_ETH_MAC_DMA_DESC_t
  66:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  67:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-08-07:
  68:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_TIMESTAMP_STATUS_t
  69:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  70:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2017-09-27:
  71:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Added XMC_ETH_MAC_InitEx()
  72:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - XMC_ETH_MAC_SetAddressEx(), XMC_ETH_MAC_GetAddressEx() and XMC_ETH_MAC_SetAddressPerfectFi
  73:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  74:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2018-06-21:
  75:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Changed definition of XMC_ETH_MAC_DMA_DESC_t declaring its fields volatile
  76:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  77:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * 2018-08-08:
  78:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *     - Fixed XMC_ETH_MAC_SetVLANTag() which now accepts a 32bit tag parameter that allows setting
  79:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  80:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @endcond
  81:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  82:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  83:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  84:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup XMClib XMC Peripheral Library
  85:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
  86:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
  87:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
  88:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
  89:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @addtogroup ETH_MAC
  90:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @brief Ethernet Low level driver for XMC4000 microcontroller family.
  91:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  92:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The Ethernet MAC (ETH) is a major communication peripheral that supports 10/100
  93:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MBit/s data transfer rates in compliance with the IEEE 802.3-2002 standard. The ETH
  94:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * may be used to implement internet connected applications using IPv4 and IPv6. The
  95:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH also includes support for IEEE1588 time synchronisation to allow implementation
  96:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * of Real Time Ethernet protocols.
  97:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
  98:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The XMC_ETH_MAC low level driver provides functions to configure and initialize
  99:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the ETH_MAC hardware peripheral.
 100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @{
 101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifndef XMC_ETH_MAC_H
 104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_H
 105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * HEADER FILES
 108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_common.h"
 111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (ETH0)
 113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #include "xmc_eth_mac_map.h"
 115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MACROS
 118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_BUF_SIZE           (1524)     /**< ETH MAC buffer size */
 121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_PHY_MAX_RETRIES    (0xffffUL) /**< Maximum retries */
 122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define XMC_ETH_WAKEUP_REGISTER_LENGTH (8U)       /**< Remote wakeup frame reg length */
 123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * TDES0 Descriptor TX Packet Control/Status
 126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IC   (0x40000000U) /**< Interrupt on competition */
 129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LS   (0x20000000U) /**< Last segment */
 130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FS   (0x10000000U) /**< First segment */
 131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DC   (0x08000000U) /**< Disable CRC */
 132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DP   (0x04000000U) /**< Disable pad */
 133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSE (0x02000000U) /**< Transmit time stamp enable */
 134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CIC  (0x00C00000U) /**< Checksum insertion control */
 135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TER  (0x00200000U) /**< Transmit end of ring */
 136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TCH  (0x00100000U) /**< Second address chained */
 137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_TTSS (0x00020000U) /**< Transmit time stamp status */
 138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IHE  (0x00010000U) /**< IP header error */
 139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ES   (0x00008000U) /**< Error summary */
 140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_JT   (0x00004000U) /**< Jabber timeout */
 141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_FF   (0x00002000U) /**< Frame flushed */
 142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_IPE  (0x00001000U) /**< IP payload error */
 143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LOC  (0x00000800U) /**< Loss of carrier */
 144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_NC   (0x00000400U) /**< No carrier */
 145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_LC   (0x00000200U) /**< Late collision */
 146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_EC   (0x00000100U) /**< Excessive collision */
 147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_VF   (0x00000080U) /**< VLAN frame */
 148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_CC   (0x00000078U) /**< Collision count */
 149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_ED   (0x00000004U) /**< Excessive deferral */
 150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_UF   (0x00000002U) /**< Underflow error */
 151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_TDES0_DB   (0x00000001U) /**< Deferred bit */
 152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * RDES0 Descriptor RX Packet Status
 155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_AFM  (0x40000000U) /**< Destination address filter fail */
 158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FL   (0x3FFF0000U) /**< Frame length mask */
 159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ES   (0x00008000U) /**< Error summary */
 160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DE   (0x00004000U) /**< Descriptor error */
 161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_SAF  (0x00002000U) /**< Source address filter fail */
 162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LE   (0x00001000U) /**< Length error */
 163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_OE   (0x00000800U) /**< Overflow error */
 164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_VLAN (0x00000400U) /**< VLAN tag */
 165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FS   (0x00000200U) /**< First descriptor */
 166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LS   (0x00000100U) /**< Last descriptor */
 167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_TSA  (0x00000080U) /**< Timestamp available */
 168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_LC   (0x00000040U) /**< Late collision */
 169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_FT   (0x00000020U) /**< Frame type */
 170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RWT  (0x00000010U) /**< Receive watchdog timeout */
 171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_RE   (0x00000008U) /**< Receive error */
 172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_DBE  (0x00000004U) /**< Dribble bit error */
 173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_CE   (0x00000002U) /**< CRC error */
 174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #define ETH_MAC_DMA_RDES0_ESA  (0x00000001U) /**< Extended Status/Rx MAC address */
 175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ENUMS
 178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Ethernet MAC status return values
 182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_STATUS
 184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_OK    = 0U, /**< Driver accepted application request */
 186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_BUSY  = 1U, /**< Driver is busy and cannot handle request */
 187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_ERROR = 2U  /**< Driver could not fulfil application request */
 188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_STATUS_t;
 189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Transmission frame
 192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TX_FRAME
 194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_FRAGMENT  = 0x1U, /**< Indicate frame fragment */
 196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_EVENT     = 0x2U, /**< Generate event when frame is transmitted */
 197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_TIMESTAMP = 0x4U  /**< Capture frame time stamp */
 198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TX_FRAME_t;
 199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC event
 202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_EVENT
 204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_PMT = ETH_INTERRUPT_MASK_PMTIM_Msk << 16,        /**< Power management event */
 206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TIMESTAMP = ETH_INTERRUPT_MASK_TSIM_Msk << 16,   /**< Time stamp event */
 207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_RECEIVE = ETH_STATUS_ERI_Msk,              /**< Early receive */
 208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_BUS_ERROR = ETH_STATUS_FBI_Msk,                  /**< Bus error */
 209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_TRANSMIT = ETH_STATUS_ETI_Msk,             /**< Early transmit */
 210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT = ETH_STATUS_RWT_Msk,   /**< Receive watchdog time-out
 211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED = ETH_STATUS_RPS_Msk,    /**< Receive process stopped *
 212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE = ETH_STATUS_RU_Msk,  /**< Receive buffer unavailabl
 213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE = ETH_STATUS_RI_Msk,                     /**< Receive event */
 214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW = ETH_STATUS_UNF_Msk,         /**< Transmit underflow */
 215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW = ETH_STATUS_OVF_Msk,           /**< Receive overflow */
 216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT = ETH_STATUS_TJT_Msk,    /**< Transmit jabber time-out 
 217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE = ETH_STATUS_TU_Msk, /**< Transmit buffer unavailab
 218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED = ETH_STATUS_TPS_Msk,   /**< Transmit process stopped 
 219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT = ETH_STATUS_TI_Msk                     /**< Transmit event */
 220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_EVENT_t;
 221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Link interface
 224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_INTERFACE
 226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_MII, /**< Link interface: Media independent interface */
 228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_RMII /**< Link interface: Reduced media independent interface */
 229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_INTERFACE_t;
 230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link status
 233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_STATUS
 235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_DOWN, /**< Link status down */
 237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_UP    /**< Link status up */
 238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_STATUS_t;
 239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH link speed
 242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_SPEED
 244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_10M  = 0UL << ETH_MAC_CONFIGURATION_FES_Pos, /**< Link speed: 10M */
 246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_100M = 1UL << ETH_MAC_CONFIGURATION_FES_Pos  /**< Link speed: 100M */
 247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_SPEED_t;
 248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH duplex settings (full/half?)
 251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_DUPLEX
 253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_HALF = 0UL << ETH_MAC_CONFIGURATION_DM_Pos, /**< Half duplex */
 255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_FULL = 1UL << ETH_MAC_CONFIGURATION_DM_Pos  /**< Full duplex */
 256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_LINK_DUPLEX_t;
 257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC address filter
 260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_ADDR_FILTER
 262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE0 = 0x01000000UL, /**< Address filter mask: byte 0 */
 264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE1 = 0x02000000UL, /**< Address filter mask: byte 1 */
 265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE2 = 0x04000000UL, /**< Address filter mask: byte 2 */
 266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE3 = 0x08000000UL, /**< Address filter mask: byte 3 */
 267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE4 = 0x10000000UL, /**< Address filter mask: byte 4 */
 268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE5 = 0x20000000UL, /**< Address filter mask: byte 5 */
 269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_SA         = 0x40000000UL  /**< Address filter SA */
 270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_ADDR_FILTER_t;
 271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Power management events that triggers a PMT interrupt
 274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_PMT_EVENT
 276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_WAKEUP_FRAME         = ETH_PMT_CONTROL_STATUS_RWKPKTEN_Msk,  /**< Wakeup
 278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_MAGIC_PACKET         = ETH_PMT_CONTROL_STATUS_MGKPKTEN_Msk,  /**< Magic 
 279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_UNICAST_FRAME_FILTER = ETH_PMT_CONTROL_STATUS_GLBLUCAST_Msk  /**< Unicas
 280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PMT_EVENT_t;
 281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp configuration enable
 285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_CONFIG
 287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE = ETH_TIMESTAMP_CONTROL_TSCFUPDT_Msk,             /**< F
 289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_TS_INTERRUPT = ETH_TIMESTAMP_CONTROL_TSTRIG_Msk,       /**< T
 290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_ALL_FRAMES = ETH_TIMESTAMP_CONTROL_TSENALL_Msk,        /**< E
 291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTPV2 = ETH_TIMESTAMP_CONTROL_TSVER2ENA_Msk,           /**< P
 292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_ETHERNET = ETH_TIMESTAMP_CONTROL_TSIPENA_Msk, /**< P
 293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV6 = ETH_TIMESTAMP_CONTROL_TSIPV6ENA_Msk,   /**< P
 294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV4 = ETH_TIMESTAMP_CONTROL_TSIPV4ENA_Msk,   /**< P
 295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_MAC_ADDRESS_FILTER = ETH_TIMESTAMP_CONTROL_TSENMACADDR_Msk /*
 296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_CONFIG_t;
 297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time-stamp status
 300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_STATUS
 302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_SECONDS_OVERFLOW = ETH_TIMESTAMP_STATUS_TSSOVF_Msk,           /**< I
 304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIME_REACHED = ETH_TIMESTAMP_STATUS_TSTARGT_Msk,       /**< I
 305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_STATUS_TARGET_TIMER_ERROR = ETH_TIMESTAMP_STATUS_TSTRGTERR_Msk,      /**< S
 306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_STATUS_t;
 307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * DATA STRUCTURES
 311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard start */
 314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma push
 316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma anon_unions
 317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning 586
 319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC port control
 323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef union XMC_ETH_MAC_PORT_CTRL
 325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   struct
 327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd0: 2;     /**< Receive data bit 0 (::XMC_ETH_MAC_PORT_CTRL_RXD0_t) */
 329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd1: 2;     /**< Receive data bit 1 (::XMC_ETH_MAC_PORT_CTRL_RXD1_t) */
 330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd2: 2;     /**< Receive data bit 2 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD2_t) */
 331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxd3: 2;     /**< Receive data bit 3 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD3_t) */
 332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_rmii: 2; /**< RMII: Continuous 50 MHz reference clock.
 333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                MII: Receive clock, 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/s
 334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****                                (::XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t) */
 335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs_dv: 2;   /**< RMII: carrier sense/RX_Data valid. MII: RX_Data valid (::XMC_ETH_MAC
 336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t crs: 2;      /**< Carrier sense for only MII (::XMC_ETH_MAC_PORT_CTRL_CRS_t) */
 337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t rxer: 2;     /**< Receive error (::XMC_ETH_MAC_PORT_CTRL_RXER_t) */
 338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t col: 2;      /**< Collision Detect for only MII (::XMC_ETH_MAC_PORT_CTRL_COL_t) */
 339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t clk_tx: 2;   /**< Transmit clock (only MII), 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/
 340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mdio: 2;     /**< Bidirectional, push-pull management data I/O line (::XMC_ETH_MAC_POR
 342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****     uint32_t mode: 1;     /**< RMII or MII (::XMC_ETH_MAC_PORT_CTRL_MODE_t) */
 344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   };
 345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t raw;
 347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PORT_CTRL_t;
 348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC DMA descriptor
 351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_DMA_DESC
 353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t status;                 /**< DMA descriptor status */
 355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t length;                 /**< Descriptor length */
 356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t buffer1;                /**< Buffer 1 */
 357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t buffer2;                /**< Buffer 2 */
 358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t extended_status;        /**< Extended status */
 359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t reserved;               /**< Reserved */
 360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t time_stamp_nanoseconds; /**< Time stamp low */
 361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   volatile uint32_t time_stamp_seconds;     /**< Time stamp high */
 362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_DMA_DESC_t;
 363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH MAC time
 366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_TIME
 368:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 369:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint32_t seconds;                 /**< Seconds */
 370:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   int32_t nanoseconds;              /**< Nanoseconds */
 371:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIME_t;
 372:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 373:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 374:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * ETH driver structure
 375:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 376:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC
 377:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 378:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH_GLOBAL_TypeDef *regs;        /**< ETH module 0 (now, we have a single ETH module) */
 379:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint64_t address;              /**< MAC address */
 380:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc; /**< DMA descriptor: RX */
 381:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc; /**< DMA descriptor: TX */
 382:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *rx_buf;                /**< RX buffer */
 383:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *tx_buf;                /**< TX buffer */
 384:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t *frame_end;              /**< End of assembled frame fragments */
 385:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_rx_buf;              /**< How many RX descriptors? */
 386:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t num_tx_buf;              /**< How many TX descriptors? */
 387:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_index;                /**< Transmit descriptor index */
 388:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t rx_index;                /**< Receive descriptor index */
 389:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   uint8_t tx_ts_index;             /**< Transmit time-stamp descriptor index */
 390:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** } XMC_ETH_MAC_t;
 391:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 392:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /* Anonymous structure/union guard end */
 393:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 394:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma pop
 395:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 396:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #pragma warning restore
 397:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 398:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 399:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**************************************************************************************************
 400:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * API PROTOTYPES
 401:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  **************************************************************************************************
 402:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 403:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #ifdef __cplusplus
 404:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** extern "C" {
 405:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** #endif
 406:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 407:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 408:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 409:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t Initialization status
 410:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 411:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 412:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral <br>
 413:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 414:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 415:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 416:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 417:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 418:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac);
 419:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 420:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 421:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 422:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 423:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 424:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 425:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral. <br>
 426:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Required when initializing the PHY, to deliver the clocks to the MAC, before MAC is reseted.
 427:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note The module needs to be enabled before using XMC_ETH_MAC_Enable() <br>
 428:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 429:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 430:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 431:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * and loop-back settings.
 432:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 433:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac);
 434:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 435:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 436:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 437:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 438:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 439:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 440:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the RX DMA descriptors <br>
 441:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 442:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 443:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the RX descriptors in a chained configuration. It sets
 444:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 445:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 446:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 447:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 448:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 449:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 450:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 451:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 452:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 453:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Initialize the TX DMA descriptors <br>
 454:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 455:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 456:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function initializes the TX descriptors in a chained configuration. It sets
 457:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 458:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 459:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 460:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  
 461:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 462:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 463:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 464:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 465:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 466:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Enable the Ethernet MAC peripheral <br>
 467:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 468:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 469:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function de-asserts the peripheral reset.
 470:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 471:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac);
 472:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 473:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 474:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 475:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 476:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 477:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 478:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Disable the Ethernet MAC peripheral <br>
 479:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 480:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 481:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function asserts the peripheral reset.
 482:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 483:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac);
 484:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 485:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 486:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 487:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return bool
 488:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 489:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 490:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Check if the ETH MAC is enabled <br>
 491:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 492:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 493:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function checks if the ETH MAC is enabled or not. It returns "true" if the
 494:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * peripheral is enabled, "false" otherwise.
 495:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 496:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** bool XMC_ETH_MAC_IsEnabled(const XMC_ETH_MAC_t *const eth_mac);
 497:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 498:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 499:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 500:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 501:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 502:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 503:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Reset the ETH MAC peripheral <br>
 504:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 505:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 506:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function resets the ETH MAC peripheral. It blocks until reset.
 507:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 508:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
 509:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
  27              	 .loc 1 509 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 510:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
  43              	 .loc 1 510 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 1B68     	 ldr r3,[r3]
  46 000c 7A68     	 ldr r2,[r7,#4]
  47 000e 1268     	 ldr r2,[r2]
  48 0010 02F58052 	 add r2,r2,#4096
  49 0014 1268     	 ldr r2,[r2]
  50 0016 42F00102 	 orr r2,r2,#1
  51 001a 03F58053 	 add r3,r3,#4096
  52 001e 1A60     	 str r2,[r3]
 511:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
  53              	 .loc 1 511 0
  54 0020 00BF     	 nop
  55              	.L2:
  56              	 .loc 1 511 0 is_stmt 0 discriminator 1
  57 0022 7B68     	 ldr r3,[r7,#4]
  58 0024 1B68     	 ldr r3,[r3]
  59 0026 03F58053 	 add r3,r3,#4096
  60 002a 1B68     	 ldr r3,[r3]
  61 002c 03F00103 	 and r3,r3,#1
  62 0030 002B     	 cmp r3,#0
  63 0032 F6D1     	 bne .L2
 512:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   {
 513:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   }
 514:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
  64              	 .loc 1 514 0 is_stmt 1
  65 0034 0C37     	 adds r7,r7,#12
  66              	.LCFI3:
  67              	 .cfi_def_cfa_offset 4
  68 0036 BD46     	 mov sp,r7
  69              	.LCFI4:
  70              	 .cfi_def_cfa_register 13
  71              	 
  72 0038 5DF8047B 	 ldr r7,[sp],#4
  73              	.LCFI5:
  74              	 .cfi_restore 7
  75              	 .cfi_def_cfa_offset 0
  76 003c 7047     	 bx lr
  77              	 .cfi_endproc
  78              	.LFE137:
  80 003e 00BF     	 .section .text.XMC_ETH_MAC_SetAddress,"ax",%progbits
  81              	 .align 2
  82              	 .thumb
  83              	 .thumb_func
  85              	XMC_ETH_MAC_SetAddress:
  86              	.LFB139:
 515:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 516:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 517:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 518:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 519:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 520:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The destination to which the read data needs to be copied to
 521:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 522:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 523:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 524:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Read a PHY register <br>
 525:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 526:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 527:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially polls busy bit during max
 528:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * PHY_TIMEOUT time and reads the information into 'data' when not busy.
 529:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 530:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t re
 531:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 532:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 533:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 534:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 535:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 536:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param data The data to write
 537:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 538:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 539:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 540:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Write a PHY register <br>
 541:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 542:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 543:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially writes the data and polls
 544:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * the busy bit until it is no longer busy.
 545:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 546:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t r
 547:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 548:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 549:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 550:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param port_ctrl Port control configuration
 551:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 552:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 553:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 554:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set port control configuration <br>
 555:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 556:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 557:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the port control by writing the configuration into the
 558:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * CON register.
 559:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 560:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \note
 561:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MII Mode is only available in:
 562:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4500 LQFP144 and BGA144 packages
 563:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4700 LQFP144 and BGA196 packages
 564:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * - XMC4800 LQFP144 and BGA196 packages
 565:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 566:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 567:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_POR
 568:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
 569:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   XMC_UNUSED_ARG(eth_mac);
 570:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 571:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 572:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 573:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 574:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 575:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 576:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 577:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 578:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set management clock divider <br>
 579:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 580:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 581:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the management clock divider by writing to the GMII_ADDRESS
 582:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * register.
 583:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 584:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac);
 585:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** 
 586:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** /**
 587:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 588:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @param addr The MAC address to set
 589:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * @return None
 590:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 591:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 592:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * Set MAC address <br>
 593:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  *
 594:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * \par
 595:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 596:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  * MAC_ADDRESS0_LOW registers.
 597:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****  */
 598:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
 599:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** {
  87              	 .loc 1 599 0
  88              	 .cfi_startproc
  89              	 
  90              	 
  91              	 
  92 0000 B0B4     	 push {r4,r5,r7}
  93              	.LCFI6:
  94              	 .cfi_def_cfa_offset 12
  95              	 .cfi_offset 4,-12
  96              	 .cfi_offset 5,-8
  97              	 .cfi_offset 7,-4
  98 0002 85B0     	 sub sp,sp,#20
  99              	.LCFI7:
 100              	 .cfi_def_cfa_offset 32
 101 0004 00AF     	 add r7,sp,#0
 102              	.LCFI8:
 103              	 .cfi_def_cfa_register 7
 104 0006 F860     	 str r0,[r7,#12]
 105 0008 C7E90023 	 strd r2,[r7]
 600:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 106              	 .loc 1 600 0
 107 000c FB68     	 ldr r3,[r7,#12]
 108 000e 1968     	 ldr r1,[r3]
 109 0010 D7E90023 	 ldrd r2,[r7]
 110 0014 1C00     	 movs r4,r3
 111 0016 0025     	 movs r5,#0
 112 0018 2346     	 mov r3,r4
 113 001a 0B64     	 str r3,[r1,#64]
 601:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 114              	 .loc 1 601 0
 115 001c FB68     	 ldr r3,[r7,#12]
 116 001e 1B68     	 ldr r3,[r3]
 117 0020 3A68     	 ldr r2,[r7]
 118 0022 5A64     	 str r2,[r3,#68]
 602:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc_eth_mac.h **** }
 119              	 .loc 1 602 0
 120 0024 1437     	 adds r7,r7,#20
 121              	.LCFI9:
 122              	 .cfi_def_cfa_offset 12
 123 0026 BD46     	 mov sp,r7
 124              	.LCFI10:
 125              	 .cfi_def_cfa_register 13
 126              	 
 127 0028 B0BC     	 pop {r4,r5,r7}
 128              	.LCFI11:
 129              	 .cfi_restore 7
 130              	 .cfi_restore 5
 131              	 .cfi_restore 4
 132              	 .cfi_def_cfa_offset 0
 133 002a 7047     	 bx lr
 134              	 .cfi_endproc
 135              	.LFE139:
 137              	 .section .text.XMC_SCU_CLOCK_GetSystemClockFrequency,"ax",%progbits
 138              	 .align 2
 139              	 .thumb
 140              	 .thumb_func
 142              	XMC_SCU_CLOCK_GetSystemClockFrequency:
 143              	.LFB214:
 144              	 .file 2 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc/xmc4_scu.h"
   1:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
   2:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @date 2019-02-18
   4:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   5:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @cond
   6:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
   7:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMClib v2.1.24 - XMC Peripheral Driver Library 
   8:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
   9:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  10:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * All rights reserved.                        
  11:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                             
  12:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * following conditions are met:   
  14:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  15:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer.                        
  17:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  18:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  21:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  24:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                                                                              
  32:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  35:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  36:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Change History
  37:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * --------------
  38:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  39:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-06-20:
  40:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Initial version
  41:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  42:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  43:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2015-11-30:
  44:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Documentation improved
  45:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *      
  46:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-03-09:
  47:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  55:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-04-15:
  56:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
  59:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-05-19:
  60:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_IsLowPowerOscillatorStable() and XMC_SCU_CLOCK_IsHighPerformanceOscill
  61:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_WaitForInterrupt() and XMC_SCU_POWER_WaitForEvent()
  62:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(), 
  63:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(),
  64:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus()
  65:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(), 
  66:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(),
  67:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus()
  68:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Removed XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED, XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED
  69:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  70:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-14:
  71:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_IsWakeupEventDetected() and XMC_SCU_HIB_ClearWakeupEventDetectionStatus(
  72:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  73:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2016-06-15:
  74:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_EnterHibernateStateEx() which allows to select between external or inter
  75:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Extended wakeup hibernate events using LPAC wakeup on events. Only available in XMC44, XMC
  76:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added LPAC APIs. Only available in XMC44, XMC42 and XMC41 series.
  77:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  78:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 2019-02-18:
  79:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Fix conditional definition of XMC_SCU_PARITY_t elements
  80:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *     - Added XMC_SCU_PARITY_OverrideParityBitLogic(uint32_t memory)
  81:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_SelectMemoryTest(const XMC_SCU_PARITY_t memory)
  82:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_SetParityWriteValue(uint8_t val)
  83:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *             XMC_SCU_PARITY_GetParityReadValue(void)
  84:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  85:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @endcond 
  86:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
  87:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
  88:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
  89:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  90:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC4_SCU_H
  91:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
  92:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
  93:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * HEADER FILES
  94:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
  95:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
  96:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #include "xmc_common.h"
  97:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
  98:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  99:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
 102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  
 105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @addtogroup SCU
 107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @{
 108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * MACROS
 112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
 114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
 115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
 116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
 118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
 122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
 123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
 124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * ENUMS
 170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU40)
 178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  CCU81 peripheral. */
 200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. 
 207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENDS2_Msk)
 242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENU1_Msk)
 246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENU2_Msk)
 249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENECAT0_Msk)
 267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PARITY_ECAT_MEM = SCU_PARITY_PEEN_PEENECAT0_Msk, /**< ECAT0 SRAM parity error trap. */ 
 268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sup
 281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  
 296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   
 315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 368:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 369:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 370:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 371:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 372:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 373:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 374:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 375:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 376:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 377:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 378:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 379:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 380:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 381:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 382:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 383:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 384:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 385:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 386:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)  
 387:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 388:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 389:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)  
 390:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 391:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 392:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 393:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 394:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 395:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 396:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 397:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 398:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 399:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 400:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 401:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 402:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 403:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 404:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 405:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 406:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 407:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 408:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 409:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 410:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 411:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 412:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 413:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 414:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 415:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 416:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 417:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 418:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 419:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 420:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 421:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 422:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 423:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 424:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 425:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 426:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 427:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 428:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DSD)
 429:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 430:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 431:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 432:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU41)
 433:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 434:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 435:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU42)
 436:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 437:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 438:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU80)
 439:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 440:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 441:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU81)
 442:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 443:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 444:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF0)
 445:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 446:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 447:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(POSIF1)
 448:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 449:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 450:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 451:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 452:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(HRPWM0)
 453:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 454:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 455:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CCU43)
 456:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 457:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 458:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(LEDTS0)
 459:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 460:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 461:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(CAN)
 462:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 463:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 464:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(DAC)  
 465:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 466:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 467:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 468:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 469:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 470:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC1)
 471:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 472:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 473:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USIC2)
 474:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 475:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 476:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 477:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 478:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 479:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 480:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 481:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 482:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(GPDMA1)
 483:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 484:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 485:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(FCE)
 486:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 487:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 488:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 489:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 490:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 491:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
 492:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 493:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 494:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 495:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 496:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 497:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 498:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 499:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 500:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 501:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 502:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock Control Register. 
 503:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 504:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 505:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 506:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 507:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 508:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 509:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 510:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for system clock 
 511:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 512:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 513:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 514:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 515:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. 
 516:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 517:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 518:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 519:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 520:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 521:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 522:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 523:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                              as the source for P-Di
 524:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 525:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 526:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 527:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 528:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 529:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 530:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 531:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 532:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 533:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 534:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 535:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 536:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 537:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 538:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 539:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 540:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
 541:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 542:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 543:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 544:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 545:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 546:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 547:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 548:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 549:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 550:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 551:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 552:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 553:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 554:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 555:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 556:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 557:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 558:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 559:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 560:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 561:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 562:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 563:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 564:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 565:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 566:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 567:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 568:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 569:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 570:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */ 
 571:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 572:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 573:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 574:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             the source for external
 575:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 576:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 577:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 578:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 579:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 580:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 581:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            source for external cloc
 582:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 583:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 584:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 585:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 586:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 587:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 588:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 589:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 590:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 591:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 592:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 593:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 594:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 595:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 596:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 597:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 598:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 599:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 600:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 601:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 602:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 603:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 604:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 605:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 606:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 607:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 608:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 609:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 610:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 611:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 612:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 613:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 614:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 615:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 616:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 617:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 618:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 619:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 620:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 621:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 622:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 623:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 624:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 625:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 626:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 627:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 628:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 629:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 630:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 631:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 632:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 633:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 634:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 635:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            sequence. */
 636:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 637:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 638:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 639:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                            address 0. */
 640:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 641:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             address 1. */
 642:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 643:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 644:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 645:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 646:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 647:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 648:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 649:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 650:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 651:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 652:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 653:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 654:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 655:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 656:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 657:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 658:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 659:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 660:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 661:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 662:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 663:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 664:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 665:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 666:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 667:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 668:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 669:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 670:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  state.
 671:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  
 672:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 673:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 674:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 675:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 676:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 677:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 678:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 679:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 680:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 681:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 682:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 683:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 684:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 685:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 686:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 687:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 688:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 689:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 690:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 691:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 692:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 693:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 694:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 695:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 696:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 697:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 698:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 699:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 700:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 701:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 702:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 703:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 704:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 705:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 706:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  stopped. 
 707:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 708:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 709:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 710:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 711:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 712:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 713:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 714:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 715:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 716:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 717:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 718:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 719:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 720:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 721:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 722:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 723:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(USB0)
 724:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 725:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 726:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 727:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(SDMMC)
 728:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 729:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 730:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 731:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ETH0)
 732:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 733:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 734:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 735:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
 736:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 737:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 738:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 739:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 740:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 741:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 742:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 743:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 744:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 745:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 746:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 747:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 748:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 749:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 750:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 751:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 752:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 753:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 754:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 755:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Define status of external hibernate control  
 756:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 757:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 758:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 759:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 760:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 761:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 762:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 763:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 764:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Hibernate domain event status
 765:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 766:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 767:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 768:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 769:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 770:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 771:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 772:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 773:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE = SCU_HIBERNATE_HDSTAT_VBATPEV_Msk, /**< Wake-up on LPAC posi
 774:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE = SCU_HIBERNATE_HDSTAT_VBATNEV_Msk, /**< Wake-up on LPAC nega
 775:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0PEV_Msk, /**< Wake-up on LP
 776:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO0NEV_Msk, /**< Wake-up on LP
 777:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))
 778:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Msk, /**< Wake-up on LP
 779:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE = SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Msk, /**< Wake-up on LP
 780:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 781:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 782:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 783:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 784:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /** 
 785:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 786:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   */
 787:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 788:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 789:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 790:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 791:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 792:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 793:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 794:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                             @note : Only available in certain packages*/
 795:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 796:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 797:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 798:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 799:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 800:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 801:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 802:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 803:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 804:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 805:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 806:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 807:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 808:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 809:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 810:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 811:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 812:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 813:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 814:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 815:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 816:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 817:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 818:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 819:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 820:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 821:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 822:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 823:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 824:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects hibernate mode
 825:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 826:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_HIBERNATE_MODE
 827:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 828:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL = 0, /**< Request external hibernate mode */
 829:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 830:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL = 1, /**< Request internal hibernate mode. @note Only availab
 831:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 832:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_HIBERNATE_MODE_t;
 833:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 834:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 835:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR0 of ERU0
 836:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 837:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR0_INPUT
 838:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 839:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI0SEL_Msk, /**< Set HIB_SR0 to HIB_IO_0 dig
 840:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 841:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR0 to HIB_IO_1 digital input. @note Only availa
 842:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 843:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 844:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR0_INPUT_ACMP0 = SCU_HIBERNATE_HDCR_ADIG0SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP0. @n
 845:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 846:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR0_INPUT_t;
 847:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 848:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 849:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 850:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100))
 851:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 852:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects input signal HIB_SR1 of ERU0. @note Only available in XMC44 in certain packages.
 853:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 854:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_SR1_INPUT
 855:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 856:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_0 = SCU_HIBERNATE_HDCR_GPI1SEL_Msk, /**< Set HIB_SR1 to HIB_IO_0 dig
 857:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_HIB_IO_1 = 0, /**< Set HIB_SR1 to HIB_IO_1 digital input.  */
 858:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_ACMP1 = SCU_HIBERNATE_HDCR_ADIG1SEL_Msk,  /**< Set HIB_SR0 to LPAC CMP1. */
 859:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_SR1_INPUT_XTAL_GPI = SCU_HIBERNATE_HDCR_XTALGPI1SEL_Msk,  /**< Set HIB_SR0 to RTC_XTA
 860:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_SR1_INPUT_t;
 861:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 862:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 863:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 864:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC input selection
 865:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 866:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_INPUT
 867:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 868:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_DISABLED = 0 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator permanen
 869:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_VBAT = 0x1 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activated 
 870:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_0 = 0x2 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 871:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))      
 872:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_INPUT_HIB_IO_1 = 0x4 << SCU_HIBERNATE_LPACCONF_CMPEN_Pos, /**< Comparator activa
 873:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 874:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_INPUT_t;
 875:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 876:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 877:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC start trigger selection for selected inputs
 878:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 879:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_TRIGGER
 880:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 881:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SUBSECOND_INTERVAL_COUNTER = 0 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /*
 882:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_ALARM_EVENT = 0x1 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC al
 883:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_RTC_PERIODIC_EVENT = 0x2 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< RTC
 884:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_POSITIVE_EDGE_EVENT = 0x3 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 885:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_NEGATIVE_EDGE_EVENT = 0x5 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Po
 886:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_CONTINOUS = 0x6 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Continuous m
 887:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_TRIGGER_SINGLE_SHOT = 0x7 << SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos, /**< Single sho
 888:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_TRIGGER_t;
 889:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 890:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 891:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * HIB LPAC status
 892:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 893:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_LPAC_STATUS
 894:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 895:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_COMPARE_DONE = SCU_HIBERNATE_LPACST_VBATSCMP_Msk, /**< VBAT compare 
 896:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO0SCMP_Msk, /**< HBI_IO
 897:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 898:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_COMPARE_DONE = SCU_HIBERNATE_LPACST_AHIBIO1SCMP_Msk, /**< HBI_IO
 899:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 900:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_VBAT_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_VBATVAL_Msk, /**< VBAT compar
 901:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO0VAL_Msk, /**< HBI_
 902:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (defined(DOXYGEN) || ((UC_SERIES == XMC44) && (UC_PACKAGE == LQFP100)))        
 903:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_ABOVE_THRESHOLD = SCU_HIBERNATE_LPACST_AHIBIO1VAL_Msk, /**< HBI_
 904:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif  
 905:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_HIB_LPAC_STATUS_t;
 906:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 907:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif /* (defined(DOXYGEN) || (UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41)
 908:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 909:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 910:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * DATA STRUCTURES
 911:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 912:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 913:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 914:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 915:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 916:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 917:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 918:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 919:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 920:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 921:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 922:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 923:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 924:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 925:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 926:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 927:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 928:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 929:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 930:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 931:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 932:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 933:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 934:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 935:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 936:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 937:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 938:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 939:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 940:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 941:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 942:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 943:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 944:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 945:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 946:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 947:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 948:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 949:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 950:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Low power modes
 951:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 952:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_MODE_t
 953:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 954:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_SLEEP = 0, /**< sleep mode stops the processor clock */
 955:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   XMC_SCU_POWER_MODE_DEEPSLEEP = SCB_SCR_SLEEPDEEP_Msk /**< deep sleep mode stops the system clock 
 956:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** } XMC_SCU_POWER_MODE_t;
 957:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 958:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**************************************************************************************************
 959:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * API PROTOTYPES
 960:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  **************************************************************************************************
 961:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 962:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #ifdef __cplusplus
 963:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** extern "C" {
 964:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
 965:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 966:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 967:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 968:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 969:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 970:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 971:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 972:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 973:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 974:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 975:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 976:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 977:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 978:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 979:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 980:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 981:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 982:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
 983:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 984:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
 985:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
 986:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
 987:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 988:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 989:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 990:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 991:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 992:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
 993:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
 994:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 995:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 996:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 997:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 998:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 999:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1000:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
1001:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1002:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1003:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1004:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1005:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1006:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
1007:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
1008:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1009:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
1010:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1011:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1012:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
1013:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1014:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1015:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1016:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1017:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1018:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
1019:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
1020:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1021:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
1022:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1023:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1024:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
1025:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1026:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1027:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
1028:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
1029:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
1030:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1031:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1032:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
1033:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
1034:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1035:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1036:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1037:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1038:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
1039:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1040:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1041:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1042:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
1043:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
1044:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
1045:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
1046:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1047:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1048:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1049:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1050:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
1051:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
1052:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a DTSCON register.
1053:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
1054:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
1055:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Offset is considered as a signed value.
1056:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
1057:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
1058:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1059:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1060:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
1061:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1062:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1063:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1064:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1065:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1066:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1067:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
1068:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
1069:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1070:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
1071:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1072:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1073:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
1074:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                           \b Range: \n 
1075:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
1076:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
1077:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
1078:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1079:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1080:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1081:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
1082:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
1083:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1084:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1085:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1086:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1087:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
1088:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * conversion complete.\n
1089:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
1090:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1091:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
1092:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1093:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1094:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
1095:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1096:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1097:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1098:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1099:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
1100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
1101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
1102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
1105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
1106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
1107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
1111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
1114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
1115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
1116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
1119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
1120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
1122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
1124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
1127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
1128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
1129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
1194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  
1246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0 to 15.
1292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \a NMIREQEN register.
1320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1368:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1369:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1370:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1371:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1372:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1373:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1374:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1375:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1376:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1377:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1378:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1379:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1380:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1381:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1382:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1383:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1384:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1385:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1386:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1387:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1388:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1389:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1390:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1391:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1392:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1393:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1394:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1395:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1396:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1397:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1398:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1399:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1400:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1401:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1402:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1403:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1404:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1405:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1406:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1407:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1408:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1409:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1410:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1411:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1412:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1413:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1414:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1415:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1416:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1417:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1418:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1419:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1420:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1421:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1422:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1423:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1424:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1425:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1426:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1427:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1428:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1429:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1430:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1431:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1432:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1433:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1434:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1435:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1436:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1437:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1438:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1439:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1440:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1441:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1442:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1443:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * is in reset state.\n
1444:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1445:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1446:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1447:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1448:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1449:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1450:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1451:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1452:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1453:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1454:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1455:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1456:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1457:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1458:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1459:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1460:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1461:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1462:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1463:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1464:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1465:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * has been enabled.\n
1466:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1467:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1468:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1469:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1470:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1471:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1472:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1473:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1474:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1475:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1476:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1477:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1478:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1479:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1480:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1481:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1482:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1483:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1484:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1485:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1486:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1487:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1488:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  
1489:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1490:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1491:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1492:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1493:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1494:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1495:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1496:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1497:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1498:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1499:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1500:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1501:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1502:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1503:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1504:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1505:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1506:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1507:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1508:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1509:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1510:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1511:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1512:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1513:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1514:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1515:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1516:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1517:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1518:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1519:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1520:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1521:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1522:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1523:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1524:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1525:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1526:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1527:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1528:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1529:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1530:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1531:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1532:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1533:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1534:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1535:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1536:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1537:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1538:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1539:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1540:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1541:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1542:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1543:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1544:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1545:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1546:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1547:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1548:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1549:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1550:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1551:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1552:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1553:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1554:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1555:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1556:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1557:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1558:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1559:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1560:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1561:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1562:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1563:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1564:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1565:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1566:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1567:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1568:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1569:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1570:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1571:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1572:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1573:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1574:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1575:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1576:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1577:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1578:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1579:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1580:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1581:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1582:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1583:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1584:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1585:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1586:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1587:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1588:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1589:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1590:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1591:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1592:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1593:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1594:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1595:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1596:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1597:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1598:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity logic should be overriden.\n
1599:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1600:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1601:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1602:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1603:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1604:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1605:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enable access to parity bits of SRAM modules for various types of peripherals.
1606:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enable direct write to parity bits using value selected using XMC_SCU_PARITY_SetParityWriteValue
1607:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1608:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_SetParityWriteValue() \n\n\n
1609:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1610:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1611:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_OverrideParityBitLogic(uint32_t memory)
1612:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1613:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->MCHKCON = memory;
1614:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1615:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1616:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1617:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity test has to be enabled.\n
1618:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. 
1619:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Only a single memory type should be specified.
1620:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1621:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1622:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1623:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1624:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects parity test output from a memory instance that can be inspected using XMC_SCU_PARITY_Get
1625:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1626:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetParityReadValue() \n\n\n
1627:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1628:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1629:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_SelectMemoryTest(const XMC_SCU_PARITY_t memory)
1630:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1631:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->PMTSR = memory;
1632:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1633:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1634:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1635:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param write_value parity bits value stored with next write access\n
1636:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1637:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None  
1638:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1639:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1640:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * For each byte of a memory module the parity bits corresponding to the next write access are sele
1641:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1642:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1643:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_OverrideParityBitLogic() \n\n\n
1644:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1645:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1646:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_PARITY_SetParityWriteValue(uint8_t write_value)
1647:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1648:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_PARITY->PMTPR = ((write_value << SCU_PARITY_PMTPR_PWR_Pos) & SCU_PARITY_PMTPR_PWR_Msk);
1649:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1650:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1651:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1652:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return parity bits generated during last read access  
1653:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1654:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1655:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * For each byte of a memory module the parity bits generated during the most recent read access ca
1656:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1657:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1658:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_PARITY_OverrideParityBitLogic() \n\n\n
1659:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * 
1660:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1661:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint8_t XMC_SCU_PARITY_GetParityReadValue(void)
1662:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1663:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return ((SCU_PARITY->PMTPR & SCU_PARITY_PMTPR_PRD_Msk) >> SCU_PARITY_PMTPR_PRD_Pos);
1664:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1665:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1666:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1667:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1668:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1669:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1670:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1671:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1672:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1673:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1674:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1675:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1676:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1677:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1678:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1679:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1680:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1681:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1682:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1683:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1684:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1685:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1686:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1687:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1688:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1689:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1690:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1691:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1692:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1693:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1694:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1695:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1696:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1697:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1698:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1699:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1700:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1701:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1702:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1703:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1704:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1705:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1706:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1707:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1708:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1709:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1710:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1711:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1712:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1713:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1714:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1715:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1716:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1717:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1718:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1719:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1720:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1721:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1722:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1723:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1724:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1725:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1726:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1727:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1728:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1729:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1730:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1731:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1732:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1733:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1734:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1735:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1736:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1737:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1738:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1739:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1740:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1741:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1742:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1743:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1744:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1745:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1746:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1747:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1748:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1749:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1750:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1751:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1752:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1753:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1754:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1755:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1756:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1757:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1758:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1759:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1760:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1761:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1762:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1763:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1764:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1765:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1766:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1767:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1768:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1769:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1770:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1771:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1772:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1773:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1774:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1775:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1776:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1777:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1778:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1779:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1780:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1781:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1782:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1783:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1784:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1785:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1786:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1787:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1788:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1789:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
1790:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1791:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1792:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1793:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1794:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1795:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1796:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1797:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1798:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1799:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1800:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1801:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1802:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1803:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1804:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1805:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1806:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1807:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1808:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1809:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1810:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1811:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1812:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1813:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1814:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1815:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1816:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1817:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1818:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1819:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1820:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1821:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1822:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1823:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1824:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the clock source selected.
1825:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1826:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1827:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1828:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1829:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1830:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
1831:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1832:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1833:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1834:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1835:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1836:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1837:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1838:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1839:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1840:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1841:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1842:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1843:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1844:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1845:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1846:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1847:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1848:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1849:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1850:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1851:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1852:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1853:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1854:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1855:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1856:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1857:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1858:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1859:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1860:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1861:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1862:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1863:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1864:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1865:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1866:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1867:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1868:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1869:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1870:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1871:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1872:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1873:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1874:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1875:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1876:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1877:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1878:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1879:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1880:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1881:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1882:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1883:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1884:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1885:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1886:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1887:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
1888:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
1889:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1890:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1891:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1892:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1893:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1894:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1895:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1896:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1897:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1898:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1899:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1900:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1901:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1902:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1903:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1904:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1905:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1906:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1907:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1908:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1909:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1910:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1911:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1912:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1913:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1914:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1915:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1916:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1917:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1918:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1919:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1920:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1921:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1922:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1923:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1924:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1925:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1926:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1927:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1928:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1929:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1930:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1931:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1932:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1933:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1934:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1935:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1936:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1937:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1938:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1939:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1940:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1941:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1942:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1943:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1944:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC42
1945:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1946:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1947:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \if XMC41
1948:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1949:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \endif
1950:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1951:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1952:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1953:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1954:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1955:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1956:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1957:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1958:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1959:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
1960:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1961:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1962:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1963:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1964:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1965:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1966:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1967:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1968:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1969:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
1970:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1971:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1972:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1973:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1974:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1975:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1976:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1977:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1978:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1979:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1980:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1981:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
1982:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1983:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1984:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1985:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1986:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
1987:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1988:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1989:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1990:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1991:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1992:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
1993:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1994:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
1995:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1996:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
1997:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
1998:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0) 
1999:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2000:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2001:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
2002:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
2003:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
2004:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
2005:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2006:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2007:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2008:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2009:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
2010:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
2011:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2012:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
2013:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2014:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
2015:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2016:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
2017:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****                       ((uint32_t)source);
2018:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2019:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2020:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2021:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
2022:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
2023:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
2024:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
2025:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2026:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2027:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
2028:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
2029:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2030:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
2031:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2032:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
2033:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2034:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
2035:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2036:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2037:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2038:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2039:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2040:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
2041:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
2042:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2043:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2044:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2045:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2046:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
2047:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
2048:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * decremented by 1 before configuring.
2049:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2050:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2051:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2052:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
2053:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2054:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2055:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
2056:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
2057:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2058:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2059:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
2060:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
2061:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2062:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2063:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2064:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
2065:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2066:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
2067:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2068:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2069:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2070:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2071:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
2072:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
2073:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
2074:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
2075:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2076:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2077:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2078:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2079:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
2080:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
2081:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
2082:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2083:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2084:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
2085:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2086:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
2087:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2088:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2089:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
2090:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
2091:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
2092:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
2093:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2094:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2095:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
2096:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
2097:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2098:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2099:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
2100:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2101:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
2102:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2103:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
2104:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2105:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2106:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2107:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2108:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
2109:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2110:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
2111:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
2112:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2113:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2114:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2115:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2116:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
2117:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
2118:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2119:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
2120:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2121:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
2122:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2123:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2124:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
2125:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2126:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
2127:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
2128:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2129:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2130:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
2131:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
2132:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2133:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
2134:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2135:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
2136:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2137:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
2138:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2139:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2140:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2141:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2142:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
2143:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
2144:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
2145:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
2146:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2147:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2148:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2149:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2150:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
2151:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
2152:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2153:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2154:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
2155:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2156:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
2157:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2158:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2159:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
2160:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
2161:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
2162:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
2163:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2164:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2165:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
2166:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
2167:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2168:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
2169:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2170:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
2171:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2172:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
2173:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2174:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2175:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2176:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2177:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2178:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
2179:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2180:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2181:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2182:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2183:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
2184:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
2185:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2186:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2187:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
2188:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2189:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
2190:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2191:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2192:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2193:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
2194:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
2195:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2196:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2197:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
2198:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
2199:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2200:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
2201:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2202:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
2203:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2204:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
2205:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2206:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2207:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2208:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2209:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(EBU)
2210:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2211:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2212:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2213:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2214:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2215:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2216:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2217:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2218:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2219:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2220:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2221:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2222:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2223:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2224:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2225:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2226:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2227:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2228:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2229:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2230:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2231:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2232:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2233:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2234:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2235:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2236:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2237:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2238:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2239:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2240:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2241:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2242:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2243:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2244:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2245:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2246:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2247:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2248:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2249:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2250:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2251:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2252:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2253:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2254:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2255:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2256:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2257:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2258:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2259:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2260:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2261:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2262:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2263:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2264:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2265:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2266:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2267:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2268:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the divider value.
2269:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2270:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2271:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2272:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2273:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2274:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2275:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2276:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2277:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2278:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2279:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2280:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2281:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2282:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2283:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2284:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2285:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2286:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2287:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2288:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2289:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2290:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2291:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2292:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2293:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2294:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2295:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2296:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2297:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2298:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2299:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2300:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2301:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2302:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2303:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2304:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2305:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2306:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2307:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2308:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2309:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2310:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2311:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #if defined(ECAT0)
2312:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2313:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2314:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2315:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2316:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2317:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2318:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2319:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2320:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2321:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2322:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2323:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2324:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2325:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2326:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2327:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2328:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2329:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2330:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2331:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2332:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2333:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2334:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2335:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2336:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2337:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2338:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2339:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2340:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
2341:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
2342:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
2343:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** #endif
2344:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2345:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2346:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2347:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2348:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2349:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2350:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2351:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2352:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * external clock input.
2353:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The System Oscillator Watchdog is enabled. The user should check the status 
2354:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable()
2355:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2356:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2357:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2358:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2359:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2360:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2361:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2362:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2363:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2364:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2365:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2366:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * external oscillator. 
2367:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2368:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2369:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2370:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2371:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2372:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2373:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2374:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of high performance oscillator
2375:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2376:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2377:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_HP oscillator is stable and usable
2378:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2379:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2380:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2381:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void);
2382:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2383:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2384:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2385:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2386:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2387:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2388:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2389:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus to monitor the status of
2390:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableHighPerformanceOscillator
2391:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2392:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2393:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2394:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void);
2395:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2396:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2397:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2398:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2399:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2400:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2401:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2402:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2403:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2404:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2405:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void);
2406:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2407:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2408:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2409:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_HP XTAL1 pin
2410:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2411:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2412:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_HP XTAL1 pin.
2413:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2414:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput() \n\n\n
2415:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2416:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void);
2417:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2418:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2419:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2420:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2421:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2422:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2423:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2424:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2425:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2426:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2427:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * are handled internally.
2428:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The OSC_ULP Oscillator Watchdog is enabled. The user should check the status 
2429:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * of the oscillator using XMC_SCU_CLOCK_IsLowPowerOscillatorStable()
2430:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2431:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() 
2432:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_IsLowPowerOscillatorStable() \n\n\n
2433:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2434:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2435:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2436:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2437:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2438:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2439:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2440:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2441:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2442:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2443:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2444:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2445:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2446:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2447:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2448:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2449:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2450:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2451:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status of low power oscillator
2452:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2453:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2454:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Checks if the OSC_ULP oscillator is stable and usable
2455:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2456:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2457:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2458:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void);
2459:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2460:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2461:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2462:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2463:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2464:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2465:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Enables XTAL1 input of OSC_ULP as general purpose input.
2466:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Use XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus to monitor the status of OSC_UL
2467:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @Note OSC_ULP should be disabled previously using XMC_SCU_CLOCK_DisableLowPowerOscillator().
2468:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2469:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2470:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2471:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2472:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2473:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2474:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2475:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void);
2476:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2477:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2478:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2479:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return None
2480:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2481:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2482:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Disables XTAL1 input of OSC_ULP as general purpose input.
2483:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2484:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2485:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \note
2486:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The register update in HIB domain is indicated by the MIRRST register which can be polled using 
2487:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2488:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2489:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2490:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void);
2491:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2492:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2493:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2494:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return Status OSC_ULP XTAL1 pin 
2495:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2496:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2497:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Monitor the status of OSC_ULP XTAL1 pin.
2498:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2499:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput() \n\n\n
2500:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2501:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void);
2502:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2503:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2504:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2505:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2506:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2507:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *            and the configured values of dividers.
2508:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2509:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2510:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2511:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2512:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2513:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2514:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2515:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2516:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2517:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2518:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2519:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2520:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2521:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2522:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2523:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2524:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2525:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2526:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2527:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2528:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2529:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2530:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2531:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2532:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2533:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2534:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2535:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2536:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2537:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2538:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2539:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2540:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2541:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2542:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2543:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2544:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2545:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2546:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2547:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2548:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2549:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2550:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2551:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2552:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2553:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2554:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2555:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2556:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2557:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2558:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2559:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2560:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2561:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2562:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2563:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2564:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2565:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2566:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 145              	 .loc 2 2566 0
 146              	 .cfi_startproc
 147              	 
 148              	 
 149              	 
 150 0000 80B4     	 push {r7}
 151              	.LCFI12:
 152              	 .cfi_def_cfa_offset 4
 153              	 .cfi_offset 7,-4
 154 0002 00AF     	 add r7,sp,#0
 155              	.LCFI13:
 156              	 .cfi_def_cfa_register 7
2567:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 157              	 .loc 2 2567 0
 158 0004 064B     	 ldr r3,.L6
 159 0006 1A68     	 ldr r2,[r3]
 160 0008 064B     	 ldr r3,.L6+4
 161 000a 1B69     	 ldr r3,[r3,#16]
 162 000c 03F00103 	 and r3,r3,#1
 163 0010 02FA03F3 	 lsl r3,r2,r3
2568:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
 164              	 .loc 2 2568 0
 165 0014 1846     	 mov r0,r3
 166 0016 BD46     	 mov sp,r7
 167              	.LCFI14:
 168              	 .cfi_def_cfa_register 13
 169              	 
 170 0018 5DF8047B 	 ldr r7,[sp],#4
 171              	.LCFI15:
 172              	 .cfi_restore 7
 173              	 .cfi_def_cfa_offset 0
 174 001c 7047     	 bx lr
 175              	.L7:
 176 001e 00BF     	 .align 2
 177              	.L6:
 178 0020 00000000 	 .word SystemCoreClock
 179 0024 00460050 	 .word 1342195200
 180              	 .cfi_endproc
 181              	.LFE214:
 183              	 .section .text.XMC_SCU_CLOCK_GetEthernetClockFrequency,"ax",%progbits
 184              	 .align 2
 185              	 .thumb
 186              	 .thumb_func
 188              	XMC_SCU_CLOCK_GetEthernetClockFrequency:
 189              	.LFB215:
2569:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  
2570:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2571:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2572:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2573:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t  CCU clock frequency in Hertz.
2574:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2575:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2576:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of clock(fCPU) used for CCU4, CCU8, POSIF and HRPWM.\n\n
2577:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained from \a CCUDIV bits of \a CCUCLKCR register and system clock (fSYS) freque
2578:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values, fCCU clock frequency is calculated using following formula:\n
2579:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * fCCU = fSYS >> CCUDIV.\n
2580:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2581:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider(), XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2582:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2583:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void);
2584:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2585:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2586:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   USB clock frequency in Hertz.
2587:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2588:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2589:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of USB and SDMMC clock(fUSB/fSDMMC).\n\n
2590:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is obtained from \a USBDIV bits of \a USBCLKCR register and USB clock source.
2591:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Based on these values fUSB/fSDMMC clock frequency is calculated using following formula:\n
2592:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * if USB clock source = USBPLL: fUSB/fSDMMC = fUSBPLL/(USBDIV + 1).\n
2593:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * if USB clock source = PLL:  fUSB/fSDMMC = fPLL/(USBDIV + 1).\n
2594:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2595:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2596:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockSource(), XMC_SCU_CLOCK_GetUsbClockDivider() \n\n\n
2597:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2598:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void); 
2599:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** 
2600:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** /**
2601:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * @return uint32_t   Ethernet clock frequency in Hertz.
2602:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  *
2603:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2604:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * Provides the frequency of Ethernet clock(fETH).\n\n
2605:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * The value is derived from system clock frequency(fSYS). It is calculated using
2606:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * the following formula:\n
2607:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * fETH = fSYS >> 1;
2608:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2609:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2610:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****  */
2611:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
2612:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** {
 190              	 .loc 2 2612 0
 191              	 .cfi_startproc
 192              	 
 193              	 
 194 0000 80B5     	 push {r7,lr}
 195              	.LCFI16:
 196              	 .cfi_def_cfa_offset 8
 197              	 .cfi_offset 7,-8
 198              	 .cfi_offset 14,-4
 199 0002 00AF     	 add r7,sp,#0
 200              	.LCFI17:
 201              	 .cfi_def_cfa_register 7
2613:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h ****   return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 202              	 .loc 2 2613 0
 203 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 204 0008 0346     	 mov r3,r0
 205 000a 5B08     	 lsrs r3,r3,#1
2614:C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/XMCLib/inc\xmc4_scu.h **** }
 206              	 .loc 2 2614 0
 207 000c 1846     	 mov r0,r3
 208 000e 80BD     	 pop {r7,pc}
 209              	 .cfi_endproc
 210              	.LFE215:
 212              	 .section .text.XCM_ETH_MAC_IsNormalEvent,"ax",%progbits
 213              	 .align 2
 214              	 .thumb
 215              	 .thumb_func
 217              	XCM_ETH_MAC_IsNormalEvent:
 218              	.LFB233:
 219              	 .file 3 "../Libraries/XMCLib/src/xmc_eth_mac.c"
   1:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
   2:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
   3:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @file xmc_eth_mac.c
   4:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @date 2018-08-08
   5:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
   6:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * XMClib v2.1.24 - XMC Peripheral Driver Library
   9:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  10:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  19:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  21:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  22:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  37:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  40:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-06-20:
  41:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Initial
  42:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  43:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-09-01:
  44:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add clock gating control in enable/disable APIs
  45:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add transmit polling if run out of buffers
  46:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  47:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-11-30:
  48:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_GetRxFrameSize return value in case of errors
  49:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  50:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-03-16:
  51:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_DisableEvent
  52:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  53:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-05-19:
  54:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_ReturnTxDescriptor and XMC_ETH_MAC_ReturnRxDescriptor
  55:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  56:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-08-30:
  57:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable MMC interrupt events
  58:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  59:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-11-22:
  60:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to optimize access to bus
  61:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  62:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-02-25:
  63:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - XMC_ETH_MAC_Enable() and XMC_ETH_MAC_Disable(), fixed compilation warnings
  64:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  65:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-03-27:
  66:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable PMT and timestamp interrupt events
  67:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  68:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-02:
  69:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_InitPTPEx()
  70:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_SetPTPTime()
  71:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_UpdateAddend() 
  72:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_InitPTP(), XMC_ETH_MAC_UpdatePTPTime(), XMC_ETH_MAC_SetPTPAlarm()
  73:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       - nanoseconds initializazion
  74:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       - added polling to wait for setup
  75:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  76:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-04:
  77:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_Init() to disable MMC IPC receive interrupt events
  78:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  79:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-11:
  80:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_SetPTPAlarm() nanoseconds conversion
  81:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  82:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-17:
  83:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_GetTxTimeStamp() and XMC_ETH_MAC_GetRxTimeStamp() return the timestamp
  84:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  85:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-04-27:
  86:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_GetRxTimeStamp() and XMC_ETH_MAC_GetTxTimeStamp() fixed returned nanosec
  87:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  88:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-08-03:
  89:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Changed XMC_ETH_MAC_InitPTP(), XMC_ETH_MAC_InitPTPEx(), XMC_ETH_MAC_GetPTPTime(), XMC_ETH_
  90:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *       rollover mode of nanosecond counter from binary to digital mode, i.e 1ns resolution
  91:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  92:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2017-09-27:
  93:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Added XMC_ETH_MAC_InitEx()
  94:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - XMC_ETH_MAC_SetAddressEx(), XMC_ETH_MAC_GetAddressEx() and XMC_ETH_MAC_SetAddressPerfectFi
  95:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  96:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2018-06-21:
  97:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fixed XMC_ETH_MAC_SetAddressPerfectFilterEx()
  98:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  99:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2018-08-08:
 100:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *      - Fixed XMC_ETH_MAC_SetVLANTag() which now accepts a 32bit tag parameter that allows settin
 101:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
 102:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @endcond
 103:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 104:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 105:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 106:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * HEADER FILES
 107:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 108:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_eth_mac.h>
 109:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 110:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if defined (ETH0)
 111:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 112:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <stdlib.h>
 113:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_scu.h>
 114:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 115:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 116:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * MACROS
 117:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 118:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 119:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 120:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC clock speed
 121:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 122:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_35MHZ  (35000000U)  /**< ETH MAC clock speed 35 MHZ */
 123:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_60MHZ  (60000000U)  /**< ETH MAC clock speed 60 MHZ */
 124:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_100MHZ (100000000U) /**< ETH MAC clock speed 100 MHZ */
 125:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_150MHZ (150000000U) /**< ETH MAC clock speed 150 MHZ */
 126:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_200MHZ (200000000U) /**< ETH MAC clock speed 200 MHZ */
 127:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_250MHZ (250000000U) /**< ETH MAC clock speed 250 MHZ */
 128:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 129:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 130:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC MDC divider
 131:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 132:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_16  (2U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/16 */
 133:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_26  (3U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/26 */
 134:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_42  (0U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/42 */
 135:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_62  (1U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/62 */
 136:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_102 (4U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/102 *
 137:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_124 (5U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/124 *
 138:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 139:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 140:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 141:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * RDES1 Descriptor RX Packet Control
 142:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 143:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS2 (0x1FFF0000U) /**< Receive buffer 2 size */
 144:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RER  (0x00008000U) /**< Receive end of ring */
 145:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RCH  (0x00004000U) /**< Second address chained */
 146:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS1 (0x00001FFFU) /**< Receive buffer 1 size */
 147:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 148:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 149:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Interrupt masking
 150:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 151:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DISABLE_MMC_INTERRUPT_MSK              (0x03ffffffU) /**< Bit mask to disable MMMC 
 152:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK  (0x3fff3fffU) /**< Bit mask to disable MMC I
 153:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 154:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 155:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Normal MAC events
 156:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 157:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_NORMAL (XMC_ETH_MAC_EVENT_TRANSMIT |\
 158:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |\
 159:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_RECEIVE |\
 160:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_EARLY_RECEIVE)
 161:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 162:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 163:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Abnormal MAC events
 164:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 165:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_ABNORMAL (XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |\
 166:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |\
 167:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |\
 168:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |\
 169:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |\
 170:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |\
 171:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |\
 172:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |\
 173:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_BUS_ERROR)
 174:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 175:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Definition needed in case of device header file previous to v1.5.1*/
 176:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifndef ETH_BUS_MODE_ATDS_Msk
 177:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_BUS_MODE_ATDS_Msk  (0x00000080UL)
 178:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 179:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 180:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Resolution of sub second counter ~ 20ns */
 181:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_SUB_SECOND_UPDATE_FREQ (50000000)
 182:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 183:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 184:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * API IMPLEMENTATION
 185:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 186:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 187:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is a normal event */
 188:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
 189:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 220              	 .loc 3 189 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224              	 
 225 0000 80B4     	 push {r7}
 226              	.LCFI18:
 227              	 .cfi_def_cfa_offset 4
 228              	 .cfi_offset 7,-4
 229 0002 83B0     	 sub sp,sp,#12
 230              	.LCFI19:
 231              	 .cfi_def_cfa_offset 16
 232 0004 00AF     	 add r7,sp,#0
 233              	.LCFI20:
 234              	 .cfi_def_cfa_register 7
 235 0006 7860     	 str r0,[r7,#4]
 190:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 236              	 .loc 3 190 0
 237 0008 7A68     	 ldr r2,[r7,#4]
 238 000a 44F24503 	 movw r3,#16453
 239 000e 1340     	 ands r3,r3,r2
 240 0010 002B     	 cmp r3,#0
 241 0012 14BF     	 ite ne
 242 0014 0123     	 movne r3,#1
 243 0016 0023     	 moveq r3,#0
 244 0018 DBB2     	 uxtb r3,r3
 191:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
 192:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
 193:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
 194:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 245              	 .loc 3 194 0
 246 001a 1846     	 mov r0,r3
 247 001c 0C37     	 adds r7,r7,#12
 248              	.LCFI21:
 249              	 .cfi_def_cfa_offset 4
 250 001e BD46     	 mov sp,r7
 251              	.LCFI22:
 252              	 .cfi_def_cfa_register 13
 253              	 
 254 0020 5DF8047B 	 ldr r7,[sp],#4
 255              	.LCFI23:
 256              	 .cfi_restore 7
 257              	 .cfi_def_cfa_offset 0
 258 0024 7047     	 bx lr
 259              	 .cfi_endproc
 260              	.LFE233:
 262 0026 00BF     	 .section .text.XCM_ETH_MAC_IsAbnormalEvent,"ax",%progbits
 263              	 .align 2
 264              	 .thumb
 265              	 .thumb_func
 267              	XCM_ETH_MAC_IsAbnormalEvent:
 268              	.LFB234:
 195:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 196:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is an abnormal event */
 197:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
 198:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 269              	 .loc 3 198 0
 270              	 .cfi_startproc
 271              	 
 272              	 
 273              	 
 274 0000 80B4     	 push {r7}
 275              	.LCFI24:
 276              	 .cfi_def_cfa_offset 4
 277              	 .cfi_offset 7,-4
 278 0002 83B0     	 sub sp,sp,#12
 279              	.LCFI25:
 280              	 .cfi_def_cfa_offset 16
 281 0004 00AF     	 add r7,sp,#0
 282              	.LCFI26:
 283              	 .cfi_def_cfa_register 7
 284 0006 7860     	 str r0,[r7,#4]
 199:../Libraries/XMCLib/src/xmc_eth_mac.c ****    return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 285              	 .loc 3 199 0
 286 0008 7A68     	 ldr r2,[r7,#4]
 287 000a 42F2BA73 	 movw r3,#10170
 288 000e 1340     	 ands r3,r3,r2
 289 0010 002B     	 cmp r3,#0
 290 0012 14BF     	 ite ne
 291 0014 0123     	 movne r3,#1
 292 0016 0023     	 moveq r3,#0
 293 0018 DBB2     	 uxtb r3,r3
 200:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |
 201:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |
 202:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |
 203:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
 204:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
 205:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
 206:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
 207:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 208:../Libraries/XMCLib/src/xmc_eth_mac.c ****  }
 294              	 .loc 3 208 0
 295 001a 1846     	 mov r0,r3
 296 001c 0C37     	 adds r7,r7,#12
 297              	.LCFI27:
 298              	 .cfi_def_cfa_offset 4
 299 001e BD46     	 mov sp,r7
 300              	.LCFI28:
 301              	 .cfi_def_cfa_register 13
 302              	 
 303 0020 5DF8047B 	 ldr r7,[sp],#4
 304              	.LCFI29:
 305              	 .cfi_restore 7
 306              	 .cfi_def_cfa_offset 0
 307 0024 7047     	 bx lr
 308              	 .cfi_endproc
 309              	.LFE234:
 311 0026 00BF     	 .section .text.XMC_ETH_MAC_InitEx,"ax",%progbits
 312              	 .align 2
 313              	 .global XMC_ETH_MAC_InitEx
 314              	 .thumb
 315              	 .thumb_func
 317              	XMC_ETH_MAC_InitEx:
 318              	.LFB235:
 209:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 210:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifdef XMC_ASSERT_ENABLE 
 211:../Libraries/XMCLib/src/xmc_eth_mac.c ****  
 212:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the passed argument is a valid ETH module */ 
 213:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XMC_ETH_MAC_IsValidModule(ETH_GLOBAL_TypeDef *const eth)
 214:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 215:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth == ETH0);
 216:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 217:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 218:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 219:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 220:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac)
 221:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 319              	 .loc 3 221 0
 320              	 .cfi_startproc
 321              	 
 322              	 
 323 0000 80B5     	 push {r7,lr}
 324              	.LCFI30:
 325              	 .cfi_def_cfa_offset 8
 326              	 .cfi_offset 7,-8
 327              	 .cfi_offset 14,-4
 328 0002 82B0     	 sub sp,sp,#8
 329              	.LCFI31:
 330              	 .cfi_def_cfa_offset 16
 331 0004 00AF     	 add r7,sp,#0
 332              	.LCFI32:
 333              	 .cfi_def_cfa_register 7
 334 0006 7860     	 str r0,[r7,#4]
 222:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 223:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 224:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Reset(eth_mac);
 335              	 .loc 3 224 0
 336 0008 7868     	 ldr r0,[r7,#4]
 337 000a FFF7FEFF 	 bl XMC_ETH_MAC_Reset
 225:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 226:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize MAC configuration */
 227:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 338              	 .loc 3 227 0
 339 000e 7B68     	 ldr r3,[r7,#4]
 340 0010 1B68     	 ldr r3,[r3]
 341 0012 4FF48062 	 mov r2,#1024
 342 0016 1A60     	 str r2,[r3]
 228:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 229:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize Filter registers */
 230:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 343              	 .loc 3 230 0
 344 0018 7B68     	 ldr r3,[r7,#4]
 345 001a 1B68     	 ldr r3,[r3]
 346 001c 8022     	 movs r2,#128
 347 001e 9A61     	 str r2,[r3,#24]
 231:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 232:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 348              	 .loc 3 232 0
 349 0020 7B68     	 ldr r3,[r7,#4]
 350 0022 1B68     	 ldr r3,[r3]
 351 0024 03F58053 	 add r3,r3,#4096
 352 0028 1833     	 adds r3,r3,#24
 353 002a 194A     	 ldr r2,.L15
 354 002c 1A60     	 str r2,[r3]
 233:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
 234:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                              (uint32_t)ETH_OPERATION_MODE_OSF_Msk;
 235:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 236:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full
 237:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->BUS_MODE = (uint32_t)ETH_BUS_MODE_ATDS_Msk |
 355              	 .loc 3 237 0
 356 002e 7B68     	 ldr r3,[r7,#4]
 357 0030 1B68     	 ldr r3,[r3]
 358 0032 03F58053 	 add r3,r3,#4096
 359 0036 174A     	 ldr r2,.L15+4
 360 0038 1A60     	 str r2,[r3]
 238:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts
 239:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)ETH_BUS_MODE_FB_Msk | /* DMA attempts to execute fixed-length Bu
 240:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	                        (uint32_t)(0x20 << ETH_BUS_MODE_PBL_Pos); /* maximum Burst length */
 241:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 242:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize DMA Descriptors */
 243:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 361              	 .loc 3 243 0
 362 003a 7868     	 ldr r0,[r7,#4]
 363 003c FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 244:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 364              	 .loc 3 244 0
 365 0040 7868     	 ldr r0,[r7,#4]
 366 0042 FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 245:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 246:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Clear interrupts */
 247:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 367              	 .loc 3 247 0
 368 0046 7B68     	 ldr r3,[r7,#4]
 369 0048 1B68     	 ldr r3,[r3]
 370 004a 03F58053 	 add r3,r3,#4096
 371 004e 1433     	 adds r3,r3,#20
 372 0050 4FF0FF32 	 mov r2,#-1
 373 0054 1A60     	 str r2,[r3]
 248:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 249:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Disable MMC interrupt events */
 250:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 374              	 .loc 3 250 0
 375 0056 7B68     	 ldr r3,[r7,#4]
 376 0058 1B68     	 ldr r3,[r3]
 377 005a 6FF07C42 	 mvn r2,#-67108864
 378 005e C3F81021 	 str r2,[r3,#272]
 251:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 379              	 .loc 3 251 0
 380 0062 7B68     	 ldr r3,[r7,#4]
 381 0064 1B68     	 ldr r3,[r3]
 382 0066 6FF07C42 	 mvn r2,#-67108864
 383 006a C3F80C21 	 str r2,[r3,#268]
 252:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 384              	 .loc 3 252 0
 385 006e 7B68     	 ldr r3,[r7,#4]
 386 0070 1B68     	 ldr r3,[r3]
 387 0072 6FF0C022 	 mvn r2,#-1073692672
 388 0076 C3F80022 	 str r2,[r3,#512]
 253:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 254:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Disable PMT and timestamp interrupt events */
 255:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK = ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk;
 389              	 .loc 3 255 0
 390 007a 7B68     	 ldr r3,[r7,#4]
 391 007c 1B68     	 ldr r3,[r3]
 392 007e 4FF40272 	 mov r2,#520
 393 0082 DA63     	 str r2,[r3,#60]
 256:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 257:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->frame_end = NULL;
 394              	 .loc 3 257 0
 395 0084 7B68     	 ldr r3,[r7,#4]
 396 0086 0022     	 movs r2,#0
 397 0088 1A62     	 str r2,[r3,#32]
 258:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 398              	 .loc 3 258 0
 399 008a 0837     	 adds r7,r7,#8
 400              	.LCFI33:
 401              	 .cfi_def_cfa_offset 8
 402 008c BD46     	 mov sp,r7
 403              	.LCFI34:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 008e 80BD     	 pop {r7,pc}
 407              	.L16:
 408              	 .align 2
 409              	.L15:
 410 0090 04002002 	 .word 35651588
 411 0094 80200102 	 .word 33628288
 412              	 .cfi_endproc
 413              	.LFE235:
 415              	 .section .text.XMC_ETH_MAC_Init,"ax",%progbits
 416              	 .align 2
 417              	 .global XMC_ETH_MAC_Init
 418              	 .thumb
 419              	 .thumb_func
 421              	XMC_ETH_MAC_Init:
 422              	.LFB236:
 259:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 260:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC initialize */
 261:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
 262:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 423              	 .loc 3 262 0
 424              	 .cfi_startproc
 425              	 
 426              	 
 427 0000 80B5     	 push {r7,lr}
 428              	.LCFI35:
 429              	 .cfi_def_cfa_offset 8
 430              	 .cfi_offset 7,-8
 431              	 .cfi_offset 14,-4
 432 0002 84B0     	 sub sp,sp,#16
 433              	.LCFI36:
 434              	 .cfi_def_cfa_offset 24
 435 0004 00AF     	 add r7,sp,#0
 436              	.LCFI37:
 437              	 .cfi_def_cfa_register 7
 438 0006 7860     	 str r0,[r7,#4]
 263:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 264:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 265:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 266:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 267:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Enable(eth_mac);
 439              	 .loc 3 267 0
 440 0008 7868     	 ldr r0,[r7,#4]
 441 000a FFF7FEFF 	 bl XMC_ETH_MAC_Enable
 268:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 442              	 .loc 3 268 0
 443 000e 7868     	 ldr r0,[r7,#4]
 444 0010 FFF7FEFF 	 bl XMC_ETH_MAC_SetManagmentClockDivider
 445 0014 0346     	 mov r3,r0
 446 0016 FB73     	 strb r3,[r7,#15]
 269:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 270:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitEx(eth_mac);
 447              	 .loc 3 270 0
 448 0018 7868     	 ldr r0,[r7,#4]
 449 001a FFF7FEFF 	 bl XMC_ETH_MAC_InitEx
 271:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 272:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 450              	 .loc 3 272 0
 451 001e 7B68     	 ldr r3,[r7,#4]
 452 0020 D3E90223 	 ldrd r2,[r3,#8]
 453 0024 7868     	 ldr r0,[r7,#4]
 454 0026 FFF7FEFF 	 bl XMC_ETH_MAC_SetAddress
 273:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 274:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 455              	 .loc 3 274 0
 456 002a FB7B     	 ldrb r3,[r7,#15]
 275:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 457              	 .loc 3 275 0
 458 002c 1846     	 mov r0,r3
 459 002e 1037     	 adds r7,r7,#16
 460              	.LCFI38:
 461              	 .cfi_def_cfa_offset 8
 462 0030 BD46     	 mov sp,r7
 463              	.LCFI39:
 464              	 .cfi_def_cfa_register 13
 465              	 
 466 0032 80BD     	 pop {r7,pc}
 467              	 .cfi_endproc
 468              	.LFE236:
 470              	 .section .text.XMC_ETH_MAC_InitRxDescriptors,"ax",%progbits
 471              	 .align 2
 472              	 .global XMC_ETH_MAC_InitRxDescriptors
 473              	 .thumb
 474              	 .thumb_func
 476              	XMC_ETH_MAC_InitRxDescriptors:
 477              	.LFB237:
 276:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 277:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize RX descriptors */
 278:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 279:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 478              	 .loc 3 279 0
 479              	 .cfi_startproc
 480              	 
 481              	 
 482              	 
 483 0000 80B4     	 push {r7}
 484              	.LCFI40:
 485              	 .cfi_def_cfa_offset 4
 486              	 .cfi_offset 7,-4
 487 0002 85B0     	 sub sp,sp,#20
 488              	.LCFI41:
 489              	 .cfi_def_cfa_offset 24
 490 0004 00AF     	 add r7,sp,#0
 491              	.LCFI42:
 492              	 .cfi_def_cfa_register 7
 493 0006 7860     	 str r0,[r7,#4]
 280:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 281:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 282:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 283:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitRxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 284:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 285:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /*
 286:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
 287:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * (buffer2) is the next descriptor address
 288:../Libraries/XMCLib/src/xmc_eth_mac.c ****    */
 289:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 494              	 .loc 3 289 0
 495 0008 0023     	 movs r3,#0
 496 000a FB60     	 str r3,[r7,#12]
 497 000c 37E0     	 b .L20
 498              	.L22:
 290:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 291:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 499              	 .loc 3 291 0
 500 000e 7B68     	 ldr r3,[r7,#4]
 501 0010 1A69     	 ldr r2,[r3,#16]
 502 0012 FB68     	 ldr r3,[r7,#12]
 503 0014 5B01     	 lsls r3,r3,#5
 504 0016 1344     	 add r3,r3,r2
 505 0018 4FF00042 	 mov r2,#-2147483648
 506 001c 1A60     	 str r2,[r3]
 292:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 507              	 .loc 3 292 0
 508 001e 7B68     	 ldr r3,[r7,#4]
 509 0020 1A69     	 ldr r2,[r3,#16]
 510 0022 FB68     	 ldr r3,[r7,#12]
 511 0024 5B01     	 lsls r3,r3,#5
 512 0026 1344     	 add r3,r3,r2
 513 0028 44F2F452 	 movw r2,#17908
 514 002c 5A60     	 str r2,[r3,#4]
 293:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 515              	 .loc 3 293 0
 516 002e 7B68     	 ldr r3,[r7,#4]
 517 0030 1A69     	 ldr r2,[r3,#16]
 518 0032 FB68     	 ldr r3,[r7,#12]
 519 0034 5B01     	 lsls r3,r3,#5
 520 0036 1344     	 add r3,r3,r2
 521 0038 7A68     	 ldr r2,[r7,#4]
 522 003a 9169     	 ldr r1,[r2,#24]
 523 003c FA68     	 ldr r2,[r7,#12]
 524 003e 40F2F450 	 movw r0,#1524
 525 0042 00FB02F2 	 mul r2,r0,r2
 526 0046 0A44     	 add r2,r2,r1
 527 0048 9A60     	 str r2,[r3,#8]
 294:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 528              	 .loc 3 294 0
 529 004a FB68     	 ldr r3,[r7,#12]
 530 004c 0133     	 adds r3,r3,#1
 531 004e BB60     	 str r3,[r7,#8]
 295:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_rx_buf)
 532              	 .loc 3 295 0
 533 0050 7B68     	 ldr r3,[r7,#4]
 534 0052 93F82430 	 ldrb r3,[r3,#36]
 535 0056 1A46     	 mov r2,r3
 536 0058 BB68     	 ldr r3,[r7,#8]
 537 005a 9A42     	 cmp r2,r3
 538 005c 01D1     	 bne .L21
 296:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 297:../Libraries/XMCLib/src/xmc_eth_mac.c ****       next = 0U;
 539              	 .loc 3 297 0
 540 005e 0023     	 movs r3,#0
 541 0060 BB60     	 str r3,[r7,#8]
 542              	.L21:
 298:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 299:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
 543              	 .loc 3 299 0 discriminator 2
 544 0062 7B68     	 ldr r3,[r7,#4]
 545 0064 1A69     	 ldr r2,[r3,#16]
 546 0066 FB68     	 ldr r3,[r7,#12]
 547 0068 5B01     	 lsls r3,r3,#5
 548 006a 1344     	 add r3,r3,r2
 549 006c 7A68     	 ldr r2,[r7,#4]
 550 006e 1169     	 ldr r1,[r2,#16]
 551 0070 BA68     	 ldr r2,[r7,#8]
 552 0072 5201     	 lsls r2,r2,#5
 553 0074 0A44     	 add r2,r2,r1
 554 0076 DA60     	 str r2,[r3,#12]
 289:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 555              	 .loc 3 289 0 discriminator 2
 556 0078 FB68     	 ldr r3,[r7,#12]
 557 007a 0133     	 adds r3,r3,#1
 558 007c FB60     	 str r3,[r7,#12]
 559              	.L20:
 289:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 560              	 .loc 3 289 0 is_stmt 0 discriminator 1
 561 007e 7B68     	 ldr r3,[r7,#4]
 562 0080 93F82430 	 ldrb r3,[r3,#36]
 563 0084 1A46     	 mov r2,r3
 564 0086 FB68     	 ldr r3,[r7,#12]
 565 0088 9A42     	 cmp r2,r3
 566 008a C0D8     	 bhi .L22
 300:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 301:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
 567              	 .loc 3 301 0 is_stmt 1
 568 008c 7B68     	 ldr r3,[r7,#4]
 569 008e 1B68     	 ldr r3,[r3]
 570 0090 7A68     	 ldr r2,[r7,#4]
 571 0092 1269     	 ldr r2,[r2,#16]
 572 0094 03F58053 	 add r3,r3,#4096
 573 0098 0C33     	 adds r3,r3,#12
 574 009a 1A60     	 str r2,[r3]
 302:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index = 0U;
 575              	 .loc 3 302 0
 576 009c 7B68     	 ldr r3,[r7,#4]
 577 009e 0022     	 movs r2,#0
 578 00a0 83F82720 	 strb r2,[r3,#39]
 303:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 579              	 .loc 3 303 0
 580 00a4 1437     	 adds r7,r7,#20
 581              	.LCFI43:
 582              	 .cfi_def_cfa_offset 4
 583 00a6 BD46     	 mov sp,r7
 584              	.LCFI44:
 585              	 .cfi_def_cfa_register 13
 586              	 
 587 00a8 5DF8047B 	 ldr r7,[sp],#4
 588              	.LCFI45:
 589              	 .cfi_restore 7
 590              	 .cfi_def_cfa_offset 0
 591 00ac 7047     	 bx lr
 592              	 .cfi_endproc
 593              	.LFE237:
 595 00ae 00BF     	 .section .text.XMC_ETH_MAC_InitTxDescriptors,"ax",%progbits
 596              	 .align 2
 597              	 .global XMC_ETH_MAC_InitTxDescriptors
 598              	 .thumb
 599              	 .thumb_func
 601              	XMC_ETH_MAC_InitTxDescriptors:
 602              	.LFB238:
 304:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 305:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize TX descriptors */
 306:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 307:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 603              	 .loc 3 307 0
 604              	 .cfi_startproc
 605              	 
 606              	 
 607              	 
 608 0000 80B4     	 push {r7}
 609              	.LCFI46:
 610              	 .cfi_def_cfa_offset 4
 611              	 .cfi_offset 7,-4
 612 0002 85B0     	 sub sp,sp,#20
 613              	.LCFI47:
 614              	 .cfi_def_cfa_offset 24
 615 0004 00AF     	 add r7,sp,#0
 616              	.LCFI48:
 617              	 .cfi_def_cfa_register 7
 618 0006 7860     	 str r0,[r7,#4]
 308:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 309:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 310:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 311:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 312:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 313:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the n
 314:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 619              	 .loc 3 314 0
 620 0008 0023     	 movs r3,#0
 621 000a FB60     	 str r3,[r7,#12]
 622 000c 2EE0     	 b .L24
 623              	.L26:
 315:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 316:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 624              	 .loc 3 316 0
 625 000e 7B68     	 ldr r3,[r7,#4]
 626 0010 5A69     	 ldr r2,[r3,#20]
 627 0012 FB68     	 ldr r3,[r7,#12]
 628 0014 5B01     	 lsls r3,r3,#5
 629 0016 1344     	 add r3,r3,r2
 630 0018 204A     	 ldr r2,.L27
 631 001a 1A60     	 str r2,[r3]
 317:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 632              	 .loc 3 317 0
 633 001c 7B68     	 ldr r3,[r7,#4]
 634 001e 5A69     	 ldr r2,[r3,#20]
 635 0020 FB68     	 ldr r3,[r7,#12]
 636 0022 5B01     	 lsls r3,r3,#5
 637 0024 1344     	 add r3,r3,r2
 638 0026 7A68     	 ldr r2,[r7,#4]
 639 0028 D169     	 ldr r1,[r2,#28]
 640 002a FA68     	 ldr r2,[r7,#12]
 641 002c 40F2F450 	 movw r0,#1524
 642 0030 00FB02F2 	 mul r2,r0,r2
 643 0034 0A44     	 add r2,r2,r1
 644 0036 9A60     	 str r2,[r3,#8]
 318:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 645              	 .loc 3 318 0
 646 0038 FB68     	 ldr r3,[r7,#12]
 647 003a 0133     	 adds r3,r3,#1
 648 003c BB60     	 str r3,[r7,#8]
 319:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_tx_buf)
 649              	 .loc 3 319 0
 650 003e 7B68     	 ldr r3,[r7,#4]
 651 0040 93F82530 	 ldrb r3,[r3,#37]
 652 0044 1A46     	 mov r2,r3
 653 0046 BB68     	 ldr r3,[r7,#8]
 654 0048 9A42     	 cmp r2,r3
 655 004a 01D1     	 bne .L25
 320:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 321:../Libraries/XMCLib/src/xmc_eth_mac.c ****         next = 0U;
 656              	 .loc 3 321 0
 657 004c 0023     	 movs r3,#0
 658 004e BB60     	 str r3,[r7,#8]
 659              	.L25:
 322:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 323:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 660              	 .loc 3 323 0 discriminator 2
 661 0050 7B68     	 ldr r3,[r7,#4]
 662 0052 5A69     	 ldr r2,[r3,#20]
 663 0054 FB68     	 ldr r3,[r7,#12]
 664 0056 5B01     	 lsls r3,r3,#5
 665 0058 1344     	 add r3,r3,r2
 666 005a 7A68     	 ldr r2,[r7,#4]
 667 005c 5169     	 ldr r1,[r2,#20]
 668 005e BA68     	 ldr r2,[r7,#8]
 669 0060 5201     	 lsls r2,r2,#5
 670 0062 0A44     	 add r2,r2,r1
 671 0064 DA60     	 str r2,[r3,#12]
 314:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 672              	 .loc 3 314 0 discriminator 2
 673 0066 FB68     	 ldr r3,[r7,#12]
 674 0068 0133     	 adds r3,r3,#1
 675 006a FB60     	 str r3,[r7,#12]
 676              	.L24:
 314:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 677              	 .loc 3 314 0 is_stmt 0 discriminator 1
 678 006c 7B68     	 ldr r3,[r7,#4]
 679 006e 93F82530 	 ldrb r3,[r3,#37]
 680 0072 1A46     	 mov r2,r3
 681 0074 FB68     	 ldr r3,[r7,#12]
 682 0076 9A42     	 cmp r2,r3
 683 0078 C9D8     	 bhi .L26
 324:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 325:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 684              	 .loc 3 325 0 is_stmt 1
 685 007a 7B68     	 ldr r3,[r7,#4]
 686 007c 1B68     	 ldr r3,[r3]
 687 007e 7A68     	 ldr r2,[r7,#4]
 688 0080 5269     	 ldr r2,[r2,#20]
 689 0082 03F58053 	 add r3,r3,#4096
 690 0086 1033     	 adds r3,r3,#16
 691 0088 1A60     	 str r2,[r3]
 326:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index = 0U;
 692              	 .loc 3 326 0
 693 008a 7B68     	 ldr r3,[r7,#4]
 694 008c 0022     	 movs r2,#0
 695 008e 83F82620 	 strb r2,[r3,#38]
 327:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 696              	 .loc 3 327 0
 697 0092 1437     	 adds r7,r7,#20
 698              	.LCFI49:
 699              	 .cfi_def_cfa_offset 4
 700 0094 BD46     	 mov sp,r7
 701              	.LCFI50:
 702              	 .cfi_def_cfa_register 13
 703              	 
 704 0096 5DF8047B 	 ldr r7,[sp],#4
 705              	.LCFI51:
 706              	 .cfi_restore 7
 707              	 .cfi_def_cfa_offset 0
 708 009a 7047     	 bx lr
 709              	.L28:
 710              	 .align 2
 711              	.L27:
 712 009c 00001030 	 .word 806354944
 713              	 .cfi_endproc
 714              	.LFE238:
 716              	 .section .text.XMC_ETH_MAC_SetAddressEx,"ax",%progbits
 717              	 .align 2
 718              	 .global XMC_ETH_MAC_SetAddressEx
 719              	 .thumb
 720              	 .thumb_func
 722              	XMC_ETH_MAC_SetAddressEx:
 723              	.LFB239:
 328:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 329:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr)
 330:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 724              	 .loc 3 330 0
 725              	 .cfi_startproc
 726              	 
 727              	 
 728              	 
 729 0000 80B4     	 push {r7}
 730              	.LCFI52:
 731              	 .cfi_def_cfa_offset 4
 732              	 .cfi_offset 7,-4
 733 0002 83B0     	 sub sp,sp,#12
 734              	.LCFI53:
 735              	 .cfi_def_cfa_offset 16
 736 0004 00AF     	 add r7,sp,#0
 737              	.LCFI54:
 738              	 .cfi_def_cfa_register 7
 739 0006 7860     	 str r0,[r7,#4]
 740 0008 3960     	 str r1,[r7]
 331:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_ADDRESS0_HIGH = addr[4] | (addr[5] << 8); 
 741              	 .loc 3 331 0
 742 000a 7B68     	 ldr r3,[r7,#4]
 743 000c 1B68     	 ldr r3,[r3]
 744 000e 3A68     	 ldr r2,[r7]
 745 0010 0432     	 adds r2,r2,#4
 746 0012 1278     	 ldrb r2,[r2]
 747 0014 1146     	 mov r1,r2
 748 0016 3A68     	 ldr r2,[r7]
 749 0018 0532     	 adds r2,r2,#5
 750 001a 1278     	 ldrb r2,[r2]
 751 001c 1202     	 lsls r2,r2,#8
 752 001e 0A43     	 orrs r2,r2,r1
 753 0020 1A64     	 str r2,[r3,#64]
 332:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_ADDRESS0_LOW = addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24); 
 754              	 .loc 3 332 0
 755 0022 7B68     	 ldr r3,[r7,#4]
 756 0024 1B68     	 ldr r3,[r3]
 757 0026 3A68     	 ldr r2,[r7]
 758 0028 1278     	 ldrb r2,[r2]
 759 002a 1146     	 mov r1,r2
 760 002c 3A68     	 ldr r2,[r7]
 761 002e 0132     	 adds r2,r2,#1
 762 0030 1278     	 ldrb r2,[r2]
 763 0032 1202     	 lsls r2,r2,#8
 764 0034 1143     	 orrs r1,r1,r2
 765 0036 3A68     	 ldr r2,[r7]
 766 0038 0232     	 adds r2,r2,#2
 767 003a 1278     	 ldrb r2,[r2]
 768 003c 1204     	 lsls r2,r2,#16
 769 003e 1143     	 orrs r1,r1,r2
 770 0040 3A68     	 ldr r2,[r7]
 771 0042 0332     	 adds r2,r2,#3
 772 0044 1278     	 ldrb r2,[r2]
 773 0046 1206     	 lsls r2,r2,#24
 774 0048 0A43     	 orrs r2,r2,r1
 775 004a 5A64     	 str r2,[r3,#68]
 333:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 776              	 .loc 3 333 0
 777 004c 0C37     	 adds r7,r7,#12
 778              	.LCFI55:
 779              	 .cfi_def_cfa_offset 4
 780 004e BD46     	 mov sp,r7
 781              	.LCFI56:
 782              	 .cfi_def_cfa_register 13
 783              	 
 784 0050 5DF8047B 	 ldr r7,[sp],#4
 785              	.LCFI57:
 786              	 .cfi_restore 7
 787              	 .cfi_def_cfa_offset 0
 788 0054 7047     	 bx lr
 789              	 .cfi_endproc
 790              	.LFE239:
 792 0056 00BF     	 .section .text.XMC_ETH_MAC_GetAddressEx,"ax",%progbits
 793              	 .align 2
 794              	 .global XMC_ETH_MAC_GetAddressEx
 795              	 .thumb
 796              	 .thumb_func
 798              	XMC_ETH_MAC_GetAddressEx:
 799              	.LFB240:
 334:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 335:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_GetAddressEx(XMC_ETH_MAC_t *const eth_mac, uint8_t *const addr)
 336:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 800              	 .loc 3 336 0
 801              	 .cfi_startproc
 802              	 
 803              	 
 804              	 
 805 0000 80B4     	 push {r7}
 806              	.LCFI58:
 807              	 .cfi_def_cfa_offset 4
 808              	 .cfi_offset 7,-4
 809 0002 85B0     	 sub sp,sp,#20
 810              	.LCFI59:
 811              	 .cfi_def_cfa_offset 24
 812 0004 00AF     	 add r7,sp,#0
 813              	.LCFI60:
 814              	 .cfi_def_cfa_register 7
 815 0006 7860     	 str r0,[r7,#4]
 816 0008 3960     	 str r1,[r7]
 337:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t low_addr = eth_mac->regs->MAC_ADDRESS0_LOW;
 817              	 .loc 3 337 0
 818 000a 7B68     	 ldr r3,[r7,#4]
 819 000c 1B68     	 ldr r3,[r3]
 820 000e 5B6C     	 ldr r3,[r3,#68]
 821 0010 FB60     	 str r3,[r7,#12]
 338:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t high_addr = eth_mac->regs->MAC_ADDRESS0_HIGH;
 822              	 .loc 3 338 0
 823 0012 7B68     	 ldr r3,[r7,#4]
 824 0014 1B68     	 ldr r3,[r3]
 825 0016 1B6C     	 ldr r3,[r3,#64]
 826 0018 BB60     	 str r3,[r7,#8]
 339:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 340:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[0] = low_addr & 0xff;
 827              	 .loc 3 340 0
 828 001a FB68     	 ldr r3,[r7,#12]
 829 001c DAB2     	 uxtb r2,r3
 830 001e 3B68     	 ldr r3,[r7]
 831 0020 1A70     	 strb r2,[r3]
 341:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[1] = (low_addr >> 8) & 0xff;
 832              	 .loc 3 341 0
 833 0022 3B68     	 ldr r3,[r7]
 834 0024 0133     	 adds r3,r3,#1
 835 0026 FA68     	 ldr r2,[r7,#12]
 836 0028 120A     	 lsrs r2,r2,#8
 837 002a D2B2     	 uxtb r2,r2
 838 002c 1A70     	 strb r2,[r3]
 342:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[2] = (low_addr >> 16) & 0xff;
 839              	 .loc 3 342 0
 840 002e 3B68     	 ldr r3,[r7]
 841 0030 0233     	 adds r3,r3,#2
 842 0032 FA68     	 ldr r2,[r7,#12]
 843 0034 120C     	 lsrs r2,r2,#16
 844 0036 D2B2     	 uxtb r2,r2
 845 0038 1A70     	 strb r2,[r3]
 343:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[3] = (low_addr >> 24) & 0xff;
 846              	 .loc 3 343 0
 847 003a 3B68     	 ldr r3,[r7]
 848 003c 0333     	 adds r3,r3,#3
 849 003e FA68     	 ldr r2,[r7,#12]
 850 0040 120E     	 lsrs r2,r2,#24
 851 0042 D2B2     	 uxtb r2,r2
 852 0044 1A70     	 strb r2,[r3]
 344:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[4] = high_addr & 0xff;
 853              	 .loc 3 344 0
 854 0046 3B68     	 ldr r3,[r7]
 855 0048 0433     	 adds r3,r3,#4
 856 004a BA68     	 ldr r2,[r7,#8]
 857 004c D2B2     	 uxtb r2,r2
 858 004e 1A70     	 strb r2,[r3]
 345:../Libraries/XMCLib/src/xmc_eth_mac.c ****   addr[5] = (high_addr >> 8) & 0xff;
 859              	 .loc 3 345 0
 860 0050 3B68     	 ldr r3,[r7]
 861 0052 0533     	 adds r3,r3,#5
 862 0054 BA68     	 ldr r2,[r7,#8]
 863 0056 120A     	 lsrs r2,r2,#8
 864 0058 D2B2     	 uxtb r2,r2
 865 005a 1A70     	 strb r2,[r3]
 346:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 866              	 .loc 3 346 0
 867 005c 1437     	 adds r7,r7,#20
 868              	.LCFI61:
 869              	 .cfi_def_cfa_offset 4
 870 005e BD46     	 mov sp,r7
 871              	.LCFI62:
 872              	 .cfi_def_cfa_register 13
 873              	 
 874 0060 5DF8047B 	 ldr r7,[sp],#4
 875              	.LCFI63:
 876              	 .cfi_restore 7
 877              	 .cfi_def_cfa_offset 0
 878 0064 7047     	 bx lr
 879              	 .cfi_endproc
 880              	.LFE240:
 882 0066 00BF     	 .section .text.XMC_ETH_MAC_SetAddressPerfectFilter,"ax",%progbits
 883              	 .align 2
 884              	 .global XMC_ETH_MAC_SetAddressPerfectFilter
 885              	 .thumb
 886              	 .thumb_func
 888              	XMC_ETH_MAC_SetAddressPerfectFilter:
 889              	.LFB241:
 347:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 348:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address perfect filter */
 349:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressPerfectFilter(XMC_ETH_MAC_t *const eth_mac,
 350:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          uint8_t index,
 351:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          const uint64_t addr,
 352:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                          uint32_t flags)
 353:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 890              	 .loc 3 353 0
 891              	 .cfi_startproc
 892              	 
 893              	 
 894              	 
 895 0000 B0B4     	 push {r4,r5,r7}
 896              	.LCFI64:
 897              	 .cfi_def_cfa_offset 12
 898              	 .cfi_offset 4,-12
 899              	 .cfi_offset 5,-8
 900              	 .cfi_offset 7,-4
 901 0002 87B0     	 sub sp,sp,#28
 902              	.LCFI65:
 903              	 .cfi_def_cfa_offset 40
 904 0004 00AF     	 add r7,sp,#0
 905              	.LCFI66:
 906              	 .cfi_def_cfa_register 7
 907 0006 F860     	 str r0,[r7,#12]
 908 0008 C7E90023 	 strd r2,[r7]
 909 000c 0B46     	 mov r3,r1
 910 000e FB72     	 strb r3,[r7,#11]
 354:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 355:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 356:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(e
 357:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));
 358:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 359:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 911              	 .loc 3 359 0
 912 0010 FB68     	 ldr r3,[r7,#12]
 913 0012 1B68     	 ldr r3,[r3]
 914 0014 4033     	 adds r3,r3,#64
 915 0016 7B61     	 str r3,[r7,#20]
 360:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = (uint32_t)(addr >> 32U) | flags;
 916              	 .loc 3 360 0
 917 0018 FB7A     	 ldrb r3,[r7,#11]
 918 001a 9B00     	 lsls r3,r3,#2
 919 001c 7A69     	 ldr r2,[r7,#20]
 920 001e D118     	 adds r1,r2,r3
 921 0020 D7E90023 	 ldrd r2,[r7]
 922 0024 1C00     	 movs r4,r3
 923 0026 0025     	 movs r5,#0
 924 0028 2246     	 mov r2,r4
 925 002a BB6A     	 ldr r3,[r7,#40]
 926 002c 1343     	 orrs r3,r3,r2
 927 002e 0B60     	 str r3,[r1]
 361:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index + 1U] = (uint32_t)addr;
 928              	 .loc 3 361 0
 929 0030 FB7A     	 ldrb r3,[r7,#11]
 930 0032 0133     	 adds r3,r3,#1
 931 0034 9B00     	 lsls r3,r3,#2
 932 0036 7A69     	 ldr r2,[r7,#20]
 933 0038 1344     	 add r3,r3,r2
 934 003a 3A68     	 ldr r2,[r7]
 935 003c 1A60     	 str r2,[r3]
 362:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 936              	 .loc 3 362 0
 937 003e 1C37     	 adds r7,r7,#28
 938              	.LCFI67:
 939              	 .cfi_def_cfa_offset 12
 940 0040 BD46     	 mov sp,r7
 941              	.LCFI68:
 942              	 .cfi_def_cfa_register 13
 943              	 
 944 0042 B0BC     	 pop {r4,r5,r7}
 945              	.LCFI69:
 946              	 .cfi_restore 7
 947              	 .cfi_restore 5
 948              	 .cfi_restore 4
 949              	 .cfi_def_cfa_offset 0
 950 0044 7047     	 bx lr
 951              	 .cfi_endproc
 952              	.LFE241:
 954              	 .section .text.XMC_ETH_MAC_SetAddressPerfectFilterEx,"ax",%progbits
 955              	 .align 2
 956              	 .global XMC_ETH_MAC_SetAddressPerfectFilterEx
 957              	 .thumb
 958              	 .thumb_func
 960              	XMC_ETH_MAC_SetAddressPerfectFilterEx:
 961              	.LFB242:
 363:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 364:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressPerfectFilterEx(XMC_ETH_MAC_t *const eth_mac,
 365:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint8_t index,
 366:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint8_t *const addr,
 367:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            uint32_t flags)
 368:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 962              	 .loc 3 368 0
 963              	 .cfi_startproc
 964              	 
 965              	 
 966              	 
 967 0000 80B4     	 push {r7}
 968              	.LCFI70:
 969              	 .cfi_def_cfa_offset 4
 970              	 .cfi_offset 7,-4
 971 0002 87B0     	 sub sp,sp,#28
 972              	.LCFI71:
 973              	 .cfi_def_cfa_offset 32
 974 0004 00AF     	 add r7,sp,#0
 975              	.LCFI72:
 976              	 .cfi_def_cfa_register 7
 977 0006 F860     	 str r0,[r7,#12]
 978 0008 7A60     	 str r2,[r7,#4]
 979 000a 3B60     	 str r3,[r7]
 980 000c 0B46     	 mov r3,r1
 981 000e FB72     	 strb r3,[r7,#11]
 369:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 370:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 371:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(e
 372:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));
 373:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 374:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 982              	 .loc 3 374 0
 983 0010 FB68     	 ldr r3,[r7,#12]
 984 0012 1B68     	 ldr r3,[r3]
 985 0014 4033     	 adds r3,r3,#64
 986 0016 7B61     	 str r3,[r7,#20]
 375:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = addr[4] | (addr[5] << 8) | flags; 
 987              	 .loc 3 375 0
 988 0018 FB7A     	 ldrb r3,[r7,#11]
 989 001a 9B00     	 lsls r3,r3,#2
 990 001c 7A69     	 ldr r2,[r7,#20]
 991 001e 1344     	 add r3,r3,r2
 992 0020 7A68     	 ldr r2,[r7,#4]
 993 0022 0432     	 adds r2,r2,#4
 994 0024 1278     	 ldrb r2,[r2]
 995 0026 1146     	 mov r1,r2
 996 0028 7A68     	 ldr r2,[r7,#4]
 997 002a 0532     	 adds r2,r2,#5
 998 002c 1278     	 ldrb r2,[r2]
 999 002e 1202     	 lsls r2,r2,#8
 1000 0030 0A43     	 orrs r2,r2,r1
 1001 0032 1146     	 mov r1,r2
 1002 0034 3A68     	 ldr r2,[r7]
 1003 0036 0A43     	 orrs r2,r2,r1
 1004 0038 1A60     	 str r2,[r3]
 376:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index + 1U] = addr[0] | (addr[1] << 8) | (addr[2] << 16) | (addr[3] << 24); 
 1005              	 .loc 3 376 0
 1006 003a FB7A     	 ldrb r3,[r7,#11]
 1007 003c 0133     	 adds r3,r3,#1
 1008 003e 9B00     	 lsls r3,r3,#2
 1009 0040 7A69     	 ldr r2,[r7,#20]
 1010 0042 1344     	 add r3,r3,r2
 1011 0044 7A68     	 ldr r2,[r7,#4]
 1012 0046 1278     	 ldrb r2,[r2]
 1013 0048 1146     	 mov r1,r2
 1014 004a 7A68     	 ldr r2,[r7,#4]
 1015 004c 0132     	 adds r2,r2,#1
 1016 004e 1278     	 ldrb r2,[r2]
 1017 0050 1202     	 lsls r2,r2,#8
 1018 0052 1143     	 orrs r1,r1,r2
 1019 0054 7A68     	 ldr r2,[r7,#4]
 1020 0056 0232     	 adds r2,r2,#2
 1021 0058 1278     	 ldrb r2,[r2]
 1022 005a 1204     	 lsls r2,r2,#16
 1023 005c 1143     	 orrs r1,r1,r2
 1024 005e 7A68     	 ldr r2,[r7,#4]
 1025 0060 0332     	 adds r2,r2,#3
 1026 0062 1278     	 ldrb r2,[r2]
 1027 0064 1206     	 lsls r2,r2,#24
 1028 0066 0A43     	 orrs r2,r2,r1
 1029 0068 1A60     	 str r2,[r3]
 377:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1030              	 .loc 3 377 0
 1031 006a 1C37     	 adds r7,r7,#28
 1032              	.LCFI73:
 1033              	 .cfi_def_cfa_offset 4
 1034 006c BD46     	 mov sp,r7
 1035              	.LCFI74:
 1036              	 .cfi_def_cfa_register 13
 1037              	 
 1038 006e 5DF8047B 	 ldr r7,[sp],#4
 1039              	.LCFI75:
 1040              	 .cfi_restore 7
 1041              	 .cfi_def_cfa_offset 0
 1042 0072 7047     	 bx lr
 1043              	 .cfi_endproc
 1044              	.LFE242:
 1046              	 .section .text.XMC_ETH_MAC_SetAddressHashFilter,"ax",%progbits
 1047              	 .align 2
 1048              	 .global XMC_ETH_MAC_SetAddressHashFilter
 1049              	 .thumb
 1050              	 .thumb_func
 1052              	XMC_ETH_MAC_SetAddressHashFilter:
 1053              	.LFB243:
 378:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 379:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address hash filter */
 380:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressHashFilter(XMC_ETH_MAC_t *const eth_mac, const uint64_t hash)
 381:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1054              	 .loc 3 381 0
 1055              	 .cfi_startproc
 1056              	 
 1057              	 
 1058              	 
 1059 0000 B0B4     	 push {r4,r5,r7}
 1060              	.LCFI76:
 1061              	 .cfi_def_cfa_offset 12
 1062              	 .cfi_offset 4,-12
 1063              	 .cfi_offset 5,-8
 1064              	 .cfi_offset 7,-4
 1065 0002 85B0     	 sub sp,sp,#20
 1066              	.LCFI77:
 1067              	 .cfi_def_cfa_offset 32
 1068 0004 00AF     	 add r7,sp,#0
 1069              	.LCFI78:
 1070              	 .cfi_def_cfa_register 7
 1071 0006 F860     	 str r0,[r7,#12]
 1072 0008 C7E90023 	 strd r2,[r7]
 382:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_HIGH = (uint32_t)(hash >> 32);
 1073              	 .loc 3 382 0
 1074 000c FB68     	 ldr r3,[r7,#12]
 1075 000e 1968     	 ldr r1,[r3]
 1076 0010 D7E90023 	 ldrd r2,[r7]
 1077 0014 1C00     	 movs r4,r3
 1078 0016 0025     	 movs r5,#0
 1079 0018 2346     	 mov r3,r4
 1080 001a 8B60     	 str r3,[r1,#8]
 383:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_LOW = (uint32_t)hash;
 1081              	 .loc 3 383 0
 1082 001c FB68     	 ldr r3,[r7,#12]
 1083 001e 1B68     	 ldr r3,[r3]
 1084 0020 3A68     	 ldr r2,[r7]
 1085 0022 DA60     	 str r2,[r3,#12]
 384:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1086              	 .loc 3 384 0
 1087 0024 1437     	 adds r7,r7,#20
 1088              	.LCFI79:
 1089              	 .cfi_def_cfa_offset 12
 1090 0026 BD46     	 mov sp,r7
 1091              	.LCFI80:
 1092              	 .cfi_def_cfa_register 13
 1093              	 
 1094 0028 B0BC     	 pop {r4,r5,r7}
 1095              	.LCFI81:
 1096              	 .cfi_restore 7
 1097              	 .cfi_restore 5
 1098              	 .cfi_restore 4
 1099              	 .cfi_def_cfa_offset 0
 1100 002a 7047     	 bx lr
 1101              	 .cfi_endproc
 1102              	.LFE243:
 1104              	 .section .text.XMC_ETH_MAC_SendFrame,"ax",%progbits
 1105              	 .align 2
 1106              	 .global XMC_ETH_MAC_SendFrame
 1107              	 .thumb
 1108              	 .thumb_func
 1110              	XMC_ETH_MAC_SendFrame:
 1111              	.LFB244:
 385:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 386:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Send frame */
 387:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SendFrame(XMC_ETH_MAC_t *const eth_mac, const uint8_t *frame, uint
 388:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1112              	 .loc 3 388 0
 1113              	 .cfi_startproc
 1114              	 
 1115              	 
 1116 0000 80B5     	 push {r7,lr}
 1117              	.LCFI82:
 1118              	 .cfi_def_cfa_offset 8
 1119              	 .cfi_offset 7,-8
 1120              	 .cfi_offset 14,-4
 1121 0002 88B0     	 sub sp,sp,#32
 1122              	.LCFI83:
 1123              	 .cfi_def_cfa_offset 40
 1124 0004 00AF     	 add r7,sp,#0
 1125              	.LCFI84:
 1126              	 .cfi_def_cfa_register 7
 1127 0006 F860     	 str r0,[r7,#12]
 1128 0008 B960     	 str r1,[r7,#8]
 1129 000a 7A60     	 str r2,[r7,#4]
 1130 000c 3B60     	 str r3,[r7]
 389:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 390:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t *dst;
 391:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t ctrl;
 392:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 393:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac != NULL);
 394:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac->regs == ETH0);
 395:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", (frame != NULL) && (len > 0));
 396:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 397:../Libraries/XMCLib/src/xmc_eth_mac.c ****   dst = eth_mac->frame_end;
 1131              	 .loc 3 397 0
 1132 000e FB68     	 ldr r3,[r7,#12]
 1133 0010 1B6A     	 ldr r3,[r3,#32]
 1134 0012 BB61     	 str r3,[r7,#24]
 398:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 399:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN)
 1135              	 .loc 3 399 0
 1136 0014 FB68     	 ldr r3,[r7,#12]
 1137 0016 5A69     	 ldr r2,[r3,#20]
 1138 0018 FB68     	 ldr r3,[r7,#12]
 1139 001a 93F82630 	 ldrb r3,[r3,#38]
 1140 001e 5B01     	 lsls r3,r3,#5
 1141 0020 1344     	 add r3,r3,r2
 1142 0022 1B68     	 ldr r3,[r3]
 1143 0024 002B     	 cmp r3,#0
 1144 0026 1BDA     	 bge .L35
 400:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 401:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Transmitter is busy, wait */
 402:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 1145              	 .loc 3 402 0
 1146 0028 0123     	 movs r3,#1
 1147 002a FB77     	 strb r3,[r7,#31]
 403:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 1148              	 .loc 3 403 0
 1149 002c FB68     	 ldr r3,[r7,#12]
 1150 002e 1B68     	 ldr r3,[r3]
 1151 0030 03F58053 	 add r3,r3,#4096
 1152 0034 1433     	 adds r3,r3,#20
 1153 0036 1B68     	 ldr r3,[r3]
 1154 0038 03F00403 	 and r3,r3,#4
 1155 003c 002B     	 cmp r3,#0
 1156 003e 00F09E80 	 beq .L37
 404:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 405:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Receive buffer unavailable, resume DMA */
 406:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TU_Msk;
 1157              	 .loc 3 406 0
 1158 0042 FB68     	 ldr r3,[r7,#12]
 1159 0044 1B68     	 ldr r3,[r3]
 1160 0046 03F58053 	 add r3,r3,#4096
 1161 004a 1433     	 adds r3,r3,#20
 1162 004c 0422     	 movs r2,#4
 1163 004e 1A60     	 str r2,[r3]
 407:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 1164              	 .loc 3 407 0
 1165 0050 FB68     	 ldr r3,[r7,#12]
 1166 0052 1B68     	 ldr r3,[r3]
 1167 0054 03F58053 	 add r3,r3,#4096
 1168 0058 0433     	 adds r3,r3,#4
 1169 005a 0022     	 movs r2,#0
 1170 005c 1A60     	 str r2,[r3]
 1171 005e 8EE0     	 b .L37
 1172              	.L35:
 408:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 409:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 410:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 411:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 412:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 413:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (dst == NULL)
 1173              	 .loc 3 413 0
 1174 0060 BB69     	 ldr r3,[r7,#24]
 1175 0062 002B     	 cmp r3,#0
 1176 0064 12D1     	 bne .L38
 414:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 415:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start of a new transmit frame */
 416:../Libraries/XMCLib/src/xmc_eth_mac.c ****       dst = (uint8_t *)eth_mac->tx_desc[eth_mac->tx_index].buffer1;
 1177              	 .loc 3 416 0
 1178 0066 FB68     	 ldr r3,[r7,#12]
 1179 0068 5A69     	 ldr r2,[r3,#20]
 1180 006a FB68     	 ldr r3,[r7,#12]
 1181 006c 93F82630 	 ldrb r3,[r3,#38]
 1182 0070 5B01     	 lsls r3,r3,#5
 1183 0072 1344     	 add r3,r3,r2
 1184 0074 9B68     	 ldr r3,[r3,#8]
 1185 0076 BB61     	 str r3,[r7,#24]
 417:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length = len;
 1186              	 .loc 3 417 0
 1187 0078 FB68     	 ldr r3,[r7,#12]
 1188 007a 5A69     	 ldr r2,[r3,#20]
 1189 007c FB68     	 ldr r3,[r7,#12]
 1190 007e 93F82630 	 ldrb r3,[r3,#38]
 1191 0082 5B01     	 lsls r3,r3,#5
 1192 0084 1344     	 add r3,r3,r2
 1193 0086 7A68     	 ldr r2,[r7,#4]
 1194 0088 5A60     	 str r2,[r3,#4]
 1195 008a 11E0     	 b .L39
 1196              	.L38:
 418:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 419:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 420:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 421:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Sending data fragments in progress */
 422:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length += len;
 1197              	 .loc 3 422 0
 1198 008c FB68     	 ldr r3,[r7,#12]
 1199 008e 5A69     	 ldr r2,[r3,#20]
 1200 0090 FB68     	 ldr r3,[r7,#12]
 1201 0092 93F82630 	 ldrb r3,[r3,#38]
 1202 0096 5B01     	 lsls r3,r3,#5
 1203 0098 1344     	 add r3,r3,r2
 1204 009a FA68     	 ldr r2,[r7,#12]
 1205 009c 5169     	 ldr r1,[r2,#20]
 1206 009e FA68     	 ldr r2,[r7,#12]
 1207 00a0 92F82620 	 ldrb r2,[r2,#38]
 1208 00a4 5201     	 lsls r2,r2,#5
 1209 00a6 0A44     	 add r2,r2,r1
 1210 00a8 5168     	 ldr r1,[r2,#4]
 1211 00aa 7A68     	 ldr r2,[r7,#4]
 1212 00ac 0A44     	 add r2,r2,r1
 1213 00ae 5A60     	 str r2,[r3,#4]
 1214              	.L39:
 423:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 424:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 425:../Libraries/XMCLib/src/xmc_eth_mac.c ****     memcpy(dst, frame, len);
 1215              	 .loc 3 425 0
 1216 00b0 B869     	 ldr r0,[r7,#24]
 1217 00b2 B968     	 ldr r1,[r7,#8]
 1218 00b4 7A68     	 ldr r2,[r7,#4]
 1219 00b6 FFF7FEFF 	 bl memcpy
 426:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 427:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_FRAGMENT)
 1220              	 .loc 3 427 0
 1221 00ba 3B68     	 ldr r3,[r7]
 1222 00bc 03F00103 	 and r3,r3,#1
 1223 00c0 002B     	 cmp r3,#0
 1224 00c2 03D0     	 beq .L40
 428:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 429:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* More data to come, remember current write position */
 430:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = dst;
 1225              	 .loc 3 430 0
 1226 00c4 FB68     	 ldr r3,[r7,#12]
 1227 00c6 BA69     	 ldr r2,[r7,#24]
 1228 00c8 1A62     	 str r2,[r3,#32]
 1229 00ca 56E0     	 b .L41
 1230              	.L40:
 431:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 432:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 433:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 434:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Frame is now ready, send it to DMA */
 435:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl = eth_mac->tx_desc[eth_mac->tx_index].status | ETH_MAC_DMA_TDES0_CIC;
 1231              	 .loc 3 435 0
 1232 00cc FB68     	 ldr r3,[r7,#12]
 1233 00ce 5A69     	 ldr r2,[r3,#20]
 1234 00d0 FB68     	 ldr r3,[r7,#12]
 1235 00d2 93F82630 	 ldrb r3,[r3,#38]
 1236 00d6 5B01     	 lsls r3,r3,#5
 1237 00d8 1344     	 add r3,r3,r2
 1238 00da 1B68     	 ldr r3,[r3]
 1239 00dc 43F44003 	 orr r3,r3,#12582912
 1240 00e0 7B61     	 str r3,[r7,#20]
 436:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl &= ~(ETH_MAC_DMA_TDES0_IC | ETH_MAC_DMA_TDES0_TTSE);
 1241              	 .loc 3 436 0
 1242 00e2 7B69     	 ldr r3,[r7,#20]
 1243 00e4 23F08443 	 bic r3,r3,#1107296256
 1244 00e8 7B61     	 str r3,[r7,#20]
 437:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 438:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_EVENT)
 1245              	 .loc 3 438 0
 1246 00ea 3B68     	 ldr r3,[r7]
 1247 00ec 03F00203 	 and r3,r3,#2
 1248 00f0 002B     	 cmp r3,#0
 1249 00f2 03D0     	 beq .L42
 439:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 440:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl |= ETH_MAC_DMA_TDES0_IC;
 1250              	 .loc 3 440 0
 1251 00f4 7B69     	 ldr r3,[r7,#20]
 1252 00f6 43F08043 	 orr r3,r3,#1073741824
 1253 00fa 7B61     	 str r3,[r7,#20]
 1254              	.L42:
 441:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 442:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 443:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_TIMESTAMP)
 1255              	 .loc 3 443 0
 1256 00fc 3B68     	 ldr r3,[r7]
 1257 00fe 03F00403 	 and r3,r3,#4
 1258 0102 002B     	 cmp r3,#0
 1259 0104 03D0     	 beq .L43
 444:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 445:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl |= ETH_MAC_DMA_TDES0_TTSE;
 1260              	 .loc 3 445 0
 1261 0106 7B69     	 ldr r3,[r7,#20]
 1262 0108 43F00073 	 orr r3,r3,#33554432
 1263 010c 7B61     	 str r3,[r7,#20]
 1264              	.L43:
 446:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 447:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_ts_index = eth_mac->tx_index;
 1265              	 .loc 3 447 0
 1266 010e FB68     	 ldr r3,[r7,#12]
 1267 0110 93F82620 	 ldrb r2,[r3,#38]
 1268 0114 FB68     	 ldr r3,[r7,#12]
 1269 0116 83F82820 	 strb r2,[r3,#40]
 448:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 449:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].status = ctrl | ETH_MAC_DMA_TDES0_OWN;
 1270              	 .loc 3 449 0
 1271 011a FB68     	 ldr r3,[r7,#12]
 1272 011c 5A69     	 ldr r2,[r3,#20]
 1273 011e FB68     	 ldr r3,[r7,#12]
 1274 0120 93F82630 	 ldrb r3,[r3,#38]
 1275 0124 5B01     	 lsls r3,r3,#5
 1276 0126 1344     	 add r3,r3,r2
 1277 0128 7A69     	 ldr r2,[r7,#20]
 1278 012a 42F00042 	 orr r2,r2,#-2147483648
 1279 012e 1A60     	 str r2,[r3]
 450:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 451:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_index++;
 1280              	 .loc 3 451 0
 1281 0130 FB68     	 ldr r3,[r7,#12]
 1282 0132 93F82630 	 ldrb r3,[r3,#38]
 1283 0136 0133     	 adds r3,r3,#1
 1284 0138 DAB2     	 uxtb r2,r3
 1285 013a FB68     	 ldr r3,[r7,#12]
 1286 013c 83F82620 	 strb r2,[r3,#38]
 452:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (eth_mac->tx_index == eth_mac->num_tx_buf)
 1287              	 .loc 3 452 0
 1288 0140 FB68     	 ldr r3,[r7,#12]
 1289 0142 93F82620 	 ldrb r2,[r3,#38]
 1290 0146 FB68     	 ldr r3,[r7,#12]
 1291 0148 93F82530 	 ldrb r3,[r3,#37]
 1292 014c 9A42     	 cmp r2,r3
 1293 014e 03D1     	 bne .L44
 453:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 454:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_index = 0U;
 1294              	 .loc 3 454 0
 1295 0150 FB68     	 ldr r3,[r7,#12]
 1296 0152 0022     	 movs r2,#0
 1297 0154 83F82620 	 strb r2,[r3,#38]
 1298              	.L44:
 455:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 456:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = NULL;
 1299              	 .loc 3 456 0
 1300 0158 FB68     	 ldr r3,[r7,#12]
 1301 015a 0022     	 movs r2,#0
 1302 015c 1A62     	 str r2,[r3,#32]
 457:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 458:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start frame transmission */
 459:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 1303              	 .loc 3 459 0
 1304 015e FB68     	 ldr r3,[r7,#12]
 1305 0160 1B68     	 ldr r3,[r3]
 1306 0162 03F58053 	 add r3,r3,#4096
 1307 0166 1433     	 adds r3,r3,#20
 1308 0168 0222     	 movs r2,#2
 1309 016a 1A60     	 str r2,[r3]
 460:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 1310              	 .loc 3 460 0
 1311 016c FB68     	 ldr r3,[r7,#12]
 1312 016e 1B68     	 ldr r3,[r3]
 1313 0170 03F58053 	 add r3,r3,#4096
 1314 0174 0433     	 adds r3,r3,#4
 1315 0176 0022     	 movs r2,#0
 1316 0178 1A60     	 str r2,[r3]
 1317              	.L41:
 461:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 462:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_OK;
 1318              	 .loc 3 462 0
 1319 017a 0023     	 movs r3,#0
 1320 017c FB77     	 strb r3,[r7,#31]
 1321              	.L37:
 463:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 464:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 465:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 1322              	 .loc 3 465 0
 1323 017e FB7F     	 ldrb r3,[r7,#31]
 466:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1324              	 .loc 3 466 0
 1325 0180 1846     	 mov r0,r3
 1326 0182 2037     	 adds r7,r7,#32
 1327              	.LCFI85:
 1328              	 .cfi_def_cfa_offset 8
 1329 0184 BD46     	 mov sp,r7
 1330              	.LCFI86:
 1331              	 .cfi_def_cfa_register 13
 1332              	 
 1333 0186 80BD     	 pop {r7,pc}
 1334              	 .cfi_endproc
 1335              	.LFE244:
 1337              	 .section .text.XMC_ETH_MAC_ReadFrame,"ax",%progbits
 1338              	 .align 2
 1339              	 .global XMC_ETH_MAC_ReadFrame
 1340              	 .thumb
 1341              	 .thumb_func
 1343              	XMC_ETH_MAC_ReadFrame:
 1344              	.LFB245:
 467:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 468:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read frame */
 469:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_ReadFrame(XMC_ETH_MAC_t *const eth_mac, uint8_t *frame, uint32_t len)
 470:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1345              	 .loc 3 470 0
 1346              	 .cfi_startproc
 1347              	 
 1348              	 
 1349 0000 80B5     	 push {r7,lr}
 1350              	.LCFI87:
 1351              	 .cfi_def_cfa_offset 8
 1352              	 .cfi_offset 7,-8
 1353              	 .cfi_offset 14,-4
 1354 0002 86B0     	 sub sp,sp,#24
 1355              	.LCFI88:
 1356              	 .cfi_def_cfa_offset 32
 1357 0004 00AF     	 add r7,sp,#0
 1358              	.LCFI89:
 1359              	 .cfi_def_cfa_register 7
 1360 0006 F860     	 str r0,[r7,#12]
 1361 0008 B960     	 str r1,[r7,#8]
 1362 000a 7A60     	 str r2,[r7,#4]
 471:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t const *src;
 472:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 473:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac != NULL);
 474:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac->regs == ETH0);
 475:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", (frame != NULL) && (len > 0));
 476:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 477:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fast-copy data to packet buffer */
 478:../Libraries/XMCLib/src/xmc_eth_mac.c ****   src = (uint8_t const *)eth_mac->rx_desc[eth_mac->rx_index].buffer1;
 1363              	 .loc 3 478 0
 1364 000c FB68     	 ldr r3,[r7,#12]
 1365 000e 1A69     	 ldr r2,[r3,#16]
 1366 0010 FB68     	 ldr r3,[r7,#12]
 1367 0012 93F82730 	 ldrb r3,[r3,#39]
 1368 0016 5B01     	 lsls r3,r3,#5
 1369 0018 1344     	 add r3,r3,r2
 1370 001a 9B68     	 ldr r3,[r3,#8]
 1371 001c 7B61     	 str r3,[r7,#20]
 479:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 480:../Libraries/XMCLib/src/xmc_eth_mac.c ****   memcpy(frame, src, len);
 1372              	 .loc 3 480 0
 1373 001e B868     	 ldr r0,[r7,#8]
 1374 0020 7969     	 ldr r1,[r7,#20]
 1375 0022 7A68     	 ldr r2,[r7,#4]
 1376 0024 FFF7FEFF 	 bl memcpy
 481:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 482:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Return this block back to DMA */
 483:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status = ETH_MAC_DMA_RDES0_OWN;
 1377              	 .loc 3 483 0
 1378 0028 FB68     	 ldr r3,[r7,#12]
 1379 002a 1A69     	 ldr r2,[r3,#16]
 1380 002c FB68     	 ldr r3,[r7,#12]
 1381 002e 93F82730 	 ldrb r3,[r3,#39]
 1382 0032 5B01     	 lsls r3,r3,#5
 1383 0034 1344     	 add r3,r3,r2
 1384 0036 4FF00042 	 mov r2,#-2147483648
 1385 003a 1A60     	 str r2,[r3]
 484:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 485:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 1386              	 .loc 3 485 0
 1387 003c FB68     	 ldr r3,[r7,#12]
 1388 003e 93F82730 	 ldrb r3,[r3,#39]
 1389 0042 0133     	 adds r3,r3,#1
 1390 0044 DAB2     	 uxtb r2,r3
 1391 0046 FB68     	 ldr r3,[r7,#12]
 1392 0048 83F82720 	 strb r2,[r3,#39]
 486:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 1393              	 .loc 3 486 0
 1394 004c FB68     	 ldr r3,[r7,#12]
 1395 004e 93F82720 	 ldrb r2,[r3,#39]
 1396 0052 FB68     	 ldr r3,[r7,#12]
 1397 0054 93F82430 	 ldrb r3,[r3,#36]
 1398 0058 9A42     	 cmp r2,r3
 1399 005a 03D1     	 bne .L47
 487:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 488:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_index = 0U;
 1400              	 .loc 3 488 0
 1401 005c FB68     	 ldr r3,[r7,#12]
 1402 005e 0022     	 movs r2,#0
 1403 0060 83F82720 	 strb r2,[r3,#39]
 1404              	.L47:
 489:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 490:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 491:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->regs->STATUS & ETH_STATUS_RU_Msk)
 1405              	 .loc 3 491 0
 1406 0064 FB68     	 ldr r3,[r7,#12]
 1407 0066 1B68     	 ldr r3,[r3]
 1408 0068 03F58053 	 add r3,r3,#4096
 1409 006c 1433     	 adds r3,r3,#20
 1410 006e 1B68     	 ldr r3,[r3]
 1411 0070 03F08003 	 and r3,r3,#128
 1412 0074 002B     	 cmp r3,#0
 1413 0076 0DD0     	 beq .L48
 492:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 493:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Receive buffer unavailable, resume DMA */
 494:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 1414              	 .loc 3 494 0
 1415 0078 FB68     	 ldr r3,[r7,#12]
 1416 007a 1B68     	 ldr r3,[r3]
 1417 007c 03F58053 	 add r3,r3,#4096
 1418 0080 1433     	 adds r3,r3,#20
 1419 0082 8022     	 movs r2,#128
 1420 0084 1A60     	 str r2,[r3]
 495:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 1421              	 .loc 3 495 0
 1422 0086 FB68     	 ldr r3,[r7,#12]
 1423 0088 1B68     	 ldr r3,[r3]
 1424 008a 03F58053 	 add r3,r3,#4096
 1425 008e 0833     	 adds r3,r3,#8
 1426 0090 0022     	 movs r2,#0
 1427 0092 1A60     	 str r2,[r3]
 1428              	.L48:
 496:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 497:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 498:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (len);
 1429              	 .loc 3 498 0
 1430 0094 7B68     	 ldr r3,[r7,#4]
 499:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1431              	 .loc 3 499 0
 1432 0096 1846     	 mov r0,r3
 1433 0098 1837     	 adds r7,r7,#24
 1434              	.LCFI90:
 1435              	 .cfi_def_cfa_offset 8
 1436 009a BD46     	 mov sp,r7
 1437              	.LCFI91:
 1438              	 .cfi_def_cfa_register 13
 1439              	 
 1440 009c 80BD     	 pop {r7,pc}
 1441              	 .cfi_endproc
 1442              	.LFE245:
 1444 009e 00BF     	 .section .text.XMC_ETH_MAC_GetRxFrameSize,"ax",%progbits
 1445              	 .align 2
 1446              	 .global XMC_ETH_MAC_GetRxFrameSize
 1447              	 .thumb
 1448              	 .thumb_func
 1450              	XMC_ETH_MAC_GetRxFrameSize:
 1451              	.LFB246:
 500:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 501:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get RX frame size */
 502:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
 503:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1452              	 .loc 3 503 0
 1453              	 .cfi_startproc
 1454              	 
 1455              	 
 1456              	 
 1457 0000 80B4     	 push {r7}
 1458              	.LCFI92:
 1459              	 .cfi_def_cfa_offset 4
 1460              	 .cfi_offset 7,-4
 1461 0002 85B0     	 sub sp,sp,#20
 1462              	.LCFI93:
 1463              	 .cfi_def_cfa_offset 24
 1464 0004 00AF     	 add r7,sp,#0
 1465              	.LCFI94:
 1466              	 .cfi_def_cfa_register 7
 1467 0006 7860     	 str r0,[r7,#4]
 504:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t status;
 505:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t len = 0U;
 1468              	 .loc 3 505 0
 1469 0008 0023     	 movs r3,#0
 1470 000a FB60     	 str r3,[r7,#12]
 506:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 507:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = eth_mac->rx_desc[eth_mac->rx_index].status;
 1471              	 .loc 3 507 0
 1472 000c 7B68     	 ldr r3,[r7,#4]
 1473 000e 1A69     	 ldr r2,[r3,#16]
 1474 0010 7B68     	 ldr r3,[r7,#4]
 1475 0012 93F82730 	 ldrb r3,[r3,#39]
 1476 0016 5B01     	 lsls r3,r3,#5
 1477 0018 1344     	 add r3,r3,r2
 1478 001a 1B68     	 ldr r3,[r3]
 1479 001c BB60     	 str r3,[r7,#8]
 508:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 509:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (status & ETH_MAC_DMA_RDES0_OWN)
 1480              	 .loc 3 509 0
 1481 001e BB68     	 ldr r3,[r7,#8]
 1482 0020 002B     	 cmp r3,#0
 1483 0022 02DA     	 bge .L51
 510:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 511:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Owned by DMA */
 512:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0U;
 1484              	 .loc 3 512 0
 1485 0024 0023     	 movs r3,#0
 1486 0026 FB60     	 str r3,[r7,#12]
 1487 0028 18E0     	 b .L52
 1488              	.L51:
 513:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 514:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 1489              	 .loc 3 514 0
 1490 002a BB68     	 ldr r3,[r7,#8]
 1491 002c 03F40043 	 and r3,r3,#32768
 1492 0030 002B     	 cmp r3,#0
 1493 0032 09D1     	 bne .L53
 515:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 1494              	 .loc 3 515 0 discriminator 1
 1495 0034 BB68     	 ldr r3,[r7,#8]
 1496 0036 03F40073 	 and r3,r3,#512
 514:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 1497              	 .loc 3 514 0 discriminator 1
 1498 003a 002B     	 cmp r3,#0
 1499 003c 04D0     	 beq .L53
 516:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 1500              	 .loc 3 516 0
 1501 003e BB68     	 ldr r3,[r7,#8]
 1502 0040 03F48073 	 and r3,r3,#256
 515:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 1503              	 .loc 3 515 0
 1504 0044 002B     	 cmp r3,#0
 1505 0046 03D1     	 bne .L54
 1506              	.L53:
 517:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 518:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Error, this block is invalid */
 519:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0xFFFFFFFFU;
 1507              	 .loc 3 519 0
 1508 0048 4FF0FF33 	 mov r3,#-1
 1509 004c FB60     	 str r3,[r7,#12]
 1510 004e 05E0     	 b .L52
 1511              	.L54:
 520:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 521:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else 
 522:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 523:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Subtract CRC */
 524:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 1512              	 .loc 3 524 0
 1513 0050 BA68     	 ldr r2,[r7,#8]
 1514 0052 064B     	 ldr r3,.L56
 1515 0054 1340     	 ands r3,r3,r2
 1516 0056 1B0C     	 lsrs r3,r3,#16
 1517 0058 043B     	 subs r3,r3,#4
 1518 005a FB60     	 str r3,[r7,#12]
 1519              	.L52:
 525:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 526:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 527:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return len;
 1520              	 .loc 3 527 0
 1521 005c FB68     	 ldr r3,[r7,#12]
 528:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1522              	 .loc 3 528 0
 1523 005e 1846     	 mov r0,r3
 1524 0060 1437     	 adds r7,r7,#20
 1525              	.LCFI95:
 1526              	 .cfi_def_cfa_offset 4
 1527 0062 BD46     	 mov sp,r7
 1528              	.LCFI96:
 1529              	 .cfi_def_cfa_register 13
 1530              	 
 1531 0064 5DF8047B 	 ldr r7,[sp],#4
 1532              	.LCFI97:
 1533              	 .cfi_restore 7
 1534              	 .cfi_def_cfa_offset 0
 1535 0068 7047     	 bx lr
 1536              	.L57:
 1537 006a 00BF     	 .align 2
 1538              	.L56:
 1539 006c 0000FF3F 	 .word 1073676288
 1540              	 .cfi_endproc
 1541              	.LFE246:
 1543              	 .section .text.XMC_ETH_MAC_SetManagmentClockDivider,"ax",%progbits
 1544              	 .align 2
 1545              	 .global XMC_ETH_MAC_SetManagmentClockDivider
 1546              	 .thumb
 1547              	 .thumb_func
 1549              	XMC_ETH_MAC_SetManagmentClockDivider:
 1550              	.LFB247:
 529:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 530:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set management clock divider */
 531:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1551              	 .loc 3 532 0
 1552              	 .cfi_startproc
 1553              	 
 1554              	 
 1555 0000 80B5     	 push {r7,lr}
 1556              	.LCFI98:
 1557              	 .cfi_def_cfa_offset 8
 1558              	 .cfi_offset 7,-8
 1559              	 .cfi_offset 14,-4
 1560 0002 86B0     	 sub sp,sp,#24
 1561              	.LCFI99:
 1562              	 .cfi_def_cfa_offset 32
 1563 0004 00AF     	 add r7,sp,#0
 1564              	.LCFI100:
 1565              	 .cfi_def_cfa_register 7
 1566 0006 7860     	 str r0,[r7,#4]
 533:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t eth_mac_clk;
 534:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 535:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 536:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 537:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 1567              	 .loc 3 537 0
 1568 0008 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetEthernetClockFrequency
 1569 000c 3861     	 str r0,[r7,#16]
 538:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_STATUS_OK;
 1570              	 .loc 3 538 0
 1571 000e 0023     	 movs r3,#0
 1572 0010 FB75     	 strb r3,[r7,#23]
 539:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 540:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->GMII_ADDRESS);
 1573              	 .loc 3 540 0
 1574 0012 7B68     	 ldr r3,[r7,#4]
 1575 0014 1B68     	 ldr r3,[r3]
 1576 0016 1033     	 adds r3,r3,#16
 1577 0018 FB60     	 str r3,[r7,#12]
 541:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 1578              	 .loc 3 541 0
 1579 001a 3B69     	 ldr r3,[r7,#16]
 1580 001c 1A4A     	 ldr r2,.L67
 1581 001e 9342     	 cmp r3,r2
 1582 0020 03D8     	 bhi .L59
 542:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 543:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 1583              	 .loc 3 543 0
 1584 0022 FB68     	 ldr r3,[r7,#12]
 1585 0024 0822     	 movs r2,#8
 1586 0026 1A60     	 str r2,[r3]
 1587 0028 29E0     	 b .L60
 1588              	.L59:
 544:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 545:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 1589              	 .loc 3 545 0
 1590 002a 3B69     	 ldr r3,[r7,#16]
 1591 002c 174A     	 ldr r2,.L67+4
 1592 002e 9342     	 cmp r3,r2
 1593 0030 03D8     	 bhi .L61
 546:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 547:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 1594              	 .loc 3 547 0
 1595 0032 FB68     	 ldr r3,[r7,#12]
 1596 0034 0C22     	 movs r2,#12
 1597 0036 1A60     	 str r2,[r3]
 1598 0038 21E0     	 b .L60
 1599              	.L61:
 548:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 549:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 1600              	 .loc 3 549 0
 1601 003a 3B69     	 ldr r3,[r7,#16]
 1602 003c 144A     	 ldr r2,.L67+8
 1603 003e 9342     	 cmp r3,r2
 1604 0040 03D8     	 bhi .L62
 550:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 551:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 1605              	 .loc 3 551 0
 1606 0042 FB68     	 ldr r3,[r7,#12]
 1607 0044 0022     	 movs r2,#0
 1608 0046 1A60     	 str r2,[r3]
 1609 0048 19E0     	 b .L60
 1610              	.L62:
 552:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 553:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 1611              	 .loc 3 553 0
 1612 004a 3B69     	 ldr r3,[r7,#16]
 1613 004c 114A     	 ldr r2,.L67+12
 1614 004e 9342     	 cmp r3,r2
 1615 0050 03D8     	 bhi .L63
 554:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 555:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 1616              	 .loc 3 555 0
 1617 0052 FB68     	 ldr r3,[r7,#12]
 1618 0054 0422     	 movs r2,#4
 1619 0056 1A60     	 str r2,[r3]
 1620 0058 11E0     	 b .L60
 1621              	.L63:
 556:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 557:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 1622              	 .loc 3 557 0
 1623 005a 3B69     	 ldr r3,[r7,#16]
 1624 005c 0E4A     	 ldr r2,.L67+16
 1625 005e 9342     	 cmp r3,r2
 1626 0060 03D8     	 bhi .L64
 558:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 559:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 1627              	 .loc 3 559 0
 1628 0062 FB68     	 ldr r3,[r7,#12]
 1629 0064 1022     	 movs r2,#16
 1630 0066 1A60     	 str r2,[r3]
 1631 0068 09E0     	 b .L60
 1632              	.L64:
 560:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 561:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 1633              	 .loc 3 561 0
 1634 006a 3B69     	 ldr r3,[r7,#16]
 1635 006c 0B4A     	 ldr r2,.L67+20
 1636 006e 9342     	 cmp r3,r2
 1637 0070 03D8     	 bhi .L65
 562:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 563:../Libraries/XMCLib/src/xmc_eth_mac.c ****     *reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 1638              	 .loc 3 563 0
 1639 0072 FB68     	 ldr r3,[r7,#12]
 1640 0074 1422     	 movs r2,#20
 1641 0076 1A60     	 str r2,[r3]
 1642 0078 01E0     	 b .L60
 1643              	.L65:
 564:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 565:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 566:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 567:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_ERROR;
 1644              	 .loc 3 567 0
 1645 007a 0223     	 movs r3,#2
 1646 007c FB75     	 strb r3,[r7,#23]
 1647              	.L60:
 568:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 569:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 570:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 1648              	 .loc 3 570 0
 1649 007e FB7D     	 ldrb r3,[r7,#23]
 571:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1650              	 .loc 3 571 0
 1651 0080 1846     	 mov r0,r3
 1652 0082 1837     	 adds r7,r7,#24
 1653              	.LCFI101:
 1654              	 .cfi_def_cfa_offset 8
 1655 0084 BD46     	 mov sp,r7
 1656              	.LCFI102:
 1657              	 .cfi_def_cfa_register 13
 1658              	 
 1659 0086 80BD     	 pop {r7,pc}
 1660              	.L68:
 1661              	 .align 2
 1662              	.L67:
 1663 0088 C00E1602 	 .word 35000000
 1664 008c 00879303 	 .word 60000000
 1665 0090 00E1F505 	 .word 100000000
 1666 0094 80D1F008 	 .word 150000000
 1667 0098 00C2EB0B 	 .word 200000000
 1668 009c 80B2E60E 	 .word 250000000
 1669              	 .cfi_endproc
 1670              	.LFE247:
 1672              	 .section .text.XMC_ETH_MAC_Enable,"ax",%progbits
 1673              	 .align 2
 1674              	 .global XMC_ETH_MAC_Enable
 1675              	 .thumb
 1676              	 .thumb_func
 1678              	XMC_ETH_MAC_Enable:
 1679              	.LFB248:
 572:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 573:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC enable */
 574:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
 575:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1680              	 .loc 3 575 0
 1681              	 .cfi_startproc
 1682              	 
 1683              	 
 1684 0000 80B5     	 push {r7,lr}
 1685              	.LCFI103:
 1686              	 .cfi_def_cfa_offset 8
 1687              	 .cfi_offset 7,-8
 1688              	 .cfi_offset 14,-4
 1689 0002 82B0     	 sub sp,sp,#8
 1690              	.LCFI104:
 1691              	 .cfi_def_cfa_offset 16
 1692 0004 00AF     	 add r7,sp,#0
 1693              	.LCFI105:
 1694              	 .cfi_def_cfa_register 7
 1695 0006 7860     	 str r0,[r7,#4]
 576:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_UNUSED_ARG(eth_mac);
 577:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 578:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 1696              	 .loc 3 578 0
 1697 0008 0420     	 movs r0,#4
 1698 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
 579:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 580:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 1699              	 .loc 3 580 0
 1700 000e 0448     	 ldr r0,.L70
 1701 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 581:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 582:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 1702              	 .loc 3 582 0
 1703 0014 0248     	 ldr r0,.L70
 1704 0016 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 583:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1705              	 .loc 3 583 0
 1706 001a 0837     	 adds r7,r7,#8
 1707              	.LCFI106:
 1708              	 .cfi_def_cfa_offset 8
 1709 001c BD46     	 mov sp,r7
 1710              	.LCFI107:
 1711              	 .cfi_def_cfa_register 13
 1712              	 
 1713 001e 80BD     	 pop {r7,pc}
 1714              	.L71:
 1715              	 .align 2
 1716              	.L70:
 1717 0020 04000020 	 .word 536870916
 1718              	 .cfi_endproc
 1719              	.LFE248:
 1721              	 .section .text.XMC_ETH_MAC_Disable,"ax",%progbits
 1722              	 .align 2
 1723              	 .global XMC_ETH_MAC_Disable
 1724              	 .thumb
 1725              	 .thumb_func
 1727              	XMC_ETH_MAC_Disable:
 1728              	.LFB249:
 584:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 585:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC disable */
 586:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac)
 587:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1729              	 .loc 3 587 0
 1730              	 .cfi_startproc
 1731              	 
 1732              	 
 1733 0000 80B5     	 push {r7,lr}
 1734              	.LCFI108:
 1735              	 .cfi_def_cfa_offset 8
 1736              	 .cfi_offset 7,-8
 1737              	 .cfi_offset 14,-4
 1738 0002 82B0     	 sub sp,sp,#8
 1739              	.LCFI109:
 1740              	 .cfi_def_cfa_offset 16
 1741 0004 00AF     	 add r7,sp,#0
 1742              	.LCFI110:
 1743              	 .cfi_def_cfa_register 7
 1744 0006 7860     	 str r0,[r7,#4]
 588:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_UNUSED_ARG(eth_mac);
 589:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 590:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 1745              	 .loc 3 590 0
 1746 0008 0548     	 ldr r0,.L73
 1747 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 591:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 592:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 1748              	 .loc 3 592 0
 1749 000e 0448     	 ldr r0,.L73
 1750 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 593:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 594:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
 1751              	 .loc 3 594 0
 1752 0014 0420     	 movs r0,#4
 1753 0016 FFF7FEFF 	 bl XMC_SCU_CLOCK_DisableClock
 595:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1754              	 .loc 3 595 0
 1755 001a 0837     	 adds r7,r7,#8
 1756              	.LCFI111:
 1757              	 .cfi_def_cfa_offset 8
 1758 001c BD46     	 mov sp,r7
 1759              	.LCFI112:
 1760              	 .cfi_def_cfa_register 13
 1761              	 
 1762 001e 80BD     	 pop {r7,pc}
 1763              	.L74:
 1764              	 .align 2
 1765              	.L73:
 1766 0020 04000020 	 .word 536870916
 1767              	 .cfi_endproc
 1768              	.LFE249:
 1770              	 .section .text.XMC_ETH_MAC_ReadPhy,"ax",%progbits
 1771              	 .align 2
 1772              	 .global XMC_ETH_MAC_ReadPhy
 1773              	 .thumb
 1774              	 .thumb_func
 1776              	XMC_ETH_MAC_ReadPhy:
 1777              	.LFB250:
 596:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 597:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read physical layer and obtain status */
 598:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr
 599:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1778              	 .loc 3 599 0
 1779              	 .cfi_startproc
 1780              	 
 1781              	 
 1782              	 
 1783 0000 80B4     	 push {r7}
 1784              	.LCFI113:
 1785              	 .cfi_def_cfa_offset 4
 1786              	 .cfi_offset 7,-4
 1787 0002 87B0     	 sub sp,sp,#28
 1788              	.LCFI114:
 1789              	 .cfi_def_cfa_offset 32
 1790 0004 00AF     	 add r7,sp,#0
 1791              	.LCFI115:
 1792              	 .cfi_def_cfa_register 7
 1793 0006 F860     	 str r0,[r7,#12]
 1794 0008 7B60     	 str r3,[r7,#4]
 1795 000a 0B46     	 mov r3,r1
 1796 000c FB72     	 strb r3,[r7,#11]
 1797 000e 1346     	 mov r3,r2
 1798 0010 BB72     	 strb r3,[r7,#10]
 600:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 601:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 602:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);
 603:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 604:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1799              	 .loc 3 604 0
 1800 0012 FB68     	 ldr r3,[r7,#12]
 1801 0014 1B68     	 ldr r3,[r3]
 1802 0016 FA68     	 ldr r2,[r7,#12]
 1803 0018 1268     	 ldr r2,[r2]
 1804 001a 1269     	 ldr r2,[r2,#16]
 1805 001c 02F03C01 	 and r1,r2,#60
 605:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 606:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 1806              	 .loc 3 606 0
 1807 0020 FA7A     	 ldrb r2,[r7,#11]
 1808 0022 D202     	 lsls r2,r2,#11
 605:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 1809              	 .loc 3 605 0
 1810 0024 1143     	 orrs r1,r1,r2
 607:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 1811              	 .loc 3 607 0
 1812 0026 BA7A     	 ldrb r2,[r7,#10]
 1813 0028 9201     	 lsls r2,r2,#6
 604:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 1814              	 .loc 3 604 0
 1815 002a 0A43     	 orrs r2,r2,r1
 1816 002c 42F00102 	 orr r2,r2,#1
 1817 0030 1A61     	 str r2,[r3,#16]
 608:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 609:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll busy bit during max PHY_TIMEOUT time */
 610:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 1818              	 .loc 3 610 0
 1819 0032 0023     	 movs r3,#0
 1820 0034 7B61     	 str r3,[r7,#20]
 1821              	.L78:
 611:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 612:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 613:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1822              	 .loc 3 613 0
 1823 0036 FB68     	 ldr r3,[r7,#12]
 1824 0038 1B68     	 ldr r3,[r3]
 1825 003a 1B69     	 ldr r3,[r3,#16]
 1826 003c 03F00103 	 and r3,r3,#1
 1827 0040 002B     	 cmp r3,#0
 1828 0042 07D1     	 bne .L76
 614:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 615:../Libraries/XMCLib/src/xmc_eth_mac.c ****       *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 1829              	 .loc 3 615 0
 1830 0044 FB68     	 ldr r3,[r7,#12]
 1831 0046 1B68     	 ldr r3,[r3]
 1832 0048 5B69     	 ldr r3,[r3,#20]
 1833 004a 9AB2     	 uxth r2,r3
 1834 004c 7B68     	 ldr r3,[r7,#4]
 1835 004e 1A80     	 strh r2,[r3]
 616:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 1836              	 .loc 3 616 0
 1837 0050 0023     	 movs r3,#0
 1838 0052 08E0     	 b .L77
 1839              	.L76:
 617:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 618:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 1840              	 .loc 3 618 0
 1841 0054 7B69     	 ldr r3,[r7,#20]
 1842 0056 0133     	 adds r3,r3,#1
 1843 0058 7B61     	 str r3,[r7,#20]
 619:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1844              	 .loc 3 619 0
 1845 005a 7B69     	 ldr r3,[r7,#20]
 1846 005c 4FF6FE72 	 movw r2,#65534
 1847 0060 9342     	 cmp r3,r2
 1848 0062 E8D9     	 bls .L78
 620:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 621:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1849              	 .loc 3 621 0
 1850 0064 0223     	 movs r3,#2
 1851              	.L77:
 622:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1852              	 .loc 3 622 0
 1853 0066 1846     	 mov r0,r3
 1854 0068 1C37     	 adds r7,r7,#28
 1855              	.LCFI116:
 1856              	 .cfi_def_cfa_offset 4
 1857 006a BD46     	 mov sp,r7
 1858              	.LCFI117:
 1859              	 .cfi_def_cfa_register 13
 1860              	 
 1861 006c 5DF8047B 	 ldr r7,[sp],#4
 1862              	.LCFI118:
 1863              	 .cfi_restore 7
 1864              	 .cfi_def_cfa_offset 0
 1865 0070 7047     	 bx lr
 1866              	 .cfi_endproc
 1867              	.LFE250:
 1869 0072 00BF     	 .section .text.XMC_ETH_MAC_WritePhy,"ax",%progbits
 1870              	 .align 2
 1871              	 .global XMC_ETH_MAC_WritePhy
 1872              	 .thumb
 1873              	 .thumb_func
 1875              	XMC_ETH_MAC_WritePhy:
 1876              	.LFB251:
 623:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 624:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Write physical layer and return status */
 625:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_add
 626:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1877              	 .loc 3 626 0
 1878              	 .cfi_startproc
 1879              	 
 1880              	 
 1881              	 
 1882 0000 80B4     	 push {r7}
 1883              	.LCFI119:
 1884              	 .cfi_def_cfa_offset 4
 1885              	 .cfi_offset 7,-4
 1886 0002 85B0     	 sub sp,sp,#20
 1887              	.LCFI120:
 1888              	 .cfi_def_cfa_offset 24
 1889 0004 00AF     	 add r7,sp,#0
 1890              	.LCFI121:
 1891              	 .cfi_def_cfa_register 7
 1892 0006 7860     	 str r0,[r7,#4]
 1893 0008 0846     	 mov r0,r1
 1894 000a 1146     	 mov r1,r2
 1895 000c 1A46     	 mov r2,r3
 1896 000e 0346     	 mov r3,r0
 1897 0010 FB70     	 strb r3,[r7,#3]
 1898 0012 0B46     	 mov r3,r1
 1899 0014 BB70     	 strb r3,[r7,#2]
 1900 0016 1346     	 mov r3,r2
 1901 0018 3B80     	 strh r3,[r7]
 627:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 628:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 629:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_DATA  = data;
 1902              	 .loc 3 629 0
 1903 001a 7B68     	 ldr r3,[r7,#4]
 1904 001c 1B68     	 ldr r3,[r3]
 1905 001e 3A88     	 ldrh r2,[r7]
 1906 0020 5A61     	 str r2,[r3,#20]
 630:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1907              	 .loc 3 630 0
 1908 0022 7B68     	 ldr r3,[r7,#4]
 1909 0024 1B68     	 ldr r3,[r3]
 1910 0026 7A68     	 ldr r2,[r7,#4]
 1911 0028 1268     	 ldr r2,[r2]
 1912 002a 1269     	 ldr r2,[r2,#16]
 1913 002c 02F03C01 	 and r1,r2,#60
 631:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 632:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 633:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 1914              	 .loc 3 633 0
 1915 0030 FA78     	 ldrb r2,[r7,#3]
 1916 0032 D202     	 lsls r2,r2,#11
 632:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 1917              	 .loc 3 632 0
 1918 0034 1143     	 orrs r1,r1,r2
 634:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 1919              	 .loc 3 634 0
 1920 0036 BA78     	 ldrb r2,[r7,#2]
 1921 0038 9201     	 lsls r2,r2,#6
 630:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 1922              	 .loc 3 630 0
 1923 003a 0A43     	 orrs r2,r2,r1
 1924 003c 42F00302 	 orr r2,r2,#3
 1925 0040 1A61     	 str r2,[r3,#16]
 635:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 636:../Libraries/XMCLib/src/xmc_eth_mac.c ****    /* Poll busy bit during max PHY_TIMEOUT time */
 637:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 1926              	 .loc 3 637 0
 1927 0042 0023     	 movs r3,#0
 1928 0044 FB60     	 str r3,[r7,#12]
 1929              	.L82:
 638:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 639:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 640:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1930              	 .loc 3 640 0
 1931 0046 7B68     	 ldr r3,[r7,#4]
 1932 0048 1B68     	 ldr r3,[r3]
 1933 004a 1B69     	 ldr r3,[r3,#16]
 1934 004c 03F00103 	 and r3,r3,#1
 1935 0050 002B     	 cmp r3,#0
 1936 0052 01D1     	 bne .L80
 641:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 642:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 1937              	 .loc 3 642 0
 1938 0054 0023     	 movs r3,#0
 1939 0056 08E0     	 b .L81
 1940              	.L80:
 643:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 644:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 1941              	 .loc 3 644 0
 1942 0058 FB68     	 ldr r3,[r7,#12]
 1943 005a 0133     	 adds r3,r3,#1
 1944 005c FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1945              	 .loc 3 645 0
 1946 005e FB68     	 ldr r3,[r7,#12]
 1947 0060 4FF6FE72 	 movw r2,#65534
 1948 0064 9342     	 cmp r3,r2
 1949 0066 EED9     	 bls .L82
 646:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 647:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1950              	 .loc 3 647 0
 1951 0068 0223     	 movs r3,#2
 1952              	.L81:
 648:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1953              	 .loc 3 648 0
 1954 006a 1846     	 mov r0,r3
 1955 006c 1437     	 adds r7,r7,#20
 1956              	.LCFI122:
 1957              	 .cfi_def_cfa_offset 4
 1958 006e BD46     	 mov sp,r7
 1959              	.LCFI123:
 1960              	 .cfi_def_cfa_register 13
 1961              	 
 1962 0070 5DF8047B 	 ldr r7,[sp],#4
 1963              	.LCFI124:
 1964              	 .cfi_restore 7
 1965              	 .cfi_def_cfa_offset 0
 1966 0074 7047     	 bx lr
 1967              	 .cfi_endproc
 1968              	.LFE251:
 1970 0076 00BF     	 .section .text.XMC_ETH_MAC_FlushTx,"ax",%progbits
 1971              	 .align 2
 1972              	 .global XMC_ETH_MAC_FlushTx
 1973              	 .thumb
 1974              	 .thumb_func
 1976              	XMC_ETH_MAC_FlushTx:
 1977              	.LFB252:
 649:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 650:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush TX */
 651:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushTx(XMC_ETH_MAC_t *const eth_mac)
 652:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1978              	 .loc 3 652 0
 1979              	 .cfi_startproc
 1980              	 
 1981              	 
 1982 0000 80B5     	 push {r7,lr}
 1983              	.LCFI125:
 1984              	 .cfi_def_cfa_offset 8
 1985              	 .cfi_offset 7,-8
 1986              	 .cfi_offset 14,-4
 1987 0002 82B0     	 sub sp,sp,#8
 1988              	.LCFI126:
 1989              	 .cfi_def_cfa_offset 16
 1990 0004 00AF     	 add r7,sp,#0
 1991              	.LCFI127:
 1992              	 .cfi_def_cfa_register 7
 1993 0006 7860     	 str r0,[r7,#4]
 653:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 1994              	 .loc 3 653 0
 1995 0008 7B68     	 ldr r3,[r7,#4]
 1996 000a 1968     	 ldr r1,[r3]
 1997 000c 7B68     	 ldr r3,[r7,#4]
 1998 000e 1B68     	 ldr r3,[r3]
 1999 0010 03F58053 	 add r3,r3,#4096
 2000 0014 1833     	 adds r3,r3,#24
 2001 0016 1B68     	 ldr r3,[r3]
 2002 0018 23F40052 	 bic r2,r3,#8192
 2003 001c 01F58053 	 add r3,r1,#4096
 2004 0020 1833     	 adds r3,r3,#24
 2005 0022 1A60     	 str r2,[r3]
 654:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 2006              	 .loc 3 654 0
 2007 0024 7868     	 ldr r0,[r7,#4]
 2008 0026 FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 655:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 2009              	 .loc 3 655 0
 2010 002a 7B68     	 ldr r3,[r7,#4]
 2011 002c 1968     	 ldr r1,[r3]
 2012 002e 7B68     	 ldr r3,[r7,#4]
 2013 0030 1B68     	 ldr r3,[r3]
 2014 0032 03F58053 	 add r3,r3,#4096
 2015 0036 1833     	 adds r3,r3,#24
 2016 0038 1B68     	 ldr r3,[r3]
 2017 003a 43F40052 	 orr r2,r3,#8192
 2018 003e 01F58053 	 add r3,r1,#4096
 2019 0042 1833     	 adds r3,r3,#24
 2020 0044 1A60     	 str r2,[r3]
 656:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2021              	 .loc 3 656 0
 2022 0046 0837     	 adds r7,r7,#8
 2023              	.LCFI128:
 2024              	 .cfi_def_cfa_offset 8
 2025 0048 BD46     	 mov sp,r7
 2026              	.LCFI129:
 2027              	 .cfi_def_cfa_register 13
 2028              	 
 2029 004a 80BD     	 pop {r7,pc}
 2030              	 .cfi_endproc
 2031              	.LFE252:
 2033              	 .section .text.XMC_ETH_MAC_FlushRx,"ax",%progbits
 2034              	 .align 2
 2035              	 .global XMC_ETH_MAC_FlushRx
 2036              	 .thumb
 2037              	 .thumb_func
 2039              	XMC_ETH_MAC_FlushRx:
 2040              	.LFB253:
 657:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 658:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush RX */
 659:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushRx(XMC_ETH_MAC_t *const eth_mac)
 660:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2041              	 .loc 3 660 0
 2042              	 .cfi_startproc
 2043              	 
 2044              	 
 2045 0000 80B5     	 push {r7,lr}
 2046              	.LCFI130:
 2047              	 .cfi_def_cfa_offset 8
 2048              	 .cfi_offset 7,-8
 2049              	 .cfi_offset 14,-4
 2050 0002 82B0     	 sub sp,sp,#8
 2051              	.LCFI131:
 2052              	 .cfi_def_cfa_offset 16
 2053 0004 00AF     	 add r7,sp,#0
 2054              	.LCFI132:
 2055              	 .cfi_def_cfa_register 7
 2056 0006 7860     	 str r0,[r7,#4]
 661:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 2057              	 .loc 3 661 0
 2058 0008 7B68     	 ldr r3,[r7,#4]
 2059 000a 1968     	 ldr r1,[r3]
 2060 000c 7B68     	 ldr r3,[r7,#4]
 2061 000e 1B68     	 ldr r3,[r3]
 2062 0010 03F58053 	 add r3,r3,#4096
 2063 0014 1833     	 adds r3,r3,#24
 2064 0016 1B68     	 ldr r3,[r3]
 2065 0018 23F00202 	 bic r2,r3,#2
 2066 001c 01F58053 	 add r3,r1,#4096
 2067 0020 1833     	 adds r3,r3,#24
 2068 0022 1A60     	 str r2,[r3]
 662:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 2069              	 .loc 3 662 0
 2070 0024 7868     	 ldr r0,[r7,#4]
 2071 0026 FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 663:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 2072              	 .loc 3 663 0
 2073 002a 7B68     	 ldr r3,[r7,#4]
 2074 002c 1968     	 ldr r1,[r3]
 2075 002e 7B68     	 ldr r3,[r7,#4]
 2076 0030 1B68     	 ldr r3,[r3]
 2077 0032 03F58053 	 add r3,r3,#4096
 2078 0036 1833     	 adds r3,r3,#24
 2079 0038 1B68     	 ldr r3,[r3]
 2080 003a 43F00202 	 orr r2,r3,#2
 2081 003e 01F58053 	 add r3,r1,#4096
 2082 0042 1833     	 adds r3,r3,#24
 2083 0044 1A60     	 str r2,[r3]
 664:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2084              	 .loc 3 664 0
 2085 0046 0837     	 adds r7,r7,#8
 2086              	.LCFI133:
 2087              	 .cfi_def_cfa_offset 8
 2088 0048 BD46     	 mov sp,r7
 2089              	.LCFI134:
 2090              	 .cfi_def_cfa_register 13
 2091              	 
 2092 004a 80BD     	 pop {r7,pc}
 2093              	 .cfi_endproc
 2094              	.LFE253:
 2096              	 .section .text.XMC_ETH_MAC_SetWakeUpFrameFilter,"ax",%progbits
 2097              	 .align 2
 2098              	 .global XMC_ETH_MAC_SetWakeUpFrameFilter
 2099              	 .thumb
 2100              	 .thumb_func
 2102              	XMC_ETH_MAC_SetWakeUpFrameFilter:
 2103              	.LFB254:
 665:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 666:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set wakeup frame filter */
 667:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetWakeUpFrameFilter(XMC_ETH_MAC_t *const eth_mac,
 668:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                       const uint32_t (*const filter)[XMC_ETH_WAKEUP_REGISTER_LENGTH
 669:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2104              	 .loc 3 669 0
 2105              	 .cfi_startproc
 2106              	 
 2107              	 
 2108              	 
 2109 0000 80B4     	 push {r7}
 2110              	.LCFI135:
 2111              	 .cfi_def_cfa_offset 4
 2112              	 .cfi_offset 7,-4
 2113 0002 85B0     	 sub sp,sp,#20
 2114              	.LCFI136:
 2115              	 .cfi_def_cfa_offset 24
 2116 0004 00AF     	 add r7,sp,#0
 2117              	.LCFI137:
 2118              	 .cfi_def_cfa_register 7
 2119 0006 7860     	 str r0,[r7,#4]
 2120 0008 3960     	 str r1,[r7]
 670:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i = 0U;
 2121              	 .loc 3 670 0
 2122 000a 0023     	 movs r3,#0
 2123 000c FB60     	 str r3,[r7,#12]
 671:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 672:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fill Remote Wake-up frame filter register with buffer data */
 673:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < XMC_ETH_WAKEUP_REGISTER_LENGTH; i++)
 2124              	 .loc 3 673 0
 2125 000e 0023     	 movs r3,#0
 2126 0010 FB60     	 str r3,[r7,#12]
 2127 0012 09E0     	 b .L86
 2128              	.L87:
 674:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 675:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Write each time to the same register */
 676:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->REMOTE_WAKE_UP_FRAME_FILTER = (*filter)[i];
 2129              	 .loc 3 676 0 discriminator 3
 2130 0014 7B68     	 ldr r3,[r7,#4]
 2131 0016 1B68     	 ldr r3,[r3]
 2132 0018 3A68     	 ldr r2,[r7]
 2133 001a F968     	 ldr r1,[r7,#12]
 2134 001c 52F82120 	 ldr r2,[r2,r1,lsl#2]
 2135 0020 9A62     	 str r2,[r3,#40]
 673:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 2136              	 .loc 3 673 0 discriminator 3
 2137 0022 FB68     	 ldr r3,[r7,#12]
 2138 0024 0133     	 adds r3,r3,#1
 2139 0026 FB60     	 str r3,[r7,#12]
 2140              	.L86:
 673:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 2141              	 .loc 3 673 0 is_stmt 0 discriminator 1
 2142 0028 FB68     	 ldr r3,[r7,#12]
 2143 002a 072B     	 cmp r3,#7
 2144 002c F2D9     	 bls .L87
 677:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 678:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2145              	 .loc 3 678 0 is_stmt 1
 2146 002e 1437     	 adds r7,r7,#20
 2147              	.LCFI138:
 2148              	 .cfi_def_cfa_offset 4
 2149 0030 BD46     	 mov sp,r7
 2150              	.LCFI139:
 2151              	 .cfi_def_cfa_register 13
 2152              	 
 2153 0032 5DF8047B 	 ldr r7,[sp],#4
 2154              	.LCFI140:
 2155              	 .cfi_restore 7
 2156              	 .cfi_def_cfa_offset 0
 2157 0036 7047     	 bx lr
 2158              	 .cfi_endproc
 2159              	.LFE254:
 2161              	 .section .text.XMC_ETH_MAC_EnableEvent,"ax",%progbits
 2162              	 .align 2
 2163              	 .global XMC_ETH_MAC_EnableEvent
 2164              	 .thumb
 2165              	 .thumb_func
 2167              	XMC_ETH_MAC_EnableEvent:
 2168              	.LFB255:
 679:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 680:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Enable event */
 681:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 682:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2169              	 .loc 3 682 0
 2170              	 .cfi_startproc
 2171              	 
 2172              	 
 2173 0000 80B5     	 push {r7,lr}
 2174              	.LCFI141:
 2175              	 .cfi_def_cfa_offset 8
 2176              	 .cfi_offset 7,-8
 2177              	 .cfi_offset 14,-4
 2178 0002 82B0     	 sub sp,sp,#8
 2179              	.LCFI142:
 2180              	 .cfi_def_cfa_offset 16
 2181 0004 00AF     	 add r7,sp,#0
 2182              	.LCFI143:
 2183              	 .cfi_def_cfa_register 7
 2184 0006 7860     	 str r0,[r7,#4]
 2185 0008 3960     	 str r1,[r7]
 683:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 684:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 685:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 2186              	 .loc 3 685 0
 2187 000a 7B68     	 ldr r3,[r7,#4]
 2188 000c 1B68     	 ldr r3,[r3]
 2189 000e 7A68     	 ldr r2,[r7,#4]
 2190 0010 1268     	 ldr r2,[r2]
 2191 0012 D16B     	 ldr r1,[r2,#60]
 2192 0014 3A68     	 ldr r2,[r7]
 2193 0016 120C     	 lsrs r2,r2,#16
 2194 0018 D243     	 mvns r2,r2
 2195 001a 0A40     	 ands r2,r2,r1
 2196 001c DA63     	 str r2,[r3,#60]
 686:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 687:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= (uint16_t)0x7fffU;
 2197              	 .loc 3 687 0
 2198 001e 3B68     	 ldr r3,[r7]
 2199 0020 C3F30E03 	 ubfx r3,r3,#0,#15
 2200 0024 3B60     	 str r3,[r7]
 688:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsNormalEvent(event))
 2201              	 .loc 3 688 0
 2202 0026 3868     	 ldr r0,[r7]
 2203 0028 FFF7FEFF 	 bl XCM_ETH_MAC_IsNormalEvent
 2204 002c 0346     	 mov r3,r0
 2205 002e 002B     	 cmp r3,#0
 2206 0030 03D0     	 beq .L89
 689:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 690:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 2207              	 .loc 3 690 0
 2208 0032 3B68     	 ldr r3,[r7]
 2209 0034 43F48033 	 orr r3,r3,#65536
 2210 0038 3B60     	 str r3,[r7]
 2211              	.L89:
 691:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 692:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 693:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsAbnormalEvent(event))
 2212              	 .loc 3 693 0
 2213 003a 3868     	 ldr r0,[r7]
 2214 003c FFF7FEFF 	 bl XCM_ETH_MAC_IsAbnormalEvent
 2215 0040 0346     	 mov r3,r0
 2216 0042 002B     	 cmp r3,#0
 2217 0044 03D0     	 beq .L90
 694:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 695:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 2218              	 .loc 3 695 0
 2219 0046 3B68     	 ldr r3,[r7]
 2220 0048 43F40043 	 orr r3,r3,#32768
 2221 004c 3B60     	 str r3,[r7]
 2222              	.L90:
 696:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 697:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 698:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE |= event;
 2223              	 .loc 3 698 0
 2224 004e 7B68     	 ldr r3,[r7,#4]
 2225 0050 1968     	 ldr r1,[r3]
 2226 0052 7B68     	 ldr r3,[r7,#4]
 2227 0054 1B68     	 ldr r3,[r3]
 2228 0056 03F58053 	 add r3,r3,#4096
 2229 005a 1C33     	 adds r3,r3,#28
 2230 005c 1A68     	 ldr r2,[r3]
 2231 005e 3B68     	 ldr r3,[r7]
 2232 0060 1A43     	 orrs r2,r2,r3
 2233 0062 01F58053 	 add r3,r1,#4096
 2234 0066 1C33     	 adds r3,r3,#28
 2235 0068 1A60     	 str r2,[r3]
 699:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2236              	 .loc 3 699 0
 2237 006a 0837     	 adds r7,r7,#8
 2238              	.LCFI144:
 2239              	 .cfi_def_cfa_offset 8
 2240 006c BD46     	 mov sp,r7
 2241              	.LCFI145:
 2242              	 .cfi_def_cfa_register 13
 2243              	 
 2244 006e 80BD     	 pop {r7,pc}
 2245              	 .cfi_endproc
 2246              	.LFE255:
 2248              	 .section .text.XMC_ETH_MAC_DisableEvent,"ax",%progbits
 2249              	 .align 2
 2250              	 .global XMC_ETH_MAC_DisableEvent
 2251              	 .thumb
 2252              	 .thumb_func
 2254              	XMC_ETH_MAC_DisableEvent:
 2255              	.LFB256:
 700:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 701:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Disable event */
 702:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 703:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2256              	 .loc 3 703 0
 2257              	 .cfi_startproc
 2258              	 
 2259              	 
 2260              	 
 2261 0000 80B4     	 push {r7}
 2262              	.LCFI146:
 2263              	 .cfi_def_cfa_offset 4
 2264              	 .cfi_offset 7,-4
 2265 0002 83B0     	 sub sp,sp,#12
 2266              	.LCFI147:
 2267              	 .cfi_def_cfa_offset 16
 2268 0004 00AF     	 add r7,sp,#0
 2269              	.LCFI148:
 2270              	 .cfi_def_cfa_register 7
 2271 0006 7860     	 str r0,[r7,#4]
 2272 0008 3960     	 str r1,[r7]
 704:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->
 705:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 706:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 2273              	 .loc 3 706 0
 2274 000a 7B68     	 ldr r3,[r7,#4]
 2275 000c 1B68     	 ldr r3,[r3]
 2276 000e 7A68     	 ldr r2,[r7,#4]
 2277 0010 1268     	 ldr r2,[r2]
 2278 0012 D16B     	 ldr r1,[r2,#60]
 2279 0014 3A68     	 ldr r2,[r7]
 2280 0016 120C     	 lsrs r2,r2,#16
 2281 0018 0A43     	 orrs r2,r2,r1
 2282 001a DA63     	 str r2,[r3,#60]
 707:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 708:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= 0x7fffU;
 2283              	 .loc 3 708 0
 2284 001c 3B68     	 ldr r3,[r7]
 2285 001e C3F30E03 	 ubfx r3,r3,#0,#15
 2286 0022 3B60     	 str r3,[r7]
 709:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 2287              	 .loc 3 709 0
 2288 0024 7B68     	 ldr r3,[r7,#4]
 2289 0026 1968     	 ldr r1,[r3]
 2290 0028 7B68     	 ldr r3,[r7,#4]
 2291 002a 1B68     	 ldr r3,[r3]
 2292 002c 03F58053 	 add r3,r3,#4096
 2293 0030 1C33     	 adds r3,r3,#28
 2294 0032 1A68     	 ldr r2,[r3]
 2295 0034 3B68     	 ldr r3,[r7]
 2296 0036 DB43     	 mvns r3,r3
 2297 0038 1A40     	 ands r2,r2,r3
 2298 003a 01F58053 	 add r3,r1,#4096
 2299 003e 1C33     	 adds r3,r3,#28
 2300 0040 1A60     	 str r2,[r3]
 710:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2301              	 .loc 3 710 0
 2302 0042 0C37     	 adds r7,r7,#12
 2303              	.LCFI149:
 2304              	 .cfi_def_cfa_offset 4
 2305 0044 BD46     	 mov sp,r7
 2306              	.LCFI150:
 2307              	 .cfi_def_cfa_register 13
 2308              	 
 2309 0046 5DF8047B 	 ldr r7,[sp],#4
 2310              	.LCFI151:
 2311              	 .cfi_restore 7
 2312              	 .cfi_def_cfa_offset 0
 2313 004a 7047     	 bx lr
 2314              	 .cfi_endproc
 2315              	.LFE256:
 2317              	 .section .text.XMC_ETH_MAC_ClearEventStatus,"ax",%progbits
 2318              	 .align 2
 2319              	 .global XMC_ETH_MAC_ClearEventStatus
 2320              	 .thumb
 2321              	 .thumb_func
 2323              	XMC_ETH_MAC_ClearEventStatus:
 2324              	.LFB257:
 711:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 712:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Clear event status */
 713:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 714:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2325              	 .loc 3 714 0
 2326              	 .cfi_startproc
 2327              	 
 2328              	 
 2329              	 
 2330 0000 80B4     	 push {r7}
 2331              	.LCFI152:
 2332              	 .cfi_def_cfa_offset 4
 2333              	 .cfi_offset 7,-4
 2334 0002 83B0     	 sub sp,sp,#12
 2335              	.LCFI153:
 2336              	 .cfi_def_cfa_offset 16
 2337 0004 00AF     	 add r7,sp,#0
 2338              	.LCFI154:
 2339              	 .cfi_def_cfa_register 7
 2340 0006 7860     	 str r0,[r7,#4]
 2341 0008 3960     	 str r1,[r7]
 715:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ClearEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac-
 716:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 717:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 2342              	 .loc 3 717 0
 2343 000a 7B68     	 ldr r3,[r7,#4]
 2344 000c 1B68     	 ldr r3,[r3]
 2345 000e 03F58053 	 add r3,r3,#4096
 2346 0012 1433     	 adds r3,r3,#20
 2347 0014 1B68     	 ldr r3,[r3]
 2348 0016 03F48033 	 and r3,r3,#65536
 2349 001a 002B     	 cmp r3,#0
 2350 001c 03D0     	 beq .L93
 718:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 719:../Libraries/XMCLib/src/xmc_eth_mac.c ****     event |= (uint32_t)ETH_STATUS_NIS_Msk;
 2351              	 .loc 3 719 0
 2352 001e 3B68     	 ldr r3,[r7]
 2353 0020 43F48033 	 orr r3,r3,#65536
 2354 0024 3B60     	 str r3,[r7]
 2355              	.L93:
 720:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 721:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 722:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 2356              	 .loc 3 722 0
 2357 0026 7B68     	 ldr r3,[r7,#4]
 2358 0028 1B68     	 ldr r3,[r3]
 2359 002a 03F58053 	 add r3,r3,#4096
 2360 002e 1433     	 adds r3,r3,#20
 2361 0030 1B68     	 ldr r3,[r3]
 2362 0032 03F40043 	 and r3,r3,#32768
 2363 0036 002B     	 cmp r3,#0
 2364 0038 03D0     	 beq .L94
 723:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 724:../Libraries/XMCLib/src/xmc_eth_mac.c ****     event |= (uint32_t)ETH_STATUS_AIS_Msk;
 2365              	 .loc 3 724 0
 2366 003a 3B68     	 ldr r3,[r7]
 2367 003c 43F40043 	 orr r3,r3,#32768
 2368 0040 3B60     	 str r3,[r7]
 2369              	.L94:
 725:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 726:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 727:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = event & 0x0001FFFFU;
 2370              	 .loc 3 727 0
 2371 0042 7B68     	 ldr r3,[r7,#4]
 2372 0044 1B68     	 ldr r3,[r3]
 2373 0046 3A68     	 ldr r2,[r7]
 2374 0048 C2F31002 	 ubfx r2,r2,#0,#17
 2375 004c 03F58053 	 add r3,r3,#4096
 2376 0050 1433     	 adds r3,r3,#20
 2377 0052 1A60     	 str r2,[r3]
 728:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2378              	 .loc 3 728 0
 2379 0054 0C37     	 adds r7,r7,#12
 2380              	.LCFI155:
 2381              	 .cfi_def_cfa_offset 4
 2382 0056 BD46     	 mov sp,r7
 2383              	.LCFI156:
 2384              	 .cfi_def_cfa_register 13
 2385              	 
 2386 0058 5DF8047B 	 ldr r7,[sp],#4
 2387              	.LCFI157:
 2388              	 .cfi_restore 7
 2389              	 .cfi_def_cfa_offset 0
 2390 005c 7047     	 bx lr
 2391              	 .cfi_endproc
 2392              	.LFE257:
 2394 005e 00BF     	 .section .text.XMC_ETH_MAC_GetEventStatus,"ax",%progbits
 2395              	 .align 2
 2396              	 .global XMC_ETH_MAC_GetEventStatus
 2397              	 .thumb
 2398              	 .thumb_func
 2400              	XMC_ETH_MAC_GetEventStatus:
 2401              	.LFB258:
 729:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 730:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Obtain event status */
 731:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetEventStatus(const XMC_ETH_MAC_t *const eth_mac)
 732:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2402              	 .loc 3 732 0
 2403              	 .cfi_startproc
 2404              	 
 2405              	 
 2406              	 
 2407 0000 80B4     	 push {r7}
 2408              	.LCFI158:
 2409              	 .cfi_def_cfa_offset 4
 2410              	 .cfi_offset 7,-4
 2411 0002 85B0     	 sub sp,sp,#20
 2412              	.LCFI159:
 2413              	 .cfi_def_cfa_offset 24
 2414 0004 00AF     	 add r7,sp,#0
 2415              	.LCFI160:
 2416              	 .cfi_def_cfa_register 7
 2417 0006 7860     	 str r0,[r7,#4]
 733:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp_status = 0;
 2418              	 .loc 3 733 0
 2419 0008 0023     	 movs r3,#0
 2420 000a FB60     	 str r3,[r7,#12]
 734:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 735:../Libraries/XMCLib/src/xmc_eth_mac.c ****   
 736:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp_status =  (eth_mac->regs->STATUS & (uint32_t)0x7ffUL);
 2421              	 .loc 3 736 0
 2422 000c 7B68     	 ldr r3,[r7,#4]
 2423 000e 1B68     	 ldr r3,[r3]
 2424 0010 03F58053 	 add r3,r3,#4096
 2425 0014 1433     	 adds r3,r3,#20
 2426 0016 1B68     	 ldr r3,[r3]
 2427 0018 C3F30A03 	 ubfx r3,r3,#0,#11
 2428 001c FB60     	 str r3,[r7,#12]
 737:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 738:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return ((uint32_t)((eth_mac->regs->INTERRUPT_STATUS & (ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRU
 2429              	 .loc 3 738 0
 2430 001e 7B68     	 ldr r3,[r7,#4]
 2431 0020 1B68     	 ldr r3,[r3]
 2432 0022 9B6B     	 ldr r3,[r3,#56]
 2433 0024 03F40273 	 and r3,r3,#520
 2434 0028 1A04     	 lsls r2,r3,#16
 2435 002a FB68     	 ldr r3,[r7,#12]
 2436 002c 1343     	 orrs r3,r3,r2
 739:../Libraries/XMCLib/src/xmc_eth_mac.c ****       temp_status);
 740:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2437              	 .loc 3 740 0
 2438 002e 1846     	 mov r0,r3
 2439 0030 1437     	 adds r7,r7,#20
 2440              	.LCFI161:
 2441              	 .cfi_def_cfa_offset 4
 2442 0032 BD46     	 mov sp,r7
 2443              	.LCFI162:
 2444              	 .cfi_def_cfa_register 13
 2445              	 
 2446 0034 5DF8047B 	 ldr r7,[sp],#4
 2447              	.LCFI163:
 2448              	 .cfi_restore 7
 2449              	 .cfi_def_cfa_offset 0
 2450 0038 7047     	 bx lr
 2451              	 .cfi_endproc
 2452              	.LFE258:
 2454 003a 00BF     	 .section .text.XMC_ETH_MAC_ReturnRxDescriptor,"ax",%progbits
 2455              	 .align 2
 2456              	 .global XMC_ETH_MAC_ReturnRxDescriptor
 2457              	 .thumb
 2458              	 .thumb_func
 2460              	XMC_ETH_MAC_ReturnRxDescriptor:
 2461              	.LFB259:
 741:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 742:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return RX descriptor */
 743:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 744:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2462              	 .loc 3 744 0
 2463              	 .cfi_startproc
 2464              	 
 2465              	 
 2466              	 
 2467 0000 80B4     	 push {r7}
 2468              	.LCFI164:
 2469              	 .cfi_def_cfa_offset 4
 2470              	 .cfi_offset 7,-4
 2471 0002 83B0     	 sub sp,sp,#12
 2472              	.LCFI165:
 2473              	 .cfi_def_cfa_offset 16
 2474 0004 00AF     	 add r7,sp,#0
 2475              	.LCFI166:
 2476              	 .cfi_def_cfa_register 7
 2477 0006 7860     	 str r0,[r7,#4]
 745:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 2478              	 .loc 3 745 0
 2479 0008 7B68     	 ldr r3,[r7,#4]
 2480 000a 1A69     	 ldr r2,[r3,#16]
 2481 000c 7B68     	 ldr r3,[r7,#4]
 2482 000e 93F82730 	 ldrb r3,[r3,#39]
 2483 0012 5B01     	 lsls r3,r3,#5
 2484 0014 1344     	 add r3,r3,r2
 2485 0016 7A68     	 ldr r2,[r7,#4]
 2486 0018 1169     	 ldr r1,[r2,#16]
 2487 001a 7A68     	 ldr r2,[r7,#4]
 2488 001c 92F82720 	 ldrb r2,[r2,#39]
 2489 0020 5201     	 lsls r2,r2,#5
 2490 0022 0A44     	 add r2,r2,r1
 2491 0024 1268     	 ldr r2,[r2]
 2492 0026 42F00042 	 orr r2,r2,#-2147483648
 2493 002a 1A60     	 str r2,[r3]
 746:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 2494              	 .loc 3 746 0
 2495 002c 7B68     	 ldr r3,[r7,#4]
 2496 002e 93F82730 	 ldrb r3,[r3,#39]
 2497 0032 0133     	 adds r3,r3,#1
 2498 0034 DAB2     	 uxtb r2,r3
 2499 0036 7B68     	 ldr r3,[r7,#4]
 2500 0038 83F82720 	 strb r2,[r3,#39]
 747:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 2501              	 .loc 3 747 0
 2502 003c 7B68     	 ldr r3,[r7,#4]
 2503 003e 93F82720 	 ldrb r2,[r3,#39]
 2504 0042 7B68     	 ldr r3,[r7,#4]
 2505 0044 93F82430 	 ldrb r3,[r3,#36]
 2506 0048 9A42     	 cmp r2,r3
 2507 004a 03D1     	 bne .L97
 748:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 749:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_index = 0U;
 2508              	 .loc 3 749 0
 2509 004c 7B68     	 ldr r3,[r7,#4]
 2510 004e 0022     	 movs r2,#0
 2511 0050 83F82720 	 strb r2,[r3,#39]
 2512              	.L97:
 750:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } 
 751:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2513              	 .loc 3 751 0
 2514 0054 0C37     	 adds r7,r7,#12
 2515              	.LCFI167:
 2516              	 .cfi_def_cfa_offset 4
 2517 0056 BD46     	 mov sp,r7
 2518              	.LCFI168:
 2519              	 .cfi_def_cfa_register 13
 2520              	 
 2521 0058 5DF8047B 	 ldr r7,[sp],#4
 2522              	.LCFI169:
 2523              	 .cfi_restore 7
 2524              	 .cfi_def_cfa_offset 0
 2525 005c 7047     	 bx lr
 2526              	 .cfi_endproc
 2527              	.LFE259:
 2529 005e 00BF     	 .section .text.XMC_ETH_MAC_ReturnTxDescriptor,"ax",%progbits
 2530              	 .align 2
 2531              	 .global XMC_ETH_MAC_ReturnTxDescriptor
 2532              	 .thumb
 2533              	 .thumb_func
 2535              	XMC_ETH_MAC_ReturnTxDescriptor:
 2536              	.LFB260:
 752:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 753:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return TX descriptor */
 754:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 755:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2537              	 .loc 3 755 0
 2538              	 .cfi_startproc
 2539              	 
 2540              	 
 2541              	 
 2542 0000 80B4     	 push {r7}
 2543              	.LCFI170:
 2544              	 .cfi_def_cfa_offset 4
 2545              	 .cfi_offset 7,-4
 2546 0002 83B0     	 sub sp,sp,#12
 2547              	.LCFI171:
 2548              	 .cfi_def_cfa_offset 16
 2549 0004 00AF     	 add r7,sp,#0
 2550              	.LCFI172:
 2551              	 .cfi_def_cfa_register 7
 2552 0006 7860     	 str r0,[r7,#4]
 756:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_ts_index = eth_mac->tx_index;
 2553              	 .loc 3 756 0
 2554 0008 7B68     	 ldr r3,[r7,#4]
 2555 000a 93F82620 	 ldrb r2,[r3,#38]
 2556 000e 7B68     	 ldr r3,[r7,#4]
 2557 0010 83F82820 	 strb r2,[r3,#40]
 757:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 758:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC |ETH_MAC_DMA_TDES0_OWN;
 2558              	 .loc 3 758 0
 2559 0014 7B68     	 ldr r3,[r7,#4]
 2560 0016 5A69     	 ldr r2,[r3,#20]
 2561 0018 7B68     	 ldr r3,[r7,#4]
 2562 001a 93F82630 	 ldrb r3,[r3,#38]
 2563 001e 5B01     	 lsls r3,r3,#5
 2564 0020 1A44     	 add r2,r2,r3
 2565 0022 7B68     	 ldr r3,[r7,#4]
 2566 0024 5969     	 ldr r1,[r3,#20]
 2567 0026 7B68     	 ldr r3,[r7,#4]
 2568 0028 93F82630 	 ldrb r3,[r3,#38]
 2569 002c 5B01     	 lsls r3,r3,#5
 2570 002e 0B44     	 add r3,r3,r1
 2571 0030 1B68     	 ldr r3,[r3]
 2572 0032 43F00043 	 orr r3,r3,#-2147483648
 2573 0036 43F44003 	 orr r3,r3,#12582912
 2574 003a 1360     	 str r3,[r2]
 759:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index++;
 2575              	 .loc 3 759 0
 2576 003c 7B68     	 ldr r3,[r7,#4]
 2577 003e 93F82630 	 ldrb r3,[r3,#38]
 2578 0042 0133     	 adds r3,r3,#1
 2579 0044 DAB2     	 uxtb r2,r3
 2580 0046 7B68     	 ldr r3,[r7,#4]
 2581 0048 83F82620 	 strb r2,[r3,#38]
 760:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->tx_index == eth_mac->num_tx_buf)
 2582              	 .loc 3 760 0
 2583 004c 7B68     	 ldr r3,[r7,#4]
 2584 004e 93F82620 	 ldrb r2,[r3,#38]
 2585 0052 7B68     	 ldr r3,[r7,#4]
 2586 0054 93F82530 	 ldrb r3,[r3,#37]
 2587 0058 9A42     	 cmp r2,r3
 2588 005a 03D1     	 bne .L100
 761:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 762:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->tx_index = 0U;
 2589              	 .loc 3 762 0
 2590 005c 7B68     	 ldr r3,[r7,#4]
 2591 005e 0022     	 movs r2,#0
 2592 0060 83F82620 	 strb r2,[r3,#38]
 2593              	.L100:
 763:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } 
 764:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 765:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->frame_end = NULL;
 2594              	 .loc 3 765 0
 2595 0064 7B68     	 ldr r3,[r7,#4]
 2596 0066 0022     	 movs r2,#0
 2597 0068 1A62     	 str r2,[r3,#32]
 766:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2598              	 .loc 3 766 0
 2599 006a 0C37     	 adds r7,r7,#12
 2600              	.LCFI173:
 2601              	 .cfi_def_cfa_offset 4
 2602 006c BD46     	 mov sp,r7
 2603              	.LCFI174:
 2604              	 .cfi_def_cfa_register 13
 2605              	 
 2606 006e 5DF8047B 	 ldr r7,[sp],#4
 2607              	.LCFI175:
 2608              	 .cfi_restore 7
 2609              	 .cfi_def_cfa_offset 0
 2610 0072 7047     	 bx lr
 2611              	 .cfi_endproc
 2612              	.LFE260:
 2614              	 .section .text.XMC_ETH_MAC_SetVLANTag,"ax",%progbits
 2615              	 .align 2
 2616              	 .global XMC_ETH_MAC_SetVLANTag
 2617              	 .thumb
 2618              	 .thumb_func
 2620              	XMC_ETH_MAC_SetVLANTag:
 2621              	.LFB261:
 767:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 768:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set VLAN tag */
 769:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetVLANTag(XMC_ETH_MAC_t *const eth_mac, uint32_t tag)
 770:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2622              	 .loc 3 770 0
 2623              	 .cfi_startproc
 2624              	 
 2625              	 
 2626              	 
 2627 0000 80B4     	 push {r7}
 2628              	.LCFI176:
 2629              	 .cfi_def_cfa_offset 4
 2630              	 .cfi_offset 7,-4
 2631 0002 83B0     	 sub sp,sp,#12
 2632              	.LCFI177:
 2633              	 .cfi_def_cfa_offset 16
 2634 0004 00AF     	 add r7,sp,#0
 2635              	.LCFI178:
 2636              	 .cfi_def_cfa_register 7
 2637 0006 7860     	 str r0,[r7,#4]
 2638 0008 3960     	 str r1,[r7]
 771:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetVLANTag: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 772:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 773:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->VLAN_TAG = tag;
 2639              	 .loc 3 773 0
 2640 000a 7B68     	 ldr r3,[r7,#4]
 2641 000c 1B68     	 ldr r3,[r3]
 2642 000e 3A68     	 ldr r2,[r7]
 2643 0010 DA61     	 str r2,[r3,#28]
 774:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2644              	 .loc 3 774 0
 2645 0012 0C37     	 adds r7,r7,#12
 2646              	.LCFI179:
 2647              	 .cfi_def_cfa_offset 4
 2648 0014 BD46     	 mov sp,r7
 2649              	.LCFI180:
 2650              	 .cfi_def_cfa_register 13
 2651              	 
 2652 0016 5DF8047B 	 ldr r7,[sp],#4
 2653              	.LCFI181:
 2654              	 .cfi_restore 7
 2655              	 .cfi_def_cfa_offset 0
 2656 001a 7047     	 bx lr
 2657              	 .cfi_endproc
 2658              	.LFE261:
 2660              	 .section .text.XMC_ETH_MAC_InitPTP,"ax",%progbits
 2661              	 .align 2
 2662              	 .global XMC_ETH_MAC_InitPTP
 2663              	 .thumb
 2664              	 .thumb_func
 2666              	XMC_ETH_MAC_InitPTP:
 2667              	.LFB262:
 775:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 776:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize PTP */
 777:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitPTP(XMC_ETH_MAC_t *const eth_mac, uint32_t config)
 778:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2668              	 .loc 3 778 0
 2669              	 .cfi_startproc
 2670              	 
 2671              	 
 2672 0000 90B5     	 push {r4,r7,lr}
 2673              	.LCFI182:
 2674              	 .cfi_def_cfa_offset 12
 2675              	 .cfi_offset 4,-12
 2676              	 .cfi_offset 7,-8
 2677              	 .cfi_offset 14,-4
 2678 0002 85B0     	 sub sp,sp,#20
 2679              	.LCFI183:
 2680              	 .cfi_def_cfa_offset 32
 2681 0004 00AF     	 add r7,sp,#0
 2682              	.LCFI184:
 2683              	 .cfi_def_cfa_register 7
 2684 0006 7860     	 str r0,[r7,#4]
 2685 0008 3960     	 str r1,[r7]
 779:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 780:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 781:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Mask the time stamp interrupt */
 782:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= (uint32_t)ETH_INTERRUPT_MASK_TSIM_Msk;
 2686              	 .loc 3 782 0
 2687 000a 7B68     	 ldr r3,[r7,#4]
 2688 000c 1B68     	 ldr r3,[r3]
 2689 000e 7A68     	 ldr r2,[r7,#4]
 2690 0010 1268     	 ldr r2,[r2]
 2691 0012 D26B     	 ldr r2,[r2,#60]
 2692 0014 42F40072 	 orr r2,r2,#512
 2693 0018 DA63     	 str r2,[r3,#60]
 783:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 784:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Enable time stamp, rollover mode of nanosecond counter set to digital mode, i.e. after 0x3B9AC
 785:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL = ETH_TIMESTAMP_CONTROL_TSENA_Msk | ETH_TIMESTAMP_CONTROL_TSCTRL
 2694              	 .loc 3 785 0
 2695 001a 7B68     	 ldr r3,[r7,#4]
 2696 001c 1A68     	 ldr r2,[r3]
 2697 001e 3B68     	 ldr r3,[r7]
 2698 0020 43F40073 	 orr r3,r3,#512
 2699 0024 43F00103 	 orr r3,r3,#1
 2700 0028 C2F80037 	 str r3,[r2,#1792]
 786:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 787:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((config & (uint32_t)XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE) != 0U)
 2701              	 .loc 3 787 0
 2702 002c 3B68     	 ldr r3,[r7]
 2703 002e 03F00203 	 and r3,r3,#2
 2704 0032 002B     	 cmp r3,#0
 2705 0034 36D0     	 beq .L103
 2706              	.LBB2:
 788:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 789:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Program sub-second increment register based on PTP clock frequency ~ 50MHz */
 790:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->SUB_SECOND_INCREMENT = 20;
 2707              	 .loc 3 790 0
 2708 0036 7B68     	 ldr r3,[r7,#4]
 2709 0038 1B68     	 ldr r3,[r3]
 2710 003a 1422     	 movs r2,#20
 2711 003c C3F80427 	 str r2,[r3,#1796]
 791:../Libraries/XMCLib/src/xmc_eth_mac.c ****     
 792:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* fSYS = Reference Clock for the Time Stamp Update Logic*/
 793:../Libraries/XMCLib/src/xmc_eth_mac.c ****     float ratio = (float)XMC_SCU_CLOCK_GetSystemClockFrequency() / (float)XMC_ETH_SUB_SECOND_UPDATE
 2712              	 .loc 3 793 0
 2713 0040 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2714 0044 07EE900A 	 fmsr s15,r0
 2715 0048 F8EE677A 	 fuitos s15,s15
 2716 004c 9FED2B7A 	 flds s14,.L107
 2717 0050 C7EE877A 	 fdivs s15,s15,s14
 2718 0054 C7ED037A 	 fsts s15,[r7,#12]
 794:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((float)0x100000000ULL / ratio) + 0.5F);
 2719              	 .loc 3 794 0
 2720 0058 7B68     	 ldr r3,[r7,#4]
 2721 005a 1B68     	 ldr r3,[r3]
 2722 005c 9FED287A 	 flds s14,.L107+4
 2723 0060 D7ED037A 	 flds s15,[r7,#12]
 2724 0064 C7EE277A 	 fdivs s15,s14,s15
 2725 0068 B6EE007A 	 fconsts s14,#96
 2726 006c 77EE877A 	 fadds s15,s15,s14
 2727 0070 FCEEE77A 	 ftouizs s15,s15
 2728 0074 17EE902A 	 fmrs r2,s15
 2729 0078 C3F81827 	 str r2,[r3,#1816]
 795:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 796:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Addend register update */
 797:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 2730              	 .loc 3 797 0
 2731 007c 7B68     	 ldr r3,[r7,#4]
 2732 007e 1B68     	 ldr r3,[r3]
 2733 0080 7A68     	 ldr r2,[r7,#4]
 2734 0082 1268     	 ldr r2,[r2]
 2735 0084 D2F80027 	 ldr r2,[r2,#1792]
 2736 0088 42F02002 	 orr r2,r2,#32
 2737 008c C3F80027 	 str r2,[r3,#1792]
 798:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 799:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 800:../Libraries/XMCLib/src/xmc_eth_mac.c ****     while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 2738              	 .loc 3 800 0
 2739 0090 00BF     	 nop
 2740              	.L104:
 2741              	 .loc 3 800 0 is_stmt 0 discriminator 1
 2742 0092 7B68     	 ldr r3,[r7,#4]
 2743 0094 1B68     	 ldr r3,[r3]
 2744 0096 D3F80037 	 ldr r3,[r3,#1792]
 2745 009a 03F02003 	 and r3,r3,#32
 2746 009e 002B     	 cmp r3,#0
 2747 00a0 F7D1     	 bne .L104
 2748              	.LBE2:
 2749 00a2 15E0     	 b .L105
 2750              	.L103:
 801:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 802:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 803:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 804:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Program sub-second increment register based on PTP clock frequency = fSYS/2 */
 805:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)(((float)1000000000 / (float)XMC_SCU_CLOCK_GetSys
 2751              	 .loc 3 805 0 is_stmt 1
 2752 00a4 7B68     	 ldr r3,[r7,#4]
 2753 00a6 1C68     	 ldr r4,[r3]
 2754 00a8 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2755 00ac 07EE900A 	 fmsr s15,r0
 2756 00b0 F8EE677A 	 fuitos s15,s15
 2757 00b4 9FED137A 	 flds s14,.L107+8
 2758 00b8 C7EE277A 	 fdivs s15,s14,s15
 2759 00bc B6EE007A 	 fconsts s14,#96
 2760 00c0 77EE877A 	 fadds s15,s15,s14
 2761 00c4 FCEEE77A 	 ftouizs s15,s15
 2762 00c8 17EE903A 	 fmrs r3,s15
 2763 00cc C4F80437 	 str r3,[r4,#1796]
 2764              	.L105:
 806:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 807:../Libraries/XMCLib/src/xmc_eth_mac.c ****   
 808:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 2765              	 .loc 3 808 0
 2766 00d0 7B68     	 ldr r3,[r7,#4]
 2767 00d2 1B68     	 ldr r3,[r3]
 2768 00d4 7A68     	 ldr r2,[r7,#4]
 2769 00d6 1268     	 ldr r2,[r2]
 2770 00d8 D2F80027 	 ldr r2,[r2,#1792]
 2771 00dc 42F00402 	 orr r2,r2,#4
 2772 00e0 C3F80027 	 str r2,[r3,#1792]
 809:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);  
 2773              	 .loc 3 809 0
 2774 00e4 00BF     	 nop
 2775              	.L106:
 2776              	 .loc 3 809 0 is_stmt 0 discriminator 1
 2777 00e6 7B68     	 ldr r3,[r7,#4]
 2778 00e8 1B68     	 ldr r3,[r3]
 2779 00ea D3F80037 	 ldr r3,[r3,#1792]
 2780 00ee 03F00403 	 and r3,r3,#4
 2781 00f2 002B     	 cmp r3,#0
 2782 00f4 F7D1     	 bne .L106
 810:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2783              	 .loc 3 810 0 is_stmt 1
 2784 00f6 1437     	 adds r7,r7,#20
 2785              	.LCFI185:
 2786              	 .cfi_def_cfa_offset 12
 2787 00f8 BD46     	 mov sp,r7
 2788              	.LCFI186:
 2789              	 .cfi_def_cfa_register 13
 2790              	 
 2791 00fa 90BD     	 pop {r4,r7,pc}
 2792              	.L108:
 2793              	 .align 2
 2794              	.L107:
 2795 00fc 20BC3E4C 	 .word 1279179808
 2796 0100 0000804F 	 .word 1333788672
 2797 0104 286B6E4E 	 .word 1315859240
 2798              	 .cfi_endproc
 2799              	.LFE262:
 2801              	 .section .text.XMC_ETH_MAC_InitPTPEx,"ax",%progbits
 2802              	 .align 2
 2803              	 .global XMC_ETH_MAC_InitPTPEx
 2804              	 .thumb
 2805              	 .thumb_func
 2807              	XMC_ETH_MAC_InitPTPEx:
 2808              	.LFB263:
 811:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 812:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize PTP using a given time */
 813:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitPTPEx(XMC_ETH_MAC_t *const eth_mac, uint32_t config, XMC_ETH_MAC_TIME_t *const
 814:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2809              	 .loc 3 814 0
 2810              	 .cfi_startproc
 2811              	 
 2812              	 
 2813 0000 80B5     	 push {r7,lr}
 2814              	.LCFI187:
 2815              	 .cfi_def_cfa_offset 8
 2816              	 .cfi_offset 7,-8
 2817              	 .cfi_offset 14,-4
 2818 0002 84B0     	 sub sp,sp,#16
 2819              	.LCFI188:
 2820              	 .cfi_def_cfa_offset 24
 2821 0004 00AF     	 add r7,sp,#0
 2822              	.LCFI189:
 2823              	 .cfi_def_cfa_register 7
 2824 0006 F860     	 str r0,[r7,#12]
 2825 0008 B960     	 str r1,[r7,#8]
 2826 000a 7A60     	 str r2,[r7,#4]
 815:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 816:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 817:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize the system time */
 818:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 2827              	 .loc 3 818 0
 2828 000c FB68     	 ldr r3,[r7,#12]
 2829 000e 1B68     	 ldr r3,[r3]
 2830 0010 7A68     	 ldr r2,[r7,#4]
 2831 0012 5268     	 ldr r2,[r2,#4]
 2832 0014 C3F81427 	 str r2,[r3,#1812]
 819:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 2833              	 .loc 3 819 0
 2834 0018 FB68     	 ldr r3,[r7,#12]
 2835 001a 1B68     	 ldr r3,[r3]
 2836 001c 7A68     	 ldr r2,[r7,#4]
 2837 001e 1268     	 ldr r2,[r2]
 2838 0020 C3F81027 	 str r2,[r3,#1808]
 820:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 821:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitPTP(eth_mac, config);
 2839              	 .loc 3 821 0
 2840 0024 F868     	 ldr r0,[r7,#12]
 2841 0026 B968     	 ldr r1,[r7,#8]
 2842 0028 FFF7FEFF 	 bl XMC_ETH_MAC_InitPTP
 822:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2843              	 .loc 3 822 0
 2844 002c 1037     	 adds r7,r7,#16
 2845              	.LCFI190:
 2846              	 .cfi_def_cfa_offset 8
 2847 002e BD46     	 mov sp,r7
 2848              	.LCFI191:
 2849              	 .cfi_def_cfa_register 13
 2850              	 
 2851 0030 80BD     	 pop {r7,pc}
 2852              	 .cfi_endproc
 2853              	.LFE263:
 2855 0032 00BF     	 .section .text.XMC_ETH_MAC_GetPTPTime,"ax",%progbits
 2856              	 .align 2
 2857              	 .global XMC_ETH_MAC_GetPTPTime
 2858              	 .thumb
 2859              	 .thumb_func
 2861              	XMC_ETH_MAC_GetPTPTime:
 2862              	.LFB264:
 823:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 824:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get PTP time */
 825:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_GetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
 826:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2863              	 .loc 3 826 0
 2864              	 .cfi_startproc
 2865              	 
 2866              	 
 2867              	 
 2868 0000 80B4     	 push {r7}
 2869              	.LCFI192:
 2870              	 .cfi_def_cfa_offset 4
 2871              	 .cfi_offset 7,-4
 2872 0002 83B0     	 sub sp,sp,#12
 2873              	.LCFI193:
 2874              	 .cfi_def_cfa_offset 16
 2875 0004 00AF     	 add r7,sp,#0
 2876              	.LCFI194:
 2877              	 .cfi_def_cfa_register 7
 2878 0006 7860     	 str r0,[r7,#4]
 2879 0008 3960     	 str r1,[r7]
 827:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 828:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 829:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->nanoseconds = (uint32_t)(eth_mac->regs->SYSTEM_TIME_NANOSECONDS); /* accuracy of 1 ns */
 2880              	 .loc 3 829 0
 2881 000a 7B68     	 ldr r3,[r7,#4]
 2882 000c 1B68     	 ldr r3,[r3]
 2883 000e D3F80C37 	 ldr r3,[r3,#1804]
 2884 0012 1A46     	 mov r2,r3
 2885 0014 3B68     	 ldr r3,[r7]
 2886 0016 5A60     	 str r2,[r3,#4]
 830:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->seconds = eth_mac->regs->SYSTEM_TIME_SECONDS;
 2887              	 .loc 3 830 0
 2888 0018 7B68     	 ldr r3,[r7,#4]
 2889 001a 1B68     	 ldr r3,[r3]
 2890 001c D3F80827 	 ldr r2,[r3,#1800]
 2891 0020 3B68     	 ldr r3,[r7]
 2892 0022 1A60     	 str r2,[r3]
 831:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2893              	 .loc 3 831 0
 2894 0024 0C37     	 adds r7,r7,#12
 2895              	.LCFI195:
 2896              	 .cfi_def_cfa_offset 4
 2897 0026 BD46     	 mov sp,r7
 2898              	.LCFI196:
 2899              	 .cfi_def_cfa_register 13
 2900              	 
 2901 0028 5DF8047B 	 ldr r7,[sp],#4
 2902              	.LCFI197:
 2903              	 .cfi_restore 7
 2904              	 .cfi_def_cfa_offset 0
 2905 002c 7047     	 bx lr
 2906              	 .cfi_endproc
 2907              	.LFE264:
 2909 002e 00BF     	 .section .text.XMC_ETH_MAC_SetPTPTime,"ax",%progbits
 2910              	 .align 2
 2911              	 .global XMC_ETH_MAC_SetPTPTime
 2912              	 .thumb
 2913              	 .thumb_func
 2915              	XMC_ETH_MAC_SetPTPTime:
 2916              	.LFB265:
 832:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 833:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP time */
 834:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
 835:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2917              	 .loc 3 835 0
 2918              	 .cfi_startproc
 2919              	 
 2920              	 
 2921              	 
 2922 0000 80B4     	 push {r7}
 2923              	.LCFI198:
 2924              	 .cfi_def_cfa_offset 4
 2925              	 .cfi_offset 7,-4
 2926 0002 83B0     	 sub sp,sp,#12
 2927              	.LCFI199:
 2928              	 .cfi_def_cfa_offset 16
 2929 0004 00AF     	 add r7,sp,#0
 2930              	.LCFI200:
 2931              	 .cfi_def_cfa_register 7
 2932 0006 7860     	 str r0,[r7,#4]
 2933 0008 3960     	 str r1,[r7]
 836:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 837:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 838:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 2934              	 .loc 3 838 0
 2935 000a 7B68     	 ldr r3,[r7,#4]
 2936 000c 1B68     	 ldr r3,[r3]
 2937 000e 3A68     	 ldr r2,[r7]
 2938 0010 1268     	 ldr r2,[r2]
 2939 0012 C3F81027 	 str r2,[r3,#1808]
 839:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 2940              	 .loc 3 839 0
 2941 0016 7B68     	 ldr r3,[r7,#4]
 2942 0018 1B68     	 ldr r3,[r3]
 2943 001a 3A68     	 ldr r2,[r7]
 2944 001c 5268     	 ldr r2,[r2,#4]
 2945 001e C3F81427 	 str r2,[r3,#1812]
 840:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 841:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize precision timer */
 842:../Libraries/XMCLib/src/xmc_eth_mac.c ****   ETH0->TIMESTAMP_CONTROL |= ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 2946              	 .loc 3 842 0
 2947 0022 0B4A     	 ldr r2,.L113
 2948 0024 0A4B     	 ldr r3,.L113
 2949 0026 D3F80037 	 ldr r3,[r3,#1792]
 2950 002a 43F00403 	 orr r3,r3,#4
 2951 002e C2F80037 	 str r3,[r2,#1792]
 843:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);
 2952              	 .loc 3 843 0
 2953 0032 00BF     	 nop
 2954              	.L112:
 2955              	 .loc 3 843 0 is_stmt 0 discriminator 1
 2956 0034 7B68     	 ldr r3,[r7,#4]
 2957 0036 1B68     	 ldr r3,[r3]
 2958 0038 D3F80037 	 ldr r3,[r3,#1792]
 2959 003c 03F00403 	 and r3,r3,#4
 2960 0040 002B     	 cmp r3,#0
 2961 0042 F7D1     	 bne .L112
 844:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2962              	 .loc 3 844 0 is_stmt 1
 2963 0044 0C37     	 adds r7,r7,#12
 2964              	.LCFI201:
 2965              	 .cfi_def_cfa_offset 4
 2966 0046 BD46     	 mov sp,r7
 2967              	.LCFI202:
 2968              	 .cfi_def_cfa_register 13
 2969              	 
 2970 0048 5DF8047B 	 ldr r7,[sp],#4
 2971              	.LCFI203:
 2972              	 .cfi_restore 7
 2973              	 .cfi_def_cfa_offset 0
 2974 004c 7047     	 bx lr
 2975              	.L114:
 2976 004e 00BF     	 .align 2
 2977              	.L113:
 2978 0050 00C00050 	 .word 1342226432
 2979              	 .cfi_endproc
 2980              	.LFE265:
 2982              	 .section .text.XMC_ETH_MAC_UpdatePTPTime,"ax",%progbits
 2983              	 .align 2
 2984              	 .global XMC_ETH_MAC_UpdatePTPTime
 2985              	 .thumb
 2986              	 .thumb_func
 2988              	XMC_ETH_MAC_UpdatePTPTime:
 2989              	.LFB266:
 845:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 846:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Update PTP time */
 847:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_UpdatePTPTime(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 848:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2990              	 .loc 3 848 0
 2991              	 .cfi_startproc
 2992              	 
 2993              	 
 2994              	 
 2995 0000 80B4     	 push {r7}
 2996              	.LCFI204:
 2997              	 .cfi_def_cfa_offset 4
 2998              	 .cfi_offset 7,-4
 2999 0002 85B0     	 sub sp,sp,#20
 3000              	.LCFI205:
 3001              	 .cfi_def_cfa_offset 24
 3002 0004 00AF     	 add r7,sp,#0
 3003              	.LCFI206:
 3004              	 .cfi_def_cfa_register 7
 3005 0006 7860     	 str r0,[r7,#4]
 3006 0008 3960     	 str r1,[r7]
 849:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp;
 850:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 851:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->re
 852:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: time.time_stamp_nanoseconds not in range", (time->nanoseco
 853:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 854:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp = (uint32_t)(abs(time->nanoseconds));
 3007              	 .loc 3 854 0
 3008 000a 3B68     	 ldr r3,[r7]
 3009 000c 5B68     	 ldr r3,[r3,#4]
 3010 000e 002B     	 cmp r3,#0
 3011 0010 B8BF     	 it lt
 3012 0012 5B42     	 rsblt r3,r3,#0
 3013 0014 FB60     	 str r3,[r7,#12]
 855:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (time->nanoseconds < 0)
 3014              	 .loc 3 855 0
 3015 0016 3B68     	 ldr r3,[r7]
 3016 0018 5B68     	 ldr r3,[r3,#4]
 3017 001a 002B     	 cmp r3,#0
 3018 001c 03DA     	 bge .L116
 856:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 857:../Libraries/XMCLib/src/xmc_eth_mac.c ****     temp |= (uint32_t)ETH_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_Msk;
 3019              	 .loc 3 857 0
 3020 001e FB68     	 ldr r3,[r7,#12]
 3021 0020 43F00043 	 orr r3,r3,#-2147483648
 3022 0024 FB60     	 str r3,[r7,#12]
 3023              	.L116:
 858:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 859:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 860:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = temp;
 3024              	 .loc 3 860 0
 3025 0026 7B68     	 ldr r3,[r7,#4]
 3026 0028 1B68     	 ldr r3,[r3]
 3027 002a FA68     	 ldr r2,[r7,#12]
 3028 002c C3F81427 	 str r2,[r3,#1812]
 861:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 3029              	 .loc 3 861 0
 3030 0030 7B68     	 ldr r3,[r7,#4]
 3031 0032 1B68     	 ldr r3,[r3]
 3032 0034 3A68     	 ldr r2,[r7]
 3033 0036 1268     	 ldr r2,[r2]
 3034 0038 C3F81027 	 str r2,[r3,#1808]
 862:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 863:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSUPDT_Msk;
 3035              	 .loc 3 863 0
 3036 003c 7B68     	 ldr r3,[r7,#4]
 3037 003e 1B68     	 ldr r3,[r3]
 3038 0040 7A68     	 ldr r2,[r7,#4]
 3039 0042 1268     	 ldr r2,[r2]
 3040 0044 D2F80027 	 ldr r2,[r2,#1792]
 3041 0048 42F00802 	 orr r2,r2,#8
 3042 004c C3F80027 	 str r2,[r3,#1792]
 864:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 3043              	 .loc 3 864 0
 3044 0050 1437     	 adds r7,r7,#20
 3045              	.LCFI207:
 3046              	 .cfi_def_cfa_offset 4
 3047 0052 BD46     	 mov sp,r7
 3048              	.LCFI208:
 3049              	 .cfi_def_cfa_register 13
 3050              	 
 3051 0054 5DF8047B 	 ldr r7,[sp],#4
 3052              	.LCFI209:
 3053              	 .cfi_restore 7
 3054              	 .cfi_def_cfa_offset 0
 3055 0058 7047     	 bx lr
 3056              	 .cfi_endproc
 3057              	.LFE266:
 3059 005a 00BF     	 .section .text.XMC_ETH_MAC_SetPTPAlarm,"ax",%progbits
 3060              	 .align 2
 3061              	 .global XMC_ETH_MAC_SetPTPAlarm
 3062              	 .thumb
 3063              	 .thumb_func
 3065              	XMC_ETH_MAC_SetPTPAlarm:
 3066              	.LFB267:
 865:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 866:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP alarm */
 867:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetPTPAlarm(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 868:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 3067              	 .loc 3 868 0
 3068              	 .cfi_startproc
 3069              	 
 3070              	 
 3071              	 
 3072 0000 80B4     	 push {r7}
 3073              	.LCFI210:
 3074              	 .cfi_def_cfa_offset 4
 3075              	 .cfi_offset 7,-4
 3076 0002 83B0     	 sub sp,sp,#12
 3077              	.LCFI211:
 3078              	 .cfi_def_cfa_offset 16
 3079 0004 00AF     	 add r7,sp,#0
 3080              	.LCFI212:
 3081              	 .cfi_def_cfa_register 7
 3082 0006 7860     	 str r0,[r7,#4]
 3083 0008 3960     	 str r1,[r7]
 869:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs
 870:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: time.time_stamp_nanoseconds not in range", (time->nanosecond
 871:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 872:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_NANOSECONDS = time->nanoseconds;
 3084              	 .loc 3 872 0
 3085 000a 7B68     	 ldr r3,[r7,#4]
 3086 000c 1B68     	 ldr r3,[r3]
 3087 000e 3A68     	 ldr r2,[r7]
 3088 0010 5268     	 ldr r2,[r2,#4]
 3089 0012 C3F82027 	 str r2,[r3,#1824]
 873:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_SECONDS = time->seconds;
 3090              	 .loc 3 873 0
 3091 0016 7B68     	 ldr r3,[r7,#4]
 3092 0018 1B68     	 ldr r3,[r3]
 3093 001a 3A68     	 ldr r2,[r7]
 3094 001c 1268     	 ldr r2,[r2]
 3095 001e C3F81C27 	 str r2,[r3,#1820]
 874:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 3096              	 .loc 3 874 0
 3097 0022 0C37     	 adds r7,r7,#12
 3098              	.LCFI213:
 3099              	 .cfi_def_cfa_offset 4
 3100 0024 BD46     	 mov sp,r7
 3101              	.LCFI214:
 3102              	 .cfi_def_cfa_register 13
 3103              	 
 3104 0026 5DF8047B 	 ldr r7,[sp],#4
 3105              	.LCFI215:
 3106              	 .cfi_restore 7
 3107              	 .cfi_def_cfa_offset 0
 3108 002a 7047     	 bx lr
 3109              	 .cfi_endproc
 3110              	.LFE267:
 3112              	 .section .text.XMC_ETH_MAC_AdjustPTPClock,"ax",%progbits
 3113              	 .align 2
 3114              	 .global XMC_ETH_MAC_AdjustPTPClock
 3115              	 .thumb
 3116              	 .thumb_func
 3118              	XMC_ETH_MAC_AdjustPTPClock:
 3119              	.LFB268:
 875:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 876:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Adjust PTP clock */
 877:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_AdjustPTPClock(XMC_ETH_MAC_t *const eth_mac, uint32_t correction)
 878:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 3120              	 .loc 3 878 0
 3121              	 .cfi_startproc
 3122              	 
 3123              	 
 3124 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 3125              	.LCFI216:
 3126              	 .cfi_def_cfa_offset 20
 3127              	 .cfi_offset 4,-20
 3128              	 .cfi_offset 5,-16
 3129              	 .cfi_offset 6,-12
 3130              	 .cfi_offset 7,-8
 3131              	 .cfi_offset 14,-4
 3132 0002 83B0     	 sub sp,sp,#12
 3133              	.LCFI217:
 3134              	 .cfi_def_cfa_offset 32
 3135 0004 00AF     	 add r7,sp,#0
 3136              	.LCFI218:
 3137              	 .cfi_def_cfa_register 7
 3138 0006 7860     	 str r0,[r7,#4]
 3139 0008 3960     	 str r1,[r7]
 879:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 880:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 881:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Correction factor is Q31 (0x80000000 = 1.000000000) */
 882:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((uint64_t)correction * eth_mac->regs->TIMESTAMP_ADD
 3140              	 .loc 3 882 0
 3141 000a 7B68     	 ldr r3,[r7,#4]
 3142 000c 1E68     	 ldr r6,[r3]
 3143 000e 3B68     	 ldr r3,[r7]
 3144 0010 1846     	 mov r0,r3
 3145 0012 4FF00001 	 mov r1,#0
 3146 0016 7B68     	 ldr r3,[r7,#4]
 3147 0018 1B68     	 ldr r3,[r3]
 3148 001a D3F81837 	 ldr r3,[r3,#1816]
 3149 001e 1A46     	 mov r2,r3
 3150 0020 4FF00003 	 mov r3,#0
 3151 0024 02FB01FC 	 mul ip,r2,r1
 3152 0028 00FB03FE 	 mul lr,r0,r3
 3153 002c E644     	 add lr,lr,ip
 3154 002e A0FB0223 	 umull r2,r3,r0,r2
 3155 0032 0EEB0301 	 add r1,lr,r3
 3156 0036 0B46     	 mov r3,r1
 3157 0038 D40F     	 lsrs r4,r2,#31
 3158 003a 44EA4304 	 orr r4,r4,r3,lsl#1
 3159 003e DD0F     	 lsrs r5,r3,#31
 3160 0040 2346     	 mov r3,r4
 3161 0042 C6F81837 	 str r3,[r6,#1816]
 883:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 884:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Update addend register */
 885:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 3162              	 .loc 3 885 0
 3163 0046 7B68     	 ldr r3,[r7,#4]
 3164 0048 1B68     	 ldr r3,[r3]
 3165 004a 7A68     	 ldr r2,[r7,#4]
 3166 004c 1268     	 ldr r2,[r2]
 3167 004e D2F80027 	 ldr r2,[r2,#1792]
 3168 0052 42F02002 	 orr r2,r2,#32
 3169 0056 C3F80027 	 str r2,[r3,#1792]
 886:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 887:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 888:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);  
 3170              	 .loc 3 888 0
 3171 005a 00BF     	 nop
 3172              	.L119:
 3173              	 .loc 3 888 0 is_stmt 0 discriminator 1
 3174 005c 7B68     	 ldr r3,[r7,#4]
 3175 005e 1B68     	 ldr r3,[r3]
 3176 0060 D3F80037 	 ldr r3,[r3,#1792]
 3177 0064 03F02003 	 and r3,r3,#32
 3178 0068 002B     	 cmp r3,#0
 3179 006a F7D1     	 bne .L119
 889:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 3180              	 .loc 3 889 0 is_stmt 1
 3181 006c 0C37     	 adds r7,r7,#12
 3182              	.LCFI219:
 3183              	 .cfi_def_cfa_offset 20
 3184 006e BD46     	 mov sp,r7
 3185              	.LCFI220:
 3186              	 .cfi_def_cfa_register 13
 3187              	 
 3188 0070 F0BD     	 pop {r4,r5,r6,r7,pc}
 3189              	 .cfi_endproc
 3190              	.LFE268:
 3192 0072 00BF     	 .section .text.XMC_ETH_MAC_UpdateAddend,"ax",%progbits
 3193              	 .align 2
 3194              	 .global XMC_ETH_MAC_UpdateAddend
 3195              	 .thumb
 3196              	 .thumb_func
 3198              	XMC_ETH_MAC_UpdateAddend:
 3199              	.LFB269:
 890:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 891:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Update Addend */
 892:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_UpdateAddend(XMC_ETH_MAC_t *const eth_mac, uint32_t addend)
 893:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 3200              	 .loc 3 893 0
 3201              	 .cfi_startproc
 3202              	 
 3203              	 
 3204              	 
 3205 0000 80B4     	 push {r7}
 3206              	.LCFI221:
 3207              	 .cfi_def_cfa_offset 4
 3208              	 .cfi_offset 7,-4
 3209 0002 83B0     	 sub sp,sp,#12
 3210              	.LCFI222:
 3211              	 .cfi_def_cfa_offset 16
 3212 0004 00AF     	 add r7,sp,#0
 3213              	.LCFI223:
 3214              	 .cfi_def_cfa_register 7
 3215 0006 7860     	 str r0,[r7,#4]
 3216 0008 3960     	 str r1,[r7]
 894:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 895:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 896:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_ADDEND = addend;
 3217              	 .loc 3 896 0
 3218 000a 7B68     	 ldr r3,[r7,#4]
 3219 000c 1B68     	 ldr r3,[r3]
 3220 000e 3A68     	 ldr r2,[r7]
 3221 0010 C3F81827 	 str r2,[r3,#1816]
 897:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 898:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Update addend register */
 899:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 3222              	 .loc 3 899 0
 3223 0014 7B68     	 ldr r3,[r7,#4]
 3224 0016 1B68     	 ldr r3,[r3]
 3225 0018 7A68     	 ldr r2,[r7,#4]
 3226 001a 1268     	 ldr r2,[r2]
 3227 001c D2F80027 	 ldr r2,[r2,#1792]
 3228 0020 42F02002 	 orr r2,r2,#32
 3229 0024 C3F80027 	 str r2,[r3,#1792]
 900:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 901:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
 902:../Libraries/XMCLib/src/xmc_eth_mac.c ****   while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 3230              	 .loc 3 902 0
 3231 0028 00BF     	 nop
 3232              	.L121:
 3233              	 .loc 3 902 0 is_stmt 0 discriminator 1
 3234 002a 7B68     	 ldr r3,[r7,#4]
 3235 002c 1B68     	 ldr r3,[r3]
 3236 002e D3F80037 	 ldr r3,[r3,#1792]
 3237 0032 03F02003 	 and r3,r3,#32
 3238 0036 002B     	 cmp r3,#0
 3239 0038 F7D1     	 bne .L121
 903:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 3240              	 .loc 3 903 0 is_stmt 1
 3241 003a 0C37     	 adds r7,r7,#12
 3242              	.LCFI224:
 3243              	 .cfi_def_cfa_offset 4
 3244 003c BD46     	 mov sp,r7
 3245              	.LCFI225:
 3246              	 .cfi_def_cfa_register 13
 3247              	 
 3248 003e 5DF8047B 	 ldr r7,[sp],#4
 3249              	.LCFI226:
 3250              	 .cfi_restore 7
 3251              	 .cfi_def_cfa_offset 0
 3252 0042 7047     	 bx lr
 3253              	 .cfi_endproc
 3254              	.LFE269:
 3256              	 .section .text.XMC_ETH_MAC_GetPTPStatus,"ax",%progbits
 3257              	 .align 2
 3258              	 .global XMC_ETH_MAC_GetPTPStatus
 3259              	 .thumb
 3260              	 .thumb_func
 3262              	XMC_ETH_MAC_GetPTPStatus:
 3263              	.LFB270:
 904:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 905:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP status */
 906:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetPTPStatus(const XMC_ETH_MAC_t *const eth_mac)
 907:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 3264              	 .loc 3 907 0
 3265              	 .cfi_startproc
 3266              	 
 3267              	 
 3268              	 
 3269 0000 80B4     	 push {r7}
 3270              	.LCFI227:
 3271              	 .cfi_def_cfa_offset 4
 3272              	 .cfi_offset 7,-4
 3273 0002 83B0     	 sub sp,sp,#12
 3274              	.LCFI228:
 3275              	 .cfi_def_cfa_offset 16
 3276 0004 00AF     	 add r7,sp,#0
 3277              	.LCFI229:
 3278              	 .cfi_def_cfa_register 7
 3279 0006 7860     	 str r0,[r7,#4]
 908:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->reg
 909:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 910:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth_mac->regs->TIMESTAMP_STATUS);
 3280              	 .loc 3 910 0
 3281 0008 7B68     	 ldr r3,[r7,#4]
 3282 000a 1B68     	 ldr r3,[r3]
 3283 000c D3F82837 	 ldr r3,[r3,#1832]
 911:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 3284              	 .loc 3 911 0
 3285 0010 1846     	 mov r0,r3
 3286 0012 0C37     	 adds r7,r7,#12
 3287              	.LCFI230:
 3288              	 .cfi_def_cfa_offset 4
 3289 0014 BD46     	 mov sp,r7
 3290              	.LCFI231:
 3291              	 .cfi_def_cfa_register 13
 3292              	 
 3293 0016 5DF8047B 	 ldr r7,[sp],#4
 3294              	.LCFI232:
 3295              	 .cfi_restore 7
 3296              	 .cfi_def_cfa_offset 0
 3297 001a 7047     	 bx lr
 3298              	 .cfi_endproc
 3299              	.LFE270:
 3301              	 .section .text.XMC_ETH_MAC_GetRxTimeStamp,"ax",%progbits
 3302              	 .align 2
 3303              	 .global XMC_ETH_MAC_GetRxTimeStamp
 3304              	 .thumb
 3305              	 .thumb_func
 3307              	XMC_ETH_MAC_GetRxTimeStamp:
 3308              	.LFB271:
 912:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 913:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 914:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetRxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 915:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 3309              	 .loc 3 915 0
 3310              	 .cfi_startproc
 3311              	 
 3312              	 
 3313              	 
 3314 0000 80B4     	 push {r7}
 3315              	.LCFI233:
 3316              	 .cfi_def_cfa_offset 4
 3317              	 .cfi_offset 7,-4
 3318 0002 85B0     	 sub sp,sp,#20
 3319              	.LCFI234:
 3320              	 .cfi_def_cfa_offset 24
 3321 0004 00AF     	 add r7,sp,#0
 3322              	.LCFI235:
 3323              	 .cfi_def_cfa_register 7
 3324 0006 7860     	 str r0,[r7,#4]
 3325 0008 3960     	 str r1,[r7]
 916:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc;
 917:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 918:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 919:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 920:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: time is invalid", time != NULL);
 921:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 922:../Libraries/XMCLib/src/xmc_eth_mac.c ****   rx_desc = &eth_mac->rx_desc[eth_mac->rx_index];
 3326              	 .loc 3 922 0
 3327 000a 7B68     	 ldr r3,[r7,#4]
 3328 000c 1A69     	 ldr r2,[r3,#16]
 3329 000e 7B68     	 ldr r3,[r7,#4]
 3330 0010 93F82730 	 ldrb r3,[r3,#39]
 3331 0014 5B01     	 lsls r3,r3,#5
 3332 0016 1344     	 add r3,r3,r2
 3333 0018 BB60     	 str r3,[r7,#8]
 923:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (rx_desc->status & ETH_MAC_DMA_RDES0_OWN)
 3334              	 .loc 3 923 0
 3335 001a BB68     	 ldr r3,[r7,#8]
 3336 001c 1B68     	 ldr r3,[r3]
 3337 001e 002B     	 cmp r3,#0
 3338 0020 02DA     	 bge .L125
 924:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 925:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 3339              	 .loc 3 925 0
 3340 0022 0123     	 movs r3,#1
 3341 0024 FB73     	 strb r3,[r7,#15]
 3342 0026 14E0     	 b .L126
 3343              	.L125:
 926:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 927:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 928:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 929:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((rx_desc->status & (ETH_MAC_DMA_RDES0_TSA | ETH_MAC_DMA_RDES0_LS)) == (ETH_MAC_DMA_RDES0_TS
 3344              	 .loc 3 929 0
 3345 0028 BB68     	 ldr r3,[r7,#8]
 3346 002a 1B68     	 ldr r3,[r3]
 3347 002c 03F4C073 	 and r3,r3,#384
 3348 0030 B3F5C07F 	 cmp r3,#384
 3349 0034 0BD1     	 bne .L127
 930:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 931:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->nanoseconds = (int32_t)(rx_desc->time_stamp_nanoseconds);
 3350              	 .loc 3 931 0
 3351 0036 BB68     	 ldr r3,[r7,#8]
 3352 0038 9B69     	 ldr r3,[r3,#24]
 3353 003a 1A46     	 mov r2,r3
 3354 003c 3B68     	 ldr r3,[r7]
 3355 003e 5A60     	 str r2,[r3,#4]
 932:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->seconds = rx_desc->time_stamp_seconds;      
 3356              	 .loc 3 932 0
 3357 0040 BB68     	 ldr r3,[r7,#8]
 3358 0042 DA69     	 ldr r2,[r3,#28]
 3359 0044 3B68     	 ldr r3,[r7]
 3360 0046 1A60     	 str r2,[r3]
 933:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 934:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_OK;
 3361              	 .loc 3 934 0
 3362 0048 0023     	 movs r3,#0
 3363 004a FB73     	 strb r3,[r7,#15]
 3364 004c 01E0     	 b .L126
 3365              	.L127:
 935:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 936:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 937:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 938:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_ERROR;  
 3366              	 .loc 3 938 0
 3367 004e 0223     	 movs r3,#2
 3368 0050 FB73     	 strb r3,[r7,#15]
 3369              	.L126:
 939:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 940:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 941:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 942:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 3370              	 .loc 3 942 0
 3371 0052 FB7B     	 ldrb r3,[r7,#15]
 943:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 3372              	 .loc 3 943 0
 3373 0054 1846     	 mov r0,r3
 3374 0056 1437     	 adds r7,r7,#20
 3375              	.LCFI236:
 3376              	 .cfi_def_cfa_offset 4
 3377 0058 BD46     	 mov sp,r7
 3378              	.LCFI237:
 3379              	 .cfi_def_cfa_register 13
 3380              	 
 3381 005a 5DF8047B 	 ldr r7,[sp],#4
 3382              	.LCFI238:
 3383              	 .cfi_restore 7
 3384              	 .cfi_def_cfa_offset 0
 3385 005e 7047     	 bx lr
 3386              	 .cfi_endproc
 3387              	.LFE271:
 3389              	 .section .text.XMC_ETH_MAC_GetTxTimeStamp,"ax",%progbits
 3390              	 .align 2
 3391              	 .global XMC_ETH_MAC_GetTxTimeStamp
 3392              	 .thumb
 3393              	 .thumb_func
 3395              	XMC_ETH_MAC_GetTxTimeStamp:
 3396              	.LFB272:
 944:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 945:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 946:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetTxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 947:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 3397              	 .loc 3 947 0
 3398              	 .cfi_startproc
 3399              	 
 3400              	 
 3401              	 
 3402 0000 80B4     	 push {r7}
 3403              	.LCFI239:
 3404              	 .cfi_def_cfa_offset 4
 3405              	 .cfi_offset 7,-4
 3406 0002 85B0     	 sub sp,sp,#20
 3407              	.LCFI240:
 3408              	 .cfi_def_cfa_offset 24
 3409 0004 00AF     	 add r7,sp,#0
 3410              	.LCFI241:
 3411              	 .cfi_def_cfa_register 7
 3412 0006 7860     	 str r0,[r7,#4]
 3413 0008 3960     	 str r1,[r7]
 948:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc;
 949:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 950:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 951:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 952:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: time is invalid", time != NULL);
 953:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 954:../Libraries/XMCLib/src/xmc_eth_mac.c ****   tx_desc = &eth_mac->tx_desc[eth_mac->tx_ts_index];
 3414              	 .loc 3 954 0
 3415 000a 7B68     	 ldr r3,[r7,#4]
 3416 000c 5A69     	 ldr r2,[r3,#20]
 3417 000e 7B68     	 ldr r3,[r7,#4]
 3418 0010 93F82830 	 ldrb r3,[r3,#40]
 3419 0014 5B01     	 lsls r3,r3,#5
 3420 0016 1344     	 add r3,r3,r2
 3421 0018 BB60     	 str r3,[r7,#8]
 955:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (tx_desc->status & ETH_MAC_DMA_TDES0_OWN)
 3422              	 .loc 3 955 0
 3423 001a BB68     	 ldr r3,[r7,#8]
 3424 001c 1B68     	 ldr r3,[r3]
 3425 001e 002B     	 cmp r3,#0
 3426 0020 02DA     	 bge .L130
 956:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 957:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 3427              	 .loc 3 957 0
 3428 0022 0123     	 movs r3,#1
 3429 0024 FB73     	 strb r3,[r7,#15]
 3430 0026 14E0     	 b .L131
 3431              	.L130:
 958:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 959:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 960:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 961:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((tx_desc->status & (ETH_MAC_DMA_TDES0_TTSS | ETH_MAC_DMA_TDES0_LS)) == (ETH_MAC_DMA_TDES0_T
 3432              	 .loc 3 961 0
 3433 0028 BB68     	 ldr r3,[r7,#8]
 3434 002a 1A68     	 ldr r2,[r3]
 3435 002c 0C4B     	 ldr r3,.L134
 3436 002e 1340     	 ands r3,r3,r2
 3437 0030 0B4A     	 ldr r2,.L134
 3438 0032 9342     	 cmp r3,r2
 3439 0034 0BD1     	 bne .L132
 962:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 963:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->nanoseconds = (int32_t)(tx_desc->time_stamp_nanoseconds); /* accuracy of 1 ns */
 3440              	 .loc 3 963 0
 3441 0036 BB68     	 ldr r3,[r7,#8]
 3442 0038 9B69     	 ldr r3,[r3,#24]
 3443 003a 1A46     	 mov r2,r3
 3444 003c 3B68     	 ldr r3,[r7]
 3445 003e 5A60     	 str r2,[r3,#4]
 964:../Libraries/XMCLib/src/xmc_eth_mac.c ****       time->seconds = tx_desc->time_stamp_seconds;
 3446              	 .loc 3 964 0
 3447 0040 BB68     	 ldr r3,[r7,#8]
 3448 0042 DA69     	 ldr r2,[r3,#28]
 3449 0044 3B68     	 ldr r3,[r7]
 3450 0046 1A60     	 str r2,[r3]
 965:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 966:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_OK;
 3451              	 .loc 3 966 0
 3452 0048 0023     	 movs r3,#0
 3453 004a FB73     	 strb r3,[r7,#15]
 3454 004c 01E0     	 b .L131
 3455              	.L132:
 967:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 968:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 969:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 970:../Libraries/XMCLib/src/xmc_eth_mac.c ****       status = XMC_ETH_MAC_STATUS_ERROR;
 3456              	 .loc 3 970 0
 3457 004e 0223     	 movs r3,#2
 3458 0050 FB73     	 strb r3,[r7,#15]
 3459              	.L131:
 971:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 972:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 973:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 974:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 3460              	 .loc 3 974 0
 3461 0052 FB7B     	 ldrb r3,[r7,#15]
 975:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 3462              	 .loc 3 975 0
 3463 0054 1846     	 mov r0,r3
 3464 0056 1437     	 adds r7,r7,#20
 3465              	.LCFI242:
 3466              	 .cfi_def_cfa_offset 4
 3467 0058 BD46     	 mov sp,r7
 3468              	.LCFI243:
 3469              	 .cfi_def_cfa_register 13
 3470              	 
 3471 005a 5DF8047B 	 ldr r7,[sp],#4
 3472              	.LCFI244:
 3473              	 .cfi_restore 7
 3474              	 .cfi_def_cfa_offset 0
 3475 005e 7047     	 bx lr
 3476              	.L135:
 3477              	 .align 2
 3478              	.L134:
 3479 0060 00000220 	 .word 537001984
 3480              	 .cfi_endproc
 3481              	.LFE272:
 3483              	 .text
 3484              	.Letext0:
 3485              	 .file 4 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3486              	 .file 5 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3487              	 .file 6 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Infineon/XMC4300_series/Include/XMC4300.h"
 3488              	 .file 7 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/cmsis_gcc.h"
 3489              	 .file 8 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Include/core_cm4.h"
 3490              	 .file 9 "C:/Users/Admin/DaveWorkspaces/XMC4300_Motor_Controller/Libraries/CMSIS/Infineon/XMC4300_series/Include/system_XMC4300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eth_mac.c
    {standard input}:20     .text.XMC_ETH_MAC_Reset:00000000 $t
    {standard input}:24     .text.XMC_ETH_MAC_Reset:00000000 XMC_ETH_MAC_Reset
    {standard input}:81     .text.XMC_ETH_MAC_SetAddress:00000000 $t
    {standard input}:85     .text.XMC_ETH_MAC_SetAddress:00000000 XMC_ETH_MAC_SetAddress
    {standard input}:138    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 $t
    {standard input}:142    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemClockFrequency
    {standard input}:178    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000020 $d
    {standard input}:184    .text.XMC_SCU_CLOCK_GetEthernetClockFrequency:00000000 $t
    {standard input}:188    .text.XMC_SCU_CLOCK_GetEthernetClockFrequency:00000000 XMC_SCU_CLOCK_GetEthernetClockFrequency
    {standard input}:213    .text.XCM_ETH_MAC_IsNormalEvent:00000000 $t
    {standard input}:217    .text.XCM_ETH_MAC_IsNormalEvent:00000000 XCM_ETH_MAC_IsNormalEvent
    {standard input}:263    .text.XCM_ETH_MAC_IsAbnormalEvent:00000000 $t
    {standard input}:267    .text.XCM_ETH_MAC_IsAbnormalEvent:00000000 XCM_ETH_MAC_IsAbnormalEvent
    {standard input}:312    .text.XMC_ETH_MAC_InitEx:00000000 $t
    {standard input}:317    .text.XMC_ETH_MAC_InitEx:00000000 XMC_ETH_MAC_InitEx
    {standard input}:476    .text.XMC_ETH_MAC_InitRxDescriptors:00000000 XMC_ETH_MAC_InitRxDescriptors
    {standard input}:601    .text.XMC_ETH_MAC_InitTxDescriptors:00000000 XMC_ETH_MAC_InitTxDescriptors
    {standard input}:410    .text.XMC_ETH_MAC_InitEx:00000090 $d
    {standard input}:416    .text.XMC_ETH_MAC_Init:00000000 $t
    {standard input}:421    .text.XMC_ETH_MAC_Init:00000000 XMC_ETH_MAC_Init
    {standard input}:1678   .text.XMC_ETH_MAC_Enable:00000000 XMC_ETH_MAC_Enable
    {standard input}:1549   .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 XMC_ETH_MAC_SetManagmentClockDivider
    {standard input}:471    .text.XMC_ETH_MAC_InitRxDescriptors:00000000 $t
    {standard input}:596    .text.XMC_ETH_MAC_InitTxDescriptors:00000000 $t
    {standard input}:712    .text.XMC_ETH_MAC_InitTxDescriptors:0000009c $d
    {standard input}:717    .text.XMC_ETH_MAC_SetAddressEx:00000000 $t
    {standard input}:722    .text.XMC_ETH_MAC_SetAddressEx:00000000 XMC_ETH_MAC_SetAddressEx
    {standard input}:793    .text.XMC_ETH_MAC_GetAddressEx:00000000 $t
    {standard input}:798    .text.XMC_ETH_MAC_GetAddressEx:00000000 XMC_ETH_MAC_GetAddressEx
    {standard input}:883    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 $t
    {standard input}:888    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 XMC_ETH_MAC_SetAddressPerfectFilter
    {standard input}:955    .text.XMC_ETH_MAC_SetAddressPerfectFilterEx:00000000 $t
    {standard input}:960    .text.XMC_ETH_MAC_SetAddressPerfectFilterEx:00000000 XMC_ETH_MAC_SetAddressPerfectFilterEx
    {standard input}:1047   .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 $t
    {standard input}:1052   .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 XMC_ETH_MAC_SetAddressHashFilter
    {standard input}:1105   .text.XMC_ETH_MAC_SendFrame:00000000 $t
    {standard input}:1110   .text.XMC_ETH_MAC_SendFrame:00000000 XMC_ETH_MAC_SendFrame
    {standard input}:1338   .text.XMC_ETH_MAC_ReadFrame:00000000 $t
    {standard input}:1343   .text.XMC_ETH_MAC_ReadFrame:00000000 XMC_ETH_MAC_ReadFrame
    {standard input}:1445   .text.XMC_ETH_MAC_GetRxFrameSize:00000000 $t
    {standard input}:1450   .text.XMC_ETH_MAC_GetRxFrameSize:00000000 XMC_ETH_MAC_GetRxFrameSize
    {standard input}:1539   .text.XMC_ETH_MAC_GetRxFrameSize:0000006c $d
    {standard input}:1544   .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 $t
    {standard input}:1663   .text.XMC_ETH_MAC_SetManagmentClockDivider:00000088 $d
    {standard input}:1673   .text.XMC_ETH_MAC_Enable:00000000 $t
    {standard input}:1717   .text.XMC_ETH_MAC_Enable:00000020 $d
    {standard input}:1722   .text.XMC_ETH_MAC_Disable:00000000 $t
    {standard input}:1727   .text.XMC_ETH_MAC_Disable:00000000 XMC_ETH_MAC_Disable
    {standard input}:1766   .text.XMC_ETH_MAC_Disable:00000020 $d
    {standard input}:1771   .text.XMC_ETH_MAC_ReadPhy:00000000 $t
    {standard input}:1776   .text.XMC_ETH_MAC_ReadPhy:00000000 XMC_ETH_MAC_ReadPhy
    {standard input}:1870   .text.XMC_ETH_MAC_WritePhy:00000000 $t
    {standard input}:1875   .text.XMC_ETH_MAC_WritePhy:00000000 XMC_ETH_MAC_WritePhy
    {standard input}:1971   .text.XMC_ETH_MAC_FlushTx:00000000 $t
    {standard input}:1976   .text.XMC_ETH_MAC_FlushTx:00000000 XMC_ETH_MAC_FlushTx
    {standard input}:2034   .text.XMC_ETH_MAC_FlushRx:00000000 $t
    {standard input}:2039   .text.XMC_ETH_MAC_FlushRx:00000000 XMC_ETH_MAC_FlushRx
    {standard input}:2097   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 $t
    {standard input}:2102   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 XMC_ETH_MAC_SetWakeUpFrameFilter
    {standard input}:2162   .text.XMC_ETH_MAC_EnableEvent:00000000 $t
    {standard input}:2167   .text.XMC_ETH_MAC_EnableEvent:00000000 XMC_ETH_MAC_EnableEvent
    {standard input}:2249   .text.XMC_ETH_MAC_DisableEvent:00000000 $t
    {standard input}:2254   .text.XMC_ETH_MAC_DisableEvent:00000000 XMC_ETH_MAC_DisableEvent
    {standard input}:2318   .text.XMC_ETH_MAC_ClearEventStatus:00000000 $t
    {standard input}:2323   .text.XMC_ETH_MAC_ClearEventStatus:00000000 XMC_ETH_MAC_ClearEventStatus
    {standard input}:2395   .text.XMC_ETH_MAC_GetEventStatus:00000000 $t
    {standard input}:2400   .text.XMC_ETH_MAC_GetEventStatus:00000000 XMC_ETH_MAC_GetEventStatus
    {standard input}:2455   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 $t
    {standard input}:2460   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 XMC_ETH_MAC_ReturnRxDescriptor
    {standard input}:2530   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 $t
    {standard input}:2535   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 XMC_ETH_MAC_ReturnTxDescriptor
    {standard input}:2615   .text.XMC_ETH_MAC_SetVLANTag:00000000 $t
    {standard input}:2620   .text.XMC_ETH_MAC_SetVLANTag:00000000 XMC_ETH_MAC_SetVLANTag
    {standard input}:2661   .text.XMC_ETH_MAC_InitPTP:00000000 $t
    {standard input}:2666   .text.XMC_ETH_MAC_InitPTP:00000000 XMC_ETH_MAC_InitPTP
    {standard input}:2795   .text.XMC_ETH_MAC_InitPTP:000000fc $d
    {standard input}:2802   .text.XMC_ETH_MAC_InitPTPEx:00000000 $t
    {standard input}:2807   .text.XMC_ETH_MAC_InitPTPEx:00000000 XMC_ETH_MAC_InitPTPEx
    {standard input}:2856   .text.XMC_ETH_MAC_GetPTPTime:00000000 $t
    {standard input}:2861   .text.XMC_ETH_MAC_GetPTPTime:00000000 XMC_ETH_MAC_GetPTPTime
    {standard input}:2910   .text.XMC_ETH_MAC_SetPTPTime:00000000 $t
    {standard input}:2915   .text.XMC_ETH_MAC_SetPTPTime:00000000 XMC_ETH_MAC_SetPTPTime
    {standard input}:2978   .text.XMC_ETH_MAC_SetPTPTime:00000050 $d
    {standard input}:2983   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 $t
    {standard input}:2988   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 XMC_ETH_MAC_UpdatePTPTime
    {standard input}:3060   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 $t
    {standard input}:3065   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 XMC_ETH_MAC_SetPTPAlarm
    {standard input}:3113   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 $t
    {standard input}:3118   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 XMC_ETH_MAC_AdjustPTPClock
    {standard input}:3193   .text.XMC_ETH_MAC_UpdateAddend:00000000 $t
    {standard input}:3198   .text.XMC_ETH_MAC_UpdateAddend:00000000 XMC_ETH_MAC_UpdateAddend
    {standard input}:3257   .text.XMC_ETH_MAC_GetPTPStatus:00000000 $t
    {standard input}:3262   .text.XMC_ETH_MAC_GetPTPStatus:00000000 XMC_ETH_MAC_GetPTPStatus
    {standard input}:3302   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 $t
    {standard input}:3307   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 XMC_ETH_MAC_GetRxTimeStamp
    {standard input}:3390   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 $t
    {standard input}:3395   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 XMC_ETH_MAC_GetTxTimeStamp
    {standard input}:3479   .text.XMC_ETH_MAC_GetTxTimeStamp:00000060 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
memcpy
XMC_SCU_CLOCK_EnableClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_DisableClock
