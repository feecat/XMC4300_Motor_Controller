   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "syscalls.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .weak __dso_handle
  20              	 .section .bss.__dso_handle,"aw",%nobits
  21              	 .align 2
  24              	__dso_handle:
  25 0000 00000000 	 .space 4
  26              	 .section .text._sbrk,"ax",%progbits
  27              	 .align 2
  28              	 .global _sbrk
  29              	 .thumb
  30              	 .thumb_func
  32              	_sbrk:
  33              	.LFB0:
  34              	 .file 1 "../Libraries/Newlib/syscalls.c"
   1:../Libraries/Newlib/syscalls.c **** /**************************************************************************************************
   2:../Libraries/Newlib/syscalls.c ****  * @file     syscalls.c
   3:../Libraries/Newlib/syscalls.c ****  * @brief    Newlib stubs
   4:../Libraries/Newlib/syscalls.c ****  * @version  V1.6
   5:../Libraries/Newlib/syscalls.c ****  * @date     20 Apr 2017
   6:../Libraries/Newlib/syscalls.c ****  *
   7:../Libraries/Newlib/syscalls.c ****  * @cond
   8:../Libraries/Newlib/syscalls.c ****  **************************************************************************************************
   9:../Libraries/Newlib/syscalls.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:../Libraries/Newlib/syscalls.c ****  * All rights reserved.
  11:../Libraries/Newlib/syscalls.c ****  *
  12:../Libraries/Newlib/syscalls.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/Newlib/syscalls.c ****  * following conditions are met:
  14:../Libraries/Newlib/syscalls.c ****  *
  15:../Libraries/Newlib/syscalls.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/Newlib/syscalls.c ****  * disclaimer.
  17:../Libraries/Newlib/syscalls.c ****  *
  18:../Libraries/Newlib/syscalls.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/Newlib/syscalls.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/Newlib/syscalls.c ****  *
  21:../Libraries/Newlib/syscalls.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/Newlib/syscalls.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/Newlib/syscalls.c ****  *
  24:../Libraries/Newlib/syscalls.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/Newlib/syscalls.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/Newlib/syscalls.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/Newlib/syscalls.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/Newlib/syscalls.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/Newlib/syscalls.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/Newlib/syscalls.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/Newlib/syscalls.c ****  *
  32:../Libraries/Newlib/syscalls.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/Newlib/syscalls.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/Newlib/syscalls.c ****  **************************************************************************************************
  35:../Libraries/Newlib/syscalls.c ****  *
  36:../Libraries/Newlib/syscalls.c ****  * *************************** Change history ********************************
  37:../Libraries/Newlib/syscalls.c ****  * V0.1                  : Initial version
  38:../Libraries/Newlib/syscalls.c ****  * V0.2                  : Label updates
  39:../Libraries/Newlib/syscalls.c ****  * V1.0                  : Made _sbrk device agnostic
  40:../Libraries/Newlib/syscalls.c ****  * V1.1                  : C++ support
  41:../Libraries/Newlib/syscalls.c ****  * V1.2                  : Restored compatibility with old project files
  42:../Libraries/Newlib/syscalls.c ****  * V1.3    Jan 2014, PKB : Encapsulating everything in this file for use only with GCC
  43:../Libraries/Newlib/syscalls.c ****  * V1.4 11 Dec 2015, JFT : Fix heap overflow
  44:../Libraries/Newlib/syscalls.c ****  * V1.5 09 Mar 2016, JFT : Add dso_handle to support destructors call at exit 
  45:../Libraries/Newlib/syscalls.c ****  * V1.6 20 Apr 2017, JFT : Foward declaration of __sbrk to fix link time optimization (-flto) compi
  46:../Libraries/Newlib/syscalls.c ****  * @endcond
  47:../Libraries/Newlib/syscalls.c ****  */
  48:../Libraries/Newlib/syscalls.c **** 
  49:../Libraries/Newlib/syscalls.c **** /*
  50:../Libraries/Newlib/syscalls.c ****  * This file contains stubs for standard C library functionality that must
  51:../Libraries/Newlib/syscalls.c ****  * typically be provided for the underlying platform.
  52:../Libraries/Newlib/syscalls.c ****  *
  53:../Libraries/Newlib/syscalls.c ****  */
  54:../Libraries/Newlib/syscalls.c **** #if defined ( __GNUC__ )
  55:../Libraries/Newlib/syscalls.c **** 
  56:../Libraries/Newlib/syscalls.c **** #include <stdint.h>
  57:../Libraries/Newlib/syscalls.c **** #include <errno.h>
  58:../Libraries/Newlib/syscalls.c **** #include <sys/types.h>
  59:../Libraries/Newlib/syscalls.c **** 
  60:../Libraries/Newlib/syscalls.c **** /* Forward prototypes.  */
  61:../Libraries/Newlib/syscalls.c **** caddr_t _sbrk(int nbytes) __attribute__((externally_visible));
  62:../Libraries/Newlib/syscalls.c **** void _init(void) __attribute__((externally_visible));
  63:../Libraries/Newlib/syscalls.c **** 
  64:../Libraries/Newlib/syscalls.c **** /* c++ destructor dynamic shared object needed if -fuse-cxa-atexit is used*/
  65:../Libraries/Newlib/syscalls.c **** void *__dso_handle __attribute__ ((weak));
  66:../Libraries/Newlib/syscalls.c **** 
  67:../Libraries/Newlib/syscalls.c **** // defined in linker script
  68:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_Start;
  69:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_End;
  70:../Libraries/Newlib/syscalls.c **** caddr_t _sbrk(int nbytes)
  71:../Libraries/Newlib/syscalls.c **** {
  35              	 .loc 1 71 0
  36              	 .cfi_startproc
  37              	 
  38              	 
  39 0000 80B5     	 push {r7,lr}
  40              	.LCFI0:
  41              	 .cfi_def_cfa_offset 8
  42              	 .cfi_offset 7,-8
  43              	 .cfi_offset 14,-4
  44 0002 84B0     	 sub sp,sp,#16
  45              	.LCFI1:
  46              	 .cfi_def_cfa_offset 24
  47 0004 00AF     	 add r7,sp,#0
  48              	.LCFI2:
  49              	 .cfi_def_cfa_register 7
  50 0006 7860     	 str r0,[r7,#4]
  72:../Libraries/Newlib/syscalls.c ****   static caddr_t heap_ptr = NULL;
  73:../Libraries/Newlib/syscalls.c ****   caddr_t base;
  74:../Libraries/Newlib/syscalls.c **** 
  75:../Libraries/Newlib/syscalls.c ****   if (heap_ptr == NULL) {
  51              	 .loc 1 75 0
  52 0008 144B     	 ldr r3,.L5
  53 000a 1B68     	 ldr r3,[r3]
  54 000c 002B     	 cmp r3,#0
  55 000e 02D1     	 bne .L2
  76:../Libraries/Newlib/syscalls.c ****     heap_ptr = (caddr_t)&Heap_Bank1_Start;
  56              	 .loc 1 76 0
  57 0010 124B     	 ldr r3,.L5
  58 0012 134A     	 ldr r2,.L5+4
  59 0014 1A60     	 str r2,[r3]
  60              	.L2:
  77:../Libraries/Newlib/syscalls.c ****   }
  78:../Libraries/Newlib/syscalls.c **** 
  79:../Libraries/Newlib/syscalls.c ****   base = heap_ptr;
  61              	 .loc 1 79 0
  62 0016 114B     	 ldr r3,.L5
  63 0018 1B68     	 ldr r3,[r3]
  64 001a FB60     	 str r3,[r7,#12]
  80:../Libraries/Newlib/syscalls.c **** 
  81:../Libraries/Newlib/syscalls.c ****   /* heap word alignment */
  82:../Libraries/Newlib/syscalls.c ****   nbytes = (nbytes + 3) & ~0x3U;
  65              	 .loc 1 82 0
  66 001c 7B68     	 ldr r3,[r7,#4]
  67 001e 0333     	 adds r3,r3,#3
  68 0020 23F00303 	 bic r3,r3,#3
  69 0024 7B60     	 str r3,[r7,#4]
  83:../Libraries/Newlib/syscalls.c ****   if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
  70              	 .loc 1 83 0
  71 0026 0D4B     	 ldr r3,.L5
  72 0028 1A68     	 ldr r2,[r3]
  73 002a 7B68     	 ldr r3,[r7,#4]
  74 002c 1344     	 add r3,r3,r2
  75 002e 0D4A     	 ldr r2,.L5+8
  76 0030 9342     	 cmp r3,r2
  77 0032 07D2     	 bcs .L3
  84:../Libraries/Newlib/syscalls.c ****   {
  85:../Libraries/Newlib/syscalls.c ****     heap_ptr += nbytes;
  78              	 .loc 1 85 0
  79 0034 094B     	 ldr r3,.L5
  80 0036 1A68     	 ldr r2,[r3]
  81 0038 7B68     	 ldr r3,[r7,#4]
  82 003a 1344     	 add r3,r3,r2
  83 003c 074A     	 ldr r2,.L5
  84 003e 1360     	 str r3,[r2]
  86:../Libraries/Newlib/syscalls.c ****     return (base);
  85              	 .loc 1 86 0
  86 0040 FB68     	 ldr r3,[r7,#12]
  87 0042 06E0     	 b .L4
  88              	.L3:
  87:../Libraries/Newlib/syscalls.c ****   }
  88:../Libraries/Newlib/syscalls.c ****   else
  89:../Libraries/Newlib/syscalls.c ****   {
  90:../Libraries/Newlib/syscalls.c ****     /* Heap overflow */
  91:../Libraries/Newlib/syscalls.c ****     errno = ENOMEM;
  89              	 .loc 1 91 0
  90 0044 FFF7FEFF 	 bl __errno
  91 0048 0246     	 mov r2,r0
  92 004a 0C23     	 movs r3,#12
  93 004c 1360     	 str r3,[r2]
  92:../Libraries/Newlib/syscalls.c ****     return ((caddr_t)-1);
  94              	 .loc 1 92 0
  95 004e 4FF0FF33 	 mov r3,#-1
  96              	.L4:
  93:../Libraries/Newlib/syscalls.c ****   }
  94:../Libraries/Newlib/syscalls.c **** }
  97              	 .loc 1 94 0
  98 0052 1846     	 mov r0,r3
  99 0054 1037     	 adds r7,r7,#16
 100              	.LCFI3:
 101              	 .cfi_def_cfa_offset 8
 102 0056 BD46     	 mov sp,r7
 103              	.LCFI4:
 104              	 .cfi_def_cfa_register 13
 105              	 
 106 0058 80BD     	 pop {r7,pc}
 107              	.L6:
 108 005a 00BF     	 .align 2
 109              	.L5:
 110 005c 00000000 	 .word heap_ptr.4331
 111 0060 00000000 	 .word Heap_Bank1_Start
 112 0064 00000000 	 .word Heap_Bank1_End
 113              	 .cfi_endproc
 114              	.LFE0:
 116              	 .section .text._init,"ax",%progbits
 117              	 .align 2
 118              	 .global _init
 119              	 .thumb
 120              	 .thumb_func
 122              	_init:
 123              	.LFB1:
  95:../Libraries/Newlib/syscalls.c **** 
  96:../Libraries/Newlib/syscalls.c **** /* Init */
  97:../Libraries/Newlib/syscalls.c **** void _init(void)
  98:../Libraries/Newlib/syscalls.c **** {}
 124              	 .loc 1 98 0
 125              	 .cfi_startproc
 126              	 
 127              	 
 128              	 
 129 0000 80B4     	 push {r7}
 130              	.LCFI5:
 131              	 .cfi_def_cfa_offset 4
 132              	 .cfi_offset 7,-4
 133 0002 00AF     	 add r7,sp,#0
 134              	.LCFI6:
 135              	 .cfi_def_cfa_register 7
 136              	 .loc 1 98 0
 137 0004 BD46     	 mov sp,r7
 138              	.LCFI7:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 0006 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI8:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 000a 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE1:
 149              	 .section .bss.heap_ptr.4331,"aw",%nobits
 150              	 .align 2
 153              	heap_ptr.4331:
 154 0000 00000000 	 .space 4
 155              	 .text
 156              	.Letext0:
 157              	 .file 2 "c:\\tools\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\sys\\types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
    {standard input}:24     .bss.__dso_handle:00000000 __dso_handle
    {standard input}:21     .bss.__dso_handle:00000000 $d
    {standard input}:27     .text._sbrk:00000000 $t
    {standard input}:32     .text._sbrk:00000000 _sbrk
    {standard input}:110    .text._sbrk:0000005c $d
    {standard input}:153    .bss.heap_ptr.4331:00000000 heap_ptr.4331
    {standard input}:117    .text._init:00000000 $t
    {standard input}:122    .text._init:00000000 _init
    {standard input}:150    .bss.heap_ptr.4331:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__errno
Heap_Bank1_Start
Heap_Bank1_End
