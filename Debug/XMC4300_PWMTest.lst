
XMC4300_PWMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        0000029c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac20  08020000  0c020000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000800  1fff0000  1fff0000  00028000  2**0
                  ALLOC
  3 .data         00000e10  1fff0800  0c02ac20  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001348  1fff1610  0c02ba30  00021610  2**3
                  ALLOC
  5 .no_init      00000014  2000ffc0  2000ffc0  00027fc0  2**2
                  ALLOC
  6 .debug_aranges 000014c0  00000000  00000000  00021610  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00022a48  00000000  00000000  00022ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005469  00000000  00000000  00045518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000a989  00000000  00000000  0004a981  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00005480  00000000  00000000  0005530c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000ceb4  00000000  00000000  0005a78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a920  00000000  00000000  00067640  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011c8  00000000  00000000  00071f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000bf1  00000000  00000000  00073128  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08020000 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8020000:	b598      	push	{r3, r4, r7, lr}
 8020002:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8020004:	4a05      	ldr	r2, [pc, #20]	; (802001c <SystemInit+0x1c>)
 8020006:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802000a:	4614      	mov	r4, r2
 802000c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802000e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8020012:	f009 f935 	bl	8029280 <SystemCoreSetup>
  SystemCoreClockSetup();
 8020016:	f009 f9b1 	bl	802937c <SystemCoreClockSetup>
}
 802001a:	bd98      	pop	{r3, r4, r7, pc}
 802001c:	2000ffc4 	.word	0x2000ffc4

08020020 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8020020:	b580      	push	{r7, lr}
 8020022:	b084      	sub	sp, #16
 8020024:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8020026:	4b2f      	ldr	r3, [pc, #188]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 8020028:	68db      	ldr	r3, [r3, #12]
 802002a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802002e:	2b00      	cmp	r3, #0
 8020030:	d03e      	beq.n	80200b0 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8020032:	4b2d      	ldr	r3, [pc, #180]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020034:	68db      	ldr	r3, [r3, #12]
 8020036:	f003 0301 	and.w	r3, r3, #1
 802003a:	2b00      	cmp	r3, #0
 802003c:	d002      	beq.n	8020044 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 802003e:	4b2b      	ldr	r3, [pc, #172]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 8020040:	60fb      	str	r3, [r7, #12]
 8020042:	e002      	b.n	802004a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8020044:	f009 f97c 	bl	8029340 <OSCHP_GetFrequency>
 8020048:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 802004a:	4b27      	ldr	r3, [pc, #156]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	f003 0304 	and.w	r3, r3, #4
 8020052:	2b00      	cmp	r3, #0
 8020054:	d020      	beq.n	8020098 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8020056:	4b24      	ldr	r3, [pc, #144]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020058:	689b      	ldr	r3, [r3, #8]
 802005a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 802005e:	0e1b      	lsrs	r3, r3, #24
 8020060:	3301      	adds	r3, #1
 8020062:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8020064:	4b20      	ldr	r3, [pc, #128]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020066:	689b      	ldr	r3, [r3, #8]
 8020068:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 802006c:	0a1b      	lsrs	r3, r3, #8
 802006e:	3301      	adds	r3, #1
 8020070:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8020072:	4b1d      	ldr	r3, [pc, #116]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020074:	689b      	ldr	r3, [r3, #8]
 8020076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802007a:	0c1b      	lsrs	r3, r3, #16
 802007c:	3301      	adds	r3, #1
 802007e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8020080:	68bb      	ldr	r3, [r7, #8]
 8020082:	683a      	ldr	r2, [r7, #0]
 8020084:	fb02 f303 	mul.w	r3, r2, r3
 8020088:	68fa      	ldr	r2, [r7, #12]
 802008a:	fbb2 f3f3 	udiv	r3, r2, r3
 802008e:	687a      	ldr	r2, [r7, #4]
 8020090:	fb02 f303 	mul.w	r3, r2, r3
 8020094:	60fb      	str	r3, [r7, #12]
 8020096:	e00d      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8020098:	4b13      	ldr	r3, [pc, #76]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802009a:	689b      	ldr	r3, [r3, #8]
 802009c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80200a0:	3301      	adds	r3, #1
 80200a2:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80200a4:	68fa      	ldr	r2, [r7, #12]
 80200a6:	683b      	ldr	r3, [r7, #0]
 80200a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80200ac:	60fb      	str	r3, [r7, #12]
 80200ae:	e001      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80200b0:	4b0e      	ldr	r3, [pc, #56]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 80200b2:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80200b4:	4b0b      	ldr	r3, [pc, #44]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200b6:	68db      	ldr	r3, [r3, #12]
 80200b8:	b2db      	uxtb	r3, r3
 80200ba:	3301      	adds	r3, #1
 80200bc:	68fa      	ldr	r2, [r7, #12]
 80200be:	fbb2 f3f3 	udiv	r3, r2, r3
 80200c2:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80200c4:	4b07      	ldr	r3, [pc, #28]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200c6:	691b      	ldr	r3, [r3, #16]
 80200c8:	f003 0301 	and.w	r3, r3, #1
 80200cc:	3301      	adds	r3, #1
 80200ce:	68fa      	ldr	r2, [r7, #12]
 80200d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80200d4:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80200d6:	4a06      	ldr	r2, [pc, #24]	; (80200f0 <SystemCoreClockUpdate+0xd0>)
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	6013      	str	r3, [r2, #0]
}
 80200dc:	3710      	adds	r7, #16
 80200de:	46bd      	mov	sp, r7
 80200e0:	bd80      	pop	{r7, pc}
 80200e2:	bf00      	nop
 80200e4:	50004600 	.word	0x50004600
 80200e8:	50004710 	.word	0x50004710
 80200ec:	016e3600 	.word	0x016e3600
 80200f0:	2000ffc0 	.word	0x2000ffc0

080200f4 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{
 80200f4:	b480      	push	{r7}
 80200f6:	b083      	sub	sp, #12
 80200f8:	af00      	add	r7, sp, #0
 80200fa:	4603      	mov	r3, r0
 80200fc:	80fb      	strh	r3, [r7, #6]

}
 80200fe:	370c      	adds	r7, #12
 8020100:	46bd      	mov	sp, r7
 8020102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020106:	4770      	bx	lr

08020108 <APPL_StartMailboxHandler>:
            until a value unequal NOERROR_INWORK is returned

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 8020108:	b480      	push	{r7}
 802010a:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 802010c:	2300      	movs	r3, #0
}
 802010e:	4618      	mov	r0, r3
 8020110:	46bd      	mov	sp, r7
 8020112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020116:	4770      	bx	lr

08020118 <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopMailboxHandler(void)
{
 8020118:	b480      	push	{r7}
 802011a:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 802011c:	2300      	movs	r3, #0
}
 802011e:	4618      	mov	r0, r3
 8020120:	46bd      	mov	sp, r7
 8020122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020126:	4770      	bx	lr

08020128 <APPL_StartInputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 8020128:	b480      	push	{r7}
 802012a:	b083      	sub	sp, #12
 802012c:	af00      	add	r7, sp, #0
 802012e:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 8020130:	2300      	movs	r3, #0
}
 8020132:	4618      	mov	r0, r3
 8020134:	370c      	adds	r7, #12
 8020136:	46bd      	mov	sp, r7
 8020138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802013c:	4770      	bx	lr
 802013e:	bf00      	nop

08020140 <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 8020140:	b480      	push	{r7}
 8020142:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8020144:	2300      	movs	r3, #0
}
 8020146:	4618      	mov	r0, r3
 8020148:	46bd      	mov	sp, r7
 802014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802014e:	4770      	bx	lr

08020150 <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////
void process_startoutput();
UINT16 APPL_StartOutputHandler(void)
{
 8020150:	b580      	push	{r7, lr}
 8020152:	af00      	add	r7, sp, #0
	process_startoutput();
 8020154:	f009 fa6a 	bl	802962c <process_startoutput>
    return ALSTATUSCODE_NOERROR;
 8020158:	2300      	movs	r3, #0
}
 802015a:	4618      	mov	r0, r3
 802015c:	bd80      	pop	{r7, pc}
 802015e:	bf00      	nop

08020160 <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////
void process_stopoutput();
UINT16 APPL_StopOutputHandler(void)
{
 8020160:	b580      	push	{r7, lr}
 8020162:	af00      	add	r7, sp, #0
	process_stopoutput();
 8020164:	f009 fa56 	bl	8029614 <process_stopoutput>
    return ALSTATUSCODE_NOERROR;
 8020168:	2300      	movs	r3, #0
}
 802016a:	4618      	mov	r0, r3
 802016c:	bd80      	pop	{r7, pc}
 802016e:	bf00      	nop

08020170 <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
{
 8020170:	b590      	push	{r4, r7, lr}
 8020172:	b089      	sub	sp, #36	; 0x24
 8020174:	af00      	add	r7, sp, #0
 8020176:	6078      	str	r0, [r7, #4]
 8020178:	6039      	str	r1, [r7, #0]
    UINT16 result = ALSTATUSCODE_NOERROR;
 802017a:	2300      	movs	r3, #0
 802017c:	83fb      	strh	r3, [r7, #30]
    UINT16 InputSize = 0;
 802017e:	2300      	movs	r3, #0
 8020180:	83bb      	strh	r3, [r7, #28]
    UINT16 OutputSize = 0;
 8020182:	2300      	movs	r3, #0
 8020184:	837b      	strh	r3, [r7, #26]

#if COE_SUPPORTED
    UINT16 PDOAssignEntryCnt = 0;
 8020186:	2300      	movs	r3, #0
 8020188:	833b      	strh	r3, [r7, #24]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 802018a:	2300      	movs	r3, #0
 802018c:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 802018e:	2300      	movs	r3, #0
 8020190:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 8020192:	2300      	movs	r3, #0
 8020194:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 8020196:	2300      	movs	r3, #0
 8020198:	82fb      	strh	r3, [r7, #22]
   
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 802019a:	2300      	movs	r3, #0
 802019c:	833b      	strh	r3, [r7, #24]
 802019e:	e03c      	b.n	802021a <APPL_GenerateMapping+0xaa>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 80201a0:	8b3b      	ldrh	r3, [r7, #24]
 80201a2:	4a4e      	ldr	r2, [pc, #312]	; (80202dc <APPL_GenerateMapping+0x16c>)
 80201a4:	005b      	lsls	r3, r3, #1
 80201a6:	4413      	add	r3, r2
 80201a8:	885b      	ldrh	r3, [r3, #2]
 80201aa:	4618      	mov	r0, r3
 80201ac:	f003 fe32 	bl	8023e14 <OBJ_GetObjectHandle>
 80201b0:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 80201b2:	693b      	ldr	r3, [r7, #16]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d028      	beq.n	802020a <APPL_GenerateMapping+0x9a>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 80201b8:	693b      	ldr	r3, [r7, #16]
 80201ba:	699b      	ldr	r3, [r3, #24]
 80201bc:	881b      	ldrh	r3, [r3, #0]
 80201be:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80201c0:	2300      	movs	r3, #0
 80201c2:	82fb      	strh	r3, [r7, #22]
 80201c4:	e01c      	b.n	8020200 <APPL_GenerateMapping+0x90>
            {
                pPDOEntry = (UINT32 *)((UINT16 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3)/2);    //goto PDO entry
 80201c6:	693b      	ldr	r3, [r7, #16]
 80201c8:	699c      	ldr	r4, [r3, #24]
 80201ca:	8afb      	ldrh	r3, [r7, #22]
 80201cc:	b2db      	uxtb	r3, r3
 80201ce:	3301      	adds	r3, #1
 80201d0:	b2db      	uxtb	r3, r3
 80201d2:	4618      	mov	r0, r3
 80201d4:	6939      	ldr	r1, [r7, #16]
 80201d6:	f004 f89f 	bl	8024318 <OBJ_GetEntryOffset>
 80201da:	4603      	mov	r3, r0
 80201dc:	08db      	lsrs	r3, r3, #3
 80201de:	b29b      	uxth	r3, r3
 80201e0:	085b      	lsrs	r3, r3, #1
 80201e2:	b29b      	uxth	r3, r3
 80201e4:	005b      	lsls	r3, r3, #1
 80201e6:	4423      	add	r3, r4
 80201e8:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 80201ea:	68bb      	ldr	r3, [r7, #8]
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	b29b      	uxth	r3, r3
 80201f0:	b2db      	uxtb	r3, r3
 80201f2:	b29a      	uxth	r2, r3
 80201f4:	8b7b      	ldrh	r3, [r7, #26]
 80201f6:	4413      	add	r3, r2
 80201f8:	837b      	strh	r3, [r7, #26]
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
        if(pPDO != NULL)
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80201fa:	8afb      	ldrh	r3, [r7, #22]
 80201fc:	3301      	adds	r3, #1
 80201fe:	82fb      	strh	r3, [r7, #22]
 8020200:	8afa      	ldrh	r2, [r7, #22]
 8020202:	89fb      	ldrh	r3, [r7, #14]
 8020204:	429a      	cmp	r2, r3
 8020206:	d3de      	bcc.n	80201c6 <APPL_GenerateMapping+0x56>
 8020208:	e004      	b.n	8020214 <APPL_GenerateMapping+0xa4>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 802020a:	2300      	movs	r3, #0
 802020c:	837b      	strh	r3, [r7, #26]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 802020e:	2325      	movs	r3, #37	; 0x25
 8020210:	83fb      	strh	r3, [r7, #30]
            break;
 8020212:	e007      	b.n	8020224 <APPL_GenerateMapping+0xb4>
    UINT16 PDOSubindex0 = 0;
    UINT32 *pPDOEntry = NULL;
    UINT16 PDOEntryCnt = 0;
   
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8020214:	8b3b      	ldrh	r3, [r7, #24]
 8020216:	3301      	adds	r3, #1
 8020218:	833b      	strh	r3, [r7, #24]
 802021a:	4b30      	ldr	r3, [pc, #192]	; (80202dc <APPL_GenerateMapping+0x16c>)
 802021c:	881b      	ldrh	r3, [r3, #0]
 802021e:	8b3a      	ldrh	r2, [r7, #24]
 8020220:	429a      	cmp	r2, r3
 8020222:	d3bd      	bcc.n	80201a0 <APPL_GenerateMapping+0x30>
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
            break;
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 8020224:	8b7b      	ldrh	r3, [r7, #26]
 8020226:	3307      	adds	r3, #7
 8020228:	10db      	asrs	r3, r3, #3
 802022a:	837b      	strh	r3, [r7, #26]

    if(result == 0)
 802022c:	8bfb      	ldrh	r3, [r7, #30]
 802022e:	2b00      	cmp	r3, #0
 8020230:	d144      	bne.n	80202bc <APPL_GenerateMapping+0x14c>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8020232:	2300      	movs	r3, #0
 8020234:	833b      	strh	r3, [r7, #24]
 8020236:	e03c      	b.n	80202b2 <APPL_GenerateMapping+0x142>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 8020238:	8b3b      	ldrh	r3, [r7, #24]
 802023a:	4a29      	ldr	r2, [pc, #164]	; (80202e0 <APPL_GenerateMapping+0x170>)
 802023c:	005b      	lsls	r3, r3, #1
 802023e:	4413      	add	r3, r2
 8020240:	885b      	ldrh	r3, [r3, #2]
 8020242:	4618      	mov	r0, r3
 8020244:	f003 fde6 	bl	8023e14 <OBJ_GetObjectHandle>
 8020248:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 802024a:	693b      	ldr	r3, [r7, #16]
 802024c:	2b00      	cmp	r3, #0
 802024e:	d028      	beq.n	80202a2 <APPL_GenerateMapping+0x132>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8020250:	693b      	ldr	r3, [r7, #16]
 8020252:	699b      	ldr	r3, [r3, #24]
 8020254:	881b      	ldrh	r3, [r3, #0]
 8020256:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8020258:	2300      	movs	r3, #0
 802025a:	82fb      	strh	r3, [r7, #22]
 802025c:	e01c      	b.n	8020298 <APPL_GenerateMapping+0x128>
                {
                    pPDOEntry = (UINT32 *)((UINT16 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3)/2);    //goto PDO entry
 802025e:	693b      	ldr	r3, [r7, #16]
 8020260:	699c      	ldr	r4, [r3, #24]
 8020262:	8afb      	ldrh	r3, [r7, #22]
 8020264:	b2db      	uxtb	r3, r3
 8020266:	3301      	adds	r3, #1
 8020268:	b2db      	uxtb	r3, r3
 802026a:	4618      	mov	r0, r3
 802026c:	6939      	ldr	r1, [r7, #16]
 802026e:	f004 f853 	bl	8024318 <OBJ_GetEntryOffset>
 8020272:	4603      	mov	r3, r0
 8020274:	08db      	lsrs	r3, r3, #3
 8020276:	b29b      	uxth	r3, r3
 8020278:	085b      	lsrs	r3, r3, #1
 802027a:	b29b      	uxth	r3, r3
 802027c:	005b      	lsls	r3, r3, #1
 802027e:	4423      	add	r3, r4
 8020280:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8020282:	68bb      	ldr	r3, [r7, #8]
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	b29b      	uxth	r3, r3
 8020288:	b2db      	uxtb	r3, r3
 802028a:	b29a      	uxth	r2, r3
 802028c:	8bbb      	ldrh	r3, [r7, #28]
 802028e:	4413      	add	r3, r2
 8020290:	83bb      	strh	r3, [r7, #28]
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
            if(pPDO != NULL)
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8020292:	8afb      	ldrh	r3, [r7, #22]
 8020294:	3301      	adds	r3, #1
 8020296:	82fb      	strh	r3, [r7, #22]
 8020298:	8afa      	ldrh	r2, [r7, #22]
 802029a:	89fb      	ldrh	r3, [r7, #14]
 802029c:	429a      	cmp	r2, r3
 802029e:	d3de      	bcc.n	802025e <APPL_GenerateMapping+0xee>
 80202a0:	e004      	b.n	80202ac <APPL_GenerateMapping+0x13c>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 80202a2:	2300      	movs	r3, #0
 80202a4:	83bb      	strh	r3, [r7, #28]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 80202a6:	2324      	movs	r3, #36	; 0x24
 80202a8:	83fb      	strh	r3, [r7, #30]
                break;
 80202aa:	e007      	b.n	80202bc <APPL_GenerateMapping+0x14c>
    OutputSize = (OutputSize + 7) >> 3;

    if(result == 0)
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 80202ac:	8b3b      	ldrh	r3, [r7, #24]
 80202ae:	3301      	adds	r3, #1
 80202b0:	833b      	strh	r3, [r7, #24]
 80202b2:	4b0b      	ldr	r3, [pc, #44]	; (80202e0 <APPL_GenerateMapping+0x170>)
 80202b4:	881b      	ldrh	r3, [r3, #0]
 80202b6:	8b3a      	ldrh	r2, [r7, #24]
 80202b8:	429a      	cmp	r2, r3
 80202ba:	d3bd      	bcc.n	8020238 <APPL_GenerateMapping+0xc8>
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
                break;
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 80202bc:	8bbb      	ldrh	r3, [r7, #28]
 80202be:	3307      	adds	r3, #7
 80202c0:	10db      	asrs	r3, r3, #3
 80202c2:	83bb      	strh	r3, [r7, #28]
#else
    #warning "Define 'InputSize' and 'OutputSize'."
#endif
#endif

    *pInputSize = InputSize;
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	8bba      	ldrh	r2, [r7, #28]
 80202c8:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 80202ca:	683b      	ldr	r3, [r7, #0]
 80202cc:	8b7a      	ldrh	r2, [r7, #26]
 80202ce:	801a      	strh	r2, [r3, #0]
    return result;
 80202d0:	8bfb      	ldrh	r3, [r7, #30]
}
 80202d2:	4618      	mov	r0, r3
 80202d4:	3724      	adds	r7, #36	; 0x24
 80202d6:	46bd      	mov	sp, r7
 80202d8:	bd90      	pop	{r4, r7, pc}
 80202da:	bf00      	nop
 80202dc:	1fff0864 	.word	0x1fff0864
 80202e0:	1fff0868 	.word	0x1fff0868

080202e4 <APPL_InputMapping>:

\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_InputMapping(UINT32* pData)
{
 80202e4:	b580      	push	{r7, lr}
 80202e6:	b082      	sub	sp, #8
 80202e8:	af00      	add	r7, sp, #0
 80202ea:	6078      	str	r0, [r7, #4]
	memcpy(pData,&(((UINT32 *)&IN_GENERIC0x6000)[1]),SIZEOF(IN_GENERIC0x6000)-2);
 80202ec:	6878      	ldr	r0, [r7, #4]
 80202ee:	4903      	ldr	r1, [pc, #12]	; (80202fc <APPL_InputMapping+0x18>)
 80202f0:	222a      	movs	r2, #42	; 0x2a
 80202f2:	f009 fdab 	bl	8029e4c <memcpy>
}
 80202f6:	3708      	adds	r7, #8
 80202f8:	46bd      	mov	sp, r7
 80202fa:	bd80      	pop	{r7, pc}
 80202fc:	1fff0870 	.word	0x1fff0870

08020300 <APPL_OutputMapping>:

\brief    This function will copies the outputs from the ESC memory to the local memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_OutputMapping(UINT32* pData)
{
 8020300:	b580      	push	{r7, lr}
 8020302:	b082      	sub	sp, #8
 8020304:	af00      	add	r7, sp, #0
 8020306:	6078      	str	r0, [r7, #4]
	memcpy(&(((UINT32 *)&OUT_GENERIC0x7000)[1]),pData,SIZEOF(OUT_GENERIC0x7000)-2);
 8020308:	4803      	ldr	r0, [pc, #12]	; (8020318 <APPL_OutputMapping+0x18>)
 802030a:	6879      	ldr	r1, [r7, #4]
 802030c:	2236      	movs	r2, #54	; 0x36
 802030e:	f009 fd9d 	bl	8029e4c <memcpy>
}
 8020312:	3708      	adds	r7, #8
 8020314:	46bd      	mov	sp, r7
 8020316:	bd80      	pop	{r7, pc}
 8020318:	1fff089c 	.word	0x1fff089c

0802031c <APPL_Application>:
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void process_app(TOBJ7000 *OUT_GENERIC, TOBJ6000 *IN_GENERIC);
void APPL_Application(void)
{
 802031c:	b580      	push	{r7, lr}
 802031e:	af00      	add	r7, sp, #0
	process_app(&OUT_GENERIC0x7000, &IN_GENERIC0x6000);
 8020320:	4802      	ldr	r0, [pc, #8]	; (802032c <APPL_Application+0x10>)
 8020322:	4903      	ldr	r1, [pc, #12]	; (8020330 <APPL_Application+0x14>)
 8020324:	f009 fc72 	bl	8029c0c <process_app>
}
 8020328:	bd80      	pop	{r7, pc}
 802032a:	bf00      	nop
 802032c:	1fff0898 	.word	0x1fff0898
 8020330:	1fff086c 	.word	0x1fff086c

08020334 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020334:	b580      	push	{r7, lr}
 8020336:	b082      	sub	sp, #8
 8020338:	af00      	add	r7, sp, #0
 802033a:	6078      	str	r0, [r7, #4]
 802033c:	460b      	mov	r3, r1
 802033e:	807b      	strh	r3, [r7, #2]
 8020340:	4613      	mov	r3, r2
 8020342:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8020344:	887b      	ldrh	r3, [r7, #2]
 8020346:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 802034a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802034e:	883a      	ldrh	r2, [r7, #0]
 8020350:	6878      	ldr	r0, [r7, #4]
 8020352:	4619      	mov	r1, r3
 8020354:	f009 fd7a 	bl	8029e4c <memcpy>
}
 8020358:	3708      	adds	r7, #8
 802035a:	46bd      	mov	sp, r7
 802035c:	bd80      	pop	{r7, pc}
 802035e:	bf00      	nop

08020360 <Read0x10F8>:
sdosrv.h))

\brief    This function reads the object 0x10F8
*/
UINT8 Read0x10F8(UINT16 index, UINT8 subindex, UINT32 dataSize, UINT16 MBXMEM * pData, UINT8 bCompleteAccess)
{
 8020360:	b580      	push	{r7, lr}
 8020362:	b084      	sub	sp, #16
 8020364:	af00      	add	r7, sp, #0
 8020366:	60ba      	str	r2, [r7, #8]
 8020368:	607b      	str	r3, [r7, #4]
 802036a:	4603      	mov	r3, r0
 802036c:	81fb      	strh	r3, [r7, #14]
 802036e:	460b      	mov	r3, r1
 8020370:	737b      	strb	r3, [r7, #13]

    if (index != 0x10F8)
 8020372:	89fb      	ldrh	r3, [r7, #14]
 8020374:	f241 02f8 	movw	r2, #4344	; 0x10f8
 8020378:	4293      	cmp	r3, r2
 802037a:	d001      	beq.n	8020380 <Read0x10F8+0x20>
    {
        return ABORTIDX_PARAM_IS_INCOMPATIBLE;
 802037c:	230b      	movs	r3, #11
 802037e:	e016      	b.n	80203ae <Read0x10F8+0x4e>
    }

    
    if (bCompleteAccess)
 8020380:	7e3b      	ldrb	r3, [r7, #24]
 8020382:	2b00      	cmp	r3, #0
 8020384:	d001      	beq.n	802038a <Read0x10F8+0x2a>
    {
         /* Complete Access is not supported for object 0x10F8 */
        return ABORTIDX_UNSUPPORTED_ACCESS;
 8020386:	2305      	movs	r3, #5
 8020388:	e011      	b.n	80203ae <Read0x10F8+0x4e>
    }

    if (subindex > 0)
 802038a:	7b7b      	ldrb	r3, [r7, #13]
 802038c:	2b00      	cmp	r3, #0
 802038e:	d001      	beq.n	8020394 <Read0x10F8+0x34>
    {
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8020390:	2311      	movs	r3, #17
 8020392:	e00c      	b.n	80203ae <Read0x10F8+0x4e>
    }

    if (dataSize > 8)
 8020394:	68bb      	ldr	r3, [r7, #8]
 8020396:	2b08      	cmp	r3, #8
 8020398:	d901      	bls.n	802039e <Read0x10F8+0x3e>
    {
        return ABORTIDX_PARAM_LENGTH_TOO_LONG;
 802039a:	230f      	movs	r3, #15
 802039c:	e007      	b.n	80203ae <Read0x10F8+0x4e>
    }


    COE_SyncTimeStamp();
 802039e:	f000 f80d 	bl	80203bc <COE_SyncTimeStamp>

    MEMCPY(pData, &u64Timestamp, dataSize);
 80203a2:	6878      	ldr	r0, [r7, #4]
 80203a4:	4904      	ldr	r1, [pc, #16]	; (80203b8 <Read0x10F8+0x58>)
 80203a6:	68ba      	ldr	r2, [r7, #8]
 80203a8:	f009 fd50 	bl	8029e4c <memcpy>
    return 0;
 80203ac:	2300      	movs	r3, #0
}
 80203ae:	4618      	mov	r0, r3
 80203b0:	3710      	adds	r7, #16
 80203b2:	46bd      	mov	sp, r7
 80203b4:	bd80      	pop	{r7, pc}
 80203b6:	bf00      	nop
 80203b8:	1fff1610 	.word	0x1fff1610

080203bc <COE_SyncTimeStamp>:
/**
\brief    This function updates the local timestamp object (0x10F8) and has to be called at least every 4.2sec to detect an 32Bit DC unit overrun.
          Called from the Timer handler 
*////////////////////////////////////////////////////////////////////////////////////////
void COE_SyncTimeStamp(void)
{
 80203bc:	b580      	push	{r7, lr}
 80203be:	b082      	sub	sp, #8
 80203c0:	af00      	add	r7, sp, #0

    if (b32BitDc)
 80203c2:	4b20      	ldr	r3, [pc, #128]	; (8020444 <COE_SyncTimeStamp+0x88>)
 80203c4:	781b      	ldrb	r3, [r3, #0]
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d02f      	beq.n	802042a <COE_SyncTimeStamp+0x6e>
    {
        UINT32 DcTime = (UINT32)(u64Timestamp & (UINT64)0x00000000FFFFFFFF);
 80203ca:	4b1f      	ldr	r3, [pc, #124]	; (8020448 <COE_SyncTimeStamp+0x8c>)
 80203cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203d0:	4613      	mov	r3, r2
 80203d2:	607b      	str	r3, [r7, #4]


        HW_EscReadDWord(DcTime, ESC_SYSTEMTIME_OFFSET);
 80203d4:	4b1d      	ldr	r3, [pc, #116]	; (802044c <COE_SyncTimeStamp+0x90>)
 80203d6:	681b      	ldr	r3, [r3, #0]
 80203d8:	607b      	str	r3, [r7, #4]

        /*update the lower 32Bit*/
        u64Timestamp = ((u64Timestamp & ((UINT64)0xFFFFFFFF00000000)) | (UINT64)DcTime);
 80203da:	4b1b      	ldr	r3, [pc, #108]	; (8020448 <COE_SyncTimeStamp+0x8c>)
 80203dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203e0:	f04f 0000 	mov.w	r0, #0
 80203e4:	f04f 31ff 	mov.w	r1, #4294967295
 80203e8:	ea00 0002 	and.w	r0, r0, r2
 80203ec:	ea01 0103 	and.w	r1, r1, r3
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	461a      	mov	r2, r3
 80203f4:	f04f 0300 	mov.w	r3, #0
 80203f8:	ea42 0200 	orr.w	r2, r2, r0
 80203fc:	ea43 0301 	orr.w	r3, r3, r1
 8020400:	4911      	ldr	r1, [pc, #68]	; (8020448 <COE_SyncTimeStamp+0x8c>)
 8020402:	e9c1 2300 	strd	r2, r3, [r1]

        if (DcTime < u32LastDc32Value)
 8020406:	4b12      	ldr	r3, [pc, #72]	; (8020450 <COE_SyncTimeStamp+0x94>)
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	687a      	ldr	r2, [r7, #4]
 802040c:	429a      	cmp	r2, r3
 802040e:	d208      	bcs.n	8020422 <COE_SyncTimeStamp+0x66>
        {
            /*32Bit overrun*/
            u64Timestamp = u64Timestamp + ((UINT64)0x0000000100000000);
 8020410:	4b0d      	ldr	r3, [pc, #52]	; (8020448 <COE_SyncTimeStamp+0x8c>)
 8020412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020416:	3200      	adds	r2, #0
 8020418:	f143 0301 	adc.w	r3, r3, #1
 802041c:	490a      	ldr	r1, [pc, #40]	; (8020448 <COE_SyncTimeStamp+0x8c>)
 802041e:	e9c1 2300 	strd	r2, r3, [r1]
        }
        
        u32LastDc32Value = DcTime;
 8020422:	4a0b      	ldr	r2, [pc, #44]	; (8020450 <COE_SyncTimeStamp+0x94>)
 8020424:	687b      	ldr	r3, [r7, #4]
 8020426:	6013      	str	r3, [r2, #0]
 8020428:	e005      	b.n	8020436 <COE_SyncTimeStamp+0x7a>
    }
    else
    {
        /*The DC unit supports 64Bit => update the complete object*/
        
        HW_EscRead((MEM_ADDR *)&u64Timestamp, ESC_SYSTEMTIME_OFFSET, 8);
 802042a:	4807      	ldr	r0, [pc, #28]	; (8020448 <COE_SyncTimeStamp+0x8c>)
 802042c:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8020430:	2208      	movs	r2, #8
 8020432:	f7ff ff7f 	bl	8020334 <HW_EscRead>
    }

    u32CheckForDcOverrunCnt = 0;
 8020436:	4b07      	ldr	r3, [pc, #28]	; (8020454 <COE_SyncTimeStamp+0x98>)
 8020438:	2200      	movs	r2, #0
 802043a:	601a      	str	r2, [r3, #0]

}
 802043c:	3708      	adds	r7, #8
 802043e:	46bd      	mov	sp, r7
 8020440:	bd80      	pop	{r7, pc}
 8020442:	bf00      	nop
 8020444:	1fff2740 	.word	0x1fff2740
 8020448:	1fff1610 	.word	0x1fff1610
 802044c:	54010910 	.word	0x54010910
 8020450:	1fff263c 	.word	0x1fff263c
 8020454:	1fff2640 	.word	0x1fff2640

08020458 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8020458:	b480      	push	{r7}
 802045a:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 802045c:	4b03      	ldr	r3, [pc, #12]	; (802046c <COE_GetObjectDictionary+0x14>)
 802045e:	681b      	ldr	r3, [r3, #0]
}
 8020460:	4618      	mov	r0, r3
 8020462:	46bd      	mov	sp, r7
 8020464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020468:	4770      	bx	lr
 802046a:	bf00      	nop
 802046c:	1fff161c 	.word	0x1fff161c

08020470 <COE_UpdateSyncErrorStatus>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief     Update the Sync Error Indication
*////////////////////////////////////////////////////////////////////////////////////////
void COE_UpdateSyncErrorStatus(void)
{
 8020470:	b480      	push	{r7}
 8020472:	af00      	add	r7, sp, #0
    if (sSyncManOutPar.u16CycleExceededCounter > 0 || sSyncManOutPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 8020474:	4b14      	ldr	r3, [pc, #80]	; (80204c8 <COE_UpdateSyncErrorStatus+0x58>)
 8020476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020478:	2b00      	cmp	r3, #0
 802047a:	d105      	bne.n	8020488 <COE_UpdateSyncErrorStatus+0x18>
 802047c:	4b12      	ldr	r3, [pc, #72]	; (80204c8 <COE_UpdateSyncErrorStatus+0x58>)
 802047e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020480:	4b12      	ldr	r3, [pc, #72]	; (80204cc <COE_UpdateSyncErrorStatus+0x5c>)
 8020482:	891b      	ldrh	r3, [r3, #8]
 8020484:	429a      	cmp	r2, r3
 8020486:	d904      	bls.n	8020492 <COE_UpdateSyncErrorStatus+0x22>
    {
        sSyncManOutPar.u8SyncError = 1;
 8020488:	4b0f      	ldr	r3, [pc, #60]	; (80204c8 <COE_UpdateSyncErrorStatus+0x58>)
 802048a:	2201      	movs	r2, #1
 802048c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020490:	e003      	b.n	802049a <COE_UpdateSyncErrorStatus+0x2a>
    }
    else
    {
        sSyncManOutPar.u8SyncError = 0;
 8020492:	4b0d      	ldr	r3, [pc, #52]	; (80204c8 <COE_UpdateSyncErrorStatus+0x58>)
 8020494:	2200      	movs	r2, #0
 8020496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }


    if (sSyncManInPar.u16CycleExceededCounter > 0 || sSyncManInPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 802049a:	4b0d      	ldr	r3, [pc, #52]	; (80204d0 <COE_UpdateSyncErrorStatus+0x60>)
 802049c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d105      	bne.n	80204ae <COE_UpdateSyncErrorStatus+0x3e>
 80204a2:	4b0b      	ldr	r3, [pc, #44]	; (80204d0 <COE_UpdateSyncErrorStatus+0x60>)
 80204a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80204a6:	4b09      	ldr	r3, [pc, #36]	; (80204cc <COE_UpdateSyncErrorStatus+0x5c>)
 80204a8:	891b      	ldrh	r3, [r3, #8]
 80204aa:	429a      	cmp	r2, r3
 80204ac:	d904      	bls.n	80204b8 <COE_UpdateSyncErrorStatus+0x48>
    {
        sSyncManInPar.u8SyncError = 1;
 80204ae:	4b08      	ldr	r3, [pc, #32]	; (80204d0 <COE_UpdateSyncErrorStatus+0x60>)
 80204b0:	2201      	movs	r2, #1
 80204b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80204b6:	e003      	b.n	80204c0 <COE_UpdateSyncErrorStatus+0x50>
    }
    else
    {
        sSyncManInPar.u8SyncError = 0;
 80204b8:	4b05      	ldr	r3, [pc, #20]	; (80204d0 <COE_UpdateSyncErrorStatus+0x60>)
 80204ba:	2200      	movs	r2, #0
 80204bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

}
 80204c0:	46bd      	mov	sp, r7
 80204c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c6:	4770      	bx	lr
 80204c8:	1fff2838 	.word	0x1fff2838
 80204cc:	1fff1440 	.word	0x1fff1440
 80204d0:	1fff27f4 	.word	0x1fff27f4

080204d4 <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 80204d4:	b580      	push	{r7, lr}
 80204d6:	b082      	sub	sp, #8
 80204d8:	af00      	add	r7, sp, #0
    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 80204da:	4b43      	ldr	r3, [pc, #268]	; (80205e8 <COE_ObjInit+0x114>)
 80204dc:	2220      	movs	r2, #32
 80204de:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 80204e0:	4b41      	ldr	r3, [pc, #260]	; (80205e8 <COE_ObjInit+0x114>)
 80204e2:	2200      	movs	r2, #0
 80204e4:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 80204e6:	4b40      	ldr	r3, [pc, #256]	; (80205e8 <COE_ObjInit+0x114>)
 80204e8:	2200      	movs	r2, #0
 80204ea:	605a      	str	r2, [r3, #4]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 80204ec:	4b3e      	ldr	r3, [pc, #248]	; (80205e8 <COE_ObjInit+0x114>)
 80204ee:	f244 021f 	movw	r2, #16415	; 0x401f
 80204f2:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 80204f4:	4b3c      	ldr	r3, [pc, #240]	; (80205e8 <COE_ObjInit+0x114>)
 80204f6:	4a3d      	ldr	r2, [pc, #244]	; (80205ec <COE_ObjInit+0x118>)
 80204f8:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 80204fa:	4b3b      	ldr	r3, [pc, #236]	; (80205e8 <COE_ObjInit+0x114>)
 80204fc:	2200      	movs	r2, #0
 80204fe:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 8020500:	4b39      	ldr	r3, [pc, #228]	; (80205e8 <COE_ObjInit+0x114>)
 8020502:	2200      	movs	r2, #0
 8020504:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 8020506:	4b38      	ldr	r3, [pc, #224]	; (80205e8 <COE_ObjInit+0x114>)
 8020508:	2200      	movs	r2, #0
 802050a:	621a      	str	r2, [r3, #32]

/*ECATCHANGE_START(V5.12) ECAT5*/
    /*subindex 11: reset the sm missed error counter*/
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 802050c:	4b36      	ldr	r3, [pc, #216]	; (80205e8 <COE_ObjInit+0x114>)
 802050e:	2200      	movs	r2, #0
 8020510:	851a      	strh	r2, [r3, #40]	; 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManOutPar.u16CycleExceededCounter = 0;
 8020512:	4b35      	ldr	r3, [pc, #212]	; (80205e8 <COE_ObjInit+0x114>)
 8020514:	2200      	movs	r2, #0
 8020516:	855a      	strh	r2, [r3, #42]	; 0x2a
/*ECATCHANGE_END(V5.12) ECAT5*/

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 8020518:	4b33      	ldr	r3, [pc, #204]	; (80205e8 <COE_ObjInit+0x114>)
 802051a:	2200      	movs	r2, #0
 802051c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 8020520:	4b33      	ldr	r3, [pc, #204]	; (80205f0 <COE_ObjInit+0x11c>)
 8020522:	2220      	movs	r2, #32
 8020524:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 8020526:	4b32      	ldr	r3, [pc, #200]	; (80205f0 <COE_ObjInit+0x11c>)
 8020528:	2200      	movs	r2, #0
 802052a:	805a      	strh	r2, [r3, #2]

    
    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 802052c:	4b2e      	ldr	r3, [pc, #184]	; (80205e8 <COE_ObjInit+0x114>)
 802052e:	685b      	ldr	r3, [r3, #4]
 8020530:	4a2f      	ldr	r2, [pc, #188]	; (80205f0 <COE_ObjInit+0x11c>)
 8020532:	6053      	str	r3, [r2, #4]

    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 8020534:	4b2c      	ldr	r3, [pc, #176]	; (80205e8 <COE_ObjInit+0x114>)
 8020536:	899a      	ldrh	r2, [r3, #12]
 8020538:	4b2d      	ldr	r3, [pc, #180]	; (80205f0 <COE_ObjInit+0x11c>)
 802053a:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 802053c:	4b2c      	ldr	r3, [pc, #176]	; (80205f0 <COE_ObjInit+0x11c>)
 802053e:	4a2b      	ldr	r2, [pc, #172]	; (80205ec <COE_ObjInit+0x118>)
 8020540:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 8020542:	4b2b      	ldr	r3, [pc, #172]	; (80205f0 <COE_ObjInit+0x11c>)
 8020544:	2200      	movs	r2, #0
 8020546:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 8020548:	4b29      	ldr	r3, [pc, #164]	; (80205f0 <COE_ObjInit+0x11c>)
 802054a:	2200      	movs	r2, #0
 802054c:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 802054e:	4b28      	ldr	r3, [pc, #160]	; (80205f0 <COE_ObjInit+0x11c>)
 8020550:	2200      	movs	r2, #0
 8020552:	621a      	str	r2, [r3, #32]

/*ECATCHANGE_START(V5.12) ECAT5*/
    /*subindex 11: reset the sm missed error counter*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 8020554:	4b26      	ldr	r3, [pc, #152]	; (80205f0 <COE_ObjInit+0x11c>)
 8020556:	2200      	movs	r2, #0
 8020558:	851a      	strh	r2, [r3, #40]	; 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManInPar.u16CycleExceededCounter = 0;
 802055a:	4b25      	ldr	r3, [pc, #148]	; (80205f0 <COE_ObjInit+0x11c>)
 802055c:	2200      	movs	r2, #0
 802055e:	855a      	strh	r2, [r3, #42]	; 0x2a
/*ECATCHANGE_END(V5.12) ECAT5*/

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 8020560:	4b23      	ldr	r3, [pc, #140]	; (80205f0 <COE_ObjInit+0x11c>)
 8020562:	2200      	movs	r2, #0
 8020564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8020568:	4b22      	ldr	r3, [pc, #136]	; (80205f4 <COE_ObjInit+0x120>)
 802056a:	2200      	movs	r2, #0
 802056c:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 802056e:	f000 f951 	bl	8020814 <COE_ObjDictionaryInit>
 8020572:	4603      	mov	r3, r0
 8020574:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 8020576:	88fb      	ldrh	r3, [r7, #6]
 8020578:	2b00      	cmp	r3, #0
 802057a:	d001      	beq.n	8020580 <COE_ObjInit+0xac>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 802057c:	f000 f90a 	bl	8020794 <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 8020580:	4b1d      	ldr	r3, [pc, #116]	; (80205f8 <COE_ObjInit+0x124>)
 8020582:	2200      	movs	r2, #0
 8020584:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8020586:	4b1d      	ldr	r3, [pc, #116]	; (80205fc <COE_ObjInit+0x128>)
 8020588:	2200      	movs	r2, #0
 802058a:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 802058c:	4b1c      	ldr	r3, [pc, #112]	; (8020600 <COE_ObjInit+0x12c>)
 802058e:	2200      	movs	r2, #0
 8020590:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 8020592:	4b1c      	ldr	r3, [pc, #112]	; (8020604 <COE_ObjInit+0x130>)
 8020594:	2200      	movs	r2, #0
 8020596:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8020598:	4b1b      	ldr	r3, [pc, #108]	; (8020608 <COE_ObjInit+0x134>)
 802059a:	2200      	movs	r2, #0
 802059c:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 802059e:	4b1b      	ldr	r3, [pc, #108]	; (802060c <COE_ObjInit+0x138>)
 80205a0:	2200      	movs	r2, #0
 80205a2:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 80205a4:	4b1a      	ldr	r3, [pc, #104]	; (8020610 <COE_ObjInit+0x13c>)
 80205a6:	2200      	movs	r2, #0
 80205a8:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 80205aa:	4b1a      	ldr	r3, [pc, #104]	; (8020614 <COE_ObjInit+0x140>)
 80205ac:	2200      	movs	r2, #0
 80205ae:	601a      	str	r2, [r3, #0]


/*ECATCHANGE_START(V5.12) COE4*/
    UINT32 EscFeature = 0;
 80205b0:	2300      	movs	r3, #0
 80205b2:	603b      	str	r3, [r7, #0]
    HW_EscReadDWord(EscFeature, ESC_FEATURES_OFFSET);
 80205b4:	4b18      	ldr	r3, [pc, #96]	; (8020618 <COE_ObjInit+0x144>)
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	603b      	str	r3, [r7, #0]
    EscFeature = SWAPDWORD(EscFeature);

    if ((EscFeature & ESC_DC_32BIT_MASK) > 0)
 80205ba:	683b      	ldr	r3, [r7, #0]
 80205bc:	f003 0308 	and.w	r3, r3, #8
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	d003      	beq.n	80205cc <COE_ObjInit+0xf8>
    {
        b32BitDc = FALSE;
 80205c4:	4b15      	ldr	r3, [pc, #84]	; (802061c <COE_ObjInit+0x148>)
 80205c6:	2200      	movs	r2, #0
 80205c8:	701a      	strb	r2, [r3, #0]
 80205ca:	e006      	b.n	80205da <COE_ObjInit+0x106>
    }
    else
    {
        b32BitDc = TRUE;
 80205cc:	4b13      	ldr	r3, [pc, #76]	; (802061c <COE_ObjInit+0x148>)
 80205ce:	2201      	movs	r2, #1
 80205d0:	701a      	strb	r2, [r3, #0]

        HW_EscReadDWord(u32LastDc32Value, ESC_SYSTEMTIME_OFFSET);
 80205d2:	4b13      	ldr	r3, [pc, #76]	; (8020620 <COE_ObjInit+0x14c>)
 80205d4:	681b      	ldr	r3, [r3, #0]
 80205d6:	4a13      	ldr	r2, [pc, #76]	; (8020624 <COE_ObjInit+0x150>)
 80205d8:	6013      	str	r3, [r2, #0]
    }

    u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 80205da:	4b13      	ldr	r3, [pc, #76]	; (8020628 <COE_ObjInit+0x154>)
 80205dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80205e0:	601a      	str	r2, [r3, #0]

    /*ECATCHANGE_END(V5.12) COE4*/
}
 80205e2:	3708      	adds	r7, #8
 80205e4:	46bd      	mov	sp, r7
 80205e6:	bd80      	pop	{r7, pc}
 80205e8:	1fff2838 	.word	0x1fff2838
 80205ec:	0001e848 	.word	0x0001e848
 80205f0:	1fff27f4 	.word	0x1fff27f4
 80205f4:	1fff287c 	.word	0x1fff287c
 80205f8:	1fff289c 	.word	0x1fff289c
 80205fc:	1fff289d 	.word	0x1fff289d
 8020600:	1fff28ce 	.word	0x1fff28ce
 8020604:	1fff28d0 	.word	0x1fff28d0
 8020608:	1fff28ac 	.word	0x1fff28ac
 802060c:	1fff2888 	.word	0x1fff2888
 8020610:	1fff2898 	.word	0x1fff2898
 8020614:	1fff28b0 	.word	0x1fff28b0
 8020618:	54010008 	.word	0x54010008
 802061c:	1fff2740 	.word	0x1fff2740
 8020620:	54010910 	.word	0x54010910
 8020624:	1fff263c 	.word	0x1fff263c
 8020628:	1fff2640 	.word	0x1fff2640

0802062c <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 802062c:	b480      	push	{r7}
 802062e:	b085      	sub	sp, #20
 8020630:	af00      	add	r7, sp, #0
 8020632:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	2b00      	cmp	r3, #0
 8020638:	d062      	beq.n	8020700 <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 802063a:	4b35      	ldr	r3, [pc, #212]	; (8020710 <COE_AddObjectToDic+0xe4>)
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	2b00      	cmp	r3, #0
 8020640:	d10c      	bne.n	802065c <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 8020642:	4a33      	ldr	r2, [pc, #204]	; (8020710 <COE_AddObjectToDic+0xe4>)
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 8020648:	4b31      	ldr	r3, [pc, #196]	; (8020710 <COE_AddObjectToDic+0xe4>)
 802064a:	681b      	ldr	r3, [r3, #0]
 802064c:	2200      	movs	r2, #0
 802064e:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 8020650:	4b2f      	ldr	r3, [pc, #188]	; (8020710 <COE_AddObjectToDic+0xe4>)
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	2200      	movs	r2, #0
 8020656:	601a      	str	r2, [r3, #0]
            return 0;
 8020658:	2300      	movs	r3, #0
 802065a:	e052      	b.n	8020702 <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 802065c:	4b2c      	ldr	r3, [pc, #176]	; (8020710 <COE_AddObjectToDic+0xe4>)
 802065e:	681b      	ldr	r3, [r3, #0]
 8020660:	891a      	ldrh	r2, [r3, #8]
 8020662:	687b      	ldr	r3, [r7, #4]
 8020664:	891b      	ldrh	r3, [r3, #8]
 8020666:	429a      	cmp	r2, r3
 8020668:	d90f      	bls.n	802068a <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	2200      	movs	r2, #0
 802066e:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 8020670:	4b27      	ldr	r3, [pc, #156]	; (8020710 <COE_AddObjectToDic+0xe4>)
 8020672:	681a      	ldr	r2, [r3, #0]
 8020674:	687b      	ldr	r3, [r7, #4]
 8020676:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 8020678:	4b25      	ldr	r3, [pc, #148]	; (8020710 <COE_AddObjectToDic+0xe4>)
 802067a:	681b      	ldr	r3, [r3, #0]
 802067c:	687a      	ldr	r2, [r7, #4]
 802067e:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 8020680:	4a23      	ldr	r2, [pc, #140]	; (8020710 <COE_AddObjectToDic+0xe4>)
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	6013      	str	r3, [r2, #0]
            return 0;
 8020686:	2300      	movs	r3, #0
 8020688:	e03b      	b.n	8020702 <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 802068a:	4b21      	ldr	r3, [pc, #132]	; (8020710 <COE_AddObjectToDic+0xe4>)
 802068c:	681b      	ldr	r3, [r3, #0]
 802068e:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8020690:	e033      	b.n	80206fa <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 8020692:	68fb      	ldr	r3, [r7, #12]
 8020694:	891a      	ldrh	r2, [r3, #8]
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	891b      	ldrh	r3, [r3, #8]
 802069a:	429a      	cmp	r2, r3
 802069c:	d101      	bne.n	80206a2 <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 802069e:	2301      	movs	r3, #1
 80206a0:	e02f      	b.n	8020702 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 80206a2:	68fb      	ldr	r3, [r7, #12]
 80206a4:	891a      	ldrh	r2, [r3, #8]
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	891b      	ldrh	r3, [r3, #8]
 80206aa:	429a      	cmp	r2, r3
 80206ac:	d913      	bls.n	80206d6 <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 80206ae:	68fb      	ldr	r3, [r7, #12]
 80206b0:	681a      	ldr	r2, [r3, #0]
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	68fa      	ldr	r2, [r7, #12]
 80206ba:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 80206bc:	68fb      	ldr	r3, [r7, #12]
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	d003      	beq.n	80206cc <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	687a      	ldr	r2, [r7, #4]
 80206ca:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 80206cc:	68fb      	ldr	r3, [r7, #12]
 80206ce:	687a      	ldr	r2, [r7, #4]
 80206d0:	601a      	str	r2, [r3, #0]

                    return 0;
 80206d2:	2300      	movs	r3, #0
 80206d4:	e015      	b.n	8020702 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	685b      	ldr	r3, [r3, #4]
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d10a      	bne.n	80206f4 <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 80206de:	68fb      	ldr	r3, [r7, #12]
 80206e0:	687a      	ldr	r2, [r7, #4]
 80206e2:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	68fa      	ldr	r2, [r7, #12]
 80206e8:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	2200      	movs	r2, #0
 80206ee:	605a      	str	r2, [r3, #4]
                    return 0;
 80206f0:	2300      	movs	r3, #0
 80206f2:	e006      	b.n	8020702 <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	685b      	ldr	r3, [r3, #4]
 80206f8:	60fb      	str	r3, [r7, #12]
            return 0;
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
            while(pDicEntry != NULL)
 80206fa:	68fb      	ldr	r3, [r7, #12]
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	d1c8      	bne.n	8020692 <COE_AddObjectToDic+0x66>
                    pDicEntry = pDicEntry->pNext;
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8020700:	2301      	movs	r3, #1
}
 8020702:	4618      	mov	r0, r3
 8020704:	3714      	adds	r7, #20
 8020706:	46bd      	mov	sp, r7
 8020708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802070c:	4770      	bx	lr
 802070e:	bf00      	nop
 8020710:	1fff161c 	.word	0x1fff161c

08020714 <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 8020714:	b480      	push	{r7}
 8020716:	b087      	sub	sp, #28
 8020718:	af00      	add	r7, sp, #0
 802071a:	4603      	mov	r3, r0
 802071c:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 802071e:	4b1c      	ldr	r3, [pc, #112]	; (8020790 <COE_RemoveDicEntry+0x7c>)
 8020720:	681b      	ldr	r3, [r3, #0]
 8020722:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 8020724:	e02b      	b.n	802077e <COE_RemoveDicEntry+0x6a>
    {
        if(pDicEntry->Index == index)
 8020726:	697b      	ldr	r3, [r7, #20]
 8020728:	891b      	ldrh	r3, [r3, #8]
 802072a:	88fa      	ldrh	r2, [r7, #6]
 802072c:	429a      	cmp	r2, r3
 802072e:	d123      	bne.n	8020778 <COE_RemoveDicEntry+0x64>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 8020730:	697b      	ldr	r3, [r7, #20]
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 8020736:	697b      	ldr	r3, [r7, #20]
 8020738:	685b      	ldr	r3, [r3, #4]
 802073a:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 802073c:	693b      	ldr	r3, [r7, #16]
 802073e:	2b00      	cmp	r3, #0
 8020740:	d002      	beq.n	8020748 <COE_RemoveDicEntry+0x34>
            {
                pPrevEntry->pNext = pNextEntry;
 8020742:	693b      	ldr	r3, [r7, #16]
 8020744:	68fa      	ldr	r2, [r7, #12]
 8020746:	605a      	str	r2, [r3, #4]
            }

            if(pNextEntry != NULL)
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	2b00      	cmp	r3, #0
 802074c:	d002      	beq.n	8020754 <COE_RemoveDicEntry+0x40>
            {
                pNextEntry->pPrev = pPrevEntry;
 802074e:	68fb      	ldr	r3, [r7, #12]
 8020750:	693a      	ldr	r2, [r7, #16]
 8020752:	601a      	str	r2, [r3, #0]
            }

            pDicEntry->pPrev = NULL;
 8020754:	697b      	ldr	r3, [r7, #20]
 8020756:	2200      	movs	r2, #0
 8020758:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 802075a:	697b      	ldr	r3, [r7, #20]
 802075c:	2200      	movs	r2, #0
 802075e:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 8020760:	697b      	ldr	r3, [r7, #20]
 8020762:	891a      	ldrh	r2, [r3, #8]
 8020764:	4b0a      	ldr	r3, [pc, #40]	; (8020790 <COE_RemoveDicEntry+0x7c>)
 8020766:	681b      	ldr	r3, [r3, #0]
 8020768:	891b      	ldrh	r3, [r3, #8]
 802076a:	429a      	cmp	r2, r3
 802076c:	d103      	bne.n	8020776 <COE_RemoveDicEntry+0x62>
            {
                ObjDicList = pNextEntry;
 802076e:	4a08      	ldr	r2, [pc, #32]	; (8020790 <COE_RemoveDicEntry+0x7c>)
 8020770:	68fb      	ldr	r3, [r7, #12]
 8020772:	6013      	str	r3, [r2, #0]
            }
            return;
 8020774:	e006      	b.n	8020784 <COE_RemoveDicEntry+0x70>
 8020776:	e005      	b.n	8020784 <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 8020778:	697b      	ldr	r3, [r7, #20]
 802077a:	685b      	ldr	r3, [r3, #4]
 802077c:	617b      	str	r3, [r7, #20]
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;

    while(pDicEntry != NULL)
 802077e:	697b      	ldr	r3, [r7, #20]
 8020780:	2b00      	cmp	r3, #0
 8020782:	d1d0      	bne.n	8020726 <COE_RemoveDicEntry+0x12>
            return;
        }

        pDicEntry = pDicEntry->pNext;
    }
}
 8020784:	371c      	adds	r7, #28
 8020786:	46bd      	mov	sp, r7
 8020788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802078c:	4770      	bx	lr
 802078e:	bf00      	nop
 8020790:	1fff161c 	.word	0x1fff161c

08020794 <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 8020794:	b580      	push	{r7, lr}
 8020796:	b082      	sub	sp, #8
 8020798:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 802079a:	4b0c      	ldr	r3, [pc, #48]	; (80207cc <COE_ClearObjDictionary+0x38>)
 802079c:	681b      	ldr	r3, [r3, #0]
 802079e:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 80207a0:	2300      	movs	r3, #0
 80207a2:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 80207a4:	e009      	b.n	80207ba <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	891b      	ldrh	r3, [r3, #8]
 80207aa:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	685b      	ldr	r3, [r3, #4]
 80207b0:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 80207b2:	887b      	ldrh	r3, [r7, #2]
 80207b4:	4618      	mov	r0, r3
 80207b6:	f7ff ffad 	bl	8020714 <COE_RemoveDicEntry>
void COE_ClearObjDictionary(void)
{
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
    UINT16 Index = 0;

    while(pObjEntry != NULL)
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d1f2      	bne.n	80207a6 <COE_ClearObjDictionary+0x12>
        Index = pObjEntry->Index;
        pObjEntry = pObjEntry->pNext;

        COE_RemoveDicEntry(Index);
    }
    ObjDicList = NULL;
 80207c0:	4b02      	ldr	r3, [pc, #8]	; (80207cc <COE_ClearObjDictionary+0x38>)
 80207c2:	2200      	movs	r2, #0
 80207c4:	601a      	str	r2, [r3, #0]
}
 80207c6:	3708      	adds	r7, #8
 80207c8:	46bd      	mov	sp, r7
 80207ca:	bd80      	pop	{r7, pc}
 80207cc:	1fff161c 	.word	0x1fff161c

080207d0 <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b084      	sub	sp, #16
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 80207d8:	2300      	movs	r3, #0
 80207da:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 80207e0:	e00c      	b.n	80207fc <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 80207e2:	68b8      	ldr	r0, [r7, #8]
 80207e4:	f7ff ff22 	bl	802062c <COE_AddObjectToDic>
 80207e8:	4603      	mov	r3, r0
 80207ea:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 80207ec:	89fb      	ldrh	r3, [r7, #14]
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d001      	beq.n	80207f6 <AddObjectsToObjDictionary+0x26>
        {
            return result;
 80207f2:	89fb      	ldrh	r3, [r7, #14]
 80207f4:	e009      	b.n	802080a <AddObjectsToObjDictionary+0x3a>
        }

        pEntry++;
 80207f6:	68bb      	ldr	r3, [r7, #8]
 80207f8:	3328      	adds	r3, #40	; 0x28
 80207fa:	60bb      	str	r3, [r7, #8]
UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
    UINT16 result = 0;
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;

    while(pEntry->Index != 0xFFFF)
 80207fc:	68bb      	ldr	r3, [r7, #8]
 80207fe:	891b      	ldrh	r3, [r3, #8]
 8020800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020804:	4293      	cmp	r3, r2
 8020806:	d1ec      	bne.n	80207e2 <AddObjectsToObjDictionary+0x12>
        }

        pEntry++;
    }

    return result;
 8020808:	89fb      	ldrh	r3, [r7, #14]

}
 802080a:	4618      	mov	r0, r3
 802080c:	3710      	adds	r7, #16
 802080e:	46bd      	mov	sp, r7
 8020810:	bd80      	pop	{r7, pc}
 8020812:	bf00      	nop

08020814 <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 8020814:	b580      	push	{r7, lr}
 8020816:	b082      	sub	sp, #8
 8020818:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 802081a:	2300      	movs	r3, #0
 802081c:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 802081e:	4b0b      	ldr	r3, [pc, #44]	; (802084c <COE_ObjDictionaryInit+0x38>)
 8020820:	2200      	movs	r2, #0
 8020822:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 8020824:	480a      	ldr	r0, [pc, #40]	; (8020850 <COE_ObjDictionaryInit+0x3c>)
 8020826:	f7ff ffd3 	bl	80207d0 <AddObjectsToObjDictionary>
 802082a:	4603      	mov	r3, r0
 802082c:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 802082e:	88fb      	ldrh	r3, [r7, #6]
 8020830:	2b00      	cmp	r3, #0
 8020832:	d001      	beq.n	8020838 <COE_ObjDictionaryInit+0x24>
    {
        return result;
 8020834:	88fb      	ldrh	r3, [r7, #6]
 8020836:	e005      	b.n	8020844 <COE_ObjDictionaryInit+0x30>
    }
    
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8020838:	4806      	ldr	r0, [pc, #24]	; (8020854 <COE_ObjDictionaryInit+0x40>)
 802083a:	f7ff ffc9 	bl	80207d0 <AddObjectsToObjDictionary>
 802083e:	4603      	mov	r3, r0
 8020840:	80fb      	strh	r3, [r7, #6]
    }



    return result;
 8020842:	88fb      	ldrh	r3, [r7, #6]
}
 8020844:	4618      	mov	r0, r3
 8020846:	3708      	adds	r7, #8
 8020848:	46bd      	mov	sp, r7
 802084a:	bd80      	pop	{r7, pc}
 802084c:	1fff161c 	.word	0x1fff161c
 8020850:	1fff0a60 	.word	0x1fff0a60
 8020854:	1fff08d8 	.word	0x1fff08d8

08020858 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8020858:	b5b0      	push	{r4, r5, r7, lr}
 802085a:	b084      	sub	sp, #16
 802085c:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 802085e:	2300      	movs	r3, #0
 8020860:	71fb      	strb	r3, [r7, #7]
     
    if(pSdoPendFunc != NULL)
 8020862:	4b2f      	ldr	r3, [pc, #188]	; (8020920 <COE_Main+0xc8>)
 8020864:	681b      	ldr	r3, [r3, #0]
 8020866:	2b00      	cmp	r3, #0
 8020868:	d057      	beq.n	802091a <COE_Main+0xc2>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 802086a:	4b2d      	ldr	r3, [pc, #180]	; (8020920 <COE_Main+0xc8>)
 802086c:	681c      	ldr	r4, [r3, #0]
 802086e:	4b2d      	ldr	r3, [pc, #180]	; (8020924 <COE_Main+0xcc>)
 8020870:	8818      	ldrh	r0, [r3, #0]
 8020872:	4b2d      	ldr	r3, [pc, #180]	; (8020928 <COE_Main+0xd0>)
 8020874:	7819      	ldrb	r1, [r3, #0]
 8020876:	4b2d      	ldr	r3, [pc, #180]	; (802092c <COE_Main+0xd4>)
 8020878:	681a      	ldr	r2, [r3, #0]
 802087a:	4b2d      	ldr	r3, [pc, #180]	; (8020930 <COE_Main+0xd8>)
 802087c:	681d      	ldr	r5, [r3, #0]
 802087e:	4b2d      	ldr	r3, [pc, #180]	; (8020934 <COE_Main+0xdc>)
 8020880:	781b      	ldrb	r3, [r3, #0]
 8020882:	9300      	str	r3, [sp, #0]
 8020884:	462b      	mov	r3, r5
 8020886:	47a0      	blx	r4
 8020888:	4603      	mov	r3, r0
 802088a:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 802088c:	79fb      	ldrb	r3, [r7, #7]
 802088e:	2bff      	cmp	r3, #255	; 0xff
 8020890:	d043      	beq.n	802091a <COE_Main+0xc2>
        {
            switch(u8PendingSdo)
 8020892:	4b29      	ldr	r3, [pc, #164]	; (8020938 <COE_Main+0xe0>)
 8020894:	781b      	ldrb	r3, [r3, #0]
 8020896:	3b01      	subs	r3, #1
 8020898:	2b03      	cmp	r3, #3
 802089a:	d829      	bhi.n	80208f0 <COE_Main+0x98>
 802089c:	a201      	add	r2, pc, #4	; (adr r2, 80208a4 <COE_Main+0x4c>)
 802089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208a2:	bf00      	nop
 80208a4:	080208cd 	.word	0x080208cd
 80208a8:	080208b5 	.word	0x080208b5
 80208ac:	080208db 	.word	0x080208db
 80208b0:	080208db 	.word	0x080208db
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 80208b4:	4b21      	ldr	r3, [pc, #132]	; (802093c <COE_Main+0xe4>)
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	d007      	beq.n	80208cc <COE_Main+0x74>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 80208bc:	4b1f      	ldr	r3, [pc, #124]	; (802093c <COE_Main+0xe4>)
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	4618      	mov	r0, r3
 80208c2:	f009 faab 	bl	8029e1c <free>
                        pSdoSegData = NULL;
 80208c6:	4b1d      	ldr	r3, [pc, #116]	; (802093c <COE_Main+0xe4>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 80208cc:	79fb      	ldrb	r3, [r7, #7]
 80208ce:	4618      	mov	r0, r3
 80208d0:	2100      	movs	r1, #0
 80208d2:	2200      	movs	r2, #0
 80208d4:	f005 fa7e 	bl	8025dd4 <SDOS_SdoRes>
                break;
 80208d8:	e00a      	b.n	80208f0 <COE_Main+0x98>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 80208da:	4b14      	ldr	r3, [pc, #80]	; (802092c <COE_Main+0xd4>)
 80208dc:	681a      	ldr	r2, [r3, #0]
 80208de:	4b14      	ldr	r3, [pc, #80]	; (8020930 <COE_Main+0xd8>)
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	79f9      	ldrb	r1, [r7, #7]
 80208e4:	4608      	mov	r0, r1
 80208e6:	4611      	mov	r1, r2
 80208e8:	461a      	mov	r2, r3
 80208ea:	f005 fa73 	bl	8025dd4 <SDOS_SdoRes>
                    break;
 80208ee:	bf00      	nop

            }

            u8PendingSdo = 0;
 80208f0:	4b11      	ldr	r3, [pc, #68]	; (8020938 <COE_Main+0xe0>)
 80208f2:	2200      	movs	r2, #0
 80208f4:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 80208f6:	4b0b      	ldr	r3, [pc, #44]	; (8020924 <COE_Main+0xcc>)
 80208f8:	2200      	movs	r2, #0
 80208fa:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 80208fc:	4b0a      	ldr	r3, [pc, #40]	; (8020928 <COE_Main+0xd0>)
 80208fe:	2200      	movs	r2, #0
 8020900:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 8020902:	4b0a      	ldr	r3, [pc, #40]	; (802092c <COE_Main+0xd4>)
 8020904:	2200      	movs	r2, #0
 8020906:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 8020908:	4b09      	ldr	r3, [pc, #36]	; (8020930 <COE_Main+0xd8>)
 802090a:	2200      	movs	r2, #0
 802090c:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 802090e:	4b09      	ldr	r3, [pc, #36]	; (8020934 <COE_Main+0xdc>)
 8020910:	2200      	movs	r2, #0
 8020912:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 8020914:	4b02      	ldr	r3, [pc, #8]	; (8020920 <COE_Main+0xc8>)
 8020916:	2200      	movs	r2, #0
 8020918:	601a      	str	r2, [r3, #0]
        }
    }
}
 802091a:	3708      	adds	r7, #8
 802091c:	46bd      	mov	sp, r7
 802091e:	bdb0      	pop	{r4, r5, r7, pc}
 8020920:	1fff2898 	.word	0x1fff2898
 8020924:	1fff28ce 	.word	0x1fff28ce
 8020928:	1fff28d0 	.word	0x1fff28d0
 802092c:	1fff28ac 	.word	0x1fff28ac
 8020930:	1fff2888 	.word	0x1fff2888
 8020934:	1fff289d 	.word	0x1fff289d
 8020938:	1fff289c 	.word	0x1fff289c
 802093c:	1fff28b0 	.word	0x1fff28b0

08020940 <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 8020940:	b480      	push	{r7}
 8020942:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 8020944:	4b04      	ldr	r3, [pc, #16]	; (8020958 <XMC_ECAT_GetALEventRegister+0x18>)
 8020946:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 802094a:	b29b      	uxth	r3, r3
}
 802094c:	4618      	mov	r0, r3
 802094e:	46bd      	mov	sp, r7
 8020950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020954:	4770      	bx	lr
 8020956:	bf00      	nop
 8020958:	54010000 	.word	0x54010000

0802095c <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 802095c:	b580      	push	{r7, lr}
 802095e:	b082      	sub	sp, #8
 8020960:	af00      	add	r7, sp, #0
 8020962:	6078      	str	r0, [r7, #4]
 8020964:	460b      	mov	r3, r1
 8020966:	807b      	strh	r3, [r7, #2]
 8020968:	4613      	mov	r3, r2
 802096a:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 802096c:	887b      	ldrh	r3, [r7, #2]
 802096e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020972:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020976:	883a      	ldrh	r2, [r7, #0]
 8020978:	6878      	ldr	r0, [r7, #4]
 802097a:	4619      	mov	r1, r3
 802097c:	f009 fa66 	bl	8029e4c <memcpy>
}
 8020980:	3708      	adds	r7, #8
 8020982:	46bd      	mov	sp, r7
 8020984:	bd80      	pop	{r7, pc}
 8020986:	bf00      	nop

08020988 <HW_EscReadIsr>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscReadIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8020988:	b580      	push	{r7, lr}
 802098a:	b082      	sub	sp, #8
 802098c:	af00      	add	r7, sp, #0
 802098e:	6078      	str	r0, [r7, #4]
 8020990:	460b      	mov	r3, r1
 8020992:	807b      	strh	r3, [r7, #2]
 8020994:	4613      	mov	r3, r2
 8020996:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 8020998:	887a      	ldrh	r2, [r7, #2]
 802099a:	883b      	ldrh	r3, [r7, #0]
 802099c:	6878      	ldr	r0, [r7, #4]
 802099e:	4611      	mov	r1, r2
 80209a0:	461a      	mov	r2, r3
 80209a2:	f7ff ffdb 	bl	802095c <HW_EscRead>
}
 80209a6:	3708      	adds	r7, #8
 80209a8:	46bd      	mov	sp, r7
 80209aa:	bd80      	pop	{r7, pc}

080209ac <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80209ac:	b580      	push	{r7, lr}
 80209ae:	b082      	sub	sp, #8
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	6078      	str	r0, [r7, #4]
 80209b4:	460b      	mov	r3, r1
 80209b6:	807b      	strh	r3, [r7, #2]
 80209b8:	4613      	mov	r3, r2
 80209ba:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 80209bc:	887b      	ldrh	r3, [r7, #2]
 80209be:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80209c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80209c6:	883a      	ldrh	r2, [r7, #0]
 80209c8:	4618      	mov	r0, r3
 80209ca:	6879      	ldr	r1, [r7, #4]
 80209cc:	f009 fa3e 	bl	8029e4c <memcpy>
}
 80209d0:	3708      	adds	r7, #8
 80209d2:	46bd      	mov	sp, r7
 80209d4:	bd80      	pop	{r7, pc}
 80209d6:	bf00      	nop

080209d8 <HW_EscWriteIsr>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWriteIsr(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80209d8:	b580      	push	{r7, lr}
 80209da:	b082      	sub	sp, #8
 80209dc:	af00      	add	r7, sp, #0
 80209de:	6078      	str	r0, [r7, #4]
 80209e0:	460b      	mov	r3, r1
 80209e2:	807b      	strh	r3, [r7, #2]
 80209e4:	4613      	mov	r3, r2
 80209e6:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 80209e8:	887a      	ldrh	r2, [r7, #2]
 80209ea:	883b      	ldrh	r3, [r7, #0]
 80209ec:	6878      	ldr	r0, [r7, #4]
 80209ee:	4611      	mov	r1, r2
 80209f0:	461a      	mov	r2, r3
 80209f2:	f7ff ffdb 	bl	80209ac <HW_EscWrite>
}
 80209f6:	3708      	adds	r7, #8
 80209f8:	46bd      	mov	sp, r7
 80209fa:	bd80      	pop	{r7, pc}

080209fc <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 80209fc:	b580      	push	{r7, lr}
 80209fe:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 8020a00:	f7ff ff9e 	bl	8020940 <XMC_ECAT_GetALEventRegister>
 8020a04:	4603      	mov	r3, r0
}
 8020a06:	4618      	mov	r0, r3
 8020a08:	bd80      	pop	{r7, pc}
 8020a0a:	bf00      	nop

08020a0c <HW_GetALEventRegister_Isr>:
 * Special function for ESC access from interrupt service routines if required, otherwise this function is defined as
 * HW_GetALEventRegister.
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister_Isr(void)
{
 8020a0c:	b580      	push	{r7, lr}
 8020a0e:	af00      	add	r7, sp, #0
  return HW_GetALEventRegister();
 8020a10:	f7ff fff4 	bl	80209fc <HW_GetALEventRegister>
 8020a14:	4603      	mov	r3, r0
}
 8020a16:	4618      	mov	r0, r3
 8020a18:	bd80      	pop	{r7, pc}
 8020a1a:	bf00      	nop

08020a1c <PDO_InputMapping>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 8020a1c:	b580      	push	{r7, lr}
 8020a1e:	b082      	sub	sp, #8
 8020a20:	af00      	add	r7, sp, #0

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))
    /*ECATCHANGE_START(V5.12) ECAT1*/
    UINT32 u32TimeValue = 0;
 8020a22:	2300      	movs	r3, #0
 8020a24:	607b      	str	r3, [r7, #4]
    UINT16 ALEvent = HW_GetALEventRegister_Isr();
 8020a26:	f7ff fff1 	bl	8020a0c <HW_GetALEventRegister_Isr>
 8020a2a:	4603      	mov	r3, r0
 8020a2c:	807b      	strh	r3, [r7, #2]
    ALEvent = SWAPWORD(ALEvent);


    if (MEASUREMENT_ACTIVE)
 8020a2e:	4b1b      	ldr	r3, [pc, #108]	; (8020a9c <PDO_InputMapping+0x80>)
 8020a30:	8b9b      	ldrh	r3, [r3, #28]
 8020a32:	f003 0301 	and.w	r3, r3, #1
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d105      	bne.n	8020a46 <PDO_InputMapping+0x2a>
 8020a3a:	4b19      	ldr	r3, [pc, #100]	; (8020aa0 <PDO_InputMapping+0x84>)
 8020a3c:	8b9b      	ldrh	r3, [r3, #28]
 8020a3e:	f003 0301 	and.w	r3, r3, #1
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d003      	beq.n	8020a4e <PDO_InputMapping+0x32>
    {
        u32TimeValue = GetSystemTimeDelay(0);
 8020a46:	2000      	movs	r0, #0
 8020a48:	f000 f946 	bl	8020cd8 <GetSystemTimeDelay>
 8020a4c:	6078      	str	r0, [r7, #4]




  
    APPL_InputMapping((UINT32*)aPdInputData);
 8020a4e:	4815      	ldr	r0, [pc, #84]	; (8020aa4 <PDO_InputMapping+0x88>)
 8020a50:	f7ff fc48 	bl	80202e4 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 8020a54:	4b14      	ldr	r3, [pc, #80]	; (8020aa8 <PDO_InputMapping+0x8c>)
 8020a56:	881a      	ldrh	r2, [r3, #0]
 8020a58:	4b14      	ldr	r3, [pc, #80]	; (8020aac <PDO_InputMapping+0x90>)
 8020a5a:	881b      	ldrh	r3, [r3, #0]
 8020a5c:	4811      	ldr	r0, [pc, #68]	; (8020aa4 <PDO_InputMapping+0x88>)
 8020a5e:	4611      	mov	r1, r2
 8020a60:	461a      	mov	r2, r3
 8020a62:	f7ff ffb9 	bl	80209d8 <HW_EscWriteIsr>
    

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))
    /*ECATCHANGE_START(V5.12) ECAT1*/

    if (MEASUREMENT_ACTIVE)
 8020a66:	4b0d      	ldr	r3, [pc, #52]	; (8020a9c <PDO_InputMapping+0x80>)
 8020a68:	8b9b      	ldrh	r3, [r3, #28]
 8020a6a:	f003 0301 	and.w	r3, r3, #1
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d105      	bne.n	8020a7e <PDO_InputMapping+0x62>
 8020a72:	4b0b      	ldr	r3, [pc, #44]	; (8020aa0 <PDO_InputMapping+0x84>)
 8020a74:	8b9b      	ldrh	r3, [r3, #28]
 8020a76:	f003 0301 	and.w	r3, r3, #1
 8020a7a:	2b00      	cmp	r3, #0
 8020a7c:	d00b      	beq.n	8020a96 <PDO_InputMapping+0x7a>
    {
        u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 8020a7e:	6878      	ldr	r0, [r7, #4]
 8020a80:	f000 f92a 	bl	8020cd8 <GetSystemTimeDelay>
 8020a84:	6078      	str	r0, [r7, #4]

#if (PD_INPUT_CALC_AND_COPY_TIME == 0)
        if (sSyncManInPar.u32CalcAndCopyTime < u32TimeValue)
 8020a86:	4b06      	ldr	r3, [pc, #24]	; (8020aa0 <PDO_InputMapping+0x84>)
 8020a88:	695a      	ldr	r2, [r3, #20]
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	429a      	cmp	r2, r3
 8020a8e:	d202      	bcs.n	8020a96 <PDO_InputMapping+0x7a>
        {
            sSyncManInPar.u32CalcAndCopyTime = u32TimeValue;
 8020a90:	4a03      	ldr	r2, [pc, #12]	; (8020aa0 <PDO_InputMapping+0x84>)
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	6153      	str	r3, [r2, #20]
    }

    /*ECATCHANGE_END(V5.12) ECAT1*/
#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0)) */

}
 8020a96:	3708      	adds	r7, #8
 8020a98:	46bd      	mov	sp, r7
 8020a9a:	bd80      	pop	{r7, pc}
 8020a9c:	1fff2838 	.word	0x1fff2838
 8020aa0:	1fff27f4 	.word	0x1fff27f4
 8020aa4:	1fff26bc 	.word	0x1fff26bc
 8020aa8:	1fff275e 	.word	0x1fff275e
 8020aac:	1fff2746 	.word	0x1fff2746

08020ab0 <PDO_OutputMapping>:
/**
\brief    This function will copies the outputs from the ESC memory to the local memory.
        This function is only called in case of an SM2 (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b082      	sub	sp, #8
 8020ab4:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.12) ECAT1*/
   UINT32 u32TimeValue = 0;
 8020ab6:	2300      	movs	r3, #0
 8020ab8:	607b      	str	r3, [r7, #4]
   if (MEASUREMENT_ACTIVE)
 8020aba:	4b21      	ldr	r3, [pc, #132]	; (8020b40 <PDO_OutputMapping+0x90>)
 8020abc:	8b9b      	ldrh	r3, [r3, #28]
 8020abe:	f003 0301 	and.w	r3, r3, #1
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	d105      	bne.n	8020ad2 <PDO_OutputMapping+0x22>
 8020ac6:	4b1f      	ldr	r3, [pc, #124]	; (8020b44 <PDO_OutputMapping+0x94>)
 8020ac8:	8b9b      	ldrh	r3, [r3, #28]
 8020aca:	f003 0301 	and.w	r3, r3, #1
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d00e      	beq.n	8020af0 <PDO_OutputMapping+0x40>
   {
#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
      u32TimeValue = GetSystemTimeDelay(0);
 8020ad2:	2000      	movs	r0, #0
 8020ad4:	f000 f900 	bl	8020cd8 <GetSystemTimeDelay>
 8020ad8:	6078      	str	r0, [r7, #4]
      u32MinCycleTimeStartValue = u32TimeValue;
 8020ada:	4a1b      	ldr	r2, [pc, #108]	; (8020b48 <PDO_OutputMapping+0x98>)
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	6013      	str	r3, [r2, #0]

      bMinCycleTimeMeasurementStarted = TRUE;
 8020ae0:	4b1a      	ldr	r3, [pc, #104]	; (8020b4c <PDO_OutputMapping+0x9c>)
 8020ae2:	2201      	movs	r2, #1
 8020ae4:	701a      	strb	r2, [r3, #0]
      u32MinCycleTimeValue = 0;
 8020ae6:	4b1a      	ldr	r3, [pc, #104]	; (8020b50 <PDO_OutputMapping+0xa0>)
 8020ae8:	2200      	movs	r2, #0
 8020aea:	601a      	str	r2, [r3, #0]

#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */

      HandleCycleTimeMeasurement();
 8020aec:	f000 f8b4 	bl	8020c58 <HandleCycleTimeMeasurement>

   }
/*ECATCHANGE_END(V5.12) ECAT1*/

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 8020af0:	4b18      	ldr	r3, [pc, #96]	; (8020b54 <PDO_OutputMapping+0xa4>)
 8020af2:	881a      	ldrh	r2, [r3, #0]
 8020af4:	4b18      	ldr	r3, [pc, #96]	; (8020b58 <PDO_OutputMapping+0xa8>)
 8020af6:	881b      	ldrh	r3, [r3, #0]
 8020af8:	4818      	ldr	r0, [pc, #96]	; (8020b5c <PDO_OutputMapping+0xac>)
 8020afa:	4611      	mov	r1, r2
 8020afc:	461a      	mov	r2, r3
 8020afe:	f7ff ff43 	bl	8020988 <HW_EscReadIsr>
    APPL_OutputMapping((UINT32*) aPdOutputData);
 8020b02:	4816      	ldr	r0, [pc, #88]	; (8020b5c <PDO_OutputMapping+0xac>)
 8020b04:	f7ff fbfc 	bl	8020300 <APPL_OutputMapping>


/*ECATCHANGE_START(V5.12) ECAT1*/
#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
    if (MEASUREMENT_ACTIVE)
 8020b08:	4b0d      	ldr	r3, [pc, #52]	; (8020b40 <PDO_OutputMapping+0x90>)
 8020b0a:	8b9b      	ldrh	r3, [r3, #28]
 8020b0c:	f003 0301 	and.w	r3, r3, #1
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	d105      	bne.n	8020b20 <PDO_OutputMapping+0x70>
 8020b14:	4b0b      	ldr	r3, [pc, #44]	; (8020b44 <PDO_OutputMapping+0x94>)
 8020b16:	8b9b      	ldrh	r3, [r3, #28]
 8020b18:	f003 0301 	and.w	r3, r3, #1
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	d00b      	beq.n	8020b38 <PDO_OutputMapping+0x88>
    {
       u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 8020b20:	6878      	ldr	r0, [r7, #4]
 8020b22:	f000 f8d9 	bl	8020cd8 <GetSystemTimeDelay>
 8020b26:	6078      	str	r0, [r7, #4]

#if (PD_OUTPUT_CALC_AND_COPY_TIME == 0)
       if (sSyncManOutPar.u32CalcAndCopyTime < u32TimeValue)
 8020b28:	4b05      	ldr	r3, [pc, #20]	; (8020b40 <PDO_OutputMapping+0x90>)
 8020b2a:	695a      	ldr	r2, [r3, #20]
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	429a      	cmp	r2, r3
 8020b30:	d202      	bcs.n	8020b38 <PDO_OutputMapping+0x88>
       {
          sSyncManOutPar.u32CalcAndCopyTime = u32TimeValue;
 8020b32:	4a03      	ldr	r2, [pc, #12]	; (8020b40 <PDO_OutputMapping+0x90>)
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	6153      	str	r3, [r2, #20]
       u32MinCycleTimeValue = u32TimeValue;
#endif
    }
#endif /* #if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */
/*ECATCHANGE_END(V5.12) ECAT1*/
}
 8020b38:	3708      	adds	r7, #8
 8020b3a:	46bd      	mov	sp, r7
 8020b3c:	bd80      	pop	{r7, pc}
 8020b3e:	bf00      	nop
 8020b40:	1fff2838 	.word	0x1fff2838
 8020b44:	1fff27f4 	.word	0x1fff27f4
 8020b48:	1fff26b8 	.word	0x1fff26b8
 8020b4c:	1fff2648 	.word	0x1fff2648
 8020b50:	1fff2664 	.word	0x1fff2664
 8020b54:	1fff2726 	.word	0x1fff2726
 8020b58:	1fff271a 	.word	0x1fff271a
 8020b5c:	1fff2668 	.word	0x1fff2668

08020b60 <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8020b60:	b580      	push	{r7, lr}
 8020b62:	af00      	add	r7, sp, #0

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 8020b64:	4b32      	ldr	r3, [pc, #200]	; (8020c30 <ECAT_CheckTimer+0xd0>)
 8020b66:	781b      	ldrb	r3, [r3, #0]
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d00d      	beq.n	8020b88 <ECAT_CheckTimer+0x28>
 8020b6c:	4b31      	ldr	r3, [pc, #196]	; (8020c34 <ECAT_CheckTimer+0xd4>)
 8020b6e:	881b      	ldrh	r3, [r3, #0]
 8020b70:	b21b      	sxth	r3, r3
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	dd08      	ble.n	8020b88 <ECAT_CheckTimer+0x28>
    {
        EsmTimeoutCounter--;
 8020b76:	4b2f      	ldr	r3, [pc, #188]	; (8020c34 <ECAT_CheckTimer+0xd4>)
 8020b78:	881b      	ldrh	r3, [r3, #0]
 8020b7a:	b29b      	uxth	r3, r3
 8020b7c:	b29b      	uxth	r3, r3
 8020b7e:	3b01      	subs	r3, #1
 8020b80:	b29b      	uxth	r3, r3
 8020b82:	b29a      	uxth	r2, r3
 8020b84:	4b2b      	ldr	r3, [pc, #172]	; (8020c34 <ECAT_CheckTimer+0xd4>)
 8020b86:	801a      	strh	r2, [r3, #0]
    }



    DC_CheckWatchdog();
 8020b88:	f002 f9dc 	bl	8022f44 <DC_CheckWatchdog>

/*ECATCHANGE_START(V5.12) EEPROM3*/

    if (u16EepromStoreTimeoutValue > 0)
 8020b8c:	4b2a      	ldr	r3, [pc, #168]	; (8020c38 <ECAT_CheckTimer+0xd8>)
 8020b8e:	881b      	ldrh	r3, [r3, #0]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d018      	beq.n	8020bc6 <ECAT_CheckTimer+0x66>
    {
        u16EepromStoreTimeoutCounter++;
 8020b94:	4b29      	ldr	r3, [pc, #164]	; (8020c3c <ECAT_CheckTimer+0xdc>)
 8020b96:	881b      	ldrh	r3, [r3, #0]
 8020b98:	3301      	adds	r3, #1
 8020b9a:	b29a      	uxth	r2, r3
 8020b9c:	4b27      	ldr	r3, [pc, #156]	; (8020c3c <ECAT_CheckTimer+0xdc>)
 8020b9e:	801a      	strh	r2, [r3, #0]

        if (u16EepromStoreTimeoutValue <= u16EepromStoreTimeoutCounter)
 8020ba0:	4b25      	ldr	r3, [pc, #148]	; (8020c38 <ECAT_CheckTimer+0xd8>)
 8020ba2:	881a      	ldrh	r2, [r3, #0]
 8020ba4:	4b25      	ldr	r3, [pc, #148]	; (8020c3c <ECAT_CheckTimer+0xdc>)
 8020ba6:	881b      	ldrh	r3, [r3, #0]
 8020ba8:	429a      	cmp	r2, r3
 8020baa:	d80c      	bhi.n	8020bc6 <ECAT_CheckTimer+0x66>
        {
            u16EepromStoreTimeoutValue = 0;
 8020bac:	4b22      	ldr	r3, [pc, #136]	; (8020c38 <ECAT_CheckTimer+0xd8>)
 8020bae:	2200      	movs	r2, #0
 8020bb0:	801a      	strh	r2, [r3, #0]
            u16EepromStoreTimeoutCounter = 0;
 8020bb2:	4b22      	ldr	r3, [pc, #136]	; (8020c3c <ECAT_CheckTimer+0xdc>)
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	801a      	strh	r2, [r3, #0]

            if (pAPPL_EEPROM_Store != NULL)
 8020bb8:	4b21      	ldr	r3, [pc, #132]	; (8020c40 <ECAT_CheckTimer+0xe0>)
 8020bba:	681b      	ldr	r3, [r3, #0]
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d002      	beq.n	8020bc6 <ECAT_CheckTimer+0x66>
            {
                pAPPL_EEPROM_Store();
 8020bc0:	4b1f      	ldr	r3, [pc, #124]	; (8020c40 <ECAT_CheckTimer+0xe0>)
 8020bc2:	681b      	ldr	r3, [r3, #0]
 8020bc4:	4798      	blx	r3


/*ECATCHANGE_START(V5.12) COE4*/

    /* Increment the counter every ms between two updates based on the system time (32Bit overrun is handled in COE_SyncTimeStamp) */
    if (!b32BitDc || ((u64Timestamp & 0xFFFFFFFF) <= 4293000000))
 8020bc6:	4b1f      	ldr	r3, [pc, #124]	; (8020c44 <ECAT_CheckTimer+0xe4>)
 8020bc8:	781b      	ldrb	r3, [r3, #0]
 8020bca:	f083 0301 	eor.w	r3, r3, #1
 8020bce:	b2db      	uxtb	r3, r3
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	d111      	bne.n	8020bf8 <ECAT_CheckTimer+0x98>
 8020bd4:	4b1c      	ldr	r3, [pc, #112]	; (8020c48 <ECAT_CheckTimer+0xe8>)
 8020bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bda:	f04f 30ff 	mov.w	r0, #4294967295
 8020bde:	f04f 0100 	mov.w	r1, #0
 8020be2:	ea02 0200 	and.w	r2, r2, r0
 8020be6:	ea03 0301 	and.w	r3, r3, r1
 8020bea:	4818      	ldr	r0, [pc, #96]	; (8020c4c <ECAT_CheckTimer+0xec>)
 8020bec:	f04f 0100 	mov.w	r1, #0
 8020bf0:	4299      	cmp	r1, r3
 8020bf2:	bf08      	it	eq
 8020bf4:	4290      	cmpeq	r0, r2
 8020bf6:	d30c      	bcc.n	8020c12 <ECAT_CheckTimer+0xb2>
    {

        /* the timestamp is stored in ns */
        u64Timestamp = u64Timestamp + 1000000;
 8020bf8:	4b13      	ldr	r3, [pc, #76]	; (8020c48 <ECAT_CheckTimer+0xe8>)
 8020bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bfe:	4814      	ldr	r0, [pc, #80]	; (8020c50 <ECAT_CheckTimer+0xf0>)
 8020c00:	f04f 0100 	mov.w	r1, #0
 8020c04:	1812      	adds	r2, r2, r0
 8020c06:	eb43 0301 	adc.w	r3, r3, r1
 8020c0a:	490f      	ldr	r1, [pc, #60]	; (8020c48 <ECAT_CheckTimer+0xe8>)
 8020c0c:	e9c1 2300 	strd	r2, r3, [r1]
 8020c10:	e007      	b.n	8020c22 <ECAT_CheckTimer+0xc2>

    }
    else if(b32BitDc)
 8020c12:	4b0c      	ldr	r3, [pc, #48]	; (8020c44 <ECAT_CheckTimer+0xe4>)
 8020c14:	781b      	ldrb	r3, [r3, #0]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d003      	beq.n	8020c22 <ECAT_CheckTimer+0xc2>
    {
        /* in case of a 32Bit DC and almost expired time stamp check for a DC overrun*/
        u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 8020c1a:	4b0e      	ldr	r3, [pc, #56]	; (8020c54 <ECAT_CheckTimer+0xf4>)
 8020c1c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8020c20:	601a      	str	r2, [r3, #0]
    }

    u32CheckForDcOverrunCnt++;
 8020c22:	4b0c      	ldr	r3, [pc, #48]	; (8020c54 <ECAT_CheckTimer+0xf4>)
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	3301      	adds	r3, #1
 8020c28:	4a0a      	ldr	r2, [pc, #40]	; (8020c54 <ECAT_CheckTimer+0xf4>)
 8020c2a:	6013      	str	r3, [r2, #0]
/*ECATCHANGE_END(V5.12) COE4*/
}
 8020c2c:	bd80      	pop	{r7, pc}
 8020c2e:	bf00      	nop
 8020c30:	1fff2744 	.word	0x1fff2744
 8020c34:	1fff274e 	.word	0x1fff274e
 8020c38:	1fff270c 	.word	0x1fff270c
 8020c3c:	1fff26ac 	.word	0x1fff26ac
 8020c40:	1fff2644 	.word	0x1fff2644
 8020c44:	1fff2740 	.word	0x1fff2740
 8020c48:	1fff1610 	.word	0x1fff1610
 8020c4c:	ffe1fb40 	.word	0xffe1fb40
 8020c50:	000f4240 	.word	0x000f4240
 8020c54:	1fff2640 	.word	0x1fff2640

08020c58 <HandleCycleTimeMeasurement>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief    In case of non DC synchronization the cycle time measurement is started and 0x1C3.2 (Cycle time) is updated
*////////////////////////////////////////////////////////////////////////////////////////
void HandleCycleTimeMeasurement(void)
{
 8020c58:	b580      	push	{r7, lr}
 8020c5a:	af00      	add	r7, sp, #0
    if (!bDcSyncActive) //no DC sync configured (cycle time measurement 0x1C3x.2 is only available in no DC sync modes)
 8020c5c:	4b1a      	ldr	r3, [pc, #104]	; (8020cc8 <HandleCycleTimeMeasurement+0x70>)
 8020c5e:	781b      	ldrb	r3, [r3, #0]
 8020c60:	f083 0301 	eor.w	r3, r3, #1
 8020c64:	b2db      	uxtb	r3, r3
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d02d      	beq.n	8020cc6 <HandleCycleTimeMeasurement+0x6e>
    {
        if (u32CycleTimeStartValue > 0)
 8020c6a:	4b18      	ldr	r3, [pc, #96]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d023      	beq.n	8020cba <HandleCycleTimeMeasurement+0x62>
        {
            /* bus cycle completed*/
            u32CycleTimeStartValue = GetSystemTimeDelay(u32CycleTimeStartValue);
 8020c72:	4b16      	ldr	r3, [pc, #88]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	4618      	mov	r0, r3
 8020c78:	f000 f82e 	bl	8020cd8 <GetSystemTimeDelay>
 8020c7c:	4602      	mov	r2, r0
 8020c7e:	4b13      	ldr	r3, [pc, #76]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020c80:	601a      	str	r2, [r3, #0]

            if ((sSyncManOutPar.u32CycleTime == 0) || (sSyncManOutPar.u32CycleTime > u32CycleTimeStartValue))
 8020c82:	4b13      	ldr	r3, [pc, #76]	; (8020cd0 <HandleCycleTimeMeasurement+0x78>)
 8020c84:	685b      	ldr	r3, [r3, #4]
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	d005      	beq.n	8020c96 <HandleCycleTimeMeasurement+0x3e>
 8020c8a:	4b11      	ldr	r3, [pc, #68]	; (8020cd0 <HandleCycleTimeMeasurement+0x78>)
 8020c8c:	685a      	ldr	r2, [r3, #4]
 8020c8e:	4b0f      	ldr	r3, [pc, #60]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020c90:	681b      	ldr	r3, [r3, #0]
 8020c92:	429a      	cmp	r2, r3
 8020c94:	d903      	bls.n	8020c9e <HandleCycleTimeMeasurement+0x46>
            {
                    sSyncManOutPar.u32CycleTime = u32CycleTimeStartValue;
 8020c96:	4b0d      	ldr	r3, [pc, #52]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020c98:	681b      	ldr	r3, [r3, #0]
 8020c9a:	4a0d      	ldr	r2, [pc, #52]	; (8020cd0 <HandleCycleTimeMeasurement+0x78>)
 8020c9c:	6053      	str	r3, [r2, #4]
            }

            if ((sSyncManInPar.u32CycleTime == 0) || (sSyncManInPar.u32CycleTime > u32CycleTimeStartValue))
 8020c9e:	4b0d      	ldr	r3, [pc, #52]	; (8020cd4 <HandleCycleTimeMeasurement+0x7c>)
 8020ca0:	685b      	ldr	r3, [r3, #4]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d005      	beq.n	8020cb2 <HandleCycleTimeMeasurement+0x5a>
 8020ca6:	4b0b      	ldr	r3, [pc, #44]	; (8020cd4 <HandleCycleTimeMeasurement+0x7c>)
 8020ca8:	685a      	ldr	r2, [r3, #4]
 8020caa:	4b08      	ldr	r3, [pc, #32]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020cac:	681b      	ldr	r3, [r3, #0]
 8020cae:	429a      	cmp	r2, r3
 8020cb0:	d903      	bls.n	8020cba <HandleCycleTimeMeasurement+0x62>
            {
                    sSyncManInPar.u32CycleTime = u32CycleTimeStartValue;
 8020cb2:	4b06      	ldr	r3, [pc, #24]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	4a07      	ldr	r2, [pc, #28]	; (8020cd4 <HandleCycleTimeMeasurement+0x7c>)
 8020cb8:	6053      	str	r3, [r2, #4]
            }
        }
        /* get next start value */
        u32CycleTimeStartValue = GetSystemTimeDelay(0);
 8020cba:	2000      	movs	r0, #0
 8020cbc:	f000 f80c 	bl	8020cd8 <GetSystemTimeDelay>
 8020cc0:	4602      	mov	r2, r0
 8020cc2:	4b02      	ldr	r3, [pc, #8]	; (8020ccc <HandleCycleTimeMeasurement+0x74>)
 8020cc4:	601a      	str	r2, [r3, #0]
        
    }/* No DC sync configured */
}
 8020cc6:	bd80      	pop	{r7, pc}
 8020cc8:	1fff2750 	.word	0x1fff2750
 8020ccc:	1fff264c 	.word	0x1fff264c
 8020cd0:	1fff2838 	.word	0x1fff2838
 8020cd4:	1fff27f4 	.word	0x1fff27f4

08020cd8 <GetSystemTimeDelay>:
\brief    Calculates the difference between the old and current system time value in ns.
          NOTE: This function only handles a 32Bit system time values (therefore the maximum delay about 4sec).
*////////////////////////////////////////////////////////////////////////////////////////

UINT32 GetSystemTimeDelay(UINT32 u32StartTime)
{
 8020cd8:	b480      	push	{r7}
 8020cda:	b085      	sub	sp, #20
 8020cdc:	af00      	add	r7, sp, #0
 8020cde:	6078      	str	r0, [r7, #4]
   UINT32 u32CurValue = 0;
 8020ce0:	2300      	movs	r3, #0
 8020ce2:	60bb      	str	r3, [r7, #8]
   UINT32 u32Delta = 0;
 8020ce4:	2300      	movs	r3, #0
 8020ce6:	60fb      	str	r3, [r7, #12]

   
   HW_EscReadDWordIsr(u32CurValue, ESC_SYSTEMTIME_OFFSET);
 8020ce8:	4b15      	ldr	r3, [pc, #84]	; (8020d40 <GetSystemTimeDelay+0x68>)
 8020cea:	681b      	ldr	r3, [r3, #0]
 8020cec:	60bb      	str	r3, [r7, #8]

   if (u32CurValue > 0)
 8020cee:	68bb      	ldr	r3, [r7, #8]
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d00d      	beq.n	8020d10 <GetSystemTimeDelay+0x38>
   {
      if (u32StartTime <= u32CurValue)
 8020cf4:	687a      	ldr	r2, [r7, #4]
 8020cf6:	68bb      	ldr	r3, [r7, #8]
 8020cf8:	429a      	cmp	r2, r3
 8020cfa:	d804      	bhi.n	8020d06 <GetSystemTimeDelay+0x2e>
      {
         u32Delta = u32CurValue - u32StartTime;
 8020cfc:	68ba      	ldr	r2, [r7, #8]
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	1ad3      	subs	r3, r2, r3
 8020d02:	60fb      	str	r3, [r7, #12]
 8020d04:	e004      	b.n	8020d10 <GetSystemTimeDelay+0x38>
      }
      else
      {
         //The 32Bit timer is wrapped around
         u32Delta = u32CurValue + (0xFFFFFFFF - u32StartTime);
 8020d06:	68ba      	ldr	r2, [r7, #8]
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	1ad3      	subs	r3, r2, r3
 8020d0c:	3b01      	subs	r3, #1
 8020d0e:	60fb      	str	r3, [r7, #12]
      }
   }// current value successfully read out

   if (u32StartTime > 0)
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	d00c      	beq.n	8020d30 <GetSystemTimeDelay+0x58>
   {

       /*the difference between two timestamps are calculated => subtract measurement failure*/
       if (u32SystemTimeReadFailure < u32Delta)
 8020d16:	4b0b      	ldr	r3, [pc, #44]	; (8020d44 <GetSystemTimeDelay+0x6c>)
 8020d18:	681a      	ldr	r2, [r3, #0]
 8020d1a:	68fb      	ldr	r3, [r7, #12]
 8020d1c:	429a      	cmp	r2, r3
 8020d1e:	d205      	bcs.n	8020d2c <GetSystemTimeDelay+0x54>
       {
           u32Delta = u32Delta - u32SystemTimeReadFailure;
 8020d20:	4b08      	ldr	r3, [pc, #32]	; (8020d44 <GetSystemTimeDelay+0x6c>)
 8020d22:	681b      	ldr	r3, [r3, #0]
 8020d24:	68fa      	ldr	r2, [r7, #12]
 8020d26:	1ad3      	subs	r3, r2, r3
 8020d28:	60fb      	str	r3, [r7, #12]
 8020d2a:	e001      	b.n	8020d30 <GetSystemTimeDelay+0x58>
       }
       else
       {
           /*set the delta to 0 if the measurement failure is greater than the calculated difference*/
           u32Delta = 0;
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	60fb      	str	r3, [r7, #12]
       }
   }
   return u32Delta;
 8020d30:	68fb      	ldr	r3, [r7, #12]
}
 8020d32:	4618      	mov	r0, r3
 8020d34:	3714      	adds	r7, #20
 8020d36:	46bd      	mov	sp, r7
 8020d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d3c:	4770      	bx	lr
 8020d3e:	bf00      	nop
 8020d40:	54010910 	.word	0x54010910
 8020d44:	1fff265c 	.word	0x1fff265c

08020d48 <PDI_Isr>:
/*ECATCHANGE_END(V5.12) ECAT1*/

void PDI_Isr(void)
{
 8020d48:	b580      	push	{r7, lr}
 8020d4a:	b082      	sub	sp, #8
 8020d4c:	af00      	add	r7, sp, #0
    if(bEscIntEnabled)
 8020d4e:	4b45      	ldr	r3, [pc, #276]	; (8020e64 <PDI_Isr+0x11c>)
 8020d50:	781b      	ldrb	r3, [r3, #0]
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	f000 8081 	beq.w	8020e5a <PDI_Isr+0x112>
    {
        /* get the AL event register */
        UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8020d58:	f7ff fe58 	bl	8020a0c <HW_GetALEventRegister_Isr>
 8020d5c:	4603      	mov	r3, r0
 8020d5e:	80fb      	strh	r3, [r7, #6]
        ALEvent = SWAPWORD(ALEvent);

        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8020d60:	88fb      	ldrh	r3, [r7, #6]
 8020d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	d039      	beq.n	8020dde <PDI_Isr+0x96>
        {
            if(bDcRunning && bDcSyncActive)
 8020d6a:	4b3f      	ldr	r3, [pc, #252]	; (8020e68 <PDI_Isr+0x120>)
 8020d6c:	781b      	ldrb	r3, [r3, #0]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d006      	beq.n	8020d80 <PDI_Isr+0x38>
 8020d72:	4b3e      	ldr	r3, [pc, #248]	; (8020e6c <PDI_Isr+0x124>)
 8020d74:	781b      	ldrb	r3, [r3, #0]
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d002      	beq.n	8020d80 <PDI_Isr+0x38>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 8020d7a:	4b3d      	ldr	r3, [pc, #244]	; (8020e70 <PDI_Isr+0x128>)
 8020d7c:	2200      	movs	r2, #0
 8020d7e:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 8020d80:	4b3c      	ldr	r3, [pc, #240]	; (8020e74 <PDI_Isr+0x12c>)
 8020d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d005      	beq.n	8020d94 <PDI_Isr+0x4c>
            {
                sSyncManOutPar.u16SmEventMissedCounter--;
 8020d88:	4b3a      	ldr	r3, [pc, #232]	; (8020e74 <PDI_Isr+0x12c>)
 8020d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020d8c:	3b01      	subs	r3, #1
 8020d8e:	b29a      	uxth	r2, r3
 8020d90:	4b38      	ldr	r3, [pc, #224]	; (8020e74 <PDI_Isr+0x12c>)
 8020d92:	851a      	strh	r2, [r3, #40]	; 0x28
            }

/*ECATCHANGE_START(V5.12) ECAT5*/
            sSyncManInPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter;
 8020d94:	4b37      	ldr	r3, [pc, #220]	; (8020e74 <PDI_Isr+0x12c>)
 8020d96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020d98:	4b37      	ldr	r3, [pc, #220]	; (8020e78 <PDI_Isr+0x130>)
 8020d9a:	851a      	strh	r2, [r3, #40]	; 0x28
/*ECATCHANGE_END(V5.12) ECAT5*/



        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 8020d9c:	4b37      	ldr	r3, [pc, #220]	; (8020e7c <PDI_Isr+0x134>)
 8020d9e:	2201      	movs	r2, #1
 8020da0:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 8020da2:	4b37      	ldr	r3, [pc, #220]	; (8020e80 <PDI_Isr+0x138>)
 8020da4:	781b      	ldrb	r3, [r3, #0]
 8020da6:	2b00      	cmp	r3, #0
 8020da8:	d002      	beq.n	8020db0 <PDI_Isr+0x68>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 8020daa:	f7ff fe81 	bl	8020ab0 <PDO_OutputMapping>
 8020dae:	e016      	b.n	8020dde <PDI_Isr+0x96>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 8020db0:	4b34      	ldr	r3, [pc, #208]	; (8020e84 <PDI_Isr+0x13c>)
 8020db2:	881b      	ldrh	r3, [r3, #0]
 8020db4:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020db8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020dbc:	781b      	ldrb	r3, [r3, #0]
 8020dbe:	b2da      	uxtb	r2, r3
 8020dc0:	4b31      	ldr	r3, [pc, #196]	; (8020e88 <PDI_Isr+0x140>)
 8020dc2:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8020dc4:	4b2f      	ldr	r3, [pc, #188]	; (8020e84 <PDI_Isr+0x13c>)
 8020dc6:	881b      	ldrh	r3, [r3, #0]
 8020dc8:	461a      	mov	r2, r3
 8020dca:	4b30      	ldr	r3, [pc, #192]	; (8020e8c <PDI_Isr+0x144>)
 8020dcc:	881b      	ldrh	r3, [r3, #0]
 8020dce:	4413      	add	r3, r2
 8020dd0:	461a      	mov	r2, r3
 8020dd2:	4b2f      	ldr	r3, [pc, #188]	; (8020e90 <PDI_Isr+0x148>)
 8020dd4:	4413      	add	r3, r2
 8020dd6:	781b      	ldrb	r3, [r3, #0]
 8020dd8:	b2da      	uxtb	r2, r3
 8020dda:	4b2b      	ldr	r3, [pc, #172]	; (8020e88 <PDI_Isr+0x140>)
 8020ddc:	701a      	strb	r2, [r3, #0]
        }

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 8020dde:	4b25      	ldr	r3, [pc, #148]	; (8020e74 <PDI_Isr+0x12c>)
 8020de0:	885b      	ldrh	r3, [r3, #2]
 8020de2:	2b01      	cmp	r3, #1
 8020de4:	d101      	bne.n	8020dea <PDI_Isr+0xa2>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8020de6:	f000 fa31 	bl	802124c <ECAT_Application>
        }

    if ( bEcatInputUpdateRunning 
 8020dea:	4b2a      	ldr	r3, [pc, #168]	; (8020e94 <PDI_Isr+0x14c>)
 8020dec:	781b      	ldrb	r3, [r3, #0]
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	d009      	beq.n	8020e06 <PDI_Isr+0xbe>
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 8020df2:	4b21      	ldr	r3, [pc, #132]	; (8020e78 <PDI_Isr+0x130>)
 8020df4:	885b      	ldrh	r3, [r3, #2]
 8020df6:	2b01      	cmp	r3, #1
 8020df8:	d003      	beq.n	8020e02 <PDI_Isr+0xba>
 8020dfa:	4b1f      	ldr	r3, [pc, #124]	; (8020e78 <PDI_Isr+0x130>)
 8020dfc:	885b      	ldrh	r3, [r3, #2]
 8020dfe:	2b22      	cmp	r3, #34	; 0x22
 8020e00:	d101      	bne.n	8020e06 <PDI_Isr+0xbe>
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 8020e02:	f7ff fe0b 	bl	8020a1c <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 8020e06:	f7ff fe01 	bl	8020a0c <HW_GetALEventRegister_Isr>
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	80fb      	strh	r3, [r7, #6]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8020e0e:	88fb      	ldrh	r3, [r7, #6]
 8020e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d020      	beq.n	8020e5a <PDI_Isr+0x112>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 8020e18:	4b16      	ldr	r3, [pc, #88]	; (8020e74 <PDI_Isr+0x12c>)
 8020e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8020e1c:	3301      	adds	r3, #1
 8020e1e:	b29a      	uxth	r2, r3
 8020e20:	4b14      	ldr	r3, [pc, #80]	; (8020e74 <PDI_Isr+0x12c>)
 8020e22:	855a      	strh	r2, [r3, #42]	; 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 8020e24:	4b13      	ldr	r3, [pc, #76]	; (8020e74 <PDI_Isr+0x12c>)
 8020e26:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8020e28:	4b13      	ldr	r3, [pc, #76]	; (8020e78 <PDI_Isr+0x130>)
 8020e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 8020e2c:	4b15      	ldr	r3, [pc, #84]	; (8020e84 <PDI_Isr+0x13c>)
 8020e2e:	881b      	ldrh	r3, [r3, #0]
 8020e30:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8020e34:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8020e38:	781b      	ldrb	r3, [r3, #0]
 8020e3a:	b2da      	uxtb	r2, r3
 8020e3c:	4b12      	ldr	r3, [pc, #72]	; (8020e88 <PDI_Isr+0x140>)
 8020e3e:	701a      	strb	r2, [r3, #0]
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8020e40:	4b10      	ldr	r3, [pc, #64]	; (8020e84 <PDI_Isr+0x13c>)
 8020e42:	881b      	ldrh	r3, [r3, #0]
 8020e44:	461a      	mov	r2, r3
 8020e46:	4b11      	ldr	r3, [pc, #68]	; (8020e8c <PDI_Isr+0x144>)
 8020e48:	881b      	ldrh	r3, [r3, #0]
 8020e4a:	4413      	add	r3, r2
 8020e4c:	461a      	mov	r2, r3
 8020e4e:	4b10      	ldr	r3, [pc, #64]	; (8020e90 <PDI_Isr+0x148>)
 8020e50:	4413      	add	r3, r2
 8020e52:	781b      	ldrb	r3, [r3, #0]
 8020e54:	b2da      	uxtb	r2, r3
 8020e56:	4b0c      	ldr	r3, [pc, #48]	; (8020e88 <PDI_Isr+0x140>)
 8020e58:	701a      	strb	r2, [r3, #0]
    }
    } //if(bEscIntEnabled)

/*ECATCHANGE_START(V5.12) ECAT5*/
    COE_UpdateSyncErrorStatus();
 8020e5a:	f7ff fb09 	bl	8020470 <COE_UpdateSyncErrorStatus>
/*ECATCHANGE_END(V5.12) ECAT5*/

}
 8020e5e:	3708      	adds	r7, #8
 8020e60:	46bd      	mov	sp, r7
 8020e62:	bd80      	pop	{r7, pc}
 8020e64:	1fff2757 	.word	0x1fff2757
 8020e68:	1fff2734 	.word	0x1fff2734
 8020e6c:	1fff2750 	.word	0x1fff2750
 8020e70:	1fff275a 	.word	0x1fff275a
 8020e74:	1fff2838 	.word	0x1fff2838
 8020e78:	1fff27f4 	.word	0x1fff27f4
 8020e7c:	1fff274c 	.word	0x1fff274c
 8020e80:	1fff2751 	.word	0x1fff2751
 8020e84:	1fff2726 	.word	0x1fff2726
 8020e88:	1fff2730 	.word	0x1fff2730
 8020e8c:	1fff271a 	.word	0x1fff271a
 8020e90:	5400ffff 	.word	0x5400ffff
 8020e94:	1fff2756 	.word	0x1fff2756

08020e98 <Sync0_Isr>:

void Sync0_Isr(void)
{
 8020e98:	b580      	push	{r7, lr}
 8020e9a:	b082      	sub	sp, #8
 8020e9c:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 8020e9e:	4b48      	ldr	r3, [pc, #288]	; (8020fc0 <Sync0_Isr+0x128>)
 8020ea0:	2200      	movs	r2, #0
 8020ea2:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 8020ea4:	4b47      	ldr	r3, [pc, #284]	; (8020fc4 <Sync0_Isr+0x12c>)
 8020ea6:	781b      	ldrb	r3, [r3, #0]
 8020ea8:	2b00      	cmp	r3, #0
 8020eaa:	f000 8083 	beq.w	8020fb4 <Sync0_Isr+0x11c>
    {

        if ( bEcatInputUpdateRunning )
 8020eae:	4b46      	ldr	r3, [pc, #280]	; (8020fc8 <Sync0_Isr+0x130>)
 8020eb0:	781b      	ldrb	r3, [r3, #0]
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	d005      	beq.n	8020ec2 <Sync0_Isr+0x2a>
        {
            LatchInputSync0Counter++;
 8020eb6:	4b45      	ldr	r3, [pc, #276]	; (8020fcc <Sync0_Isr+0x134>)
 8020eb8:	881b      	ldrh	r3, [r3, #0]
 8020eba:	3301      	adds	r3, #1
 8020ebc:	b29a      	uxth	r2, r3
 8020ebe:	4b43      	ldr	r3, [pc, #268]	; (8020fcc <Sync0_Isr+0x134>)
 8020ec0:	801a      	strh	r2, [r3, #0]
        }

        if(u16SmSync0Value > 0)
 8020ec2:	4b43      	ldr	r3, [pc, #268]	; (8020fd0 <Sync0_Isr+0x138>)
 8020ec4:	881b      	ldrh	r3, [r3, #0]
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d05b      	beq.n	8020f82 <Sync0_Isr+0xea>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8020eca:	4b42      	ldr	r3, [pc, #264]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020ecc:	881a      	ldrh	r2, [r3, #0]
 8020ece:	4b40      	ldr	r3, [pc, #256]	; (8020fd0 <Sync0_Isr+0x138>)
 8020ed0:	881b      	ldrh	r3, [r3, #0]
 8020ed2:	429a      	cmp	r2, r3
 8020ed4:	d923      	bls.n	8020f1e <Sync0_Isr+0x86>
           {
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8020ed6:	4b40      	ldr	r3, [pc, #256]	; (8020fd8 <Sync0_Isr+0x140>)
 8020ed8:	881b      	ldrh	r3, [r3, #0]
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	d00b      	beq.n	8020ef6 <Sync0_Isr+0x5e>
 8020ede:	4b3f      	ldr	r3, [pc, #252]	; (8020fdc <Sync0_Isr+0x144>)
 8020ee0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020ee2:	4b3f      	ldr	r3, [pc, #252]	; (8020fe0 <Sync0_Isr+0x148>)
 8020ee4:	891b      	ldrh	r3, [r3, #8]
 8020ee6:	429a      	cmp	r2, r3
 8020ee8:	d805      	bhi.n	8020ef6 <Sync0_Isr+0x5e>
              {
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 8020eea:	4b3c      	ldr	r3, [pc, #240]	; (8020fdc <Sync0_Isr+0x144>)
 8020eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020eee:	3303      	adds	r3, #3
 8020ef0:	b29a      	uxth	r2, r3
 8020ef2:	4b3a      	ldr	r3, [pc, #232]	; (8020fdc <Sync0_Isr+0x144>)
 8020ef4:	851a      	strh	r2, [r3, #40]	; 0x28
              }

           if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8020ef6:	4b3b      	ldr	r3, [pc, #236]	; (8020fe4 <Sync0_Isr+0x14c>)
 8020ef8:	881b      	ldrh	r3, [r3, #0]
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d00f      	beq.n	8020f1e <Sync0_Isr+0x86>
 8020efe:	4b36      	ldr	r3, [pc, #216]	; (8020fd8 <Sync0_Isr+0x140>)
 8020f00:	881b      	ldrh	r3, [r3, #0]
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d10b      	bne.n	8020f1e <Sync0_Isr+0x86>
 8020f06:	4b38      	ldr	r3, [pc, #224]	; (8020fe8 <Sync0_Isr+0x150>)
 8020f08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8020f0a:	4b35      	ldr	r3, [pc, #212]	; (8020fe0 <Sync0_Isr+0x148>)
 8020f0c:	891b      	ldrh	r3, [r3, #8]
 8020f0e:	429a      	cmp	r2, r3
 8020f10:	d805      	bhi.n	8020f1e <Sync0_Isr+0x86>
           {
               sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 8020f12:	4b35      	ldr	r3, [pc, #212]	; (8020fe8 <Sync0_Isr+0x150>)
 8020f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020f16:	3303      	adds	r3, #3
 8020f18:	b29a      	uxth	r2, r3
 8020f1a:	4b33      	ldr	r3, [pc, #204]	; (8020fe8 <Sync0_Isr+0x150>)
 8020f1c:	851a      	strh	r2, [r3, #40]	; 0x28
           }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 8020f1e:	4b2e      	ldr	r3, [pc, #184]	; (8020fd8 <Sync0_Isr+0x140>)
 8020f20:	881b      	ldrh	r3, [r3, #0]
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d121      	bne.n	8020f6a <Sync0_Isr+0xd2>
 8020f26:	4b2f      	ldr	r3, [pc, #188]	; (8020fe4 <Sync0_Isr+0x14c>)
 8020f28:	881b      	ldrh	r3, [r3, #0]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d01d      	beq.n	8020f6a <Sync0_Isr+0xd2>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8020f2e:	f7ff fd6d 	bl	8020a0c <HW_GetALEventRegister_Isr>
 8020f32:	4603      	mov	r3, r0
 8020f34:	80fb      	strh	r3, [r7, #6]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 8020f36:	88fb      	ldrh	r3, [r7, #6]
 8020f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d10c      	bne.n	8020f5a <Sync0_Isr+0xc2>
              {

                 /* no input data was read by the master, increment the sm missed counter*/
                if (u16SmSync0Counter <= u16SmSync0Value)
 8020f40:	4b24      	ldr	r3, [pc, #144]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020f42:	881a      	ldrh	r2, [r3, #0]
 8020f44:	4b22      	ldr	r3, [pc, #136]	; (8020fd0 <Sync0_Isr+0x138>)
 8020f46:	881b      	ldrh	r3, [r3, #0]
 8020f48:	429a      	cmp	r2, r3
 8020f4a:	d80d      	bhi.n	8020f68 <Sync0_Isr+0xd0>
                {
                    u16SmSync0Counter++;
 8020f4c:	4b21      	ldr	r3, [pc, #132]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020f4e:	881b      	ldrh	r3, [r3, #0]
 8020f50:	3301      	adds	r3, #1
 8020f52:	b29a      	uxth	r2, r3
 8020f54:	4b1f      	ldr	r3, [pc, #124]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020f56:	801a      	strh	r2, [r3, #0]

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8020f58:	e013      	b.n	8020f82 <Sync0_Isr+0xea>
                }
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 8020f5a:	4b1e      	ldr	r3, [pc, #120]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020f5c:	2200      	movs	r2, #0
 8020f5e:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 8020f60:	4b21      	ldr	r3, [pc, #132]	; (8020fe8 <Sync0_Isr+0x150>)
 8020f62:	2200      	movs	r2, #0
 8020f64:	851a      	strh	r2, [r3, #40]	; 0x28

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
           {
 8020f66:	e00c      	b.n	8020f82 <Sync0_Isr+0xea>
 8020f68:	e00b      	b.n	8020f82 <Sync0_Isr+0xea>

                 sSyncManInPar.u16SmEventMissedCounter = 0;

              }
           }
           else if (u16SmSync0Counter <= u16SmSync0Value)
 8020f6a:	4b1a      	ldr	r3, [pc, #104]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020f6c:	881a      	ldrh	r2, [r3, #0]
 8020f6e:	4b18      	ldr	r3, [pc, #96]	; (8020fd0 <Sync0_Isr+0x138>)
 8020f70:	881b      	ldrh	r3, [r3, #0]
 8020f72:	429a      	cmp	r2, r3
 8020f74:	d805      	bhi.n	8020f82 <Sync0_Isr+0xea>
           {

               u16SmSync0Counter++;
 8020f76:	4b17      	ldr	r3, [pc, #92]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020f78:	881b      	ldrh	r3, [r3, #0]
 8020f7a:	3301      	adds	r3, #1
 8020f7c:	b29a      	uxth	r2, r3
 8020f7e:	4b15      	ldr	r3, [pc, #84]	; (8020fd4 <Sync0_Isr+0x13c>)
 8020f80:	801a      	strh	r2, [r3, #0]
           }
        }//SM -Sync monitoring enabled


        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 8020f82:	f000 f963 	bl	802124c <ECAT_Application>

        if ( bEcatInputUpdateRunning 
 8020f86:	4b10      	ldr	r3, [pc, #64]	; (8020fc8 <Sync0_Isr+0x130>)
 8020f88:	781b      	ldrb	r3, [r3, #0]
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d012      	beq.n	8020fb4 <Sync0_Isr+0x11c>
           && (LatchInputSync0Value > 0) && (LatchInputSync0Value == LatchInputSync0Counter) ) /* Inputs shall be latched on a specific Sync0 event */
 8020f8e:	4b17      	ldr	r3, [pc, #92]	; (8020fec <Sync0_Isr+0x154>)
 8020f90:	881b      	ldrh	r3, [r3, #0]
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d00e      	beq.n	8020fb4 <Sync0_Isr+0x11c>
 8020f96:	4b15      	ldr	r3, [pc, #84]	; (8020fec <Sync0_Isr+0x154>)
 8020f98:	881a      	ldrh	r2, [r3, #0]
 8020f9a:	4b0c      	ldr	r3, [pc, #48]	; (8020fcc <Sync0_Isr+0x134>)
 8020f9c:	881b      	ldrh	r3, [r3, #0]
 8020f9e:	429a      	cmp	r2, r3
 8020fa0:	d108      	bne.n	8020fb4 <Sync0_Isr+0x11c>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8020fa2:	f7ff fd3b 	bl	8020a1c <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 8020fa6:	4b11      	ldr	r3, [pc, #68]	; (8020fec <Sync0_Isr+0x154>)
 8020fa8:	881b      	ldrh	r3, [r3, #0]
 8020faa:	2b01      	cmp	r3, #1
 8020fac:	d102      	bne.n	8020fb4 <Sync0_Isr+0x11c>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 8020fae:	4b07      	ldr	r3, [pc, #28]	; (8020fcc <Sync0_Isr+0x134>)
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	801a      	strh	r2, [r3, #0]
        }

    }

/*ECATCHANGE_START(V5.12) ECAT5*/
    COE_UpdateSyncErrorStatus();
 8020fb4:	f7ff fa5c 	bl	8020470 <COE_UpdateSyncErrorStatus>
/*ECATCHANGE_END(V5.12) ECAT5*/

}
 8020fb8:	3708      	adds	r7, #8
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	bd80      	pop	{r7, pc}
 8020fbe:	bf00      	nop
 8020fc0:	1fff271e 	.word	0x1fff271e
 8020fc4:	1fff2750 	.word	0x1fff2750
 8020fc8:	1fff2756 	.word	0x1fff2756
 8020fcc:	1fff2722 	.word	0x1fff2722
 8020fd0:	1fff2748 	.word	0x1fff2748
 8020fd4:	1fff275a 	.word	0x1fff275a
 8020fd8:	1fff271a 	.word	0x1fff271a
 8020fdc:	1fff2838 	.word	0x1fff2838
 8020fe0:	1fff1440 	.word	0x1fff1440
 8020fe4:	1fff2746 	.word	0x1fff2746
 8020fe8:	1fff27f4 	.word	0x1fff27f4
 8020fec:	1fff2742 	.word	0x1fff2742

08020ff0 <Sync1_Isr>:

void Sync1_Isr(void)
{
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 8020ff4:	4b0a      	ldr	r3, [pc, #40]	; (8021020 <Sync1_Isr+0x30>)
 8020ff6:	2200      	movs	r2, #0
 8020ff8:	801a      	strh	r2, [r3, #0]

        if ( bEcatInputUpdateRunning 
 8020ffa:	4b0a      	ldr	r3, [pc, #40]	; (8021024 <Sync1_Isr+0x34>)
 8020ffc:	781b      	ldrb	r3, [r3, #0]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d009      	beq.n	8021016 <Sync1_Isr+0x26>
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 8021002:	4b09      	ldr	r3, [pc, #36]	; (8021028 <Sync1_Isr+0x38>)
 8021004:	885b      	ldrh	r3, [r3, #2]
 8021006:	2b03      	cmp	r3, #3
 8021008:	d105      	bne.n	8021016 <Sync1_Isr+0x26>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 802100a:	4b08      	ldr	r3, [pc, #32]	; (802102c <Sync1_Isr+0x3c>)
 802100c:	881b      	ldrh	r3, [r3, #0]
 802100e:	2b00      	cmp	r3, #0
 8021010:	d101      	bne.n	8021016 <Sync1_Isr+0x26>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8021012:	f7ff fd03 	bl	8020a1c <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 8021016:	4b06      	ldr	r3, [pc, #24]	; (8021030 <Sync1_Isr+0x40>)
 8021018:	2200      	movs	r2, #0
 802101a:	801a      	strh	r2, [r3, #0]
}
 802101c:	bd80      	pop	{r7, pc}
 802101e:	bf00      	nop
 8021020:	1fff2752 	.word	0x1fff2752
 8021024:	1fff2756 	.word	0x1fff2756
 8021028:	1fff27f4 	.word	0x1fff27f4
 802102c:	1fff2742 	.word	0x1fff2742
 8021030:	1fff2722 	.word	0x1fff2722

08021034 <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 8021034:	b580      	push	{r7, lr}
 8021036:	b086      	sub	sp, #24
 8021038:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 802103a:	2300      	movs	r3, #0
 802103c:	81fb      	strh	r3, [r7, #14]
/*Hardware init function need to be called from the application layer*/

#ifdef SET_EEPROM_PTR
    SET_EEPROM_PTR
 802103e:	4b36      	ldr	r3, [pc, #216]	; (8021118 <MainInit+0xe4>)
 8021040:	4a36      	ldr	r2, [pc, #216]	; (802111c <MainInit+0xe8>)
 8021042:	601a      	str	r2, [r3, #0]
#endif


/*ECATCHANGE_START(V5.12) ECAT8*/
/* Reset application function pointer*/
pAPPL_EEPROM_Read = NULL;
 8021044:	4b36      	ldr	r3, [pc, #216]	; (8021120 <MainInit+0xec>)
 8021046:	2200      	movs	r2, #0
 8021048:	601a      	str	r2, [r3, #0]
    pAPPL_EEPROM_Write = NULL;
 802104a:	4b36      	ldr	r3, [pc, #216]	; (8021124 <MainInit+0xf0>)
 802104c:	2200      	movs	r2, #0
 802104e:	601a      	str	r2, [r3, #0]
    pAPPL_EEPROM_Reload = NULL;
 8021050:	4b35      	ldr	r3, [pc, #212]	; (8021128 <MainInit+0xf4>)
 8021052:	2200      	movs	r2, #0
 8021054:	601a      	str	r2, [r3, #0]
    pAPPL_EEPROM_Store = NULL;
 8021056:	4b35      	ldr	r3, [pc, #212]	; (802112c <MainInit+0xf8>)
 8021058:	2200      	movs	r2, #0
 802105a:	601a      	str	r2, [r3, #0]




    pAPPL_MainLoop = NULL;
 802105c:	4b34      	ldr	r3, [pc, #208]	; (8021130 <MainInit+0xfc>)
 802105e:	2200      	movs	r2, #0
 8021060:	601a      	str	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) ECAT8*/

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 8021062:	f002 f851 	bl	8023108 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 8021066:	f7ff fa35 	bl	80204d4 <COE_ObjInit>


    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 802106a:	4b32      	ldr	r3, [pc, #200]	; (8021134 <MainInit+0x100>)
 802106c:	2201      	movs	r2, #1
 802106e:	701a      	strb	r2, [r3, #0]

/*ECATCHANGE_START(V5.12) ECAT1*/

    bMinCycleTimeMeasurementStarted = FALSE;
 8021070:	4b31      	ldr	r3, [pc, #196]	; (8021138 <MainInit+0x104>)
 8021072:	2200      	movs	r2, #0
 8021074:	701a      	strb	r2, [r3, #0]
    u32CycleTimeStartValue = 0;
 8021076:	4b31      	ldr	r3, [pc, #196]	; (802113c <MainInit+0x108>)
 8021078:	2200      	movs	r2, #0
 802107a:	601a      	str	r2, [r3, #0]
    u32MinCycleTimeStartValue = 0;
 802107c:	4b30      	ldr	r3, [pc, #192]	; (8021140 <MainInit+0x10c>)
 802107e:	2200      	movs	r2, #0
 8021080:	601a      	str	r2, [r3, #0]

    u32SystemTimeReadFailure = 0;
 8021082:	4b30      	ldr	r3, [pc, #192]	; (8021144 <MainInit+0x110>)
 8021084:	2200      	movs	r2, #0
 8021086:	601a      	str	r2, [r3, #0]

    /* Get the System Time read failure */
    {
       UINT32 u32TimeValue = 0;
 8021088:	2300      	movs	r3, #0
 802108a:	60bb      	str	r3, [r7, #8]
       UINT32 u32Cnt = 0;
 802108c:	2300      	movs	r3, #0
 802108e:	617b      	str	r3, [r7, #20]
       UINT32 u32Delta = 0;
 8021090:	2300      	movs	r3, #0
 8021092:	613b      	str	r3, [r7, #16]

       while (u32Cnt < 1000)
 8021094:	e026      	b.n	80210e4 <MainInit+0xb0>
       {
           HW_EscReadDWordIsr(u32TimeValue, ESC_SYSTEMTIME_OFFSET);
 8021096:	4b2c      	ldr	r3, [pc, #176]	; (8021148 <MainInit+0x114>)
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	60bb      	str	r3, [r7, #8]
           HW_EscReadDWordIsr(u32Delta, ESC_SYSTEMTIME_OFFSET);
 802109c:	4b2a      	ldr	r3, [pc, #168]	; (8021148 <MainInit+0x114>)
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	613b      	str	r3, [r7, #16]

            if (u32TimeValue <= u32Delta)
 80210a2:	68ba      	ldr	r2, [r7, #8]
 80210a4:	693b      	ldr	r3, [r7, #16]
 80210a6:	429a      	cmp	r2, r3
 80210a8:	d804      	bhi.n	80210b4 <MainInit+0x80>
            {
                    u32Delta = u32Delta - u32TimeValue;
 80210aa:	693a      	ldr	r2, [r7, #16]
 80210ac:	68bb      	ldr	r3, [r7, #8]
 80210ae:	1ad3      	subs	r3, r2, r3
 80210b0:	613b      	str	r3, [r7, #16]
 80210b2:	e004      	b.n	80210be <MainInit+0x8a>
            }
            else
            {
                //The 32Bit timer is wrapped around
                u32Delta = u32Delta + (0xFFFFFFFF - u32TimeValue);
 80210b4:	693a      	ldr	r2, [r7, #16]
 80210b6:	68bb      	ldr	r3, [r7, #8]
 80210b8:	1ad3      	subs	r3, r2, r3
 80210ba:	3b01      	subs	r3, #1
 80210bc:	613b      	str	r3, [r7, #16]
            }


            if (u32SystemTimeReadFailure == 0)
 80210be:	4b21      	ldr	r3, [pc, #132]	; (8021144 <MainInit+0x110>)
 80210c0:	681b      	ldr	r3, [r3, #0]
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	d103      	bne.n	80210ce <MainInit+0x9a>
            {
                u32SystemTimeReadFailure = u32Delta;
 80210c6:	4a1f      	ldr	r2, [pc, #124]	; (8021144 <MainInit+0x110>)
 80210c8:	693b      	ldr	r3, [r7, #16]
 80210ca:	6013      	str	r3, [r2, #0]
 80210cc:	e007      	b.n	80210de <MainInit+0xaa>
            }
            else if (u32SystemTimeReadFailure > u32Delta)
 80210ce:	4b1d      	ldr	r3, [pc, #116]	; (8021144 <MainInit+0x110>)
 80210d0:	681a      	ldr	r2, [r3, #0]
 80210d2:	693b      	ldr	r3, [r7, #16]
 80210d4:	429a      	cmp	r2, r3
 80210d6:	d902      	bls.n	80210de <MainInit+0xaa>
            {
                u32SystemTimeReadFailure = u32Delta;
 80210d8:	4a1a      	ldr	r2, [pc, #104]	; (8021144 <MainInit+0x110>)
 80210da:	693b      	ldr	r3, [r7, #16]
 80210dc:	6013      	str	r3, [r2, #0]
            }

          u32Cnt++;
 80210de:	697b      	ldr	r3, [r7, #20]
 80210e0:	3301      	adds	r3, #1
 80210e2:	617b      	str	r3, [r7, #20]
    {
       UINT32 u32TimeValue = 0;
       UINT32 u32Cnt = 0;
       UINT32 u32Delta = 0;

       while (u32Cnt < 1000)
 80210e4:	697b      	ldr	r3, [r7, #20]
 80210e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80210ea:	d3d4      	bcc.n	8021096 <MainInit+0x62>

    /*ECATCHANGE_END(V5.12) ECAT1*/

/*ECATCHANGE_START(V5.12) EEPROM1*/
    {
        UINT16 TmpData = 0;
 80210ec:	2300      	movs	r3, #0
 80210ee:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(TmpData, ESC_EEPROM_CONTROL_OFFSET);
 80210f0:	4b16      	ldr	r3, [pc, #88]	; (802114c <MainInit+0x118>)
 80210f2:	881b      	ldrh	r3, [r3, #0]
 80210f4:	80fb      	strh	r3, [r7, #6]
        TmpData = SWAPDWORD(TmpData);
        //get bit6 of register 0x502
        if ((TmpData & ESC_EEPROM_SUPPORTED_READBYTES_MASK) > 0)
 80210f6:	88fb      	ldrh	r3, [r7, #6]
 80210f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	dd03      	ble.n	8021108 <MainInit+0xd4>
        {
            //8Bytes EEPROM read access
            EepromReadSize = 8;
 8021100:	4b13      	ldr	r3, [pc, #76]	; (8021150 <MainInit+0x11c>)
 8021102:	2208      	movs	r2, #8
 8021104:	801a      	strh	r2, [r3, #0]
 8021106:	e002      	b.n	802110e <MainInit+0xda>
        }
        else
        {
            //4Bytes EEPROM read access
            EepromReadSize = 4;
 8021108:	4b11      	ldr	r3, [pc, #68]	; (8021150 <MainInit+0x11c>)
 802110a:	2204      	movs	r2, #4
 802110c:	801a      	strh	r2, [r3, #0]
        }
    }
/*ECATCHANGE_END(V5.12) EEPROM1*/

/*Application Init need to be called from the application layer*/
     return Error;
 802110e:	89fb      	ldrh	r3, [r7, #14]
}
 8021110:	4618      	mov	r0, r3
 8021112:	3718      	adds	r7, #24
 8021114:	46bd      	mov	sp, r7
 8021116:	bd80      	pop	{r7, pc}
 8021118:	1fff2700 	.word	0x1fff2700
 802111c:	1fff0c40 	.word	0x1fff0c40
 8021120:	1fff2650 	.word	0x1fff2650
 8021124:	1fff2654 	.word	0x1fff2654
 8021128:	1fff2708 	.word	0x1fff2708
 802112c:	1fff2644 	.word	0x1fff2644
 8021130:	1fff26b0 	.word	0x1fff26b0
 8021134:	1fff1620 	.word	0x1fff1620
 8021138:	1fff2648 	.word	0x1fff2648
 802113c:	1fff264c 	.word	0x1fff264c
 8021140:	1fff26b8 	.word	0x1fff26b8
 8021144:	1fff265c 	.word	0x1fff265c
 8021148:	54010910 	.word	0x54010910
 802114c:	54010502 	.word	0x54010502
 8021150:	1fff26ae 	.word	0x1fff26ae

08021154 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 8021154:	b580      	push	{r7, lr}
 8021156:	b082      	sub	sp, #8
 8021158:	af00      	add	r7, sp, #0
    
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 802115a:	4b33      	ldr	r3, [pc, #204]	; (8021228 <MainLoop+0xd4>)
 802115c:	781b      	ldrb	r3, [r3, #0]
 802115e:	f083 0301 	eor.w	r3, r3, #1
 8021162:	b2db      	uxtb	r3, r3
 8021164:	2b00      	cmp	r3, #0
 8021166:	d000      	beq.n	802116a <MainLoop+0x16>
    {
        return;
 8021168:	e05a      	b.n	8021220 <MainLoop+0xcc>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 802116a:	4b30      	ldr	r3, [pc, #192]	; (802122c <MainLoop+0xd8>)
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	f083 0301 	eor.w	r3, r3, #1
 8021172:	b2db      	uxtb	r3, r3


        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
 8021174:	2b00      	cmp	r3, #0
 8021176:	d106      	bne.n	8021186 <MainLoop+0x32>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 8021178:	4b2d      	ldr	r3, [pc, #180]	; (8021230 <MainLoop+0xdc>)
 802117a:	781b      	ldrb	r3, [r3, #0]
 802117c:	f083 0301 	eor.w	r3, r3, #1
 8021180:	b2db      	uxtb	r3, r3
 8021182:	2b00      	cmp	r3, #0
 8021184:	d038      	beq.n	80211f8 <MainLoop+0xa4>
          && !bDcSyncActive                                               /* DC-Synchronous */
 8021186:	4b2b      	ldr	r3, [pc, #172]	; (8021234 <MainLoop+0xe0>)
 8021188:	781b      	ldrb	r3, [r3, #0]
 802118a:	f083 0301 	eor.w	r3, r3, #1
 802118e:	b2db      	uxtb	r3, r3
 8021190:	2b00      	cmp	r3, #0
 8021192:	d031      	beq.n	80211f8 <MainLoop+0xa4>
               from the ESC interrupt routine (in mcihw.c or spihw.c),
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 8021194:	4b25      	ldr	r3, [pc, #148]	; (802122c <MainLoop+0xd8>)
 8021196:	781b      	ldrb	r3, [r3, #0]
 8021198:	f083 0301 	eor.w	r3, r3, #1
 802119c:	b2db      	uxtb	r3, r3
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d01e      	beq.n	80211e0 <MainLoop+0x8c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 80211a2:	f7ff fc2b 	bl	80209fc <HW_GetALEventRegister>
 80211a6:	4603      	mov	r3, r0
 80211a8:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80211aa:	88fb      	ldrh	r3, [r7, #6]
 80211ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d009      	beq.n	80211c8 <MainLoop+0x74>
                {
                    /* set the flag for the state machine behavior */
                    bEcatFirstOutputsReceived = TRUE;
 80211b4:	4b1e      	ldr	r3, [pc, #120]	; (8021230 <MainLoop+0xdc>)
 80211b6:	2201      	movs	r2, #1
 80211b8:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 80211ba:	4b1f      	ldr	r3, [pc, #124]	; (8021238 <MainLoop+0xe4>)
 80211bc:	781b      	ldrb	r3, [r3, #0]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d00e      	beq.n	80211e0 <MainLoop+0x8c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 80211c2:	f7ff fc75 	bl	8020ab0 <PDO_OutputMapping>
 80211c6:	e00b      	b.n	80211e0 <MainLoop+0x8c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 80211c8:	4b1c      	ldr	r3, [pc, #112]	; (802123c <MainLoop+0xe8>)
 80211ca:	881b      	ldrh	r3, [r3, #0]
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d107      	bne.n	80211e0 <MainLoop+0x8c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 80211d0:	88fb      	ldrh	r3, [r7, #6]
 80211d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80211d6:	2b00      	cmp	r3, #0
 80211d8:	d002      	beq.n	80211e0 <MainLoop+0x8c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 80211da:	4b15      	ldr	r3, [pc, #84]	; (8021230 <MainLoop+0xdc>)
 80211dc:	2201      	movs	r2, #1
 80211de:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

/*ECATCHANGE_START(V5.12) ECAT3*/
            DISABLE_ESC_INT();
 80211e0:	f008 f80a 	bl	80291f8 <DISABLE_ESC_INT>
/*ECATCHANGE_END(V5.12) ECAT3*/
             ECAT_Application();
 80211e4:	f000 f832 	bl	802124c <ECAT_Application>

            if ( bEcatInputUpdateRunning )
 80211e8:	4b15      	ldr	r3, [pc, #84]	; (8021240 <MainLoop+0xec>)
 80211ea:	781b      	ldrb	r3, [r3, #0]
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	d001      	beq.n	80211f4 <MainLoop+0xa0>
            {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 80211f0:	f7ff fc14 	bl	8020a1c <PDO_InputMapping>
            }
/*ECATCHANGE_START(V5.12) ECAT3*/
            ENABLE_ESC_INT();
 80211f4:	f007 fff2 	bl	80291dc <ENABLE_ESC_INT>
/*ECATCHANGE_END(V5.12) ECAT3*/
        }


/*ECATCHANGE_START(V5.12) COE4*/
        if (u32CheckForDcOverrunCnt >= CHECK_DC_OVERRUN_IN_MS)
 80211f8:	4b12      	ldr	r3, [pc, #72]	; (8021244 <MainLoop+0xf0>)
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8021200:	d301      	bcc.n	8021206 <MainLoop+0xb2>
        {
            COE_SyncTimeStamp();
 8021202:	f7ff f8db 	bl	80203bc <COE_SyncTimeStamp>
        }
/*ECATCHANGE_END(V5.12) COE4*/

        /* call EtherCAT functions */
        ECAT_Main();
 8021206:	f002 f827 	bl	8023258 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 802120a:	f7ff fb25 	bl	8020858 <COE_Main>
       CheckIfEcatError();
 802120e:	f001 ff27 	bl	8023060 <CheckIfEcatError>


/*ECATCHANGE_START(V5.12) APPL1*/
    if (pAPPL_MainLoop != NULL)
 8021212:	4b0d      	ldr	r3, [pc, #52]	; (8021248 <MainLoop+0xf4>)
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	2b00      	cmp	r3, #0
 8021218:	d002      	beq.n	8021220 <MainLoop+0xcc>
    {
        pAPPL_MainLoop();
 802121a:	4b0b      	ldr	r3, [pc, #44]	; (8021248 <MainLoop+0xf4>)
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	4798      	blx	r3
    }
/*ECATCHANGE_END(V5.12) APPL1*/
}
 8021220:	3708      	adds	r7, #8
 8021222:	46bd      	mov	sp, r7
 8021224:	bd80      	pop	{r7, pc}
 8021226:	bf00      	nop
 8021228:	1fff1620 	.word	0x1fff1620
 802122c:	1fff2757 	.word	0x1fff2757
 8021230:	1fff274c 	.word	0x1fff274c
 8021234:	1fff2750 	.word	0x1fff2750
 8021238:	1fff2751 	.word	0x1fff2751
 802123c:	1fff271a 	.word	0x1fff271a
 8021240:	1fff2756 	.word	0x1fff2756
 8021244:	1fff2640 	.word	0x1fff2640
 8021248:	1fff26b0 	.word	0x1fff26b0

0802124c <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 802124c:	b580      	push	{r7, lr}
 802124e:	af00      	add	r7, sp, #0
        }
    } /* measurement started*/
/*ECATCHANGE_END(V5.12) ECAT1*/
#endif /* (MIN_PD_CYCLE_TIME == 0)*/

    if (MEASUREMENT_ACTIVE)
 8021250:	4b0a      	ldr	r3, [pc, #40]	; (802127c <ECAT_Application+0x30>)
 8021252:	8b9b      	ldrh	r3, [r3, #28]
 8021254:	f003 0301 	and.w	r3, r3, #1
 8021258:	2b00      	cmp	r3, #0
 802125a:	d105      	bne.n	8021268 <ECAT_Application+0x1c>
 802125c:	4b08      	ldr	r3, [pc, #32]	; (8021280 <ECAT_Application+0x34>)
 802125e:	8b9b      	ldrh	r3, [r3, #28]
 8021260:	f003 0301 	and.w	r3, r3, #1
 8021264:	2b00      	cmp	r3, #0
 8021266:	d005      	beq.n	8021274 <ECAT_Application+0x28>
    {
        if (nPdOutputSize == 0)
 8021268:	4b06      	ldr	r3, [pc, #24]	; (8021284 <ECAT_Application+0x38>)
 802126a:	881b      	ldrh	r3, [r3, #0]
 802126c:	2b00      	cmp	r3, #0
 802126e:	d101      	bne.n	8021274 <ECAT_Application+0x28>
        {
            /* in case of an input only device the cycle starts with an ECAT_Application call*/
            HandleCycleTimeMeasurement();
 8021270:	f7ff fcf2 	bl	8020c58 <HandleCycleTimeMeasurement>
        }
    }

    {
        APPL_Application();
 8021274:	f7ff f852 	bl	802031c <APPL_Application>
        }

    }/* measurement started*/
/*ECATCHANGE_END(V5.12) ECAT1*/
#endif /* #if MIN_PD_CYCLE_TIME == 0 */
}
 8021278:	bd80      	pop	{r7, pc}
 802127a:	bf00      	nop
 802127c:	1fff2838 	.word	0x1fff2838
 8021280:	1fff27f4 	.word	0x1fff27f4
 8021284:	1fff271a 	.word	0x1fff271a

08021288 <EEPROM_CommandHandler>:


void EEPROM_CommandHandler(void)
{
 8021288:	b580      	push	{r7, lr}
 802128a:	b088      	sub	sp, #32
 802128c:	af00      	add	r7, sp, #0
   UINT16 Result = 0;
 802128e:	2300      	movs	r3, #0
 8021290:	82fb      	strh	r3, [r7, #22]
    UINT16 EEPROMReg = 0; //Regvalue 0x502 - 0x5003
 8021292:	2300      	movs	r3, #0
 8021294:	83fb      	strh	r3, [r7, #30]

    HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 8021296:	4b8e      	ldr	r3, [pc, #568]	; (80214d0 <EEPROM_CommandHandler+0x248>)
 8021298:	881b      	ldrh	r3, [r3, #0]
 802129a:	83fb      	strh	r3, [r7, #30]
    EEPROMReg = SWAPWORD(EEPROMReg);

    if (EEPROMReg & ESC_EEPROM_BUSY_MASK) 
 802129c:	8bfb      	ldrh	r3, [r7, #30]
 802129e:	b21b      	sxth	r3, r3
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	f280 8112 	bge.w	80214ca <EEPROM_CommandHandler+0x242>
    {
        UINT32 cmd = EEPROMReg  & ESC_EEPROM_CMD_MASK;
 80212a6:	8bfb      	ldrh	r3, [r7, #30]
 80212a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80212ac:	613b      	str	r3, [r7, #16]
        UINT32 addr;
        
        
        HW_EscReadDWord(addr,ESC_EEPROM_ADDRESS_OFFSET);
 80212ae:	4b89      	ldr	r3, [pc, #548]	; (80214d4 <EEPROM_CommandHandler+0x24c>)
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	61bb      	str	r3, [r7, #24]
        addr = SWAPDWORD(addr);

/*ECATCHANGE_START(V5.12) EEPROM1*/
        //Clear error bits (except the eeprom crc error)
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK & ~ESC_EEPROM_ERROR_CRC);
 80212b4:	8bfb      	ldrh	r3, [r7, #30]
 80212b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80212ba:	83fb      	strh	r3, [r7, #30]
/*ECATCHANGE_END(V5.12) EEPROM1*/
        switch (cmd) {
 80212bc:	693b      	ldr	r3, [r7, #16]
 80212be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80212c2:	d00d      	beq.n	80212e0 <EEPROM_CommandHandler+0x58>
 80212c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80212c8:	d803      	bhi.n	80212d2 <EEPROM_CommandHandler+0x4a>
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	f000 80f4 	beq.w	80214b8 <EEPROM_CommandHandler+0x230>
 80212d0:	e0ed      	b.n	80214ae <EEPROM_CommandHandler+0x226>
 80212d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80212d6:	d033      	beq.n	8021340 <EEPROM_CommandHandler+0xb8>
 80212d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80212dc:	d061      	beq.n	80213a2 <EEPROM_CommandHandler+0x11a>
 80212de:	e0e6      	b.n	80214ae <EEPROM_CommandHandler+0x226>
        case 0x00: //IDLE
            break;
        case ESC_EEPROM_CMD_READ_MASK:
        {
           if (pAPPL_EEPROM_Read != NULL)
 80212e0:	4b7d      	ldr	r3, [pc, #500]	; (80214d8 <EEPROM_CommandHandler+0x250>)
 80212e2:	681b      	ldr	r3, [r3, #0]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d00d      	beq.n	8021304 <EEPROM_CommandHandler+0x7c>
           {
              Result = pAPPL_EEPROM_Read(addr);
 80212e8:	4b7b      	ldr	r3, [pc, #492]	; (80214d8 <EEPROM_CommandHandler+0x250>)
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	69b8      	ldr	r0, [r7, #24]
 80212ee:	4798      	blx	r3
 80212f0:	4603      	mov	r3, r0
 80212f2:	82fb      	strh	r3, [r7, #22]
              if (Result > 0)
 80212f4:	8afb      	ldrh	r3, [r7, #22]
 80212f6:	2b00      	cmp	r3, #0
 80212f8:	d021      	beq.n	802133e <EEPROM_CommandHandler+0xb6>
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80212fa:	8bfb      	ldrh	r3, [r7, #30]
 80212fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021300:	83fb      	strh	r3, [r7, #30]
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
              }
           }
        }
        break;
 8021302:	e0da      	b.n	80214ba <EEPROM_CommandHandler+0x232>
              }
           }
           else
           {

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 8021304:	69bb      	ldr	r3, [r7, #24]
 8021306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802130a:	d813      	bhi.n	8021334 <EEPROM_CommandHandler+0xac>
 802130c:	4b73      	ldr	r3, [pc, #460]	; (80214dc <EEPROM_CommandHandler+0x254>)
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	2b00      	cmp	r3, #0
 8021312:	d00f      	beq.n	8021334 <EEPROM_CommandHandler+0xac>
              {
                 UINT16 *pData = (UINT16 *)pEEPROM;
 8021314:	4b71      	ldr	r3, [pc, #452]	; (80214dc <EEPROM_CommandHandler+0x254>)
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	60fb      	str	r3, [r7, #12]
/*ECATCHANGE_START(V5.12) EEPROM1*/
                 HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EepromReadSize);
 802131a:	69bb      	ldr	r3, [r7, #24]
 802131c:	005b      	lsls	r3, r3, #1
 802131e:	68fa      	ldr	r2, [r7, #12]
 8021320:	441a      	add	r2, r3
 8021322:	4b6f      	ldr	r3, [pc, #444]	; (80214e0 <EEPROM_CommandHandler+0x258>)
 8021324:	881b      	ldrh	r3, [r3, #0]
 8021326:	4610      	mov	r0, r2
 8021328:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 802132c:	461a      	mov	r2, r3
 802132e:	f7ff fb3d 	bl	80209ac <HW_EscWrite>
           }
           else
           {

              if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
              {
 8021332:	e004      	b.n	802133e <EEPROM_CommandHandler+0xb6>
/*ECATCHANGE_END(V5.12) EEPROM1*/
              }
              else
              {
                 //Set Error
                 EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021334:	8bfb      	ldrh	r3, [r7, #30]
 8021336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802133a:	83fb      	strh	r3, [r7, #30]
              }
           }
        }
        break;
 802133c:	e0bd      	b.n	80214ba <EEPROM_CommandHandler+0x232>
 802133e:	e0bc      	b.n	80214ba <EEPROM_CommandHandler+0x232>
        case ESC_EEPROM_CMD_WRITE_MASK:
            {
                 if (pAPPL_EEPROM_Write != NULL)
 8021340:	4b68      	ldr	r3, [pc, #416]	; (80214e4 <EEPROM_CommandHandler+0x25c>)
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	2b00      	cmp	r3, #0
 8021346:	d00d      	beq.n	8021364 <EEPROM_CommandHandler+0xdc>
                 {
                    Result = pAPPL_EEPROM_Write(addr);
 8021348:	4b66      	ldr	r3, [pc, #408]	; (80214e4 <EEPROM_CommandHandler+0x25c>)
 802134a:	681b      	ldr	r3, [r3, #0]
 802134c:	69b8      	ldr	r0, [r7, #24]
 802134e:	4798      	blx	r3
 8021350:	4603      	mov	r3, r0
 8021352:	82fb      	strh	r3, [r7, #22]
                    if (Result > 0)
 8021354:	8afb      	ldrh	r3, [r7, #22]
 8021356:	2b00      	cmp	r3, #0
 8021358:	d01e      	beq.n	8021398 <EEPROM_CommandHandler+0x110>
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 802135a:	8bfb      	ldrh	r3, [r7, #30]
 802135c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021360:	83fb      	strh	r3, [r7, #30]
 8021362:	e019      	b.n	8021398 <EEPROM_CommandHandler+0x110>
                    }
                 }
                 else
                 {

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 8021364:	69bb      	ldr	r3, [r7, #24]
 8021366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802136a:	d811      	bhi.n	8021390 <EEPROM_CommandHandler+0x108>
 802136c:	4b5b      	ldr	r3, [pc, #364]	; (80214dc <EEPROM_CommandHandler+0x254>)
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	2b00      	cmp	r3, #0
 8021372:	d00d      	beq.n	8021390 <EEPROM_CommandHandler+0x108>
                    {
                       UINT16 *pData = (UINT16 *)pEEPROM;
 8021374:	4b59      	ldr	r3, [pc, #356]	; (80214dc <EEPROM_CommandHandler+0x254>)
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	60bb      	str	r3, [r7, #8]
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
 802137a:	69bb      	ldr	r3, [r7, #24]
 802137c:	005b      	lsls	r3, r3, #1
 802137e:	68ba      	ldr	r2, [r7, #8]
 8021380:	4413      	add	r3, r2
 8021382:	4618      	mov	r0, r3
 8021384:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8021388:	2202      	movs	r2, #2
 802138a:	f7ff fae7 	bl	802095c <HW_EscRead>
                 }
                 else
                 {

                    if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
                    {
 802138e:	e003      	b.n	8021398 <EEPROM_CommandHandler+0x110>
                       HW_EscRead((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EEPROM_WRITE_SIZE);
                    }
                    else
                    {
                       //Set Error
                       EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021390:	8bfb      	ldrh	r3, [r7, #30]
 8021392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021396:	83fb      	strh	r3, [r7, #30]
                    }
                 }

/*ECATCHANGE_START(V5.12) EEPROM3*/
                 /* init the Store EEPROM timeout value (will be reset after the timer has expired)*/
                 u16EepromStoreTimeoutValue = 1000;
 8021398:	4b53      	ldr	r3, [pc, #332]	; (80214e8 <EEPROM_CommandHandler+0x260>)
 802139a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802139e:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) EEPROM3*/

            }
            break;
 80213a0:	e08b      	b.n	80214ba <EEPROM_CommandHandler+0x232>
        case ESC_EEPROM_CMD_RELOAD_MASK:
/* ECATCHANGE_START(V5.12) EEPROM2*/
            if (EepromReadSize == 8)
 80213a2:	4b4f      	ldr	r3, [pc, #316]	; (80214e0 <EEPROM_CommandHandler+0x258>)
 80213a4:	881b      	ldrh	r3, [r3, #0]
 80213a6:	2b08      	cmp	r3, #8
 80213a8:	d150      	bne.n	802144c <EEPROM_CommandHandler+0x1c4>
            {
                /* "full" EEPROM emulation ( 8Bytes EEPROM data) */
                do
                {
                    if (addr > ESC_EEPROM_SIZE)
 80213aa:	69bb      	ldr	r3, [r7, #24]
 80213ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80213b0:	d904      	bls.n	80213bc <EEPROM_CommandHandler+0x134>
                    {
                        //Set Error
                        EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80213b2:	8bfb      	ldrh	r3, [r7, #30]
 80213b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80213b8:	83fb      	strh	r3, [r7, #30]
                        break;
 80213ba:	e046      	b.n	802144a <EEPROM_CommandHandler+0x1c2>
                    }
                    else
                    {
                        if (pAPPL_EEPROM_Read != NULL)
 80213bc:	4b46      	ldr	r3, [pc, #280]	; (80214d8 <EEPROM_CommandHandler+0x250>)
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	d00d      	beq.n	80213e0 <EEPROM_CommandHandler+0x158>
                        {
                            Result = pAPPL_EEPROM_Read(addr);
 80213c4:	4b44      	ldr	r3, [pc, #272]	; (80214d8 <EEPROM_CommandHandler+0x250>)
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	69b8      	ldr	r0, [r7, #24]
 80213ca:	4798      	blx	r3
 80213cc:	4603      	mov	r3, r0
 80213ce:	82fb      	strh	r3, [r7, #22]
                            if (Result > 0)
 80213d0:	8afb      	ldrh	r3, [r7, #22]
 80213d2:	2b00      	cmp	r3, #0
 80213d4:	d021      	beq.n	802141a <EEPROM_CommandHandler+0x192>
                            {
                                //Set Error
                                EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80213d6:	8bfb      	ldrh	r3, [r7, #30]
 80213d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80213dc:	83fb      	strh	r3, [r7, #30]
                                break;
 80213de:	e034      	b.n	802144a <EEPROM_CommandHandler+0x1c2>
                            }
                        }
                        else
                        {
                            if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
 80213e0:	69bb      	ldr	r3, [r7, #24]
 80213e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80213e6:	d813      	bhi.n	8021410 <EEPROM_CommandHandler+0x188>
 80213e8:	4b3c      	ldr	r3, [pc, #240]	; (80214dc <EEPROM_CommandHandler+0x254>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	d00f      	beq.n	8021410 <EEPROM_CommandHandler+0x188>
                            {
                                UINT16 *pData = (UINT16 *)pEEPROM;
 80213f0:	4b3a      	ldr	r3, [pc, #232]	; (80214dc <EEPROM_CommandHandler+0x254>)
 80213f2:	681b      	ldr	r3, [r3, #0]
 80213f4:	607b      	str	r3, [r7, #4]
                                HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EepromReadSize);
 80213f6:	69bb      	ldr	r3, [r7, #24]
 80213f8:	005b      	lsls	r3, r3, #1
 80213fa:	687a      	ldr	r2, [r7, #4]
 80213fc:	441a      	add	r2, r3
 80213fe:	4b38      	ldr	r3, [pc, #224]	; (80214e0 <EEPROM_CommandHandler+0x258>)
 8021400:	881b      	ldrh	r3, [r3, #0]
 8021402:	4610      	mov	r0, r2
 8021404:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8021408:	461a      	mov	r2, r3
 802140a:	f7ff facf 	bl	80209ac <HW_EscWrite>
                            }
                        }
                        else
                        {
                            if (addr <= ESC_EEPROM_SIZE && (pEEPROM != NULL))
                            {
 802140e:	e004      	b.n	802141a <EEPROM_CommandHandler+0x192>
                                HW_EscWrite((MEM_ADDR *)&pData[(addr)], ESC_EEPROM_DATA_OFFSET, EepromReadSize);
                            }
                            else
                            {
                                //Set Error
                                EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021410:	8bfb      	ldrh	r3, [r7, #30]
 8021412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021416:	83fb      	strh	r3, [r7, #30]
                                break;
 8021418:	e017      	b.n	802144a <EEPROM_CommandHandler+0x1c2>
                            }
                        }

                        //Clear error bits
                        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK);
 802141a:	8bfb      	ldrh	r3, [r7, #30]
 802141c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8021420:	83fb      	strh	r3, [r7, #30]

                        //ack current reload segment
                        UINT16 TmpData = SWAPWORD(EEPROMReg);
 8021422:	8bfb      	ldrh	r3, [r7, #30]
 8021424:	807b      	strh	r3, [r7, #2]
                        HW_EscWriteWord(TmpData, ESC_EEPROM_CONTROL_OFFSET);
 8021426:	4a2a      	ldr	r2, [pc, #168]	; (80214d0 <EEPROM_CommandHandler+0x248>)
 8021428:	887b      	ldrh	r3, [r7, #2]
 802142a:	8013      	strh	r3, [r2, #0]

                        // read EEPROM control (to check if the reload is still pending)
                        HW_EscReadWord(EEPROMReg, ESC_EEPROM_CONTROL_OFFSET);
 802142c:	4b28      	ldr	r3, [pc, #160]	; (80214d0 <EEPROM_CommandHandler+0x248>)
 802142e:	881b      	ldrh	r3, [r3, #0]
 8021430:	83fb      	strh	r3, [r7, #30]
                        EEPROMReg = SWAPWORD(EEPROMReg);
                        cmd = EEPROMReg  & ESC_EEPROM_CMD_MASK;
 8021432:	8bfb      	ldrh	r3, [r7, #30]
 8021434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8021438:	613b      	str	r3, [r7, #16]

                        HW_EscReadDWord(addr, ESC_EEPROM_ADDRESS_OFFSET);
 802143a:	4b26      	ldr	r3, [pc, #152]	; (80214d4 <EEPROM_CommandHandler+0x24c>)
 802143c:	681b      	ldr	r3, [r3, #0]
 802143e:	61bb      	str	r3, [r7, #24]
                        addr = SWAPDWORD(addr);
                    }


                } while (cmd == ESC_EEPROM_CMD_RELOAD_MASK);
 8021440:	693b      	ldr	r3, [r7, #16]
 8021442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021446:	d0b0      	beq.n	80213aa <EEPROM_CommandHandler+0x122>
 8021448:	e030      	b.n	80214ac <EEPROM_CommandHandler+0x224>
 802144a:	e02f      	b.n	80214ac <EEPROM_CommandHandler+0x224>
            {
                /* The case is only called if the "small" EEPROM emulation (4 read bytes) is configured*/
    /* ECATCHANGE_END(V5.12) EEPROM2*/

    /* ECATCHANGE_START(V5.12) EEPROM2*/
                if (pAPPL_EEPROM_Reload != NULL)
 802144c:	4b27      	ldr	r3, [pc, #156]	; (80214ec <EEPROM_CommandHandler+0x264>)
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	2b00      	cmp	r3, #0
 8021452:	d011      	beq.n	8021478 <EEPROM_CommandHandler+0x1f0>
                {
                    Result = pAPPL_EEPROM_Reload();
 8021454:	4b25      	ldr	r3, [pc, #148]	; (80214ec <EEPROM_CommandHandler+0x264>)
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	4798      	blx	r3
 802145a:	4603      	mov	r3, r0
 802145c:	82fb      	strh	r3, [r7, #22]
                    if (Result > 0)
 802145e:	8afb      	ldrh	r3, [r7, #22]
 8021460:	2b00      	cmp	r3, #0
 8021462:	d004      	beq.n	802146e <EEPROM_CommandHandler+0x1e6>
                    {
                        //Set Error
                        EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 8021464:	8bfb      	ldrh	r3, [r7, #30]
 8021466:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802146a:	83fb      	strh	r3, [r7, #30]
 802146c:	e01e      	b.n	80214ac <EEPROM_CommandHandler+0x224>
                    }
                    else
                    {
                        EEPROMReg &= ~ESC_EEPROM_ERROR_CRC;
 802146e:	8bfb      	ldrh	r3, [r7, #30]
 8021470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021474:	83fb      	strh	r3, [r7, #30]
                        EEPROMReg &= ~ESC_EEPROM_ERROR_CRC;
                    }
/* ECATCHANGE_END(V5.12) EEPROM2*/
                }
            }
         break;
 8021476:	e020      	b.n	80214ba <EEPROM_CommandHandler+0x232>
                    }
                }
                else
                {

                    Result = HW_EepromReload();
 8021478:	f007 fe58 	bl	802912c <HW_EepromReload>
 802147c:	4603      	mov	r3, r0
 802147e:	82fb      	strh	r3, [r7, #22]
                    if (Result != 0 || (pEEPROM == NULL))
 8021480:	8afb      	ldrh	r3, [r7, #22]
 8021482:	2b00      	cmp	r3, #0
 8021484:	d103      	bne.n	802148e <EEPROM_CommandHandler+0x206>
 8021486:	4b15      	ldr	r3, [pc, #84]	; (80214dc <EEPROM_CommandHandler+0x254>)
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	2b00      	cmp	r3, #0
 802148c:	d104      	bne.n	8021498 <EEPROM_CommandHandler+0x210>
                    {
                        EEPROMReg |= ESC_EEPROM_ERROR_CRC;
 802148e:	8bfb      	ldrh	r3, [r7, #30]
 8021490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8021494:	83fb      	strh	r3, [r7, #30]
 8021496:	e009      	b.n	80214ac <EEPROM_CommandHandler+0x224>
                    }
                    else
                    {
                        //copy the configured station alias
                        HW_EscWriteWord(((UINT16 *)pEEPROM)[0x4], ESC_EEPROM_DATA_OFFSET);
 8021498:	4a15      	ldr	r2, [pc, #84]	; (80214f0 <EEPROM_CommandHandler+0x268>)
 802149a:	4b10      	ldr	r3, [pc, #64]	; (80214dc <EEPROM_CommandHandler+0x254>)
 802149c:	681b      	ldr	r3, [r3, #0]
 802149e:	891b      	ldrh	r3, [r3, #8]
 80214a0:	8013      	strh	r3, [r2, #0]

                        EEPROMReg &= ~ESC_EEPROM_ERROR_CRC;
 80214a2:	8bfb      	ldrh	r3, [r7, #30]
 80214a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80214a8:	83fb      	strh	r3, [r7, #30]
                    }
/* ECATCHANGE_END(V5.12) EEPROM2*/
                }
            }
         break;
 80214aa:	e006      	b.n	80214ba <EEPROM_CommandHandler+0x232>
 80214ac:	e005      	b.n	80214ba <EEPROM_CommandHandler+0x232>
        default:
            EEPROMReg |= ESC_EEPROM_ERROR_CMD_ACK;
 80214ae:	8bfb      	ldrh	r3, [r7, #30]
 80214b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80214b4:	83fb      	strh	r3, [r7, #30]
            break;
 80214b6:	e000      	b.n	80214ba <EEPROM_CommandHandler+0x232>
        //Clear error bits (except the eeprom crc error)
        EEPROMReg &= ~(ESC_EEPROM_ERROR_MASK & ~ESC_EEPROM_ERROR_CRC);
/*ECATCHANGE_END(V5.12) EEPROM1*/
        switch (cmd) {
        case 0x00: //IDLE
            break;
 80214b8:	bf00      	nop
            break;
        }

/*ECATCHANGE_START(V5.12) EEPROM3*/
        /* reset the store eeprom timeout counter*/
        u16EepromStoreTimeoutCounter = 0;
 80214ba:	4b0e      	ldr	r3, [pc, #56]	; (80214f4 <EEPROM_CommandHandler+0x26c>)
 80214bc:	2200      	movs	r2, #0
 80214be:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) EEPROM3*/

        {
        UINT16 TmpData = SWAPWORD(EEPROMReg);
 80214c0:	8bfb      	ldrh	r3, [r7, #30]
 80214c2:	803b      	strh	r3, [r7, #0]
        HW_EscWriteWord(TmpData,ESC_EEPROM_CONTROL_OFFSET);
 80214c4:	4a02      	ldr	r2, [pc, #8]	; (80214d0 <EEPROM_CommandHandler+0x248>)
 80214c6:	883b      	ldrh	r3, [r7, #0]
 80214c8:	8013      	strh	r3, [r2, #0]
        }
    }
}
 80214ca:	3720      	adds	r7, #32
 80214cc:	46bd      	mov	sp, r7
 80214ce:	bd80      	pop	{r7, pc}
 80214d0:	54010502 	.word	0x54010502
 80214d4:	54010504 	.word	0x54010504
 80214d8:	1fff2650 	.word	0x1fff2650
 80214dc:	1fff2700 	.word	0x1fff2700
 80214e0:	1fff26ae 	.word	0x1fff26ae
 80214e4:	1fff2654 	.word	0x1fff2654
 80214e8:	1fff270c 	.word	0x1fff270c
 80214ec:	1fff2708 	.word	0x1fff2708
 80214f0:	54010508 	.word	0x54010508
 80214f4:	1fff26ac 	.word	0x1fff26ac

080214f8 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 80214f8:	b480      	push	{r7}
 80214fa:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 80214fc:	4b04      	ldr	r3, [pc, #16]	; (8021510 <COE_Init+0x18>)
 80214fe:	2200      	movs	r2, #0
 8021500:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 8021502:	4b04      	ldr	r3, [pc, #16]	; (8021514 <COE_Init+0x1c>)
 8021504:	2200      	movs	r2, #0
 8021506:	801a      	strh	r2, [r3, #0]
}
 8021508:	46bd      	mov	sp, r7
 802150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802150e:	4770      	bx	lr
 8021510:	1fff2710 	.word	0x1fff2710
 8021514:	1fff28a4 	.word	0x1fff28a4

08021518 <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 8021518:	b580      	push	{r7, lr}
 802151a:	b084      	sub	sp, #16
 802151c:	af00      	add	r7, sp, #0
 802151e:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8021520:	2300      	movs	r3, #0
 8021522:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	88db      	ldrh	r3, [r3, #6]
 8021528:	0b1b      	lsrs	r3, r3, #12
 802152a:	b29b      	uxth	r3, r3
 802152c:	3b01      	subs	r3, #1
 802152e:	2b07      	cmp	r3, #7
 8021530:	d821      	bhi.n	8021576 <COE_ServiceInd+0x5e>
 8021532:	a201      	add	r2, pc, #4	; (adr r2, 8021538 <COE_ServiceInd+0x20>)
 8021534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021538:	08021571 	.word	0x08021571
 802153c:	08021559 	.word	0x08021559
 8021540:	08021571 	.word	0x08021571
 8021544:	08021571 	.word	0x08021571
 8021548:	08021571 	.word	0x08021571
 802154c:	08021571 	.word	0x08021571
 8021550:	08021571 	.word	0x08021571
 8021554:	08021565 	.word	0x08021565
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 8021558:	6878      	ldr	r0, [r7, #4]
 802155a:	f004 f953 	bl	8025804 <SDOS_SdoInd>
 802155e:	4603      	mov	r3, r0
 8021560:	73fb      	strb	r3, [r7, #15]
        break;
 8021562:	e00b      	b.n	802157c <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 8021564:	6878      	ldr	r0, [r7, #4]
 8021566:	f004 fd2d 	bl	8025fc4 <SDOS_SdoInfoInd>
 802156a:	4603      	mov	r3, r0
 802156c:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 802156e:	e005      	b.n	802157c <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 8021570:	2304      	movs	r3, #4
 8021572:	73fb      	strb	r3, [r7, #15]
        break;
 8021574:	e002      	b.n	802157c <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 8021576:	2305      	movs	r3, #5
 8021578:	73fb      	strb	r3, [r7, #15]
        break;
 802157a:	bf00      	nop
    }
    return result;
 802157c:	7bfb      	ldrb	r3, [r7, #15]
}
 802157e:	4618      	mov	r0, r3
 8021580:	3710      	adds	r7, #16
 8021582:	46bd      	mov	sp, r7
 8021584:	bd80      	pop	{r7, pc}
 8021586:	bf00      	nop

08021588 <COE_ContinueInd>:
 \brief    This function is called when a CoE service to be sent is stored and can
 \brief  be put in the send mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
{
 8021588:	b580      	push	{r7, lr}
 802158a:	b082      	sub	sp, #8
 802158c:	af00      	add	r7, sp, #0
 802158e:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8021590:	4b12      	ldr	r3, [pc, #72]	; (80215dc <COE_ContinueInd+0x54>)
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	2b00      	cmp	r3, #0
 8021596:	d009      	beq.n	80215ac <COE_ContinueInd+0x24>
    {
        /* send the stored CoE service which could not be sent before */
        MBX_MailboxSendReq(pCoeSendStored, 0);
 8021598:	4b10      	ldr	r3, [pc, #64]	; (80215dc <COE_ContinueInd+0x54>)
 802159a:	681b      	ldr	r3, [r3, #0]
 802159c:	4618      	mov	r0, r3
 802159e:	2100      	movs	r1, #0
 80215a0:	f002 fa84 	bl	8023aac <MBX_MailboxSendReq>
        pCoeSendStored = 0;
 80215a4:	4b0d      	ldr	r3, [pc, #52]	; (80215dc <COE_ContinueInd+0x54>)
 80215a6:	2200      	movs	r2, #0
 80215a8:	601a      	str	r2, [r3, #0]
 80215aa:	e011      	b.n	80215d0 <COE_ContinueInd+0x48>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 80215ac:	2080      	movs	r0, #128	; 0x80
 80215ae:	f008 fc2d 	bl	8029e0c <malloc>
 80215b2:	4603      	mov	r3, r0
 80215b4:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
        if (pMbx == NULL)
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	2b00      	cmp	r3, #0
 80215ba:	d101      	bne.n	80215c0 <COE_ContinueInd+0x38>
        {
            return MBXERR_NOMOREMEMORY;
 80215bc:	2307      	movs	r3, #7
 80215be:	e008      	b.n	80215d2 <COE_ContinueInd+0x4a>
        }
        else
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 80215c0:	6878      	ldr	r0, [r7, #4]
 80215c2:	4907      	ldr	r1, [pc, #28]	; (80215e0 <COE_ContinueInd+0x58>)
 80215c4:	220e      	movs	r2, #14
 80215c6:	f008 fc41 	bl	8029e4c <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 80215ca:	6878      	ldr	r0, [r7, #4]
 80215cc:	f004 fcfa 	bl	8025fc4 <SDOS_SdoInfoInd>
        }
    }

    return 0;
 80215d0:	2300      	movs	r3, #0
}
 80215d2:	4618      	mov	r0, r3
 80215d4:	3708      	adds	r7, #8
 80215d6:	46bd      	mov	sp, r7
 80215d8:	bd80      	pop	{r7, pc}
 80215da:	bf00      	nop
 80215dc:	1fff2710 	.word	0x1fff2710
 80215e0:	1fff28b8 	.word	0x1fff28b8

080215e4 <XMC_ECAT_GetALEventRegister>:
 *
 * \par
 * Get the first two bytes of the AL Event register (0x220-0x221).
 */
__STATIC_INLINE uint16_t XMC_ECAT_GetALEventRegister(void)
{
 80215e4:	b480      	push	{r7}
 80215e6:	af00      	add	r7, sp, #0
  return ((uint16_t)ECAT0->AL_EVENT_REQ);
 80215e8:	4b04      	ldr	r3, [pc, #16]	; (80215fc <XMC_ECAT_GetALEventRegister+0x18>)
 80215ea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80215ee:	b29b      	uxth	r3, r3
}
 80215f0:	4618      	mov	r0, r3
 80215f2:	46bd      	mov	sp, r7
 80215f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f8:	4770      	bx	lr
 80215fa:	bf00      	nop
 80215fc:	54010000 	.word	0x54010000

08021600 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8021600:	b580      	push	{r7, lr}
 8021602:	b082      	sub	sp, #8
 8021604:	af00      	add	r7, sp, #0
 8021606:	6078      	str	r0, [r7, #4]
 8021608:	460b      	mov	r3, r1
 802160a:	807b      	strh	r3, [r7, #2]
 802160c:	4613      	mov	r3, r2
 802160e:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8021610:	887b      	ldrh	r3, [r7, #2]
 8021612:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021616:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802161a:	883a      	ldrh	r2, [r7, #0]
 802161c:	6878      	ldr	r0, [r7, #4]
 802161e:	4619      	mov	r1, r3
 8021620:	f008 fc14 	bl	8029e4c <memcpy>
}
 8021624:	3708      	adds	r7, #8
 8021626:	46bd      	mov	sp, r7
 8021628:	bd80      	pop	{r7, pc}
 802162a:	bf00      	nop

0802162c <HW_GetALEventRegister>:
 * \par<b>Description:</b><br>
 *
 *
 */
__STATIC_INLINE UINT16 HW_GetALEventRegister(void)
{
 802162c:	b580      	push	{r7, lr}
 802162e:	af00      	add	r7, sp, #0
  return XMC_ECAT_GetALEventRegister();
 8021630:	f7ff ffd8 	bl	80215e4 <XMC_ECAT_GetALEventRegister>
 8021634:	4603      	mov	r3, r0
}
 8021636:	4618      	mov	r0, r3
 8021638:	bd80      	pop	{r7, pc}
 802163a:	bf00      	nop

0802163c <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 802163c:	b580      	push	{r7, lr}
 802163e:	b084      	sub	sp, #16
 8021640:	af00      	add	r7, sp, #0
 8021642:	4603      	mov	r3, r0
 8021644:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021646:	4b08      	ldr	r3, [pc, #32]	; (8021668 <ResetALEventMask+0x2c>)
 8021648:	881b      	ldrh	r3, [r3, #0]
 802164a:	81fb      	strh	r3, [r7, #14]
    
    mask &= intMask;
 802164c:	89fa      	ldrh	r2, [r7, #14]
 802164e:	88fb      	ldrh	r3, [r7, #6]
 8021650:	4013      	ands	r3, r2
 8021652:	81fb      	strh	r3, [r7, #14]


    DISABLE_ESC_INT();
 8021654:	f007 fdd0 	bl	80291f8 <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021658:	4a03      	ldr	r2, [pc, #12]	; (8021668 <ResetALEventMask+0x2c>)
 802165a:	89fb      	ldrh	r3, [r7, #14]
 802165c:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 802165e:	f007 fdbd 	bl	80291dc <ENABLE_ESC_INT>
}
 8021662:	3710      	adds	r7, #16
 8021664:	46bd      	mov	sp, r7
 8021666:	bd80      	pop	{r7, pc}
 8021668:	54010204 	.word	0x54010204

0802166c <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 802166c:	b580      	push	{r7, lr}
 802166e:	b084      	sub	sp, #16
 8021670:	af00      	add	r7, sp, #0
 8021672:	4603      	mov	r3, r0
 8021674:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021676:	4b08      	ldr	r3, [pc, #32]	; (8021698 <SetALEventMask+0x2c>)
 8021678:	881b      	ldrh	r3, [r3, #0]
 802167a:	81fb      	strh	r3, [r7, #14]
    

    mask |= intMask;
 802167c:	89fa      	ldrh	r2, [r7, #14]
 802167e:	88fb      	ldrh	r3, [r7, #6]
 8021680:	4313      	orrs	r3, r2
 8021682:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8021684:	f007 fdb8 	bl	80291f8 <DISABLE_ESC_INT>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8021688:	4a03      	ldr	r2, [pc, #12]	; (8021698 <SetALEventMask+0x2c>)
 802168a:	89fb      	ldrh	r3, [r7, #14]
 802168c:	8013      	strh	r3, [r2, #0]
    ENABLE_ESC_INT();
 802168e:	f007 fda5 	bl	80291dc <ENABLE_ESC_INT>
}
 8021692:	3710      	adds	r7, #16
 8021694:	46bd      	mov	sp, r7
 8021696:	bd80      	pop	{r7, pc}
 8021698:	54010204 	.word	0x54010204

0802169c <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 802169c:	b480      	push	{r7}
 802169e:	b083      	sub	sp, #12
 80216a0:	af00      	add	r7, sp, #0
    UINT16 TmpVar = 0;
 80216a2:	2300      	movs	r3, #0
 80216a4:	80fb      	strh	r3, [r7, #6]
    //read EEPROM loaded information
    HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 80216a6:	4b0c      	ldr	r3, [pc, #48]	; (80216d8 <UpdateEEPROMLoadedState+0x3c>)
 80216a8:	881b      	ldrh	r3, [r3, #0]
 80216aa:	80fb      	strh	r3, [r7, #6]
    TmpVar = SWAPWORD(TmpVar);


    if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 80216ac:	88fb      	ldrh	r3, [r7, #6]
 80216ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	dc04      	bgt.n	80216c0 <UpdateEEPROMLoadedState+0x24>
        || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 80216b6:	88fb      	ldrh	r3, [r7, #6]
 80216b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80216bc:	2b00      	cmp	r3, #0
 80216be:	dd03      	ble.n	80216c8 <UpdateEEPROMLoadedState+0x2c>
    {
        EepromLoaded = FALSE;
 80216c0:	4b06      	ldr	r3, [pc, #24]	; (80216dc <UpdateEEPROMLoadedState+0x40>)
 80216c2:	2200      	movs	r2, #0
 80216c4:	701a      	strb	r2, [r3, #0]
 80216c6:	e002      	b.n	80216ce <UpdateEEPROMLoadedState+0x32>
    }
    else
    {
        EepromLoaded = TRUE;
 80216c8:	4b04      	ldr	r3, [pc, #16]	; (80216dc <UpdateEEPROMLoadedState+0x40>)
 80216ca:	2201      	movs	r2, #1
 80216cc:	701a      	strb	r2, [r3, #0]
    }
}
 80216ce:	370c      	adds	r7, #12
 80216d0:	46bd      	mov	sp, r7
 80216d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216d6:	4770      	bx	lr
 80216d8:	54010502 	.word	0x54010502
 80216dc:	1fff1622 	.word	0x1fff1622

080216e0 <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 80216e0:	b580      	push	{r7, lr}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	4603      	mov	r3, r0
 80216e8:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 80216ea:	79fb      	ldrb	r3, [r7, #7]
 80216ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80216f0:	b29b      	uxth	r3, r3
 80216f2:	00db      	lsls	r3, r3, #3
 80216f4:	b29b      	uxth	r3, r3
 80216f6:	4805      	ldr	r0, [pc, #20]	; (802170c <GetSyncMan+0x2c>)
 80216f8:	4619      	mov	r1, r3
 80216fa:	2208      	movs	r2, #8
 80216fc:	f7ff ff80 	bl	8021600 <HW_EscRead>



    return &SyncManInfo;
 8021700:	4b02      	ldr	r3, [pc, #8]	; (802170c <GetSyncMan+0x2c>)
}
 8021702:	4618      	mov	r0, r3
 8021704:	3708      	adds	r7, #8
 8021706:	46bd      	mov	sp, r7
 8021708:	bd80      	pop	{r7, pc}
 802170a:	bf00      	nop
 802170c:	1fff2738 	.word	0x1fff2738

08021710 <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 8021710:	b480      	push	{r7}
 8021712:	b085      	sub	sp, #20
 8021714:	af00      	add	r7, sp, #0
 8021716:	4603      	mov	r3, r0
 8021718:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = SM_SETTING_PDI_DISABLE;
 802171a:	2301      	movs	r3, #1
 802171c:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 802171e:	79fb      	ldrb	r3, [r7, #7]
 8021720:	b29b      	uxth	r3, r3
 8021722:	00db      	lsls	r3, r3, #3
 8021724:	b29b      	uxth	r3, r3
 8021726:	f603 0307 	addw	r3, r3, #2055	; 0x807
 802172a:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 802172c:	89fb      	ldrh	r3, [r7, #14]
 802172e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021732:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021736:	7b7a      	ldrb	r2, [r7, #13]
 8021738:	b2d2      	uxtb	r2, r2
 802173a:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadByte(smStatus, Offset);
 802173c:	89fb      	ldrh	r3, [r7, #14]
 802173e:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021742:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8021746:	781b      	ldrb	r3, [r3, #0]
 8021748:	b2db      	uxtb	r3, r3
 802174a:	737b      	strb	r3, [r7, #13]
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 802174c:	7b7b      	ldrb	r3, [r7, #13]
 802174e:	b2db      	uxtb	r3, r3
 8021750:	f003 0301 	and.w	r3, r3, #1
 8021754:	2b00      	cmp	r3, #0
 8021756:	d0f1      	beq.n	802173c <DisableSyncManChannel+0x2c>
}
 8021758:	3714      	adds	r7, #20
 802175a:	46bd      	mov	sp, r7
 802175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021760:	4770      	bx	lr
 8021762:	bf00      	nop

08021764 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 8021764:	b480      	push	{r7}
 8021766:	b085      	sub	sp, #20
 8021768:	af00      	add	r7, sp, #0
 802176a:	4603      	mov	r3, r0
 802176c:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = 0x00;
 802176e:	2300      	movs	r3, #0
 8021770:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8021772:	79fb      	ldrb	r3, [r7, #7]
 8021774:	b29b      	uxth	r3, r3
 8021776:	00db      	lsls	r3, r3, #3
 8021778:	b29b      	uxth	r3, r3
 802177a:	f603 0307 	addw	r3, r3, #2055	; 0x807
 802177e:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 8021780:	89fb      	ldrh	r3, [r7, #14]
 8021782:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021786:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802178a:	7b7a      	ldrb	r2, [r7, #13]
 802178c:	b2d2      	uxtb	r2, r2
 802178e:	701a      	strb	r2, [r3, #0]
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadByte(smStatus,Offset);
 8021790:	89fb      	ldrh	r3, [r7, #14]
 8021792:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8021796:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802179a:	781b      	ldrb	r3, [r3, #0]
 802179c:	b2db      	uxtb	r3, r3
 802179e:	737b      	strb	r3, [r7, #13]
    }while((smStatus & SM_SETTING_PDI_DISABLE));
 80217a0:	7b7b      	ldrb	r3, [r7, #13]
 80217a2:	b2db      	uxtb	r3, r3
 80217a4:	f003 0301 	and.w	r3, r3, #1
 80217a8:	2b00      	cmp	r3, #0
 80217aa:	d1f1      	bne.n	8021790 <EnableSyncManChannel+0x2c>
}
 80217ac:	3714      	adds	r7, #20
 80217ae:	46bd      	mov	sp, r7
 80217b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b4:	4770      	bx	lr
 80217b6:	bf00      	nop

080217b8 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 80217b8:	b580      	push	{r7, lr}
 80217ba:	b086      	sub	sp, #24
 80217bc:	af00      	add	r7, sp, #0
 80217be:	4603      	mov	r3, r0
 80217c0:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 80217c2:	2300      	movs	r3, #0
 80217c4:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 80217c6:	2300      	movs	r3, #0
 80217c8:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 80217ca:	2300      	movs	r3, #0
 80217cc:	827b      	strh	r3, [r7, #18]


        //Check if max address defines are within the available ESC address range
        if ((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 80217ce:	4b9f      	ldr	r3, [pc, #636]	; (8021a4c <CheckSmSettings+0x294>)
 80217d0:	881b      	ldrh	r3, [r3, #0]
 80217d2:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80217d6:	4293      	cmp	r3, r2
 80217d8:	d911      	bls.n	80217fe <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_PD_READ_ADDRESS)
 80217da:	4b9c      	ldr	r3, [pc, #624]	; (8021a4c <CheckSmSettings+0x294>)
 80217dc:	881b      	ldrh	r3, [r3, #0]
 80217de:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80217e2:	4293      	cmp	r3, r2
 80217e4:	d90b      	bls.n	80217fe <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 80217e6:	4b99      	ldr	r3, [pc, #612]	; (8021a4c <CheckSmSettings+0x294>)
 80217e8:	881b      	ldrh	r3, [r3, #0]
 80217ea:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80217ee:	4293      	cmp	r3, r2
 80217f0:	d905      	bls.n	80217fe <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 80217f2:	4b96      	ldr	r3, [pc, #600]	; (8021a4c <CheckSmSettings+0x294>)
 80217f4:	881b      	ldrh	r3, [r3, #0]
 80217f6:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80217fa:	4293      	cmp	r3, r2
 80217fc:	d801      	bhi.n	8021802 <CheckSmSettings+0x4a>
        {
            /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
            It may be also required to adapt the SM settings in the ESI file*/


                return ALSTATUSCODE_NOVALIDFIRMWARE;
 80217fe:	2314      	movs	r3, #20
 8021800:	e1a5      	b.n	8021b4e <CheckSmSettings+0x396>
        }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 8021802:	2000      	movs	r0, #0
 8021804:	f7ff ff6c 	bl	80216e0 <GetSyncMan>
 8021808:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 802180a:	68fb      	ldr	r3, [r7, #12]
 802180c:	789a      	ldrb	r2, [r3, #2]
 802180e:	78db      	ldrb	r3, [r3, #3]
 8021810:	021b      	lsls	r3, r3, #8
 8021812:	4313      	orrs	r3, r2
 8021814:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021816:	68fb      	ldr	r3, [r7, #12]
 8021818:	781a      	ldrb	r2, [r3, #0]
 802181a:	785b      	ldrb	r3, [r3, #1]
 802181c:	021b      	lsls	r3, r3, #8
 802181e:	4313      	orrs	r3, r2
 8021820:	827b      	strh	r3, [r7, #18]



    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8021822:	68fb      	ldr	r3, [r7, #12]
 8021824:	799b      	ldrb	r3, [r3, #6]
 8021826:	f003 0301 	and.w	r3, r3, #1
 802182a:	2b00      	cmp	r3, #0
 802182c:	d102      	bne.n	8021834 <CheckSmSettings+0x7c>
    {
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802182e:	2316      	movs	r3, #22
 8021830:	75bb      	strb	r3, [r7, #22]
 8021832:	e02a      	b.n	802188a <CheckSmSettings+0xd2>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8021834:	68fb      	ldr	r3, [r7, #12]
 8021836:	791b      	ldrb	r3, [r3, #4]
 8021838:	f003 030c 	and.w	r3, r3, #12
 802183c:	2b04      	cmp	r3, #4
 802183e:	d002      	beq.n	8021846 <CheckSmSettings+0x8e>
    {
        /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021840:	2316      	movs	r3, #22
 8021842:	75bb      	strb	r3, [r7, #22]
 8021844:	e021      	b.n	802188a <CheckSmSettings+0xd2>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8021846:	68fb      	ldr	r3, [r7, #12]
 8021848:	791b      	ldrb	r3, [r3, #4]
 802184a:	f003 0302 	and.w	r3, r3, #2
 802184e:	2b00      	cmp	r3, #0
 8021850:	d102      	bne.n	8021858 <CheckSmSettings+0xa0>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021852:	2316      	movs	r3, #22
 8021854:	75bb      	strb	r3, [r7, #22]
 8021856:	e018      	b.n	802188a <CheckSmSettings+0xd2>
    }
    else if (SMLength < MIN_MBX_SIZE)
 8021858:	8abb      	ldrh	r3, [r7, #20]
 802185a:	2b23      	cmp	r3, #35	; 0x23
 802185c:	d802      	bhi.n	8021864 <CheckSmSettings+0xac>
    {
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802185e:	2316      	movs	r3, #22
 8021860:	75bb      	strb	r3, [r7, #22]
 8021862:	e012      	b.n	802188a <CheckSmSettings+0xd2>
    }
    else if (SMLength > MAX_MBX_SIZE)
 8021864:	8abb      	ldrh	r3, [r7, #20]
 8021866:	2b80      	cmp	r3, #128	; 0x80
 8021868:	d902      	bls.n	8021870 <CheckSmSettings+0xb8>
    {
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 802186a:	2316      	movs	r3, #22
 802186c:	75bb      	strb	r3, [r7, #22]
 802186e:	e00c      	b.n	802188a <CheckSmSettings+0xd2>
    }
    else if (SMAddress < MIN_MBX_WRITE_ADDRESS)
 8021870:	8a7b      	ldrh	r3, [r7, #18]
 8021872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021876:	d202      	bcs.n	802187e <CheckSmSettings+0xc6>
    {
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021878:	2316      	movs	r3, #22
 802187a:	75bb      	strb	r3, [r7, #22]
 802187c:	e005      	b.n	802188a <CheckSmSettings+0xd2>
    }
    else if (SMAddress > MAX_MBX_WRITE_ADDRESS)
 802187e:	8a7b      	ldrh	r3, [r7, #18]
 8021880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021884:	d301      	bcc.n	802188a <CheckSmSettings+0xd2>
    {
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021886:	2316      	movs	r3, #22
 8021888:	75bb      	strb	r3, [r7, #22]
    }


    if ( result == 0 )
 802188a:	7dbb      	ldrb	r3, [r7, #22]
 802188c:	2b00      	cmp	r3, #0
 802188e:	d143      	bne.n	8021918 <CheckSmSettings+0x160>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
        pSyncMan = GetSyncMan(MAILBOX_READ);
 8021890:	2001      	movs	r0, #1
 8021892:	f7ff ff25 	bl	80216e0 <GetSyncMan>
 8021896:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8021898:	68fb      	ldr	r3, [r7, #12]
 802189a:	789a      	ldrb	r2, [r3, #2]
 802189c:	78db      	ldrb	r3, [r3, #3]
 802189e:	021b      	lsls	r3, r3, #8
 80218a0:	4313      	orrs	r3, r2
 80218a2:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	781a      	ldrb	r2, [r3, #0]
 80218a8:	785b      	ldrb	r3, [r3, #1]
 80218aa:	021b      	lsls	r3, r3, #8
 80218ac:	4313      	orrs	r3, r2
 80218ae:	827b      	strh	r3, [r7, #18]


    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 80218b0:	68fb      	ldr	r3, [r7, #12]
 80218b2:	799b      	ldrb	r3, [r3, #6]
 80218b4:	f003 0301 	and.w	r3, r3, #1
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d102      	bne.n	80218c2 <CheckSmSettings+0x10a>
    {
        /* send mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80218bc:	2316      	movs	r3, #22
 80218be:	75bb      	strb	r3, [r7, #22]
 80218c0:	e02a      	b.n	8021918 <CheckSmSettings+0x160>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	791b      	ldrb	r3, [r3, #4]
 80218c6:	f003 030c 	and.w	r3, r3, #12
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d002      	beq.n	80218d4 <CheckSmSettings+0x11c>
    {
        /* receive mailbox is not readable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80218ce:	2316      	movs	r3, #22
 80218d0:	75bb      	strb	r3, [r7, #22]
 80218d2:	e021      	b.n	8021918 <CheckSmSettings+0x160>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80218d4:	68fb      	ldr	r3, [r7, #12]
 80218d6:	791b      	ldrb	r3, [r3, #4]
 80218d8:	f003 0302 	and.w	r3, r3, #2
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d102      	bne.n	80218e6 <CheckSmSettings+0x12e>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80218e0:	2316      	movs	r3, #22
 80218e2:	75bb      	strb	r3, [r7, #22]
 80218e4:	e018      	b.n	8021918 <CheckSmSettings+0x160>
    }
    else if (SMLength < MIN_MBX_SIZE)
 80218e6:	8abb      	ldrh	r3, [r7, #20]
 80218e8:	2b23      	cmp	r3, #35	; 0x23
 80218ea:	d802      	bhi.n	80218f2 <CheckSmSettings+0x13a>
    {
        /* send mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80218ec:	2316      	movs	r3, #22
 80218ee:	75bb      	strb	r3, [r7, #22]
 80218f0:	e012      	b.n	8021918 <CheckSmSettings+0x160>
    }
    else if (SMLength > MAX_MBX_SIZE)
 80218f2:	8abb      	ldrh	r3, [r7, #20]
 80218f4:	2b80      	cmp	r3, #128	; 0x80
 80218f6:	d902      	bls.n	80218fe <CheckSmSettings+0x146>
    {
        /* send mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80218f8:	2316      	movs	r3, #22
 80218fa:	75bb      	strb	r3, [r7, #22]
 80218fc:	e00c      	b.n	8021918 <CheckSmSettings+0x160>
    }
    else if (SMAddress < MIN_MBX_READ_ADDRESS)
 80218fe:	8a7b      	ldrh	r3, [r7, #18]
 8021900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021904:	d202      	bcs.n	802190c <CheckSmSettings+0x154>
    {
        /* send mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021906:	2316      	movs	r3, #22
 8021908:	75bb      	strb	r3, [r7, #22]
 802190a:	e005      	b.n	8021918 <CheckSmSettings+0x160>
    }
    else if (SMAddress > MAX_MBX_READ_ADDRESS)
 802190c:	8a7b      	ldrh	r3, [r7, #18]
 802190e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021912:	d301      	bcc.n	8021918 <CheckSmSettings+0x160>
    {
        /* send mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8021914:	2316      	movs	r3, #22
 8021916:	75bb      	strb	r3, [r7, #22]
    }
    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 8021918:	7dbb      	ldrb	r3, [r7, #22]
 802191a:	2b00      	cmp	r3, #0
 802191c:	d171      	bne.n	8021a02 <CheckSmSettings+0x24a>
 802191e:	79fb      	ldrb	r3, [r7, #7]
 8021920:	2b03      	cmp	r3, #3
 8021922:	d96e      	bls.n	8021a02 <CheckSmSettings+0x24a>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 8021924:	4b4a      	ldr	r3, [pc, #296]	; (8021a50 <CheckSmSettings+0x298>)
 8021926:	2201      	movs	r2, #1
 8021928:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2 (0 in case if no mailbox is supported)) */
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 802192a:	2003      	movs	r0, #3
 802192c:	f7ff fed8 	bl	80216e0 <GetSyncMan>
 8021930:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8021932:	68fb      	ldr	r3, [r7, #12]
 8021934:	789a      	ldrb	r2, [r3, #2]
 8021936:	78db      	ldrb	r3, [r3, #3]
 8021938:	021b      	lsls	r3, r3, #8
 802193a:	4313      	orrs	r3, r2
 802193c:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 802193e:	68fb      	ldr	r3, [r7, #12]
 8021940:	781a      	ldrb	r2, [r3, #0]
 8021942:	785b      	ldrb	r3, [r3, #1]
 8021944:	021b      	lsls	r3, r3, #8
 8021946:	4313      	orrs	r3, r2
 8021948:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 802194a:	68fb      	ldr	r3, [r7, #12]
 802194c:	799b      	ldrb	r3, [r3, #6]
 802194e:	f003 0301 	and.w	r3, r3, #1
 8021952:	2b00      	cmp	r3, #0
 8021954:	d005      	beq.n	8021962 <CheckSmSettings+0x1aa>
 8021956:	8abb      	ldrh	r3, [r7, #20]
 8021958:	2b00      	cmp	r3, #0
 802195a:	d102      	bne.n	8021962 <CheckSmSettings+0x1aa>
    {
        /* the SM3 size is 0 and the SM3 is active */
        result = SYNCMANCHSETTINGS + 1;
 802195c:	2304      	movs	r3, #4
 802195e:	75bb      	strb	r3, [r7, #22]
 8021960:	e04a      	b.n	80219f8 <CheckSmSettings+0x240>
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8021962:	68fb      	ldr	r3, [r7, #12]
 8021964:	799b      	ldrb	r3, [r3, #6]
 8021966:	f003 0301 	and.w	r3, r3, #1
 802196a:	2b00      	cmp	r3, #0
 802196c:	d03b      	beq.n	80219e6 <CheckSmSettings+0x22e>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
                if (SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 802196e:	4b39      	ldr	r3, [pc, #228]	; (8021a54 <CheckSmSettings+0x29c>)
 8021970:	881b      	ldrh	r3, [r3, #0]
 8021972:	8aba      	ldrh	r2, [r7, #20]
 8021974:	429a      	cmp	r2, r3
 8021976:	d106      	bne.n	8021986 <CheckSmSettings+0x1ce>
 8021978:	4b36      	ldr	r3, [pc, #216]	; (8021a54 <CheckSmSettings+0x29c>)
 802197a:	881b      	ldrh	r3, [r3, #0]
 802197c:	2b00      	cmp	r3, #0
 802197e:	d002      	beq.n	8021986 <CheckSmSettings+0x1ce>
 8021980:	8abb      	ldrh	r3, [r7, #20]
 8021982:	2b44      	cmp	r3, #68	; 0x44
 8021984:	d902      	bls.n	802198c <CheckSmSettings+0x1d4>
                {
                    /* sizes don't match */
                    result = SYNCMANCHSIZE + 1;
 8021986:	2303      	movs	r3, #3
 8021988:	75bb      	strb	r3, [r7, #22]
 802198a:	e035      	b.n	80219f8 <CheckSmSettings+0x240>
                }
                else
                {
                    /* sizes matches */
                    if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE)
 802198c:	68fb      	ldr	r3, [r7, #12]
 802198e:	791b      	ldrb	r3, [r3, #4]
 8021990:	f003 030c 	and.w	r3, r3, #12
 8021994:	2b00      	cmp	r3, #0
 8021996:	d123      	bne.n	80219e0 <CheckSmSettings+0x228>
                    {
                        /* settings match */
                        if (((nAlStatus == STATE_PREOP) && (SMAddress >= MIN_PD_READ_ADDRESS) && (SMAddress <= MAX_PD_READ_ADDRESS))
 8021998:	4b2f      	ldr	r3, [pc, #188]	; (8021a58 <CheckSmSettings+0x2a0>)
 802199a:	781b      	ldrb	r3, [r3, #0]
 802199c:	2b02      	cmp	r3, #2
 802199e:	d107      	bne.n	80219b0 <CheckSmSettings+0x1f8>
 80219a0:	8a7b      	ldrh	r3, [r7, #18]
 80219a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80219a6:	d303      	bcc.n	80219b0 <CheckSmSettings+0x1f8>
 80219a8:	8a7b      	ldrh	r3, [r7, #18]
 80219aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80219ae:	d308      	bcc.n	80219c2 <CheckSmSettings+0x20a>
                            || ((nAlStatus != STATE_PREOP) && (SMAddress == nEscAddrInputData))
 80219b0:	4b29      	ldr	r3, [pc, #164]	; (8021a58 <CheckSmSettings+0x2a0>)
 80219b2:	781b      	ldrb	r3, [r3, #0]
 80219b4:	2b02      	cmp	r3, #2
 80219b6:	d00f      	beq.n	80219d8 <CheckSmSettings+0x220>
 80219b8:	4b28      	ldr	r3, [pc, #160]	; (8021a5c <CheckSmSettings+0x2a4>)
 80219ba:	881b      	ldrh	r3, [r3, #0]
 80219bc:	8a7a      	ldrh	r2, [r7, #18]
 80219be:	429a      	cmp	r2, r3
 80219c0:	d10a      	bne.n	80219d8 <CheckSmSettings+0x220>
                            )
                        {
                            /* addresses match */

                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80219c2:	68fb      	ldr	r3, [r7, #12]
 80219c4:	791b      	ldrb	r3, [r3, #4]
 80219c6:	f003 0302 	and.w	r3, r3, #2
 80219ca:	2b00      	cmp	r3, #0
 80219cc:	d003      	beq.n	80219d6 <CheckSmSettings+0x21e>
                                {
                                    /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                    b3BufferMode = FALSE;
 80219ce:	4b20      	ldr	r3, [pc, #128]	; (8021a50 <CheckSmSettings+0x298>)
 80219d0:	2200      	movs	r2, #0
 80219d2:	701a      	strb	r2, [r3, #0]
                            || ((nAlStatus != STATE_PREOP) && (SMAddress == nEscAddrInputData))
                            )
                        {
                            /* addresses match */

                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 80219d4:	e003      	b.n	80219de <CheckSmSettings+0x226>
 80219d6:	e002      	b.n	80219de <CheckSmSettings+0x226>
                                }
                        }
                        else
                        {
                            /* input address is out of the allowed area or has changed in SAFEOP or OP */
                            result = SYNCMANCHADDRESS + 1;
 80219d8:	2302      	movs	r3, #2
 80219da:	75bb      	strb	r3, [r7, #22]
 80219dc:	e00c      	b.n	80219f8 <CheckSmSettings+0x240>
 80219de:	e00b      	b.n	80219f8 <CheckSmSettings+0x240>
                        }
                    }
                    else
                    {
                        /* input settings do not match */
                        result = SYNCMANCHSETTINGS + 1;
 80219e0:	2304      	movs	r3, #4
 80219e2:	75bb      	strb	r3, [r7, #22]
 80219e4:	e008      	b.n	80219f8 <CheckSmSettings+0x240>
                    }
                }
        }
        else if (SMLength != 0 || nPdInputSize != 0)
 80219e6:	8abb      	ldrh	r3, [r7, #20]
 80219e8:	2b00      	cmp	r3, #0
 80219ea:	d103      	bne.n	80219f4 <CheckSmSettings+0x23c>
 80219ec:	4b19      	ldr	r3, [pc, #100]	; (8021a54 <CheckSmSettings+0x29c>)
 80219ee:	881b      	ldrh	r3, [r3, #0]
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d001      	beq.n	80219f8 <CheckSmSettings+0x240>
        {
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 80219f4:	2303      	movs	r3, #3
 80219f6:	75bb      	strb	r3, [r7, #22]
        }



        if ( result != 0 )
 80219f8:	7dbb      	ldrb	r3, [r7, #22]
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d001      	beq.n	8021a02 <CheckSmSettings+0x24a>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 80219fe:	231e      	movs	r3, #30
 8021a00:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if (result == 0 && maxChannel > PROCESS_DATA_OUT)
 8021a02:	7dbb      	ldrb	r3, [r7, #22]
 8021a04:	2b00      	cmp	r3, #0
 8021a06:	f040 808a 	bne.w	8021b1e <CheckSmSettings+0x366>
 8021a0a:	79fb      	ldrb	r3, [r7, #7]
 8021a0c:	2b02      	cmp	r3, #2
 8021a0e:	f240 8086 	bls.w	8021b1e <CheckSmSettings+0x366>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8021a12:	2002      	movs	r0, #2
 8021a14:	f7ff fe64 	bl	80216e0 <GetSyncMan>
 8021a18:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8021a1a:	68fb      	ldr	r3, [r7, #12]
 8021a1c:	789a      	ldrb	r2, [r3, #2]
 8021a1e:	78db      	ldrb	r3, [r3, #3]
 8021a20:	021b      	lsls	r3, r3, #8
 8021a22:	4313      	orrs	r3, r2
 8021a24:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8021a26:	68fb      	ldr	r3, [r7, #12]
 8021a28:	781a      	ldrb	r2, [r3, #0]
 8021a2a:	785b      	ldrb	r3, [r3, #1]
 8021a2c:	021b      	lsls	r3, r3, #8
 8021a2e:	4313      	orrs	r3, r2
 8021a30:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 8021a32:	68fb      	ldr	r3, [r7, #12]
 8021a34:	799b      	ldrb	r3, [r3, #6]
 8021a36:	f003 0301 	and.w	r3, r3, #1
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d010      	beq.n	8021a60 <CheckSmSettings+0x2a8>
 8021a3e:	8abb      	ldrh	r3, [r7, #20]
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	d10d      	bne.n	8021a60 <CheckSmSettings+0x2a8>
    {
        /* the SM2 size is 0 and the SM2 is active */
        result = SYNCMANCHSETTINGS + 1;
 8021a44:	2304      	movs	r3, #4
 8021a46:	75bb      	strb	r3, [r7, #22]
 8021a48:	e064      	b.n	8021b14 <CheckSmSettings+0x35c>
 8021a4a:	bf00      	nop
 8021a4c:	1fff274a 	.word	0x1fff274a
 8021a50:	1fff2714 	.word	0x1fff2714
 8021a54:	1fff2746 	.word	0x1fff2746
 8021a58:	1fff2719 	.word	0x1fff2719
 8021a5c:	1fff275e 	.word	0x1fff275e
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8021a60:	68fb      	ldr	r3, [r7, #12]
 8021a62:	799b      	ldrb	r3, [r3, #6]
 8021a64:	f003 0301 	and.w	r3, r3, #1
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d04a      	beq.n	8021b02 <CheckSmSettings+0x34a>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 8021a6c:	4b3a      	ldr	r3, [pc, #232]	; (8021b58 <CheckSmSettings+0x3a0>)
 8021a6e:	881b      	ldrh	r3, [r3, #0]
 8021a70:	8aba      	ldrh	r2, [r7, #20]
 8021a72:	429a      	cmp	r2, r3
 8021a74:	d141      	bne.n	8021afa <CheckSmSettings+0x342>
 8021a76:	4b38      	ldr	r3, [pc, #224]	; (8021b58 <CheckSmSettings+0x3a0>)
 8021a78:	881b      	ldrh	r3, [r3, #0]
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d03d      	beq.n	8021afa <CheckSmSettings+0x342>
 8021a7e:	8abb      	ldrh	r3, [r7, #20]
 8021a80:	2b44      	cmp	r3, #68	; 0x44
 8021a82:	d83a      	bhi.n	8021afa <CheckSmSettings+0x342>
            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8021a84:	68fb      	ldr	r3, [r7, #12]
 8021a86:	791b      	ldrb	r3, [r3, #4]
 8021a88:	f003 030c 	and.w	r3, r3, #12
 8021a8c:	2b04      	cmp	r3, #4
 8021a8e:	d130      	bne.n	8021af2 <CheckSmSettings+0x33a>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8021a90:	4b32      	ldr	r3, [pc, #200]	; (8021b5c <CheckSmSettings+0x3a4>)
 8021a92:	781b      	ldrb	r3, [r3, #0]
 8021a94:	2b02      	cmp	r3, #2
 8021a96:	d107      	bne.n	8021aa8 <CheckSmSettings+0x2f0>
 8021a98:	8a7b      	ldrh	r3, [r7, #18]
 8021a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021a9e:	d303      	bcc.n	8021aa8 <CheckSmSettings+0x2f0>
 8021aa0:	8a7b      	ldrh	r3, [r7, #18]
 8021aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8021aa6:	d308      	bcc.n	8021aba <CheckSmSettings+0x302>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8021aa8:	4b2c      	ldr	r3, [pc, #176]	; (8021b5c <CheckSmSettings+0x3a4>)
 8021aaa:	781b      	ldrb	r3, [r3, #0]
 8021aac:	2b02      	cmp	r3, #2
 8021aae:	d01c      	beq.n	8021aea <CheckSmSettings+0x332>
 8021ab0:	4b2b      	ldr	r3, [pc, #172]	; (8021b60 <CheckSmSettings+0x3a8>)
 8021ab2:	881b      	ldrh	r3, [r3, #0]
 8021ab4:	8a7a      	ldrh	r2, [r7, #18]
 8021ab6:	429a      	cmp	r2, r3
 8021ab8:	d117      	bne.n	8021aea <CheckSmSettings+0x332>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 8021aba:	68fb      	ldr	r3, [r7, #12]
 8021abc:	791b      	ldrb	r3, [r3, #4]
 8021abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d003      	beq.n	8021ace <CheckSmSettings+0x316>
                            {
                                bWdTrigger = TRUE;
 8021ac6:	4b27      	ldr	r3, [pc, #156]	; (8021b64 <CheckSmSettings+0x3ac>)
 8021ac8:	2201      	movs	r2, #1
 8021aca:	701a      	strb	r2, [r3, #0]
 8021acc:	e002      	b.n	8021ad4 <CheckSmSettings+0x31c>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 8021ace:	4b25      	ldr	r3, [pc, #148]	; (8021b64 <CheckSmSettings+0x3ac>)
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	701a      	strb	r2, [r3, #0]
                            }

                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8021ad4:	68fb      	ldr	r3, [r7, #12]
 8021ad6:	791b      	ldrb	r3, [r3, #4]
 8021ad8:	f003 0302 	and.w	r3, r3, #2
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d003      	beq.n	8021ae8 <CheckSmSettings+0x330>
                            {
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 8021ae0:	4b21      	ldr	r3, [pc, #132]	; (8021b68 <CheckSmSettings+0x3b0>)
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	701a      	strb	r2, [r3, #0]
                            else
                            {
                                bWdTrigger = FALSE;
                            }

                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8021ae6:	e003      	b.n	8021af0 <CheckSmSettings+0x338>
 8021ae8:	e002      	b.n	8021af0 <CheckSmSettings+0x338>
                        }
                    }
                    else
                    {
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS + 1;
 8021aea:	2302      	movs	r3, #2
 8021aec:	75bb      	strb	r3, [r7, #22]
 8021aee:	e003      	b.n	8021af8 <CheckSmSettings+0x340>
 8021af0:	e002      	b.n	8021af8 <CheckSmSettings+0x340>
                    }
                }
                else
                {
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS + 1;
 8021af2:	2304      	movs	r3, #4
 8021af4:	75bb      	strb	r3, [r7, #22]
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8021af6:	e003      	b.n	8021b00 <CheckSmSettings+0x348>
 8021af8:	e002      	b.n	8021b00 <CheckSmSettings+0x348>
                }
            }
            else
            {
                /* output sizes don't match */
                result = SYNCMANCHSIZE + 1;
 8021afa:	2303      	movs	r3, #3
 8021afc:	75bb      	strb	r3, [r7, #22]
 8021afe:	e009      	b.n	8021b14 <CheckSmSettings+0x35c>
 8021b00:	e008      	b.n	8021b14 <CheckSmSettings+0x35c>
            }
        }
        else if (SMLength != 0 || nPdOutputSize != 0)
 8021b02:	8abb      	ldrh	r3, [r7, #20]
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d103      	bne.n	8021b10 <CheckSmSettings+0x358>
 8021b08:	4b13      	ldr	r3, [pc, #76]	; (8021b58 <CheckSmSettings+0x3a0>)
 8021b0a:	881b      	ldrh	r3, [r3, #0]
 8021b0c:	2b00      	cmp	r3, #0
 8021b0e:	d001      	beq.n	8021b14 <CheckSmSettings+0x35c>
        {
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 8021b10:	2303      	movs	r3, #3
 8021b12:	75bb      	strb	r3, [r7, #22]
        }

        if ( result != 0 )
 8021b14:	7dbb      	ldrb	r3, [r7, #22]
 8021b16:	2b00      	cmp	r3, #0
 8021b18:	d001      	beq.n	8021b1e <CheckSmSettings+0x366>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 8021b1a:	231d      	movs	r3, #29
 8021b1c:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 8021b1e:	7dbb      	ldrb	r3, [r7, #22]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d113      	bne.n	8021b4c <CheckSmSettings+0x394>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8021b24:	79fb      	ldrb	r3, [r7, #7]
 8021b26:	75fb      	strb	r3, [r7, #23]
 8021b28:	e00b      	b.n	8021b42 <CheckSmSettings+0x38a>
        {
            pSyncMan = GetSyncMan(i);
 8021b2a:	7dfb      	ldrb	r3, [r7, #23]
 8021b2c:	4618      	mov	r0, r3
 8021b2e:	f7ff fdd7 	bl	80216e0 <GetSyncMan>
 8021b32:	60f8      	str	r0, [r7, #12]
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 8021b34:	68fb      	ldr	r3, [r7, #12]
 8021b36:	799a      	ldrb	r2, [r3, #6]
 8021b38:	4b0c      	ldr	r3, [pc, #48]	; (8021b6c <CheckSmSettings+0x3b4>)
 8021b3a:	701a      	strb	r2, [r3, #0]


    if ( result == 0 )
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8021b3c:	7dfb      	ldrb	r3, [r7, #23]
 8021b3e:	3301      	adds	r3, #1
 8021b40:	75fb      	strb	r3, [r7, #23]
 8021b42:	4b0b      	ldr	r3, [pc, #44]	; (8021b70 <CheckSmSettings+0x3b8>)
 8021b44:	781b      	ldrb	r3, [r3, #0]
 8021b46:	7dfa      	ldrb	r2, [r7, #23]
 8021b48:	429a      	cmp	r2, r3
 8021b4a:	d3ee      	bcc.n	8021b2a <CheckSmSettings+0x372>
        {
            pSyncMan = GetSyncMan(i);
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
        }
    }
    return result;
 8021b4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8021b4e:	4618      	mov	r0, r3
 8021b50:	3718      	adds	r7, #24
 8021b52:	46bd      	mov	sp, r7
 8021b54:	bd80      	pop	{r7, pc}
 8021b56:	bf00      	nop
 8021b58:	1fff271a 	.word	0x1fff271a
 8021b5c:	1fff2719 	.word	0x1fff2719
 8021b60:	1fff2726 	.word	0x1fff2726
 8021b64:	1fff2758 	.word	0x1fff2758
 8021b68:	1fff2714 	.word	0x1fff2714
 8021b6c:	1fff1621 	.word	0x1fff1621
 8021b70:	1fff275c 	.word	0x1fff275c

08021b74 <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 8021b74:	b580      	push	{r7, lr}
 8021b76:	b08e      	sub	sp, #56	; 0x38
 8021b78:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;
    UINT8        dcControl;

    UINT16     wdiv = 0;
 8021b7a:	2300      	movs	r3, #0
 8021b7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    UINT16     wd = 0;
 8021b7e:	2300      	movs	r3, #0
 8021b80:	857b      	strh	r3, [r7, #42]	; 0x2a
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 8021b82:	2300      	movs	r3, #0
 8021b84:	627b      	str	r3, [r7, #36]	; 0x24
    UINT32     shiftTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 8021b86:	2300      	movs	r3, #0
 8021b88:	623b      	str	r3, [r7, #32]
    BOOL bSubordinatedCycles = FALSE;
 8021b8a:	2300      	movs	r3, #0
 8021b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    UINT16    nPdInputBuffer = 3;
 8021b90:	2303      	movs	r3, #3
 8021b92:	86bb      	strh	r3, [r7, #52]	; 0x34

    UINT16    nPdOutputBuffer = 3;
 8021b94:	2303      	movs	r3, #3
 8021b96:	867b      	strh	r3, [r7, #50]	; 0x32

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8021b98:	2300      	movs	r3, #0
 8021b9a:	863b      	strh	r3, [r7, #48]	; 0x30
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 8021b9c:	2300      	movs	r3, #0
 8021b9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8021ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021ba4:	83fb      	strh	r3, [r7, #30]

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 8021ba6:	4b9e      	ldr	r3, [pc, #632]	; (8021e20 <StartInputHandler+0x2ac>)
 8021ba8:	899a      	ldrh	r2, [r3, #12]
 8021baa:	8bfb      	ldrh	r3, [r7, #30]
 8021bac:	4013      	ands	r3, r2
 8021bae:	83fb      	strh	r3, [r7, #30]
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 8021bb0:	4b9c      	ldr	r3, [pc, #624]	; (8021e24 <StartInputHandler+0x2b0>)
 8021bb2:	899a      	ldrh	r2, [r3, #12]
 8021bb4:	8bfb      	ldrh	r3, [r7, #30]
 8021bb6:	4013      	ands	r3, r2
 8021bb8:	83fb      	strh	r3, [r7, #30]

    u16ALEventMask = 0;
 8021bba:	4b9b      	ldr	r3, [pc, #620]	; (8021e28 <StartInputHandler+0x2b4>)
 8021bbc:	2200      	movs	r2, #0
 8021bbe:	801a      	strh	r2, [r3, #0]


    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 8021bc0:	4b9a      	ldr	r3, [pc, #616]	; (8021e2c <StartInputHandler+0x2b8>)
 8021bc2:	2200      	movs	r2, #0
 8021bc4:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8021bc6:	2002      	movs	r0, #2
 8021bc8:	f7ff fd8a 	bl	80216e0 <GetSyncMan>
 8021bcc:	61b8      	str	r0, [r7, #24]
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 8021bce:	69bb      	ldr	r3, [r7, #24]
 8021bd0:	881b      	ldrh	r3, [r3, #0]
 8021bd2:	b29a      	uxth	r2, r3
 8021bd4:	4b96      	ldr	r3, [pc, #600]	; (8021e30 <StartInputHandler+0x2bc>)
 8021bd6:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8021bd8:	69bb      	ldr	r3, [r7, #24]
 8021bda:	791b      	ldrb	r3, [r3, #4]
 8021bdc:	f003 0302 	and.w	r3, r3, #2
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d001      	beq.n	8021be8 <StartInputHandler+0x74>
    {
       nPdOutputBuffer = 1;
 8021be4:	2301      	movs	r3, #1
 8021be6:	867b      	strh	r3, [r7, #50]	; 0x32
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8021be8:	2003      	movs	r0, #3
 8021bea:	f7ff fd79 	bl	80216e0 <GetSyncMan>
 8021bee:	61b8      	str	r0, [r7, #24]
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 8021bf0:	69bb      	ldr	r3, [r7, #24]
 8021bf2:	881b      	ldrh	r3, [r3, #0]
 8021bf4:	b29a      	uxth	r2, r3
 8021bf6:	4b8f      	ldr	r3, [pc, #572]	; (8021e34 <StartInputHandler+0x2c0>)
 8021bf8:	801a      	strh	r2, [r3, #0]


    /* get the number of input buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8021bfa:	69bb      	ldr	r3, [r7, #24]
 8021bfc:	791b      	ldrb	r3, [r3, #4]
 8021bfe:	f003 0302 	and.w	r3, r3, #2
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	d001      	beq.n	8021c0a <StartInputHandler+0x96>
    {
        nPdInputBuffer = 1;
 8021c06:	2301      	movs	r3, #1
 8021c08:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8021c0a:	4b8a      	ldr	r3, [pc, #552]	; (8021e34 <StartInputHandler+0x2c0>)
 8021c0c:	881b      	ldrh	r3, [r3, #0]
 8021c0e:	461a      	mov	r2, r3
 8021c10:	4b89      	ldr	r3, [pc, #548]	; (8021e38 <StartInputHandler+0x2c4>)
 8021c12:	881b      	ldrh	r3, [r3, #0]
 8021c14:	4619      	mov	r1, r3
 8021c16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8021c18:	fb03 f301 	mul.w	r3, r3, r1
 8021c1c:	4413      	add	r3, r2
 8021c1e:	4a87      	ldr	r2, [pc, #540]	; (8021e3c <StartInputHandler+0x2c8>)
 8021c20:	8812      	ldrh	r2, [r2, #0]
 8021c22:	4293      	cmp	r3, r2
 8021c24:	dd0a      	ble.n	8021c3c <StartInputHandler+0xc8>
 8021c26:	4b83      	ldr	r3, [pc, #524]	; (8021e34 <StartInputHandler+0x2c0>)
 8021c28:	881b      	ldrh	r3, [r3, #0]
 8021c2a:	461a      	mov	r2, r3
 8021c2c:	4b83      	ldr	r3, [pc, #524]	; (8021e3c <StartInputHandler+0x2c8>)
 8021c2e:	881b      	ldrh	r3, [r3, #0]
 8021c30:	4619      	mov	r1, r3
 8021c32:	4b83      	ldr	r3, [pc, #524]	; (8021e40 <StartInputHandler+0x2cc>)
 8021c34:	881b      	ldrh	r3, [r3, #0]
 8021c36:	440b      	add	r3, r1
 8021c38:	429a      	cmp	r2, r3
 8021c3a:	db18      	blt.n	8021c6e <StartInputHandler+0xfa>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8021c3c:	4b7d      	ldr	r3, [pc, #500]	; (8021e34 <StartInputHandler+0x2c0>)
 8021c3e:	881b      	ldrh	r3, [r3, #0]
 8021c40:	461a      	mov	r2, r3
 8021c42:	4b7d      	ldr	r3, [pc, #500]	; (8021e38 <StartInputHandler+0x2c4>)
 8021c44:	881b      	ldrh	r3, [r3, #0]
 8021c46:	4619      	mov	r1, r3
 8021c48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8021c4a:	fb03 f301 	mul.w	r3, r3, r1
 8021c4e:	4413      	add	r3, r2
 8021c50:	4a7c      	ldr	r2, [pc, #496]	; (8021e44 <StartInputHandler+0x2d0>)
 8021c52:	8812      	ldrh	r2, [r2, #0]
 8021c54:	4293      	cmp	r3, r2
 8021c56:	dd0c      	ble.n	8021c72 <StartInputHandler+0xfe>
 8021c58:	4b76      	ldr	r3, [pc, #472]	; (8021e34 <StartInputHandler+0x2c0>)
 8021c5a:	881b      	ldrh	r3, [r3, #0]
 8021c5c:	461a      	mov	r2, r3
 8021c5e:	4b79      	ldr	r3, [pc, #484]	; (8021e44 <StartInputHandler+0x2d0>)
 8021c60:	881b      	ldrh	r3, [r3, #0]
 8021c62:	4619      	mov	r1, r3
 8021c64:	4b78      	ldr	r3, [pc, #480]	; (8021e48 <StartInputHandler+0x2d4>)
 8021c66:	881b      	ldrh	r3, [r3, #0]
 8021c68:	440b      	add	r3, r1
 8021c6a:	429a      	cmp	r2, r3
 8021c6c:	da01      	bge.n	8021c72 <StartInputHandler+0xfe>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 8021c6e:	231e      	movs	r3, #30
 8021c70:	e325      	b.n	80222be <StartInputHandler+0x74a>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8021c72:	4b6f      	ldr	r3, [pc, #444]	; (8021e30 <StartInputHandler+0x2bc>)
 8021c74:	881b      	ldrh	r3, [r3, #0]
 8021c76:	461a      	mov	r2, r3
 8021c78:	4b74      	ldr	r3, [pc, #464]	; (8021e4c <StartInputHandler+0x2d8>)
 8021c7a:	881b      	ldrh	r3, [r3, #0]
 8021c7c:	4619      	mov	r1, r3
 8021c7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8021c80:	fb03 f301 	mul.w	r3, r3, r1
 8021c84:	4413      	add	r3, r2
 8021c86:	4a6d      	ldr	r2, [pc, #436]	; (8021e3c <StartInputHandler+0x2c8>)
 8021c88:	8812      	ldrh	r2, [r2, #0]
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
    }

    if (
 8021c8a:	4293      	cmp	r3, r2
 8021c8c:	dd0a      	ble.n	8021ca4 <StartInputHandler+0x130>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8021c8e:	4b68      	ldr	r3, [pc, #416]	; (8021e30 <StartInputHandler+0x2bc>)
 8021c90:	881b      	ldrh	r3, [r3, #0]
 8021c92:	461a      	mov	r2, r3
 8021c94:	4b69      	ldr	r3, [pc, #420]	; (8021e3c <StartInputHandler+0x2c8>)
 8021c96:	881b      	ldrh	r3, [r3, #0]
 8021c98:	4619      	mov	r1, r3
 8021c9a:	4b69      	ldr	r3, [pc, #420]	; (8021e40 <StartInputHandler+0x2cc>)
 8021c9c:	881b      	ldrh	r3, [r3, #0]
 8021c9e:	440b      	add	r3, r1
 8021ca0:	429a      	cmp	r2, r3
 8021ca2:	db31      	blt.n	8021d08 <StartInputHandler+0x194>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8021ca4:	4b62      	ldr	r3, [pc, #392]	; (8021e30 <StartInputHandler+0x2bc>)
 8021ca6:	881b      	ldrh	r3, [r3, #0]
 8021ca8:	461a      	mov	r2, r3
 8021caa:	4b68      	ldr	r3, [pc, #416]	; (8021e4c <StartInputHandler+0x2d8>)
 8021cac:	881b      	ldrh	r3, [r3, #0]
 8021cae:	4619      	mov	r1, r3
 8021cb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8021cb2:	fb03 f301 	mul.w	r3, r3, r1
 8021cb6:	4413      	add	r3, r2
 8021cb8:	4a62      	ldr	r2, [pc, #392]	; (8021e44 <StartInputHandler+0x2d0>)
 8021cba:	8812      	ldrh	r2, [r2, #0]
 8021cbc:	4293      	cmp	r3, r2
 8021cbe:	dd0a      	ble.n	8021cd6 <StartInputHandler+0x162>
 8021cc0:	4b5b      	ldr	r3, [pc, #364]	; (8021e30 <StartInputHandler+0x2bc>)
 8021cc2:	881b      	ldrh	r3, [r3, #0]
 8021cc4:	461a      	mov	r2, r3
 8021cc6:	4b5f      	ldr	r3, [pc, #380]	; (8021e44 <StartInputHandler+0x2d0>)
 8021cc8:	881b      	ldrh	r3, [r3, #0]
 8021cca:	4619      	mov	r1, r3
 8021ccc:	4b5e      	ldr	r3, [pc, #376]	; (8021e48 <StartInputHandler+0x2d4>)
 8021cce:	881b      	ldrh	r3, [r3, #0]
 8021cd0:	440b      	add	r3, r1
 8021cd2:	429a      	cmp	r2, r3
 8021cd4:	db18      	blt.n	8021d08 <StartInputHandler+0x194>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8021cd6:	4b56      	ldr	r3, [pc, #344]	; (8021e30 <StartInputHandler+0x2bc>)
 8021cd8:	881b      	ldrh	r3, [r3, #0]
 8021cda:	461a      	mov	r2, r3
 8021cdc:	4b5b      	ldr	r3, [pc, #364]	; (8021e4c <StartInputHandler+0x2d8>)
 8021cde:	881b      	ldrh	r3, [r3, #0]
 8021ce0:	4619      	mov	r1, r3
 8021ce2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8021ce4:	fb03 f301 	mul.w	r3, r3, r1
 8021ce8:	4413      	add	r3, r2
 8021cea:	4a52      	ldr	r2, [pc, #328]	; (8021e34 <StartInputHandler+0x2c0>)
 8021cec:	8812      	ldrh	r2, [r2, #0]
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
        ||
 8021cee:	4293      	cmp	r3, r2
 8021cf0:	dd0c      	ble.n	8021d0c <StartInputHandler+0x198>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8021cf2:	4b4f      	ldr	r3, [pc, #316]	; (8021e30 <StartInputHandler+0x2bc>)
 8021cf4:	881b      	ldrh	r3, [r3, #0]
 8021cf6:	461a      	mov	r2, r3
 8021cf8:	4b4e      	ldr	r3, [pc, #312]	; (8021e34 <StartInputHandler+0x2c0>)
 8021cfa:	881b      	ldrh	r3, [r3, #0]
 8021cfc:	4619      	mov	r1, r3
 8021cfe:	4b4e      	ldr	r3, [pc, #312]	; (8021e38 <StartInputHandler+0x2c4>)
 8021d00:	881b      	ldrh	r3, [r3, #0]
 8021d02:	440b      	add	r3, r1
 8021d04:	429a      	cmp	r2, r3
 8021d06:	da01      	bge.n	8021d0c <StartInputHandler+0x198>
        )
    {

        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 8021d08:	231d      	movs	r3, #29
 8021d0a:	e2d8      	b.n	80222be <StartInputHandler+0x74a>
        --- Check configured synchronisation ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read register 0x981 (corresponding masks are adapted)*/
    HW_EscReadByte(dcControl, ESC_DC_SYNC_ACTIVATION_OFFSET);
 8021d0c:	4b50      	ldr	r3, [pc, #320]	; (8021e50 <StartInputHandler+0x2dc>)
 8021d0e:	781b      	ldrb	r3, [r3, #0]
 8021d10:	75fb      	strb	r3, [r7, #23]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 8021d12:	4b50      	ldr	r3, [pc, #320]	; (8021e54 <StartInputHandler+0x2e0>)
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	627b      	str	r3, [r7, #36]	; 0x24
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);

    // Cycle time for Sync1
        HW_EscReadDWord(shiftTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 8021d18:	4b4f      	ldr	r3, [pc, #316]	; (8021e58 <StartInputHandler+0x2e4>)
 8021d1a:	681b      	ldr	r3, [r3, #0]
 8021d1c:	623b      	str	r3, [r7, #32]
        shiftTimeSync1 = SWAPDWORD(shiftTimeSync1);


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 8021d1e:	4b40      	ldr	r3, [pc, #256]	; (8021e20 <StartInputHandler+0x2ac>)
 8021d20:	885b      	ldrh	r3, [r3, #2]
 8021d22:	863b      	strh	r3, [r7, #48]	; 0x30
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 8021d24:	4b3f      	ldr	r3, [pc, #252]	; (8021e24 <StartInputHandler+0x2b0>)
 8021d26:	885b      	ldrh	r3, [r3, #2]
 8021d28:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 8021d2a:	7dfb      	ldrb	r3, [r7, #23]
 8021d2c:	f003 0309 	and.w	r3, r3, #9
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	d05c      	beq.n	8021dee <StartInputHandler+0x27a>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 8021d34:	7dfb      	ldrb	r3, [r7, #23]
 8021d36:	f003 0306 	and.w	r3, r3, #6
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	d101      	bne.n	8021d42 <StartInputHandler+0x1ce>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021d3e:	2330      	movs	r3, #48	; 0x30
 8021d40:	e2bd      	b.n	80222be <StartInputHandler+0x74a>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8021d42:	7dfb      	ldrb	r3, [r7, #23]
 8021d44:	f003 0302 	and.w	r3, r3, #2
 8021d48:	2b00      	cmp	r3, #0
 8021d4a:	d106      	bne.n	8021d5a <StartInputHandler+0x1e6>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8021d4c:	7dfb      	ldrb	r3, [r7, #23]
 8021d4e:	f003 0304 	and.w	r3, r3, #4
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d001      	beq.n	8021d5a <StartInputHandler+0x1e6>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021d56:	2330      	movs	r3, #48	; 0x30
 8021d58:	e2b1      	b.n	80222be <StartInputHandler+0x74a>
        }

        if(u16MinSuppSyncType != 0)
 8021d5a:	8bfb      	ldrh	r3, [r7, #30]
 8021d5c:	2b00      	cmp	r3, #0
 8021d5e:	d015      	beq.n	8021d8c <StartInputHandler+0x218>
        {
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 8021d60:	8bfb      	ldrh	r3, [r7, #30]
 8021d62:	f003 0304 	and.w	r3, r3, #4
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	d104      	bne.n	8021d74 <StartInputHandler+0x200>
 8021d6a:	7dfb      	ldrb	r3, [r7, #23]
 8021d6c:	f003 0302 	and.w	r3, r3, #2
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d109      	bne.n	8021d88 <StartInputHandler+0x214>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8021d74:	8bfb      	ldrh	r3, [r7, #30]
 8021d76:	f003 0308 	and.w	r3, r3, #8
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d106      	bne.n	8021d8c <StartInputHandler+0x218>
 8021d7e:	7dfb      	ldrb	r3, [r7, #23]
 8021d80:	f003 0304 	and.w	r3, r3, #4
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	d001      	beq.n	8021d8c <StartInputHandler+0x218>
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8021d88:	2330      	movs	r3, #48	; 0x30
 8021d8a:	e298      	b.n	80222be <StartInputHandler+0x74a>
    }
        }

        {
/*ECATCHANGE_START(V5.12) ECAT1*/
            UINT32 curMinCycleTime = MIN_PD_CYCLE_TIME;
 8021d8c:	4b33      	ldr	r3, [pc, #204]	; (8021e5c <StartInputHandler+0x2e8>)
 8021d8e:	613b      	str	r3, [r7, #16]
            curMinCycleTime = sSyncManOutPar.u32MinCycleTime;
 8021d90:	4b23      	ldr	r3, [pc, #140]	; (8021e20 <StartInputHandler+0x2ac>)
 8021d92:	691b      	ldr	r3, [r3, #16]
 8021d94:	613b      	str	r3, [r7, #16]

            /*Check if Sync0 cycle time is supported*/
            if (cycleTimeSync0 != 0 && (cycleTimeSync0 < curMinCycleTime || cycleTimeSync0 > MAX_PD_CYCLE_TIME))
 8021d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	d009      	beq.n	8021db0 <StartInputHandler+0x23c>
 8021d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d9e:	693b      	ldr	r3, [r7, #16]
 8021da0:	429a      	cmp	r2, r3
 8021da2:	d303      	bcc.n	8021dac <StartInputHandler+0x238>
 8021da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021da6:	4a2e      	ldr	r2, [pc, #184]	; (8021e60 <StartInputHandler+0x2ec>)
 8021da8:	4293      	cmp	r3, r2
 8021daa:	d901      	bls.n	8021db0 <StartInputHandler+0x23c>
            {
                    return ALSTATUSCODE_DCSYNC0CYCLETIME;
 8021dac:	2336      	movs	r3, #54	; 0x36
 8021dae:	e286      	b.n	80222be <StartInputHandler+0x74a>
/*ECATCHANGE_END(V5.12) ECAT1*/
        }


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8021db0:	7dfb      	ldrb	r3, [r7, #23]
 8021db2:	f003 0302 	and.w	r3, r3, #2
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d00e      	beq.n	8021dd8 <StartInputHandler+0x264>
 8021dba:	7dfb      	ldrb	r3, [r7, #23]
 8021dbc:	f003 0304 	and.w	r3, r3, #4
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d009      	beq.n	8021dd8 <StartInputHandler+0x264>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
            if((shiftTimeSync1 > 0) && (shiftTimeSync1 >= cycleTimeSync0))
 8021dc4:	6a3b      	ldr	r3, [r7, #32]
 8021dc6:	2b00      	cmp	r3, #0
 8021dc8:	d006      	beq.n	8021dd8 <StartInputHandler+0x264>
 8021dca:	6a3a      	ldr	r2, [r7, #32]
 8021dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dce:	429a      	cmp	r2, r3
 8021dd0:	d302      	bcc.n	8021dd8 <StartInputHandler+0x264>
            {
                bSubordinatedCycles = TRUE;
 8021dd2:	2301      	movs	r3, #1
 8021dd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 8021dd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	d006      	beq.n	8021dee <StartInputHandler+0x27a>
 8021de0:	8bfb      	ldrh	r3, [r7, #30]
 8021de2:	f003 0310 	and.w	r3, r3, #16
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d101      	bne.n	8021dee <StartInputHandler+0x27a>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021dea:	2330      	movs	r3, #48	; 0x30
 8021dec:	e267      	b.n	80222be <StartInputHandler+0x74a>


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 8021dee:	4b1d      	ldr	r3, [pc, #116]	; (8021e64 <StartInputHandler+0x2f0>)
 8021df0:	781b      	ldrb	r3, [r3, #0]
 8021df2:	2b00      	cmp	r3, #0
 8021df4:	d052      	beq.n	8021e9c <StartInputHandler+0x328>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8021df6:	7dfb      	ldrb	r3, [r7, #23]
 8021df8:	f003 0309 	and.w	r3, r3, #9
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d133      	bne.n	8021e68 <StartInputHandler+0x2f4>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8021e00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021e02:	2b02      	cmp	r3, #2
 8021e04:	d009      	beq.n	8021e1a <StartInputHandler+0x2a6>
 8021e06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021e08:	2b03      	cmp	r3, #3
 8021e0a:	d006      	beq.n	8021e1a <StartInputHandler+0x2a6>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 8021e0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021e0e:	2b02      	cmp	r3, #2
 8021e10:	d003      	beq.n	8021e1a <StartInputHandler+0x2a6>
 8021e12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021e14:	2b03      	cmp	r3, #3
 8021e16:	f040 8085 	bne.w	8021f24 <StartInputHandler+0x3b0>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021e1a:	2330      	movs	r3, #48	; 0x30
 8021e1c:	e24f      	b.n	80222be <StartInputHandler+0x74a>
 8021e1e:	bf00      	nop
 8021e20:	1fff2838 	.word	0x1fff2838
 8021e24:	1fff27f4 	.word	0x1fff27f4
 8021e28:	1fff2732 	.word	0x1fff2732
 8021e2c:	1fff274c 	.word	0x1fff274c
 8021e30:	1fff2726 	.word	0x1fff2726
 8021e34:	1fff275e 	.word	0x1fff275e
 8021e38:	1fff2746 	.word	0x1fff2746
 8021e3c:	1fff27e2 	.word	0x1fff27e2
 8021e40:	1fff27d8 	.word	0x1fff27d8
 8021e44:	1fff27d0 	.word	0x1fff27d0
 8021e48:	1fff27ea 	.word	0x1fff27ea
 8021e4c:	1fff271a 	.word	0x1fff271a
 8021e50:	54010981 	.word	0x54010981
 8021e54:	540109a0 	.word	0x540109a0
 8021e58:	540109a4 	.word	0x540109a4
 8021e5c:	0001e848 	.word	0x0001e848
 8021e60:	c3500000 	.word	0xc3500000
 8021e64:	1fff287c 	.word	0x1fff287c
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 8021e68:	7dfb      	ldrb	r3, [r7, #23]
 8021e6a:	f003 0304 	and.w	r3, r3, #4
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d107      	bne.n	8021e82 <StartInputHandler+0x30e>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 8021e72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021e74:	2b03      	cmp	r3, #3
 8021e76:	d002      	beq.n	8021e7e <StartInputHandler+0x30a>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 8021e78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021e7a:	2b03      	cmp	r3, #3
 8021e7c:	d101      	bne.n	8021e82 <StartInputHandler+0x30e>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021e7e:	2330      	movs	r3, #48	; 0x30
 8021e80:	e21d      	b.n	80222be <StartInputHandler+0x74a>
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8021e82:	7dfb      	ldrb	r3, [r7, #23]
 8021e84:	f003 0302 	and.w	r3, r3, #2
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d14b      	bne.n	8021f24 <StartInputHandler+0x3b0>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 8021e8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021e8e:	2b02      	cmp	r3, #2
 8021e90:	d002      	beq.n	8021e98 <StartInputHandler+0x324>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8021e92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021e94:	2b02      	cmp	r3, #2
 8021e96:	d145      	bne.n	8021f24 <StartInputHandler+0x3b0>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8021e98:	2330      	movs	r3, #48	; 0x30
 8021e9a:	e210      	b.n	80222be <StartInputHandler+0x74a>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8021e9c:	7dfb      	ldrb	r3, [r7, #23]
 8021e9e:	f003 0309 	and.w	r3, r3, #9
 8021ea2:	2b00      	cmp	r3, #0
 8021ea4:	d11d      	bne.n	8021ee2 <StartInputHandler+0x36e>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8021ea6:	4b95      	ldr	r3, [pc, #596]	; (80220fc <StartInputHandler+0x588>)
 8021ea8:	881b      	ldrh	r3, [r3, #0]
 8021eaa:	2b00      	cmp	r3, #0
 8021eac:	d00b      	beq.n	8021ec6 <StartInputHandler+0x352>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 8021eae:	2301      	movs	r3, #1
 8021eb0:	863b      	strh	r3, [r7, #48]	; 0x30
                
                if (nPdInputSize > 0)
 8021eb2:	4b93      	ldr	r3, [pc, #588]	; (8022100 <StartInputHandler+0x58c>)
 8021eb4:	881b      	ldrh	r3, [r3, #0]
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d002      	beq.n	8021ec0 <StartInputHandler+0x34c>
                {
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 8021eba:	2322      	movs	r3, #34	; 0x22
 8021ebc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8021ebe:	e031      	b.n	8021f24 <StartInputHandler+0x3b0>
                }
                else
                {
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 8021ec0:	2300      	movs	r3, #0
 8021ec2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8021ec4:	e02e      	b.n	8021f24 <StartInputHandler+0x3b0>
                }
            }
            else if (nPdInputSize > 0)
 8021ec6:	4b8e      	ldr	r3, [pc, #568]	; (8022100 <StartInputHandler+0x58c>)
 8021ec8:	881b      	ldrh	r3, [r3, #0]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d004      	beq.n	8021ed8 <StartInputHandler+0x364>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8021ece:	2300      	movs	r3, #0
 8021ed0:	863b      	strh	r3, [r7, #48]	; 0x30
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 8021ed2:	2301      	movs	r3, #1
 8021ed4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8021ed6:	e025      	b.n	8021f24 <StartInputHandler+0x3b0>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8021ed8:	2300      	movs	r3, #0
 8021eda:	863b      	strh	r3, [r7, #48]	; 0x30
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8021edc:	2300      	movs	r3, #0
 8021ede:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8021ee0:	e020      	b.n	8021f24 <StartInputHandler+0x3b0>
            }

        }
        else
        {
            if (nPdOutputSize > 0)
 8021ee2:	4b86      	ldr	r3, [pc, #536]	; (80220fc <StartInputHandler+0x588>)
 8021ee4:	881b      	ldrh	r3, [r3, #0]
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d009      	beq.n	8021efe <StartInputHandler+0x38a>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 8021eea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	d002      	beq.n	8021ef8 <StartInputHandler+0x384>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 8021ef2:	2303      	movs	r3, #3
 8021ef4:	863b      	strh	r3, [r7, #48]	; 0x30
 8021ef6:	e004      	b.n	8021f02 <StartInputHandler+0x38e>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 8021ef8:	2302      	movs	r3, #2
 8021efa:	863b      	strh	r3, [r7, #48]	; 0x30
 8021efc:	e001      	b.n	8021f02 <StartInputHandler+0x38e>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8021efe:	2300      	movs	r3, #0
 8021f00:	863b      	strh	r3, [r7, #48]	; 0x30
            }


            if (nPdInputSize > 0)
 8021f02:	4b7f      	ldr	r3, [pc, #508]	; (8022100 <StartInputHandler+0x58c>)
 8021f04:	881b      	ldrh	r3, [r3, #0]
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d00a      	beq.n	8021f20 <StartInputHandler+0x3ac>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 8021f0a:	7dfb      	ldrb	r3, [r7, #23]
 8021f0c:	f003 0304 	and.w	r3, r3, #4
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	d002      	beq.n	8021f1a <StartInputHandler+0x3a6>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 8021f14:	2303      	movs	r3, #3
 8021f16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8021f18:	e004      	b.n	8021f24 <StartInputHandler+0x3b0>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 8021f1a:	2302      	movs	r3, #2
 8021f1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8021f1e:	e001      	b.n	8021f24 <StartInputHandler+0x3b0>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8021f20:	2300      	movs	r3, #0
 8021f22:	85fb      	strh	r3, [r7, #46]	; 0x2e
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8021f24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021f26:	2b03      	cmp	r3, #3
 8021f28:	d10c      	bne.n	8021f44 <StartInputHandler+0x3d0>
    {
/*ECATCHANGE_START(V5.12) ECAT1*/
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8021f2a:	4a76      	ldr	r2, [pc, #472]	; (8022104 <StartInputHandler+0x590>)
 8021f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f2e:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 8021f30:	4a74      	ldr	r2, [pc, #464]	; (8022104 <StartInputHandler+0x590>)
 8021f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f34:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8021f36:	4a74      	ldr	r2, [pc, #464]	; (8022108 <StartInputHandler+0x594>)
 8021f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f3a:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 8021f3c:	4a72      	ldr	r2, [pc, #456]	; (8022108 <StartInputHandler+0x594>)
 8021f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f40:	6053      	str	r3, [r2, #4]
 8021f42:	e00e      	b.n	8021f62 <StartInputHandler+0x3ee>
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8021f44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021f46:	2b02      	cmp	r3, #2
 8021f48:	d10b      	bne.n	8021f62 <StartInputHandler+0x3ee>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8021f4a:	4a6e      	ldr	r2, [pc, #440]	; (8022104 <StartInputHandler+0x590>)
 8021f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f4e:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 8021f50:	4a6c      	ldr	r2, [pc, #432]	; (8022104 <StartInputHandler+0x590>)
 8021f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f54:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8021f56:	4a6c      	ldr	r2, [pc, #432]	; (8022108 <StartInputHandler+0x594>)
 8021f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f5a:	6253      	str	r3, [r2, #36]	; 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 8021f5c:	4a6a      	ldr	r2, [pc, #424]	; (8022108 <StartInputHandler+0x594>)
 8021f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f60:	6053      	str	r3, [r2, #4]
/*ECATCHANGE_END(V5.12) ECAT1*/
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 8021f62:	4b6a      	ldr	r3, [pc, #424]	; (802210c <StartInputHandler+0x598>)
 8021f64:	781b      	ldrb	r3, [r3, #0]
 8021f66:	f083 0301 	eor.w	r3, r3, #1
 8021f6a:	b2db      	uxtb	r3, r3
 8021f6c:	2b00      	cmp	r3, #0
 8021f6e:	d007      	beq.n	8021f80 <StartInputHandler+0x40c>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 8021f70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021f72:	2b00      	cmp	r3, #0
 8021f74:	d002      	beq.n	8021f7c <StartInputHandler+0x408>
 8021f76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d101      	bne.n	8021f80 <StartInputHandler+0x40c>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 8021f7c:	2329      	movs	r3, #41	; 0x29
 8021f7e:	e19e      	b.n	80222be <StartInputHandler+0x74a>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 8021f80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d102      	bne.n	8021f8c <StartInputHandler+0x418>
 8021f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021f88:	2b00      	cmp	r3, #0
 8021f8a:	d002      	beq.n	8021f92 <StartInputHandler+0x41e>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 8021f8c:	4b60      	ldr	r3, [pc, #384]	; (8022110 <StartInputHandler+0x59c>)
 8021f8e:	2201      	movs	r2, #1
 8021f90:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 8021f92:	4b5f      	ldr	r3, [pc, #380]	; (8022110 <StartInputHandler+0x59c>)
 8021f94:	781b      	ldrb	r3, [r3, #0]
 8021f96:	2b00      	cmp	r3, #0
 8021f98:	d010      	beq.n	8021fbc <StartInputHandler+0x448>
        {
            if(nPdOutputSize > 0)
 8021f9a:	4b58      	ldr	r3, [pc, #352]	; (80220fc <StartInputHandler+0x588>)
 8021f9c:	881b      	ldrh	r3, [r3, #0]
 8021f9e:	2b00      	cmp	r3, #0
 8021fa0:	d004      	beq.n	8021fac <StartInputHandler+0x438>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 8021fa2:	4b5c      	ldr	r3, [pc, #368]	; (8022114 <StartInputHandler+0x5a0>)
 8021fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021fa8:	801a      	strh	r2, [r3, #0]
 8021faa:	e007      	b.n	8021fbc <StartInputHandler+0x448>
            }
            else if(nPdInputSize > 0)
 8021fac:	4b54      	ldr	r3, [pc, #336]	; (8022100 <StartInputHandler+0x58c>)
 8021fae:	881b      	ldrh	r3, [r3, #0]
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	d003      	beq.n	8021fbc <StartInputHandler+0x448>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8021fb4:	4b57      	ldr	r3, [pc, #348]	; (8022114 <StartInputHandler+0x5a0>)
 8021fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021fba:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8021fbc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021fbe:	2b02      	cmp	r3, #2
 8021fc0:	d008      	beq.n	8021fd4 <StartInputHandler+0x460>
 8021fc2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021fc4:	2b03      	cmp	r3, #3
 8021fc6:	d005      	beq.n	8021fd4 <StartInputHandler+0x460>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8021fc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021fca:	2b02      	cmp	r3, #2
 8021fcc:	d002      	beq.n	8021fd4 <StartInputHandler+0x460>
 8021fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021fd0:	2b03      	cmp	r3, #3
 8021fd2:	d109      	bne.n	8021fe8 <StartInputHandler+0x474>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 8021fd4:	4b50      	ldr	r3, [pc, #320]	; (8022118 <StartInputHandler+0x5a4>)
 8021fd6:	2201      	movs	r2, #1
 8021fd8:	701a      	strb	r2, [r3, #0]

            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 8021fda:	4b48      	ldr	r3, [pc, #288]	; (80220fc <StartInputHandler+0x588>)
 8021fdc:	881b      	ldrh	r3, [r3, #0]
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d102      	bne.n	8021fe8 <StartInputHandler+0x474>
            {
               u16ALEventMask = 0;
 8021fe2:	4b4c      	ldr	r3, [pc, #304]	; (8022114 <StartInputHandler+0x5a0>)
 8021fe4:	2200      	movs	r2, #0
 8021fe6:	801a      	strh	r2, [r3, #0]
            }
        }

    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 8021fe8:	4a46      	ldr	r2, [pc, #280]	; (8022104 <StartInputHandler+0x590>)
 8021fea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021fec:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 8021fee:	4a46      	ldr	r2, [pc, #280]	; (8022108 <StartInputHandler+0x594>)
 8021ff0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021ff2:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 8021ff4:	4b49      	ldr	r3, [pc, #292]	; (802211c <StartInputHandler+0x5a8>)
 8021ff6:	2200      	movs	r2, #0
 8021ff8:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8021ffa:	4b49      	ldr	r3, [pc, #292]	; (8022120 <StartInputHandler+0x5ac>)
 8021ffc:	2200      	movs	r2, #0
 8021ffe:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 8022000:	4b48      	ldr	r3, [pc, #288]	; (8022124 <StartInputHandler+0x5b0>)
 8022002:	2200      	movs	r2, #0
 8022004:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8022006:	4b48      	ldr	r3, [pc, #288]	; (8022128 <StartInputHandler+0x5b4>)
 8022008:	2200      	movs	r2, #0
 802200a:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 802200c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8022010:	2b00      	cmp	r3, #0
 8022012:	d03b      	beq.n	802208c <StartInputHandler+0x518>
    {
/*ECATCHANGE_START(V5.12) ECAT4*/
        UINT32 cycleTimeSync1 = (shiftTimeSync1 + cycleTimeSync0);
 8022014:	6a3a      	ldr	r2, [r7, #32]
 8022016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022018:	4413      	add	r3, r2
 802201a:	60fb      	str	r3, [r7, #12]
/*ECATCHANGE_END(V5.12) ECAT4*/

        /* get the number of Sync0 event within on SM cycle */
        if(shiftTimeSync1 >= cycleTimeSync0)
 802201c:	6a3a      	ldr	r2, [r7, #32]
 802201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022020:	429a      	cmp	r2, r3
 8022022:	d317      	bcc.n	8022054 <StartInputHandler+0x4e0>
        {

            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 8022024:	68fa      	ldr	r2, [r7, #12]
 8022026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022028:	fbb2 f3f3 	udiv	r3, r2, r3
 802202c:	b29a      	uxth	r2, r3
 802202e:	4b3d      	ldr	r3, [pc, #244]	; (8022124 <StartInputHandler+0x5b0>)
 8022030:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022036:	fbb3 f2f2 	udiv	r2, r3, r2
 802203a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802203c:	fb01 f202 	mul.w	r2, r1, r2
 8022040:	1a9b      	subs	r3, r3, r2
 8022042:	2b00      	cmp	r3, #0
 8022044:	d109      	bne.n	802205a <StartInputHandler+0x4e6>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 8022046:	4b37      	ldr	r3, [pc, #220]	; (8022124 <StartInputHandler+0x5b0>)
 8022048:	881b      	ldrh	r3, [r3, #0]
 802204a:	3301      	adds	r3, #1
 802204c:	b29a      	uxth	r2, r3
 802204e:	4b35      	ldr	r3, [pc, #212]	; (8022124 <StartInputHandler+0x5b0>)
 8022050:	801a      	strh	r2, [r3, #0]
 8022052:	e002      	b.n	802205a <StartInputHandler+0x4e6>
            }
        }
        else
        {
            u16SmSync0Value = 1;
 8022054:	4b33      	ldr	r3, [pc, #204]	; (8022124 <StartInputHandler+0x5b0>)
 8022056:	2201      	movs	r2, #1
 8022058:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 802205a:	68fa      	ldr	r2, [r7, #12]
 802205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8022062:	b29a      	uxth	r2, r3
 8022064:	4b2d      	ldr	r3, [pc, #180]	; (802211c <StartInputHandler+0x5a8>)
 8022066:	801a      	strh	r2, [r3, #0]

        if ((cycleTimeSync1 % cycleTimeSync0) > 0)
 8022068:	68fb      	ldr	r3, [r7, #12]
 802206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802206c:	fbb3 f2f2 	udiv	r2, r3, r2
 8022070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022072:	fb01 f202 	mul.w	r2, r1, r2
 8022076:	1a9b      	subs	r3, r3, r2
 8022078:	2b00      	cmp	r3, #0
 802207a:	d006      	beq.n	802208a <StartInputHandler+0x516>
        {
            LatchInputSync0Value++;
 802207c:	4b27      	ldr	r3, [pc, #156]	; (802211c <StartInputHandler+0x5a8>)
 802207e:	881b      	ldrh	r3, [r3, #0]
 8022080:	3301      	adds	r3, #1
 8022082:	b29a      	uxth	r2, r3
 8022084:	4b25      	ldr	r3, [pc, #148]	; (802211c <StartInputHandler+0x5a8>)
 8022086:	801a      	strh	r2, [r3, #0]
 8022088:	e00c      	b.n	80220a4 <StartInputHandler+0x530>
 802208a:	e00b      	b.n	80220a4 <StartInputHandler+0x530>
        }

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 802208c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802208e:	2b02      	cmp	r3, #2
 8022090:	d102      	bne.n	8022098 <StartInputHandler+0x524>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 8022092:	4b24      	ldr	r3, [pc, #144]	; (8022124 <StartInputHandler+0x5b0>)
 8022094:	2201      	movs	r2, #1
 8022096:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8022098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802209a:	2b03      	cmp	r3, #3
 802209c:	d002      	beq.n	80220a4 <StartInputHandler+0x530>
        {
            LatchInputSync0Value = 1;
 802209e:	4b1f      	ldr	r3, [pc, #124]	; (802211c <StartInputHandler+0x5a8>)
 80220a0:	2201      	movs	r2, #1
 80220a2:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 80220a4:	4b21      	ldr	r3, [pc, #132]	; (802212c <StartInputHandler+0x5b8>)
 80220a6:	2200      	movs	r2, #0
 80220a8:	801a      	strh	r2, [r3, #0]
    /*
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 80220aa:	4b21      	ldr	r3, [pc, #132]	; (8022130 <StartInputHandler+0x5bc>)
 80220ac:	881b      	ldrh	r3, [r3, #0]
 80220ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    wd = SWAPWORD(wd);

    if (nPdOutputSize > 0 &&  wd != 0 )
 80220b0:	4b12      	ldr	r3, [pc, #72]	; (80220fc <StartInputHandler+0x588>)
 80220b2:	881b      	ldrh	r3, [r3, #0]
 80220b4:	2b00      	cmp	r3, #0
 80220b6:	d049      	beq.n	802214c <StartInputHandler+0x5d8>
 80220b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80220ba:	2b00      	cmp	r3, #0
 80220bc:	d046      	beq.n	802214c <StartInputHandler+0x5d8>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 80220be:	4b1d      	ldr	r3, [pc, #116]	; (8022134 <StartInputHandler+0x5c0>)
 80220c0:	881b      	ldrh	r3, [r3, #0]
 80220c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 80220c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80220c6:	2b00      	cmp	r3, #0
 80220c8:	d03a      	beq.n	8022140 <StartInputHandler+0x5cc>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 80220ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80220cc:	3302      	adds	r3, #2
 80220ce:	60bb      	str	r3, [r7, #8]


            d *= wd;
 80220d0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80220d2:	68bb      	ldr	r3, [r7, #8]
 80220d4:	fb02 f303 	mul.w	r3, r2, r3
 80220d8:	60bb      	str	r3, [r7, #8]
            /* store watchdog in ms in variable u16WdValue */
            /* watchdog value has to be rounded up */
            d += 24999;
 80220da:	68bb      	ldr	r3, [r7, #8]
 80220dc:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80220e0:	3327      	adds	r3, #39	; 0x27
 80220e2:	60bb      	str	r3, [r7, #8]
            d /= 25000;
 80220e4:	68bb      	ldr	r3, [r7, #8]
 80220e6:	08db      	lsrs	r3, r3, #3
 80220e8:	4a13      	ldr	r2, [pc, #76]	; (8022138 <StartInputHandler+0x5c4>)
 80220ea:	fba2 2303 	umull	r2, r3, r2, r3
 80220ee:	0a1b      	lsrs	r3, r3, #8
 80220f0:	60bb      	str	r3, [r7, #8]
            EcatWdValue = (UINT16) d;
 80220f2:	68bb      	ldr	r3, [r7, #8]
 80220f4:	b29a      	uxth	r2, r3
 80220f6:	4b11      	ldr	r3, [pc, #68]	; (802213c <StartInputHandler+0x5c8>)
 80220f8:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 80220fa:	e02c      	b.n	8022156 <StartInputHandler+0x5e2>
 80220fc:	1fff271a 	.word	0x1fff271a
 8022100:	1fff2746 	.word	0x1fff2746
 8022104:	1fff2838 	.word	0x1fff2838
 8022108:	1fff27f4 	.word	0x1fff27f4
 802210c:	1fff2714 	.word	0x1fff2714
 8022110:	1fff2757 	.word	0x1fff2757
 8022114:	1fff2732 	.word	0x1fff2732
 8022118:	1fff2750 	.word	0x1fff2750
 802211c:	1fff2742 	.word	0x1fff2742
 8022120:	1fff2722 	.word	0x1fff2722
 8022124:	1fff2748 	.word	0x1fff2748
 8022128:	1fff275a 	.word	0x1fff275a
 802212c:	1fff2880 	.word	0x1fff2880
 8022130:	54010420 	.word	0x54010420
 8022134:	54010400 	.word	0x54010400
 8022138:	14f8b589 	.word	0x14f8b589
 802213c:	1fff2754 	.word	0x1fff2754
            d /= 25000;
            EcatWdValue = (UINT16) d;
        }
        else
        {
            wd = 0;
 8022140:	2300      	movs	r3, #0
 8022142:	857b      	strh	r3, [r7, #42]	; 0x2a
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 8022144:	4b60      	ldr	r3, [pc, #384]	; (80222c8 <StartInputHandler+0x754>)
 8022146:	2200      	movs	r2, #0
 8022148:	801a      	strh	r2, [r3, #0]
    if (nPdOutputSize > 0 &&  wd != 0 )
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
    wdiv = SWAPWORD(wdiv);
        if ( wdiv != 0 )
 802214a:	e004      	b.n	8022156 <StartInputHandler+0x5e2>
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 802214c:	2300      	movs	r3, #0
 802214e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        EcatWdValue = 0;
 8022150:	4b5d      	ldr	r3, [pc, #372]	; (80222c8 <StartInputHandler+0x754>)
 8022152:	2200      	movs	r2, #0
 8022154:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 8022156:	4b5c      	ldr	r3, [pc, #368]	; (80222c8 <StartInputHandler+0x754>)
 8022158:	881b      	ldrh	r3, [r3, #0]
 802215a:	2b00      	cmp	r3, #0
 802215c:	d103      	bne.n	8022166 <StartInputHandler+0x5f2>
 802215e:	4b5b      	ldr	r3, [pc, #364]	; (80222cc <StartInputHandler+0x758>)
 8022160:	781b      	ldrb	r3, [r3, #0]
 8022162:	2b00      	cmp	r3, #0
 8022164:	d10a      	bne.n	802217c <StartInputHandler+0x608>
 8022166:	4b58      	ldr	r3, [pc, #352]	; (80222c8 <StartInputHandler+0x754>)
 8022168:	881b      	ldrh	r3, [r3, #0]
 802216a:	2b00      	cmp	r3, #0
 802216c:	d008      	beq.n	8022180 <StartInputHandler+0x60c>
 802216e:	4b57      	ldr	r3, [pc, #348]	; (80222cc <StartInputHandler+0x758>)
 8022170:	781b      	ldrb	r3, [r3, #0]
 8022172:	f083 0301 	eor.w	r3, r3, #1
 8022176:	b2db      	uxtb	r3, r3
 8022178:	2b00      	cmp	r3, #0
 802217a:	d001      	beq.n	8022180 <StartInputHandler+0x60c>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 802217c:	231f      	movs	r3, #31
 802217e:	e09e      	b.n	80222be <StartInputHandler+0x74a>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 8022180:	4b53      	ldr	r3, [pc, #332]	; (80222d0 <StartInputHandler+0x75c>)
 8022182:	781b      	ldrb	r3, [r3, #0]
 8022184:	2b00      	cmp	r3, #0
 8022186:	d00a      	beq.n	802219e <StartInputHandler+0x62a>
 8022188:	4b52      	ldr	r3, [pc, #328]	; (80222d4 <StartInputHandler+0x760>)
 802218a:	881b      	ldrh	r3, [r3, #0]
 802218c:	2b00      	cmp	r3, #0
 802218e:	d006      	beq.n	802219e <StartInputHandler+0x62a>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 8022190:	4b51      	ldr	r3, [pc, #324]	; (80222d8 <StartInputHandler+0x764>)
 8022192:	881b      	ldrh	r3, [r3, #0]
 8022194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022198:	b29a      	uxth	r2, r3
 802219a:	4b4f      	ldr	r3, [pc, #316]	; (80222d8 <StartInputHandler+0x764>)
 802219c:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 802219e:	4b4f      	ldr	r3, [pc, #316]	; (80222dc <StartInputHandler+0x768>)
 80221a0:	2200      	movs	r2, #0
 80221a2:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 80221a4:	4b4e      	ldr	r3, [pc, #312]	; (80222e0 <StartInputHandler+0x76c>)
 80221a6:	2200      	movs	r2, #0
 80221a8:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 80221aa:	4b4e      	ldr	r3, [pc, #312]	; (80222e4 <StartInputHandler+0x770>)
 80221ac:	2200      	movs	r2, #0
 80221ae:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 80221b0:	4b4d      	ldr	r3, [pc, #308]	; (80222e8 <StartInputHandler+0x774>)
 80221b2:	2200      	movs	r2, #0
 80221b4:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 80221b6:	4b4d      	ldr	r3, [pc, #308]	; (80222ec <StartInputHandler+0x778>)
 80221b8:	2200      	movs	r2, #0
 80221ba:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 80221bc:	4b4c      	ldr	r3, [pc, #304]	; (80222f0 <StartInputHandler+0x77c>)
 80221be:	2200      	movs	r2, #0
 80221c0:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 80221c2:	4b4c      	ldr	r3, [pc, #304]	; (80222f4 <StartInputHandler+0x780>)
 80221c4:	2200      	movs	r2, #0
 80221c6:	801a      	strh	r2, [r3, #0]

/*ECATCHANGE_START(V5.12) ECAT5*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 80221c8:	4b4b      	ldr	r3, [pc, #300]	; (80222f8 <StartInputHandler+0x784>)
 80221ca:	2200      	movs	r2, #0
 80221cc:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 80221ce:	4b4a      	ldr	r3, [pc, #296]	; (80222f8 <StartInputHandler+0x784>)
 80221d0:	2200      	movs	r2, #0
 80221d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManInPar.u8SyncError = 0;
 80221d4:	4b48      	ldr	r3, [pc, #288]	; (80222f8 <StartInputHandler+0x784>)
 80221d6:	2200      	movs	r2, #0
 80221d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


    sSyncManOutPar.u16SmEventMissedCounter = 0;
 80221dc:	4b47      	ldr	r3, [pc, #284]	; (80222fc <StartInputHandler+0x788>)
 80221de:	2200      	movs	r2, #0
 80221e0:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 80221e2:	4b46      	ldr	r3, [pc, #280]	; (80222fc <StartInputHandler+0x788>)
 80221e4:	2200      	movs	r2, #0
 80221e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManOutPar.u8SyncError = 0;
 80221e8:	4b44      	ldr	r3, [pc, #272]	; (80222fc <StartInputHandler+0x788>)
 80221ea:	2200      	movs	r2, #0
 80221ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.12) ECAT5*/

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 80221f0:	7dfb      	ldrb	r3, [r7, #23]
 80221f2:	f003 0302 	and.w	r3, r3, #2
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d050      	beq.n	802229c <StartInputHandler+0x728>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 80221fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221fc:	2b00      	cmp	r3, #0
 80221fe:	d103      	bne.n	8022208 <StartInputHandler+0x694>
        {
            Sync0WdValue = 0;
 8022200:	4b36      	ldr	r3, [pc, #216]	; (80222dc <StartInputHandler+0x768>)
 8022202:	2200      	movs	r2, #0
 8022204:	801a      	strh	r2, [r3, #0]
 8022206:	e018      	b.n	802223a <StartInputHandler+0x6c6>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 8022208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802220a:	095b      	lsrs	r3, r3, #5
 802220c:	4a3c      	ldr	r2, [pc, #240]	; (8022300 <StartInputHandler+0x78c>)
 802220e:	fba2 2303 	umull	r2, r3, r2, r3
 8022212:	09db      	lsrs	r3, r3, #7
 8022214:	607b      	str	r3, [r7, #4]

            if(Sync0Cycle < 5)
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	2b04      	cmp	r3, #4
 802221a:	d803      	bhi.n	8022224 <StartInputHandler+0x6b0>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 802221c:	4b2f      	ldr	r3, [pc, #188]	; (80222dc <StartInputHandler+0x768>)
 802221e:	2201      	movs	r2, #1
 8022220:	801a      	strh	r2, [r3, #0]
 8022222:	e00a      	b.n	802223a <StartInputHandler+0x6c6>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	b29b      	uxth	r3, r3
 8022228:	005b      	lsls	r3, r3, #1
 802222a:	b29b      	uxth	r3, r3
 802222c:	4a35      	ldr	r2, [pc, #212]	; (8022304 <StartInputHandler+0x790>)
 802222e:	fba2 2303 	umull	r2, r3, r2, r3
 8022232:	08db      	lsrs	r3, r3, #3
 8022234:	b29a      	uxth	r2, r3
 8022236:	4b29      	ldr	r3, [pc, #164]	; (80222dc <StartInputHandler+0x768>)
 8022238:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 802223a:	7dfb      	ldrb	r3, [r7, #23]
 802223c:	f003 0304 	and.w	r3, r3, #4
 8022240:	2b00      	cmp	r3, #0
 8022242:	d02b      	beq.n	802229c <StartInputHandler+0x728>
        {
            if(shiftTimeSync1 < cycleTimeSync0)
 8022244:	6a3a      	ldr	r2, [r7, #32]
 8022246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022248:	429a      	cmp	r2, r3
 802224a:	d204      	bcs.n	8022256 <StartInputHandler+0x6e2>
        {
                /* Sync 1 has the same cycle time than Sync0 (maybe with a shift (shiftTimeSync1 > 0))*/
                Sync1WdValue = Sync0WdValue;
 802224c:	4b23      	ldr	r3, [pc, #140]	; (80222dc <StartInputHandler+0x768>)
 802224e:	881a      	ldrh	r2, [r3, #0]
 8022250:	4b25      	ldr	r3, [pc, #148]	; (80222e8 <StartInputHandler+0x774>)
 8022252:	801a      	strh	r2, [r3, #0]
 8022254:	e022      	b.n	802229c <StartInputHandler+0x728>
        }
        else
        {
                /* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
/*ECATCHANGE_START(V5.12) ECAT4*/
                UINT32 Sync1Cycle = (shiftTimeSync1  + cycleTimeSync0 )/100000;
 8022256:	6a3a      	ldr	r2, [r7, #32]
 8022258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802225a:	4413      	add	r3, r2
 802225c:	095b      	lsrs	r3, r3, #5
 802225e:	4a28      	ldr	r2, [pc, #160]	; (8022300 <StartInputHandler+0x78c>)
 8022260:	fba2 2303 	umull	r2, r3, r2, r3
 8022264:	09db      	lsrs	r3, r3, #7
 8022266:	603b      	str	r3, [r7, #0]
/*ECATCHANGE_END(V5.12) ECAT4*/
                if(Sync1Cycle < 5)
 8022268:	683b      	ldr	r3, [r7, #0]
 802226a:	2b04      	cmp	r3, #4
 802226c:	d803      	bhi.n	8022276 <StartInputHandler+0x702>
                {
                    /*Sync0 cycle less than 500us*/
                    Sync1WdValue = 1;
 802226e:	4b1e      	ldr	r3, [pc, #120]	; (80222e8 <StartInputHandler+0x774>)
 8022270:	2201      	movs	r2, #1
 8022272:	801a      	strh	r2, [r3, #0]
 8022274:	e008      	b.n	8022288 <StartInputHandler+0x714>
                }
                else
                {
                    /*ECATCHANGE_START(V5.12)*/
                    Sync1WdValue = (UINT16)((Sync1Cycle*2)/10);
 8022276:	683b      	ldr	r3, [r7, #0]
 8022278:	005b      	lsls	r3, r3, #1
 802227a:	4a22      	ldr	r2, [pc, #136]	; (8022304 <StartInputHandler+0x790>)
 802227c:	fba2 2303 	umull	r2, r3, r2, r3
 8022280:	08db      	lsrs	r3, r3, #3
 8022282:	b29a      	uxth	r2, r3
 8022284:	4b18      	ldr	r3, [pc, #96]	; (80222e8 <StartInputHandler+0x774>)
 8022286:	801a      	strh	r2, [r3, #0]
                    /*ECATCHANGE_END(V5.12)*/
                }

                /* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
                Sync1WdValue += Sync0WdValue/2;
 8022288:	4b14      	ldr	r3, [pc, #80]	; (80222dc <StartInputHandler+0x768>)
 802228a:	881b      	ldrh	r3, [r3, #0]
 802228c:	085b      	lsrs	r3, r3, #1
 802228e:	b29a      	uxth	r2, r3
 8022290:	4b15      	ldr	r3, [pc, #84]	; (80222e8 <StartInputHandler+0x774>)
 8022292:	881b      	ldrh	r3, [r3, #0]
 8022294:	4413      	add	r3, r2
 8022296:	b29a      	uxth	r2, r3
 8022298:	4b13      	ldr	r3, [pc, #76]	; (80222e8 <StartInputHandler+0x774>)
 802229a:	801a      	strh	r2, [r3, #0]
            }
    }
    }

    if(nPdOutputSize > 0)
 802229c:	4b0d      	ldr	r3, [pc, #52]	; (80222d4 <StartInputHandler+0x760>)
 802229e:	881b      	ldrh	r3, [r3, #0]
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d002      	beq.n	80222aa <StartInputHandler+0x736>
    {
        EnableSyncManChannel(PROCESS_DATA_OUT);
 80222a4:	2002      	movs	r0, #2
 80222a6:	f7ff fa5d 	bl	8021764 <EnableSyncManChannel>
    }

    if(nPdInputSize > 0)
 80222aa:	4b17      	ldr	r3, [pc, #92]	; (8022308 <StartInputHandler+0x794>)
 80222ac:	881b      	ldrh	r3, [r3, #0]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d002      	beq.n	80222b8 <StartInputHandler+0x744>
    {
        EnableSyncManChannel(PROCESS_DATA_IN);
 80222b2:	2003      	movs	r0, #3
 80222b4:	f7ff fa56 	bl	8021764 <EnableSyncManChannel>
    }

    /*write initial input data*/
    PDO_InputMapping();
 80222b8:	f7fe fbb0 	bl	8020a1c <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 80222bc:	2300      	movs	r3, #0
}
 80222be:	4618      	mov	r0, r3
 80222c0:	3738      	adds	r7, #56	; 0x38
 80222c2:	46bd      	mov	sp, r7
 80222c4:	bd80      	pop	{r7, pc}
 80222c6:	bf00      	nop
 80222c8:	1fff2754 	.word	0x1fff2754
 80222cc:	1fff2758 	.word	0x1fff2758
 80222d0:	1fff2757 	.word	0x1fff2757
 80222d4:	1fff271a 	.word	0x1fff271a
 80222d8:	1fff2732 	.word	0x1fff2732
 80222dc:	1fff2728 	.word	0x1fff2728
 80222e0:	1fff271e 	.word	0x1fff271e
 80222e4:	1fff2752 	.word	0x1fff2752
 80222e8:	1fff272e 	.word	0x1fff272e
 80222ec:	1fff2734 	.word	0x1fff2734
 80222f0:	1fff274d 	.word	0x1fff274d
 80222f4:	1fff272c 	.word	0x1fff272c
 80222f8:	1fff27f4 	.word	0x1fff27f4
 80222fc:	1fff2838 	.word	0x1fff2838
 8022300:	0a7c5ac5 	.word	0x0a7c5ac5
 8022304:	cccccccd 	.word	0xcccccccd
 8022308:	1fff2746 	.word	0x1fff2746

0802230c <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 802230c:	b480      	push	{r7}
 802230e:	b083      	sub	sp, #12
 8022310:	af00      	add	r7, sp, #0
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 8022312:	23ff      	movs	r3, #255	; 0xff
 8022314:	80fb      	strh	r3, [r7, #6]
    if(bLocalErrorFlag)
 8022316:	4b13      	ldr	r3, [pc, #76]	; (8022364 <StartOutputHandler+0x58>)
 8022318:	781b      	ldrb	r3, [r3, #0]
 802231a:	2b00      	cmp	r3, #0
 802231c:	d002      	beq.n	8022324 <StartOutputHandler+0x18>
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 802231e:	4b12      	ldr	r3, [pc, #72]	; (8022368 <StartOutputHandler+0x5c>)
 8022320:	881b      	ldrh	r3, [r3, #0]
 8022322:	e018      	b.n	8022356 <StartOutputHandler+0x4a>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8022324:	4b11      	ldr	r3, [pc, #68]	; (802236c <StartOutputHandler+0x60>)
 8022326:	781b      	ldrb	r3, [r3, #0]
 8022328:	2b00      	cmp	r3, #0
 802232a:	d005      	beq.n	8022338 <StartOutputHandler+0x2c>
    {
        i16WaitForPllRunningTimeout = 200;
 802232c:	4b10      	ldr	r3, [pc, #64]	; (8022370 <StartOutputHandler+0x64>)
 802232e:	22c8      	movs	r2, #200	; 0xc8
 8022330:	801a      	strh	r2, [r3, #0]

        i16WaitForPllRunningCnt = 0;
 8022332:	4b10      	ldr	r3, [pc, #64]	; (8022374 <StartOutputHandler+0x68>)
 8022334:	2200      	movs	r2, #0
 8022336:	801a      	strh	r2, [r3, #0]
    }


/*ECATCHANGE_START(V5.12) ECAT5*/

    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8022338:	4b0f      	ldr	r3, [pc, #60]	; (8022378 <StartOutputHandler+0x6c>)
 802233a:	2200      	movs	r2, #0
 802233c:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManOutPar.u8SyncError = 0;
 802233e:	4b0e      	ldr	r3, [pc, #56]	; (8022378 <StartOutputHandler+0x6c>)
 8022340:	2200      	movs	r2, #0
 8022342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 8022346:	4b0d      	ldr	r3, [pc, #52]	; (802237c <StartOutputHandler+0x70>)
 8022348:	2200      	movs	r2, #0
 802234a:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManInPar.u8SyncError = 0;
 802234c:	4b0b      	ldr	r3, [pc, #44]	; (802237c <StartOutputHandler+0x70>)
 802234e:	2200      	movs	r2, #0
 8022350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/*ECATCHANGE_END(V5.12) ECAT5*/

    return result;
 8022354:	88fb      	ldrh	r3, [r7, #6]
}
 8022356:	4618      	mov	r0, r3
 8022358:	370c      	adds	r7, #12
 802235a:	46bd      	mov	sp, r7
 802235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022360:	4770      	bx	lr
 8022362:	bf00      	nop
 8022364:	1fff2720 	.word	0x1fff2720
 8022368:	1fff271c 	.word	0x1fff271c
 802236c:	1fff2750 	.word	0x1fff2750
 8022370:	1fff272c 	.word	0x1fff272c
 8022374:	1fff2724 	.word	0x1fff2724
 8022378:	1fff2838 	.word	0x1fff2838
 802237c:	1fff27f4 	.word	0x1fff27f4

08022380 <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 8022380:	b480      	push	{r7}
 8022382:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 8022384:	4b04      	ldr	r3, [pc, #16]	; (8022398 <StopOutputHandler+0x18>)
 8022386:	2200      	movs	r2, #0
 8022388:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 802238a:	4b04      	ldr	r3, [pc, #16]	; (802239c <StopOutputHandler+0x1c>)
 802238c:	2200      	movs	r2, #0
 802238e:	701a      	strb	r2, [r3, #0]
}
 8022390:	46bd      	mov	sp, r7
 8022392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022396:	4770      	bx	lr
 8022398:	1fff274c 	.word	0x1fff274c
 802239c:	1fff2751 	.word	0x1fff2751

080223a0 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 80223a0:	b580      	push	{r7, lr}
 80223a2:	b082      	sub	sp, #8
 80223a4:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 80223a6:	4b34      	ldr	r3, [pc, #208]	; (8022478 <StopInputHandler+0xd8>)
 80223a8:	881b      	ldrh	r3, [r3, #0]
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	d002      	beq.n	80223b4 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
        DisableSyncManChannel(PROCESS_DATA_OUT);
 80223ae:	2002      	movs	r0, #2
 80223b0:	f7ff f9ae 	bl	8021710 <DisableSyncManChannel>
    }

    if(nPdInputSize > 0)
 80223b4:	4b31      	ldr	r3, [pc, #196]	; (802247c <StopInputHandler+0xdc>)
 80223b6:	881b      	ldrh	r3, [r3, #0]
 80223b8:	2b00      	cmp	r3, #0
 80223ba:	d002      	beq.n	80223c2 <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 80223bc:	2003      	movs	r0, #3
 80223be:	f7ff f9a7 	bl	8021710 <DisableSyncManChannel>
    }

    /* reset the events in the AL Event mask register (0x204) */
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 80223c2:	230c      	movs	r3, #12
 80223c4:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 80223c6:	88fb      	ldrh	r3, [r7, #6]
 80223c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80223cc:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 80223ce:	88fb      	ldrh	r3, [r7, #6]
 80223d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80223d4:	80fb      	strh	r3, [r7, #6]

    ResetALEventMask( ~(ResetMask) );
 80223d6:	88fb      	ldrh	r3, [r7, #6]
 80223d8:	43db      	mvns	r3, r3
 80223da:	b29b      	uxth	r3, r3
 80223dc:	4618      	mov	r0, r3
 80223de:	f7ff f92d 	bl	802163c <ResetALEventMask>
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 80223e2:	4b27      	ldr	r3, [pc, #156]	; (8022480 <StopInputHandler+0xe0>)
 80223e4:	2200      	movs	r2, #0
 80223e6:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 80223e8:	4b26      	ldr	r3, [pc, #152]	; (8022484 <StopInputHandler+0xe4>)
 80223ea:	2200      	movs	r2, #0
 80223ec:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 80223ee:	4b26      	ldr	r3, [pc, #152]	; (8022488 <StopInputHandler+0xe8>)
 80223f0:	2200      	movs	r2, #0
 80223f2:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 80223f4:	4b25      	ldr	r3, [pc, #148]	; (802248c <StopInputHandler+0xec>)
 80223f6:	2200      	movs	r2, #0
 80223f8:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 80223fa:	4b25      	ldr	r3, [pc, #148]	; (8022490 <StopInputHandler+0xf0>)
 80223fc:	2200      	movs	r2, #0
 80223fe:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8022400:	4b24      	ldr	r3, [pc, #144]	; (8022494 <StopInputHandler+0xf4>)
 8022402:	2200      	movs	r2, #0
 8022404:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8022406:	4b24      	ldr	r3, [pc, #144]	; (8022498 <StopInputHandler+0xf8>)
 8022408:	2200      	movs	r2, #0
 802240a:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 802240c:	4b23      	ldr	r3, [pc, #140]	; (802249c <StopInputHandler+0xfc>)
 802240e:	2200      	movs	r2, #0
 8022410:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8022412:	4b23      	ldr	r3, [pc, #140]	; (80224a0 <StopInputHandler+0x100>)
 8022414:	2200      	movs	r2, #0
 8022416:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8022418:	4b22      	ldr	r3, [pc, #136]	; (80224a4 <StopInputHandler+0x104>)
 802241a:	2200      	movs	r2, #0
 802241c:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 802241e:	4b22      	ldr	r3, [pc, #136]	; (80224a8 <StopInputHandler+0x108>)
 8022420:	2200      	movs	r2, #0
 8022422:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 8022424:	4b21      	ldr	r3, [pc, #132]	; (80224ac <StopInputHandler+0x10c>)
 8022426:	2200      	movs	r2, #0
 8022428:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 802242a:	4b21      	ldr	r3, [pc, #132]	; (80224b0 <StopInputHandler+0x110>)
 802242c:	2200      	movs	r2, #0
 802242e:	801a      	strh	r2, [r3, #0]

    /*ECATCHANGE_START(V5.12) ECAT5*/

    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8022430:	4b20      	ldr	r3, [pc, #128]	; (80224b4 <StopInputHandler+0x114>)
 8022432:	2200      	movs	r2, #0
 8022434:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 8022436:	4b1f      	ldr	r3, [pc, #124]	; (80224b4 <StopInputHandler+0x114>)
 8022438:	2200      	movs	r2, #0
 802243a:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManOutPar.u8SyncError = 0;
 802243c:	4b1d      	ldr	r3, [pc, #116]	; (80224b4 <StopInputHandler+0x114>)
 802243e:	2200      	movs	r2, #0
 8022440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 8022444:	4b1c      	ldr	r3, [pc, #112]	; (80224b8 <StopInputHandler+0x118>)
 8022446:	2200      	movs	r2, #0
 8022448:	851a      	strh	r2, [r3, #40]	; 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 802244a:	4b1b      	ldr	r3, [pc, #108]	; (80224b8 <StopInputHandler+0x118>)
 802244c:	2200      	movs	r2, #0
 802244e:	855a      	strh	r2, [r3, #42]	; 0x2a
    sSyncManInPar.u8SyncError = 0;
 8022450:	4b19      	ldr	r3, [pc, #100]	; (80224b8 <StopInputHandler+0x118>)
 8022452:	2200      	movs	r2, #0
 8022454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.12) ECAT5*/

    i16WaitForPllRunningTimeout = 0;
 8022458:	4b18      	ldr	r3, [pc, #96]	; (80224bc <StopInputHandler+0x11c>)
 802245a:	2200      	movs	r2, #0
 802245c:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 802245e:	4b18      	ldr	r3, [pc, #96]	; (80224c0 <StopInputHandler+0x120>)
 8022460:	2200      	movs	r2, #0
 8022462:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8022464:	4b17      	ldr	r3, [pc, #92]	; (80224c4 <StopInputHandler+0x124>)
 8022466:	2200      	movs	r2, #0
 8022468:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 802246a:	4b17      	ldr	r3, [pc, #92]	; (80224c8 <StopInputHandler+0x128>)
 802246c:	2200      	movs	r2, #0
 802246e:	701a      	strb	r2, [r3, #0]
}
 8022470:	3708      	adds	r7, #8
 8022472:	46bd      	mov	sp, r7
 8022474:	bd80      	pop	{r7, pc}
 8022476:	bf00      	nop
 8022478:	1fff271a 	.word	0x1fff271a
 802247c:	1fff2746 	.word	0x1fff2746
 8022480:	1fff274c 	.word	0x1fff274c
 8022484:	1fff2757 	.word	0x1fff2757
 8022488:	1fff2750 	.word	0x1fff2750
 802248c:	1fff2734 	.word	0x1fff2734
 8022490:	1fff274d 	.word	0x1fff274d
 8022494:	1fff2748 	.word	0x1fff2748
 8022498:	1fff275a 	.word	0x1fff275a
 802249c:	1fff2728 	.word	0x1fff2728
 80224a0:	1fff271e 	.word	0x1fff271e
 80224a4:	1fff2752 	.word	0x1fff2752
 80224a8:	1fff272e 	.word	0x1fff272e
 80224ac:	1fff2742 	.word	0x1fff2742
 80224b0:	1fff2722 	.word	0x1fff2722
 80224b4:	1fff2838 	.word	0x1fff2838
 80224b8:	1fff27f4 	.word	0x1fff27f4
 80224bc:	1fff272c 	.word	0x1fff272c
 80224c0:	1fff2758 	.word	0x1fff2758
 80224c4:	1fff2756 	.word	0x1fff2756
 80224c8:	1fff287c 	.word	0x1fff287c

080224cc <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 80224cc:	b480      	push	{r7}
 80224ce:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 80224d0:	4b03      	ldr	r3, [pc, #12]	; (80224e0 <BackToInitTransition+0x14>)
 80224d2:	2200      	movs	r2, #0
 80224d4:	701a      	strb	r2, [r3, #0]
}
 80224d6:	46bd      	mov	sp, r7
 80224d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224dc:	4770      	bx	lr
 80224de:	bf00      	nop
 80224e0:	1fff287c 	.word	0x1fff287c

080224e4 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 80224e4:	b480      	push	{r7}
 80224e6:	b085      	sub	sp, #20
 80224e8:	af00      	add	r7, sp, #0
 80224ea:	4603      	mov	r3, r0
 80224ec:	460a      	mov	r2, r1
 80224ee:	71fb      	strb	r3, [r7, #7]
 80224f0:	4613      	mov	r3, r2
 80224f2:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 80224f4:	88bb      	ldrh	r3, [r7, #4]
 80224f6:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 80224f8:	4b26      	ldr	r3, [pc, #152]	; (8022594 <SetALStatus+0xb0>)
 80224fa:	781b      	ldrb	r3, [r3, #0]
 80224fc:	79fa      	ldrb	r2, [r7, #7]
 80224fe:	429a      	cmp	r2, r3
 8022500:	d002      	beq.n	8022508 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 8022502:	4a24      	ldr	r2, [pc, #144]	; (8022594 <SetALStatus+0xb0>)
 8022504:	79fb      	ldrb	r3, [r7, #7]
 8022506:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 8022508:	88bb      	ldrh	r3, [r7, #4]
 802250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802250e:	4293      	cmp	r3, r2
 8022510:	d002      	beq.n	8022518 <SetALStatus+0x34>
    {
        Value = SWAPWORD(Value);

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 8022512:	4a21      	ldr	r2, [pc, #132]	; (8022598 <SetALStatus+0xb4>)
 8022514:	89fb      	ldrh	r3, [r7, #14]
 8022516:	8013      	strh	r3, [r2, #0]
    }

    Value = nAlStatus;
 8022518:	4b1e      	ldr	r3, [pc, #120]	; (8022594 <SetALStatus+0xb0>)
 802251a:	781b      	ldrb	r3, [r3, #0]
 802251c:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 802251e:	4a1f      	ldr	r2, [pc, #124]	; (802259c <SetALStatus+0xb8>)
 8022520:	89fb      	ldrh	r3, [r7, #14]
 8022522:	8013      	strh	r3, [r2, #0]

    /*The Run LED state is set in Set LED Indication, only the Error LED blink code is set here*/

    /*set Error blink code*/
    if(alStatusCode == 0x00 || !(alStatus & STATE_CHANGE))
 8022524:	88bb      	ldrh	r3, [r7, #4]
 8022526:	2b00      	cmp	r3, #0
 8022528:	d004      	beq.n	8022534 <SetALStatus+0x50>
 802252a:	79fb      	ldrb	r3, [r7, #7]
 802252c:	f003 0310 	and.w	r3, r3, #16
 8022530:	2b00      	cmp	r3, #0
 8022532:	d103      	bne.n	802253c <SetALStatus+0x58>
    {
        u8EcatErrorLed = LED_OFF;
 8022534:	4b1a      	ldr	r3, [pc, #104]	; (80225a0 <SetALStatus+0xbc>)
 8022536:	2200      	movs	r2, #0
 8022538:	701a      	strb	r2, [r3, #0]
 802253a:	e01a      	b.n	8022572 <SetALStatus+0x8e>
    }
    else if((alStatusCode == ALSTATUSCODE_NOSYNCERROR) ||
 802253c:	88bb      	ldrh	r3, [r7, #4]
 802253e:	2b2d      	cmp	r3, #45	; 0x2d
 8022540:	d009      	beq.n	8022556 <SetALStatus+0x72>
 8022542:	88bb      	ldrh	r3, [r7, #4]
 8022544:	2b1a      	cmp	r3, #26
 8022546:	d006      	beq.n	8022556 <SetALStatus+0x72>
        (alStatusCode == ALSTATUSCODE_SYNCERROR) ||
 8022548:	88bb      	ldrh	r3, [r7, #4]
 802254a:	2b32      	cmp	r3, #50	; 0x32
 802254c:	d003      	beq.n	8022556 <SetALStatus+0x72>
        (alStatusCode == ALSTATUSCODE_DCPLLSYNCERROR)
/*ECATCHANGE_START(V5.12) ECAT7*/
        || (bLocalErrorFlag == TRUE))
 802254e:	4b15      	ldr	r3, [pc, #84]	; (80225a4 <SetALStatus+0xc0>)
 8022550:	781b      	ldrb	r3, [r3, #0]
 8022552:	2b00      	cmp	r3, #0
 8022554:	d003      	beq.n	802255e <SetALStatus+0x7a>
/*ECATCHANGE_END(V5.12) ECAT7*/
    {
        u8EcatErrorLed = LED_SINGLEFLASH;
 8022556:	4b12      	ldr	r3, [pc, #72]	; (80225a0 <SetALStatus+0xbc>)
 8022558:	2201      	movs	r2, #1
 802255a:	701a      	strb	r2, [r3, #0]
 802255c:	e009      	b.n	8022572 <SetALStatus+0x8e>
    }
    else if((alStatusCode == ALSTATUSCODE_SMWATCHDOG))
 802255e:	88bb      	ldrh	r3, [r7, #4]
 8022560:	2b1b      	cmp	r3, #27
 8022562:	d103      	bne.n	802256c <SetALStatus+0x88>
    {
        u8EcatErrorLed = LED_DOUBLEFLASH;
 8022564:	4b0e      	ldr	r3, [pc, #56]	; (80225a0 <SetALStatus+0xbc>)
 8022566:	2202      	movs	r2, #2
 8022568:	701a      	strb	r2, [r3, #0]
 802256a:	e002      	b.n	8022572 <SetALStatus+0x8e>
    }
    else
    {
        u8EcatErrorLed = LED_BLINKING;
 802256c:	4b0c      	ldr	r3, [pc, #48]	; (80225a0 <SetALStatus+0xbc>)
 802256e:	220d      	movs	r2, #13
 8022570:	701a      	strb	r2, [r3, #0]
    }
    u8EcatErrorLed |= LED_OVERRIDE;
 8022572:	4b0b      	ldr	r3, [pc, #44]	; (80225a0 <SetALStatus+0xbc>)
 8022574:	781b      	ldrb	r3, [r3, #0]
 8022576:	f043 0310 	orr.w	r3, r3, #16
 802257a:	b2da      	uxtb	r2, r3
 802257c:	4b08      	ldr	r3, [pc, #32]	; (80225a0 <SetALStatus+0xbc>)
 802257e:	701a      	strb	r2, [r3, #0]

    HW_EscWriteByte(u8EcatErrorLed,ESC_ERROR_LED_OVERRIDE);
 8022580:	4b09      	ldr	r3, [pc, #36]	; (80225a8 <SetALStatus+0xc4>)
 8022582:	4a07      	ldr	r2, [pc, #28]	; (80225a0 <SetALStatus+0xbc>)
 8022584:	7812      	ldrb	r2, [r2, #0]
 8022586:	701a      	strb	r2, [r3, #0]
}
 8022588:	3714      	adds	r7, #20
 802258a:	46bd      	mov	sp, r7
 802258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022590:	4770      	bx	lr
 8022592:	bf00      	nop
 8022594:	1fff2719 	.word	0x1fff2719
 8022598:	54010134 	.word	0x54010134
 802259c:	54010130 	.word	0x54010130
 80225a0:	1fff275d 	.word	0x1fff275d
 80225a4:	1fff2720 	.word	0x1fff2720
 80225a8:	54010139 	.word	0x54010139

080225ac <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	b084      	sub	sp, #16
 80225b0:	af00      	add	r7, sp, #0
 80225b2:	4603      	mov	r3, r0
 80225b4:	460a      	mov	r2, r1
 80225b6:	71fb      	strb	r3, [r7, #7]
 80225b8:	4613      	mov	r3, r2
 80225ba:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 80225bc:	2300      	movs	r3, #0
 80225be:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 80225c0:	2300      	movs	r3, #0
 80225c2:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 80225c4:	4bd3      	ldr	r3, [pc, #844]	; (8022914 <AL_ControlInd+0x368>)
 80225c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80225ca:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 80225cc:	4bd2      	ldr	r3, [pc, #840]	; (8022918 <AL_ControlInd+0x36c>)
 80225ce:	2201      	movs	r2, #1
 80225d0:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 80225d2:	79fb      	ldrb	r3, [r7, #7]
 80225d4:	f003 0310 	and.w	r3, r3, #16
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d009      	beq.n	80225f0 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 80225dc:	2301      	movs	r3, #1
 80225de:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 80225e0:	4bce      	ldr	r3, [pc, #824]	; (802291c <AL_ControlInd+0x370>)
 80225e2:	781b      	ldrb	r3, [r3, #0]
 80225e4:	f023 0310 	bic.w	r3, r3, #16
 80225e8:	b2da      	uxtb	r2, r3
 80225ea:	4bcc      	ldr	r3, [pc, #816]	; (802291c <AL_ControlInd+0x370>)
 80225ec:	701a      	strb	r2, [r3, #0]
 80225ee:	e012      	b.n	8022616 <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ((nAlStatus & STATE_CHANGE)
 80225f0:	4bca      	ldr	r3, [pc, #808]	; (802291c <AL_ControlInd+0x370>)
 80225f2:	781b      	ldrb	r3, [r3, #0]
 80225f4:	f003 0310 	and.w	r3, r3, #16
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d005      	beq.n	8022608 <AL_ControlInd+0x5c>
        // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
        //               (the error was acknowledged with the same state before independent of the acknowledge flag)
        /*Error Acknowledge with 0xX1 is allowed*/
        && (alControl & STATE_MASK) != STATE_INIT)
 80225fc:	79fb      	ldrb	r3, [r7, #7]
 80225fe:	f003 030f 	and.w	r3, r3, #15
 8022602:	2b01      	cmp	r3, #1
 8022604:	d000      	beq.n	8022608 <AL_ControlInd+0x5c>
    {
        /* the error flag (Bit 4) is set in the AL-Status and the ErrAck bit (Bit 4)
           is not set in the AL-Control, so the state cannot be set to a higher state
           and the new state request will be ignored */
        return;
 8022606:	e32f      	b.n	8022c68 <AL_ControlInd+0x6bc>
    }
    else
    {
        nAlStatus &= STATE_MASK;
 8022608:	4bc4      	ldr	r3, [pc, #784]	; (802291c <AL_ControlInd+0x370>)
 802260a:	781b      	ldrb	r3, [r3, #0]
 802260c:	f003 030f 	and.w	r3, r3, #15
 8022610:	b2da      	uxtb	r2, r3
 8022612:	4bc2      	ldr	r3, [pc, #776]	; (802291c <AL_ControlInd+0x370>)
 8022614:	701a      	strb	r2, [r3, #0]
    }

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 8022616:	79fb      	ldrb	r3, [r7, #7]
 8022618:	f003 030f 	and.w	r3, r3, #15
 802261c:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 802261e:	4bbf      	ldr	r3, [pc, #764]	; (802291c <AL_ControlInd+0x370>)
 8022620:	781b      	ldrb	r3, [r3, #0]
 8022622:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8022624:	7b3b      	ldrb	r3, [r7, #12]
 8022626:	011b      	lsls	r3, r3, #4
 8022628:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 802262a:	7b3a      	ldrb	r2, [r7, #12]
 802262c:	79fb      	ldrb	r3, [r7, #7]
 802262e:	4413      	add	r3, r2
 8022630:	733b      	strb	r3, [r7, #12]

    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8022632:	7b3b      	ldrb	r3, [r7, #12]
 8022634:	2b44      	cmp	r3, #68	; 0x44
 8022636:	d029      	beq.n	802268c <AL_ControlInd+0xe0>
 8022638:	2b44      	cmp	r3, #68	; 0x44
 802263a:	dc0b      	bgt.n	8022654 <AL_ControlInd+0xa8>
 802263c:	2b22      	cmp	r3, #34	; 0x22
 802263e:	d015      	beq.n	802266c <AL_ControlInd+0xc0>
 8022640:	2b22      	cmp	r3, #34	; 0x22
 8022642:	dc02      	bgt.n	802264a <AL_ControlInd+0x9e>
 8022644:	2b12      	cmp	r3, #18
 8022646:	d011      	beq.n	802266c <AL_ControlInd+0xc0>
 8022648:	e028      	b.n	802269c <AL_ControlInd+0xf0>
 802264a:	2b24      	cmp	r3, #36	; 0x24
 802264c:	d014      	beq.n	8022678 <AL_ControlInd+0xcc>
 802264e:	2b42      	cmp	r3, #66	; 0x42
 8022650:	d00c      	beq.n	802266c <AL_ControlInd+0xc0>
 8022652:	e023      	b.n	802269c <AL_ControlInd+0xf0>
 8022654:	2b82      	cmp	r3, #130	; 0x82
 8022656:	d009      	beq.n	802266c <AL_ControlInd+0xc0>
 8022658:	2b82      	cmp	r3, #130	; 0x82
 802265a:	dc02      	bgt.n	8022662 <AL_ControlInd+0xb6>
 802265c:	2b48      	cmp	r3, #72	; 0x48
 802265e:	d015      	beq.n	802268c <AL_ControlInd+0xe0>
 8022660:	e01c      	b.n	802269c <AL_ControlInd+0xf0>
 8022662:	2b84      	cmp	r3, #132	; 0x84
 8022664:	d012      	beq.n	802268c <AL_ControlInd+0xe0>
 8022666:	2b88      	cmp	r3, #136	; 0x88
 8022668:	d010      	beq.n	802268c <AL_ControlInd+0xe0>
 802266a:	e017      	b.n	802269c <AL_ControlInd+0xf0>
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 802266c:	2002      	movs	r0, #2
 802266e:	f7ff f8a3 	bl	80217b8 <CheckSmSettings>
 8022672:	4603      	mov	r3, r0
 8022674:	81fb      	strh	r3, [r7, #14]
        break;
 8022676:	e011      	b.n	802269c <AL_ControlInd+0xf0>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 8022678:	48a9      	ldr	r0, [pc, #676]	; (8022920 <AL_ControlInd+0x374>)
 802267a:	49aa      	ldr	r1, [pc, #680]	; (8022924 <AL_ControlInd+0x378>)
 802267c:	f7fd fd78 	bl	8020170 <APPL_GenerateMapping>
 8022680:	4603      	mov	r3, r0
 8022682:	81fb      	strh	r3, [r7, #14]

            if (result != 0)
 8022684:	89fb      	ldrh	r3, [r7, #14]
 8022686:	2b00      	cmp	r3, #0
 8022688:	d000      	beq.n	802268c <AL_ControlInd+0xe0>
            {
                break;
 802268a:	e007      	b.n	802269c <AL_ControlInd+0xf0>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 802268c:	4ba6      	ldr	r3, [pc, #664]	; (8022928 <AL_ControlInd+0x37c>)
 802268e:	781b      	ldrb	r3, [r3, #0]
 8022690:	4618      	mov	r0, r3
 8022692:	f7ff f891 	bl	80217b8 <CheckSmSettings>
 8022696:	4603      	mov	r3, r0
 8022698:	81fb      	strh	r3, [r7, #14]
        break;
 802269a:	bf00      	nop

    }

    if ( result == 0 )
 802269c:	89fb      	ldrh	r3, [r7, #14]
 802269e:	2b00      	cmp	r3, #0
 80226a0:	f040 820e 	bne.w	8022ac0 <AL_ControlInd+0x514>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 80226a4:	4ba1      	ldr	r3, [pc, #644]	; (802292c <AL_ControlInd+0x380>)
 80226a6:	2200      	movs	r2, #0
 80226a8:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 80226aa:	7b3b      	ldrb	r3, [r7, #12]
 80226ac:	3b11      	subs	r3, #17
 80226ae:	2b77      	cmp	r3, #119	; 0x77
 80226b0:	f200 8202 	bhi.w	8022ab8 <AL_ControlInd+0x50c>
 80226b4:	a201      	add	r2, pc, #4	; (adr r2, 80226bc <AL_ControlInd+0x110>)
 80226b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80226ba:	bf00      	nop
 80226bc:	08022a6f 	.word	0x08022a6f
 80226c0:	080228ad 	.word	0x080228ad
 80226c4:	0802289d 	.word	0x0802289d
 80226c8:	08022ab3 	.word	0x08022ab3
 80226cc:	08022ab9 	.word	0x08022ab9
 80226d0:	08022ab9 	.word	0x08022ab9
 80226d4:	08022ab9 	.word	0x08022ab9
 80226d8:	08022ab3 	.word	0x08022ab3
 80226dc:	08022ab9 	.word	0x08022ab9
 80226e0:	08022ab9 	.word	0x08022ab9
 80226e4:	08022ab9 	.word	0x08022ab9
 80226e8:	08022ab9 	.word	0x08022ab9
 80226ec:	08022ab9 	.word	0x08022ab9
 80226f0:	08022ab9 	.word	0x08022ab9
 80226f4:	08022ab9 	.word	0x08022ab9
 80226f8:	08022ab9 	.word	0x08022ab9
 80226fc:	08022a5d 	.word	0x08022a5d
 8022700:	08022a73 	.word	0x08022a73
 8022704:	08022ab3 	.word	0x08022ab3
 8022708:	0802293b 	.word	0x0802293b
 802270c:	08022ab9 	.word	0x08022ab9
 8022710:	08022ab9 	.word	0x08022ab9
 8022714:	08022ab9 	.word	0x08022ab9
 8022718:	08022ab3 	.word	0x08022ab3
 802271c:	08022ab9 	.word	0x08022ab9
 8022720:	08022ab9 	.word	0x08022ab9
 8022724:	08022ab9 	.word	0x08022ab9
 8022728:	08022ab9 	.word	0x08022ab9
 802272c:	08022ab9 	.word	0x08022ab9
 8022730:	08022ab9 	.word	0x08022ab9
 8022734:	08022ab9 	.word	0x08022ab9
 8022738:	08022ab9 	.word	0x08022ab9
 802273c:	080228a3 	.word	0x080228a3
 8022740:	08022ab3 	.word	0x08022ab3
 8022744:	08022ab9 	.word	0x08022ab9
 8022748:	08022ab3 	.word	0x08022ab3
 802274c:	08022ab9 	.word	0x08022ab9
 8022750:	08022ab9 	.word	0x08022ab9
 8022754:	08022ab9 	.word	0x08022ab9
 8022758:	08022ab3 	.word	0x08022ab3
 802275c:	08022ab9 	.word	0x08022ab9
 8022760:	08022ab9 	.word	0x08022ab9
 8022764:	08022ab9 	.word	0x08022ab9
 8022768:	08022ab9 	.word	0x08022ab9
 802276c:	08022ab9 	.word	0x08022ab9
 8022770:	08022ab9 	.word	0x08022ab9
 8022774:	08022ab9 	.word	0x08022ab9
 8022778:	08022ab9 	.word	0x08022ab9
 802277c:	08022a3f 	.word	0x08022a3f
 8022780:	08022a11 	.word	0x08022a11
 8022784:	08022ab3 	.word	0x08022ab3
 8022788:	08022a73 	.word	0x08022a73
 802278c:	08022ab9 	.word	0x08022ab9
 8022790:	08022ab9 	.word	0x08022ab9
 8022794:	08022ab9 	.word	0x08022ab9
 8022798:	08022995 	.word	0x08022995
 802279c:	08022ab9 	.word	0x08022ab9
 80227a0:	08022ab9 	.word	0x08022ab9
 80227a4:	08022ab9 	.word	0x08022ab9
 80227a8:	08022ab9 	.word	0x08022ab9
 80227ac:	08022ab9 	.word	0x08022ab9
 80227b0:	08022ab9 	.word	0x08022ab9
 80227b4:	08022ab9 	.word	0x08022ab9
 80227b8:	08022ab9 	.word	0x08022ab9
 80227bc:	08022ab9 	.word	0x08022ab9
 80227c0:	08022ab9 	.word	0x08022ab9
 80227c4:	08022ab9 	.word	0x08022ab9
 80227c8:	08022ab9 	.word	0x08022ab9
 80227cc:	08022ab9 	.word	0x08022ab9
 80227d0:	08022ab9 	.word	0x08022ab9
 80227d4:	08022ab9 	.word	0x08022ab9
 80227d8:	08022ab9 	.word	0x08022ab9
 80227dc:	08022ab9 	.word	0x08022ab9
 80227e0:	08022ab9 	.word	0x08022ab9
 80227e4:	08022ab9 	.word	0x08022ab9
 80227e8:	08022ab9 	.word	0x08022ab9
 80227ec:	08022ab9 	.word	0x08022ab9
 80227f0:	08022ab9 	.word	0x08022ab9
 80227f4:	08022ab9 	.word	0x08022ab9
 80227f8:	08022ab9 	.word	0x08022ab9
 80227fc:	08022ab9 	.word	0x08022ab9
 8022800:	08022ab9 	.word	0x08022ab9
 8022804:	08022ab9 	.word	0x08022ab9
 8022808:	08022ab9 	.word	0x08022ab9
 802280c:	08022ab9 	.word	0x08022ab9
 8022810:	08022ab9 	.word	0x08022ab9
 8022814:	08022ab9 	.word	0x08022ab9
 8022818:	08022ab9 	.word	0x08022ab9
 802281c:	08022ab9 	.word	0x08022ab9
 8022820:	08022ab9 	.word	0x08022ab9
 8022824:	08022ab9 	.word	0x08022ab9
 8022828:	08022ab9 	.word	0x08022ab9
 802282c:	08022ab9 	.word	0x08022ab9
 8022830:	08022ab9 	.word	0x08022ab9
 8022834:	08022ab9 	.word	0x08022ab9
 8022838:	08022ab9 	.word	0x08022ab9
 802283c:	08022ab9 	.word	0x08022ab9
 8022840:	08022ab9 	.word	0x08022ab9
 8022844:	08022ab9 	.word	0x08022ab9
 8022848:	08022ab9 	.word	0x08022ab9
 802284c:	08022ab9 	.word	0x08022ab9
 8022850:	08022ab9 	.word	0x08022ab9
 8022854:	08022ab9 	.word	0x08022ab9
 8022858:	08022ab9 	.word	0x08022ab9
 802285c:	08022ab9 	.word	0x08022ab9
 8022860:	08022ab9 	.word	0x08022ab9
 8022864:	08022ab9 	.word	0x08022ab9
 8022868:	08022ab9 	.word	0x08022ab9
 802286c:	08022ab9 	.word	0x08022ab9
 8022870:	08022ab9 	.word	0x08022ab9
 8022874:	08022ab9 	.word	0x08022ab9
 8022878:	08022ab9 	.word	0x08022ab9
 802287c:	08022a21 	.word	0x08022a21
 8022880:	080229f3 	.word	0x080229f3
 8022884:	08022ab3 	.word	0x08022ab3
 8022888:	080229e3 	.word	0x080229e3
 802288c:	08022ab9 	.word	0x08022ab9
 8022890:	08022ab9 	.word	0x08022ab9
 8022894:	08022ab9 	.word	0x08022ab9
 8022898:	08022a73 	.word	0x08022a73
        {
        case INIT_2_BOOT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 802289c:	2313      	movs	r3, #19
 802289e:	81fb      	strh	r3, [r7, #14]



            break;
 80228a0:	e10d      	b.n	8022abe <AL_ControlInd+0x512>

        case BOOT_2_INIT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 80228a2:	2313      	movs	r3, #19
 80228a4:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 80228a6:	f7ff fe11 	bl	80224cc <BackToInitTransition>



            break;
 80228aa:	e108      	b.n	8022abe <AL_ControlInd+0x512>
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 80228ac:	f7fe fef6 	bl	802169c <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 80228b0:	4b1f      	ldr	r3, [pc, #124]	; (8022930 <AL_ControlInd+0x384>)
 80228b2:	781b      	ldrb	r3, [r3, #0]
 80228b4:	f083 0301 	eor.w	r3, r3, #1
 80228b8:	b2db      	uxtb	r3, r3
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d001      	beq.n	80228c2 <AL_ControlInd+0x316>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 80228be:	2351      	movs	r3, #81	; 0x51
 80228c0:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 80228c2:	89fb      	ldrh	r3, [r7, #14]
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	d137      	bne.n	8022938 <AL_ControlInd+0x38c>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 80228c8:	f000 feb4 	bl	8023634 <MBX_StartMailboxHandler>
 80228cc:	4603      	mov	r3, r0
 80228ce:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 80228d0:	89fb      	ldrh	r3, [r7, #14]
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	d10c      	bne.n	80228f0 <AL_ControlInd+0x344>
            {
                bApplEsmPending = FALSE;
 80228d6:	4b10      	ldr	r3, [pc, #64]	; (8022918 <AL_ControlInd+0x36c>)
 80228d8:	2200      	movs	r2, #0
 80228da:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 80228dc:	f7fd fc14 	bl	8020108 <APPL_StartMailboxHandler>
 80228e0:	4603      	mov	r3, r0
 80228e2:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 80228e4:	89fb      	ldrh	r3, [r7, #14]
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	d102      	bne.n	80228f0 <AL_ControlInd+0x344>
                {
                    bMbxRunning = TRUE;
 80228ea:	4b12      	ldr	r3, [pc, #72]	; (8022934 <AL_ControlInd+0x388>)
 80228ec:	2201      	movs	r2, #1
 80228ee:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 80228f0:	89fb      	ldrh	r3, [r7, #14]
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	d020      	beq.n	8022938 <AL_ControlInd+0x38c>
 80228f6:	89fb      	ldrh	r3, [r7, #14]
 80228f8:	2bff      	cmp	r3, #255	; 0xff
 80228fa:	d01d      	beq.n	8022938 <AL_ControlInd+0x38c>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                    if (!bApplEsmPending)
 80228fc:	4b06      	ldr	r3, [pc, #24]	; (8022918 <AL_ControlInd+0x36c>)
 80228fe:	781b      	ldrb	r3, [r3, #0]
 8022900:	f083 0301 	eor.w	r3, r3, #1
 8022904:	b2db      	uxtb	r3, r3
 8022906:	2b00      	cmp	r3, #0
 8022908:	d001      	beq.n	802290e <AL_ControlInd+0x362>
                    {
                        APPL_StopMailboxHandler();
 802290a:	f7fd fc05 	bl	8020118 <APPL_StopMailboxHandler>
                    }

                 MBX_StopMailboxHandler();
 802290e:	f000 ff11 	bl	8023734 <MBX_StopMailboxHandler>
            }

            }
            break;
 8022912:	e0d4      	b.n	8022abe <AL_ControlInd+0x512>
 8022914:	1fff274e 	.word	0x1fff274e
 8022918:	1fff2718 	.word	0x1fff2718
 802291c:	1fff2719 	.word	0x1fff2719
 8022920:	1fff2746 	.word	0x1fff2746
 8022924:	1fff271a 	.word	0x1fff271a
 8022928:	1fff275c 	.word	0x1fff275c
 802292c:	1fff2716 	.word	0x1fff2716
 8022930:	1fff1622 	.word	0x1fff1622
 8022934:	1fff27ce 	.word	0x1fff27ce
 8022938:	e0c1      	b.n	8022abe <AL_ControlInd+0x512>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 802293a:	f7ff f91b 	bl	8021b74 <StartInputHandler>
 802293e:	4603      	mov	r3, r0
 8022940:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 8022942:	89fb      	ldrh	r3, [r7, #14]
 8022944:	2b00      	cmp	r3, #0
 8022946:	d112      	bne.n	802296e <AL_ControlInd+0x3c2>
            {
                bApplEsmPending = FALSE;
 8022948:	4bac      	ldr	r3, [pc, #688]	; (8022bfc <AL_ControlInd+0x650>)
 802294a:	2200      	movs	r2, #0
 802294c:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 802294e:	48ac      	ldr	r0, [pc, #688]	; (8022c00 <AL_ControlInd+0x654>)
 8022950:	f7fd fbea 	bl	8020128 <APPL_StartInputHandler>
 8022954:	4603      	mov	r3, r0
 8022956:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8022958:	89fb      	ldrh	r3, [r7, #14]
 802295a:	2b00      	cmp	r3, #0
 802295c:	d107      	bne.n	802296e <AL_ControlInd+0x3c2>
                {
                    /* initialize the AL Event Mask register (0x204) */
                    SetALEventMask( u16ALEventMask );
 802295e:	4ba8      	ldr	r3, [pc, #672]	; (8022c00 <AL_ControlInd+0x654>)
 8022960:	881b      	ldrh	r3, [r3, #0]
 8022962:	4618      	mov	r0, r3
 8022964:	f7fe fe82 	bl	802166c <SetALEventMask>

                    bEcatInputUpdateRunning = TRUE;
 8022968:	4ba6      	ldr	r3, [pc, #664]	; (8022c04 <AL_ControlInd+0x658>)
 802296a:	2201      	movs	r2, #1
 802296c:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 802296e:	89fb      	ldrh	r3, [r7, #14]
 8022970:	2b00      	cmp	r3, #0
 8022972:	d00e      	beq.n	8022992 <AL_ControlInd+0x3e6>
 8022974:	89fb      	ldrh	r3, [r7, #14]
 8022976:	2bff      	cmp	r3, #255	; 0xff
 8022978:	d00b      	beq.n	8022992 <AL_ControlInd+0x3e6>
            {
                if(!bApplEsmPending)
 802297a:	4ba0      	ldr	r3, [pc, #640]	; (8022bfc <AL_ControlInd+0x650>)
 802297c:	781b      	ldrb	r3, [r3, #0]
 802297e:	f083 0301 	eor.w	r3, r3, #1
 8022982:	b2db      	uxtb	r3, r3
 8022984:	2b00      	cmp	r3, #0
 8022986:	d001      	beq.n	802298c <AL_ControlInd+0x3e0>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 8022988:	f7fd fbda 	bl	8020140 <APPL_StopInputHandler>
                }

                StopInputHandler();
 802298c:	f7ff fd08 	bl	80223a0 <StopInputHandler>
            }
            break;
 8022990:	e095      	b.n	8022abe <AL_ControlInd+0x512>
 8022992:	e094      	b.n	8022abe <AL_ControlInd+0x512>

        case SAFEOP_2_OP:
            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 8022994:	f7ff fcba 	bl	802230c <StartOutputHandler>
 8022998:	4603      	mov	r3, r0
 802299a:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 802299c:	89fb      	ldrh	r3, [r7, #14]
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d10c      	bne.n	80229bc <AL_ControlInd+0x410>
            {
                bApplEsmPending = FALSE;
 80229a2:	4b96      	ldr	r3, [pc, #600]	; (8022bfc <AL_ControlInd+0x650>)
 80229a4:	2200      	movs	r2, #0
 80229a6:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 80229a8:	f7fd fbd2 	bl	8020150 <APPL_StartOutputHandler>
 80229ac:	4603      	mov	r3, r0
 80229ae:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 80229b0:	89fb      	ldrh	r3, [r7, #14]
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d102      	bne.n	80229bc <AL_ControlInd+0x410>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 80229b6:	4b94      	ldr	r3, [pc, #592]	; (8022c08 <AL_ControlInd+0x65c>)
 80229b8:	2201      	movs	r2, #1
 80229ba:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 80229bc:	89fb      	ldrh	r3, [r7, #14]
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d00e      	beq.n	80229e0 <AL_ControlInd+0x434>
 80229c2:	89fb      	ldrh	r3, [r7, #14]
 80229c4:	2bff      	cmp	r3, #255	; 0xff
 80229c6:	d00b      	beq.n	80229e0 <AL_ControlInd+0x434>
            {
                    if (!bApplEsmPending)
 80229c8:	4b8c      	ldr	r3, [pc, #560]	; (8022bfc <AL_ControlInd+0x650>)
 80229ca:	781b      	ldrb	r3, [r3, #0]
 80229cc:	f083 0301 	eor.w	r3, r3, #1
 80229d0:	b2db      	uxtb	r3, r3
 80229d2:	2b00      	cmp	r3, #0
 80229d4:	d001      	beq.n	80229da <AL_ControlInd+0x42e>
                    {
                        APPL_StopOutputHandler();
 80229d6:	f7fd fbc3 	bl	8020160 <APPL_StopOutputHandler>
                    }

                StopOutputHandler();
 80229da:	f7ff fcd1 	bl	8022380 <StopOutputHandler>
            }

            break;
 80229de:	e06e      	b.n	8022abe <AL_ControlInd+0x512>
 80229e0:	e06d      	b.n	8022abe <AL_ControlInd+0x512>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 80229e2:	f7fd fbbd 	bl	8020160 <APPL_StopOutputHandler>

            StopOutputHandler();
 80229e6:	f7ff fccb 	bl	8022380 <StopOutputHandler>

            bApplEsmPending = FALSE;
 80229ea:	4b84      	ldr	r3, [pc, #528]	; (8022bfc <AL_ControlInd+0x650>)
 80229ec:	2200      	movs	r2, #0
 80229ee:	701a      	strb	r2, [r3, #0]

            break;
 80229f0:	e065      	b.n	8022abe <AL_ControlInd+0x512>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 80229f2:	f7fd fbb5 	bl	8020160 <APPL_StopOutputHandler>
 80229f6:	4603      	mov	r3, r0
 80229f8:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 80229fa:	f7ff fcc1 	bl	8022380 <StopOutputHandler>

            bApplEsmPending = FALSE;
 80229fe:	4b7f      	ldr	r3, [pc, #508]	; (8022bfc <AL_ControlInd+0x650>)
 8022a00:	2200      	movs	r2, #0
 8022a02:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022a04:	89fb      	ldrh	r3, [r7, #14]
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	d000      	beq.n	8022a0c <AL_ControlInd+0x460>
            {
                break;
 8022a0a:	e058      	b.n	8022abe <AL_ControlInd+0x512>
            }

            stateTrans = SAFEOP_2_PREOP;
 8022a0c:	2342      	movs	r3, #66	; 0x42
 8022a0e:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8022a10:	f7fd fb96 	bl	8020140 <APPL_StopInputHandler>
           
            StopInputHandler();
 8022a14:	f7ff fcc4 	bl	80223a0 <StopInputHandler>

            bApplEsmPending = FALSE;
 8022a18:	4b78      	ldr	r3, [pc, #480]	; (8022bfc <AL_ControlInd+0x650>)
 8022a1a:	2200      	movs	r2, #0
 8022a1c:	701a      	strb	r2, [r3, #0]

            break;
 8022a1e:	e04e      	b.n	8022abe <AL_ControlInd+0x512>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8022a20:	f7fd fb9e 	bl	8020160 <APPL_StopOutputHandler>
 8022a24:	4603      	mov	r3, r0
 8022a26:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8022a28:	f7ff fcaa 	bl	8022380 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8022a2c:	4b73      	ldr	r3, [pc, #460]	; (8022bfc <AL_ControlInd+0x650>)
 8022a2e:	2200      	movs	r2, #0
 8022a30:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022a32:	89fb      	ldrh	r3, [r7, #14]
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d000      	beq.n	8022a3a <AL_ControlInd+0x48e>
            {
                break;
 8022a38:	e041      	b.n	8022abe <AL_ControlInd+0x512>
            }
            
            stateTrans = SAFEOP_2_INIT;
 8022a3a:	2341      	movs	r3, #65	; 0x41
 8022a3c:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 8022a3e:	f7fd fb7f 	bl	8020140 <APPL_StopInputHandler>
 8022a42:	4603      	mov	r3, r0
 8022a44:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 8022a46:	f7ff fcab 	bl	80223a0 <StopInputHandler>

            bApplEsmPending = FALSE;
 8022a4a:	4b6c      	ldr	r3, [pc, #432]	; (8022bfc <AL_ControlInd+0x650>)
 8022a4c:	2200      	movs	r2, #0
 8022a4e:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8022a50:	89fb      	ldrh	r3, [r7, #14]
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	d000      	beq.n	8022a58 <AL_ControlInd+0x4ac>
            {
                break;
 8022a56:	e032      	b.n	8022abe <AL_ControlInd+0x512>
            }
            stateTrans = PREOP_2_INIT;
 8022a58:	2321      	movs	r3, #33	; 0x21
 8022a5a:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 8022a5c:	f000 fe6a 	bl	8023734 <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 8022a60:	f7fd fb5a 	bl	8020118 <APPL_StopMailboxHandler>
 8022a64:	4603      	mov	r3, r0
 8022a66:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 8022a68:	f7ff fd30 	bl	80224cc <BackToInitTransition>
            break;
 8022a6c:	e027      	b.n	8022abe <AL_ControlInd+0x512>

        case INIT_2_INIT:
            BackToInitTransition();
 8022a6e:	f7ff fd2d 	bl	80224cc <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 8022a72:	7b7b      	ldrb	r3, [r7, #13]
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d004      	beq.n	8022a82 <AL_ControlInd+0x4d6>
            {
                APPL_AckErrorInd(stateTrans);
 8022a78:	7b3b      	ldrb	r3, [r7, #12]
 8022a7a:	b29b      	uxth	r3, r3
 8022a7c:	4618      	mov	r0, r3
 8022a7e:	f7fd fb39 	bl	80200f4 <APPL_AckErrorInd>
            }

/*ECATCHANGE_START(V5.12) ESM2*/

                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 8022a82:	4b62      	ldr	r3, [pc, #392]	; (8022c0c <AL_ControlInd+0x660>)
 8022a84:	781b      	ldrb	r3, [r3, #0]
 8022a86:	f003 030c 	and.w	r3, r3, #12
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d00e      	beq.n	8022aac <AL_ControlInd+0x500>
                {
                    if(nPdOutputSize > 0)
 8022a8e:	4b60      	ldr	r3, [pc, #384]	; (8022c10 <AL_ControlInd+0x664>)
 8022a90:	881b      	ldrh	r3, [r3, #0]
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d003      	beq.n	8022a9e <AL_ControlInd+0x4f2>
                    {
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 8022a96:	2002      	movs	r0, #2
 8022a98:	f7fe fe64 	bl	8021764 <EnableSyncManChannel>
 8022a9c:	e006      	b.n	8022aac <AL_ControlInd+0x500>
                    }
                    else 
                    if(nPdInputSize > 0)
 8022a9e:	4b5d      	ldr	r3, [pc, #372]	; (8022c14 <AL_ControlInd+0x668>)
 8022aa0:	881b      	ldrh	r3, [r3, #0]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d002      	beq.n	8022aac <AL_ControlInd+0x500>
                    {
                        EnableSyncManChannel(PROCESS_DATA_IN);
 8022aa6:	2003      	movs	r0, #3
 8022aa8:	f7fe fe5c 	bl	8021764 <EnableSyncManChannel>
                    }
                }
/*ECATCHANGE_END(V5.12) ESM2*/
            
            result = NOERROR_NOSTATECHANGE;
 8022aac:	23fe      	movs	r3, #254	; 0xfe
 8022aae:	81fb      	strh	r3, [r7, #14]
            break;
 8022ab0:	e005      	b.n	8022abe <AL_ControlInd+0x512>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 8022ab2:	2311      	movs	r3, #17
 8022ab4:	81fb      	strh	r3, [r7, #14]
            break;
 8022ab6:	e002      	b.n	8022abe <AL_ControlInd+0x512>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 8022ab8:	2312      	movs	r3, #18
 8022aba:	81fb      	strh	r3, [r7, #14]
            break;
 8022abc:	bf00      	nop
 8022abe:	e024      	b.n	8022b0a <AL_ControlInd+0x55e>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8022ac0:	4b52      	ldr	r3, [pc, #328]	; (8022c0c <AL_ControlInd+0x660>)
 8022ac2:	781b      	ldrb	r3, [r3, #0]
 8022ac4:	2b04      	cmp	r3, #4
 8022ac6:	d008      	beq.n	8022ada <AL_ControlInd+0x52e>
 8022ac8:	2b08      	cmp	r3, #8
 8022aca:	d002      	beq.n	8022ad2 <AL_ControlInd+0x526>
 8022acc:	2b02      	cmp	r3, #2
 8022ace:	d008      	beq.n	8022ae2 <AL_ControlInd+0x536>
 8022ad0:	e01b      	b.n	8022b0a <AL_ControlInd+0x55e>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8022ad2:	f7fd fb45 	bl	8020160 <APPL_StopOutputHandler>
            StopOutputHandler();
 8022ad6:	f7ff fc53 	bl	8022380 <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8022ada:	f7fd fb31 	bl	8020140 <APPL_StopInputHandler>

            StopInputHandler();
 8022ade:	f7ff fc5f 	bl	80223a0 <StopInputHandler>
        case STATE_PREOP:
            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 8022ae2:	89fb      	ldrh	r3, [r7, #14]
 8022ae4:	2b16      	cmp	r3, #22
 8022ae6:	d10d      	bne.n	8022b04 <AL_ControlInd+0x558>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 8022ae8:	f000 fe24 	bl	8023734 <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 8022aec:	f7fd fb14 	bl	8020118 <APPL_StopMailboxHandler>

                /*Disable SM0 (MBX Out)*/
                DisableSyncManChannel(MAILBOX_WRITE);
 8022af0:	2000      	movs	r0, #0
 8022af2:	f7fe fe0d 	bl	8021710 <DisableSyncManChannel>

                /*Disable SM1 (MBX In)*/
                DisableSyncManChannel(MAILBOX_READ);
 8022af6:	2001      	movs	r0, #1
 8022af8:	f7fe fe0a 	bl	8021710 <DisableSyncManChannel>

                nAlStatus = STATE_INIT;
 8022afc:	4b43      	ldr	r3, [pc, #268]	; (8022c0c <AL_ControlInd+0x660>)
 8022afe:	2201      	movs	r2, #1
 8022b00:	701a      	strb	r2, [r3, #0]
 8022b02:	e002      	b.n	8022b0a <AL_ControlInd+0x55e>
            }
            else
            {
                nAlStatus = STATE_PREOP;
 8022b04:	4b41      	ldr	r3, [pc, #260]	; (8022c0c <AL_ControlInd+0x660>)
 8022b06:	2202      	movs	r2, #2
 8022b08:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if ( result == NOERROR_INWORK )
 8022b0a:	89fb      	ldrh	r3, [r7, #14]
 8022b0c:	2bff      	cmp	r3, #255	; 0xff
 8022b0e:	d135      	bne.n	8022b7c <AL_ControlInd+0x5d0>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 8022b10:	4b41      	ldr	r3, [pc, #260]	; (8022c18 <AL_ControlInd+0x66c>)
 8022b12:	2201      	movs	r2, #1
 8022b14:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 8022b16:	7b3b      	ldrb	r3, [r7, #12]
 8022b18:	b29a      	uxth	r2, r3
 8022b1a:	4b40      	ldr	r3, [pc, #256]	; (8022c1c <AL_ControlInd+0x670>)
 8022b1c:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 8022b1e:	4b3f      	ldr	r3, [pc, #252]	; (8022c1c <AL_ControlInd+0x670>)
 8022b20:	881b      	ldrh	r3, [r3, #0]
 8022b22:	2b24      	cmp	r3, #36	; 0x24
 8022b24:	d00d      	beq.n	8022b42 <AL_ControlInd+0x596>
 8022b26:	2b24      	cmp	r3, #36	; 0x24
 8022b28:	dc03      	bgt.n	8022b32 <AL_ControlInd+0x586>
 8022b2a:	3b12      	subs	r3, #18
 8022b2c:	2b01      	cmp	r3, #1
 8022b2e:	d80d      	bhi.n	8022b4c <AL_ControlInd+0x5a0>
 8022b30:	e002      	b.n	8022b38 <AL_ControlInd+0x58c>
 8022b32:	2b48      	cmp	r3, #72	; 0x48
 8022b34:	d005      	beq.n	8022b42 <AL_ControlInd+0x596>
 8022b36:	e009      	b.n	8022b4c <AL_ControlInd+0x5a0>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 8022b38:	4b39      	ldr	r3, [pc, #228]	; (8022c20 <AL_ControlInd+0x674>)
 8022b3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8022b3e:	801a      	strh	r2, [r3, #0]
            break;
 8022b40:	e008      	b.n	8022b54 <AL_ControlInd+0x5a8>
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 8022b42:	4b37      	ldr	r3, [pc, #220]	; (8022c20 <AL_ControlInd+0x674>)
 8022b44:	f242 3228 	movw	r2, #9000	; 0x2328
 8022b48:	801a      	strh	r2, [r3, #0]
                break;
 8022b4a:	e003      	b.n	8022b54 <AL_ControlInd+0x5a8>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 8022b4c:	4b34      	ldr	r3, [pc, #208]	; (8022c20 <AL_ControlInd+0x674>)
 8022b4e:	22c8      	movs	r2, #200	; 0xc8
 8022b50:	801a      	strh	r2, [r3, #0]
                break;
 8022b52:	bf00      	nop
        }
        /*ECATCHANGE_START(V5.12) ESM3*/
        EsmTimeoutCounter -= (INT16) (EsmTimeoutCounter / 10); //subtract 10% from the timeout to react before the master runs into a timeout.
 8022b54:	4b32      	ldr	r3, [pc, #200]	; (8022c20 <AL_ControlInd+0x674>)
 8022b56:	881b      	ldrh	r3, [r3, #0]
 8022b58:	b29a      	uxth	r2, r3
 8022b5a:	4b31      	ldr	r3, [pc, #196]	; (8022c20 <AL_ControlInd+0x674>)
 8022b5c:	881b      	ldrh	r3, [r3, #0]
 8022b5e:	b21b      	sxth	r3, r3
 8022b60:	4930      	ldr	r1, [pc, #192]	; (8022c24 <AL_ControlInd+0x678>)
 8022b62:	fb81 0103 	smull	r0, r1, r1, r3
 8022b66:	1089      	asrs	r1, r1, #2
 8022b68:	17db      	asrs	r3, r3, #31
 8022b6a:	1acb      	subs	r3, r1, r3
 8022b6c:	b29b      	uxth	r3, r3
 8022b6e:	b29b      	uxth	r3, r3
 8022b70:	1ad3      	subs	r3, r2, r3
 8022b72:	b29b      	uxth	r3, r3
 8022b74:	b29a      	uxth	r2, r3
 8022b76:	4b2a      	ldr	r3, [pc, #168]	; (8022c20 <AL_ControlInd+0x674>)
 8022b78:	801a      	strh	r2, [r3, #0]
 8022b7a:	e075      	b.n	8022c68 <AL_ControlInd+0x6bc>
        /*ECATCHANGE_END(V5.12) ESM3*/

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 8022b7c:	79fa      	ldrb	r2, [r7, #7]
 8022b7e:	4b23      	ldr	r3, [pc, #140]	; (8022c0c <AL_ControlInd+0x660>)
 8022b80:	781b      	ldrb	r3, [r3, #0]
 8022b82:	f003 030f 	and.w	r3, r3, #15
 8022b86:	429a      	cmp	r2, r3
 8022b88:	d065      	beq.n	8022c56 <AL_ControlInd+0x6aa>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 8022b8a:	89fb      	ldrh	r3, [r7, #14]
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d102      	bne.n	8022b96 <AL_ControlInd+0x5ea>
 8022b90:	88bb      	ldrh	r3, [r7, #4]
 8022b92:	2b00      	cmp	r3, #0
 8022b94:	d01f      	beq.n	8022bd6 <AL_ControlInd+0x62a>
 8022b96:	4b1d      	ldr	r3, [pc, #116]	; (8022c0c <AL_ControlInd+0x660>)
 8022b98:	781a      	ldrb	r2, [r3, #0]
 8022b9a:	79fb      	ldrb	r3, [r7, #7]
 8022b9c:	4313      	orrs	r3, r2
 8022b9e:	b2db      	uxtb	r3, r3
 8022ba0:	f003 0308 	and.w	r3, r3, #8
 8022ba4:	2b00      	cmp	r3, #0
 8022ba6:	d016      	beq.n	8022bd6 <AL_ControlInd+0x62a>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 8022ba8:	4b17      	ldr	r3, [pc, #92]	; (8022c08 <AL_ControlInd+0x65c>)
 8022baa:	781b      	ldrb	r3, [r3, #0]
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	d003      	beq.n	8022bb8 <AL_ControlInd+0x60c>
            {
                APPL_StopOutputHandler();
 8022bb0:	f7fd fad6 	bl	8020160 <APPL_StopOutputHandler>

                StopOutputHandler();
 8022bb4:	f7ff fbe4 	bl	8022380 <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 8022bb8:	4b15      	ldr	r3, [pc, #84]	; (8022c10 <AL_ControlInd+0x664>)
 8022bba:	881b      	ldrh	r3, [r3, #0]
 8022bbc:	2b00      	cmp	r3, #0
 8022bbe:	d003      	beq.n	8022bc8 <AL_ControlInd+0x61c>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
                DisableSyncManChannel(PROCESS_DATA_OUT);
 8022bc0:	2002      	movs	r0, #2
 8022bc2:	f7fe fda5 	bl	8021710 <DisableSyncManChannel>
 8022bc6:	e006      	b.n	8022bd6 <AL_ControlInd+0x62a>
            }
            else
                if(nPdInputSize > 0)
 8022bc8:	4b12      	ldr	r3, [pc, #72]	; (8022c14 <AL_ControlInd+0x668>)
 8022bca:	881b      	ldrh	r3, [r3, #0]
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	d002      	beq.n	8022bd6 <AL_ControlInd+0x62a>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 8022bd0:	2003      	movs	r0, #3
 8022bd2:	f7fe fd9d 	bl	8021710 <DisableSyncManChannel>
            }

        }
        if ( result != 0 )
 8022bd6:	89fb      	ldrh	r3, [r7, #14]
 8022bd8:	2b00      	cmp	r3, #0
 8022bda:	d025      	beq.n	8022c28 <AL_ControlInd+0x67c>
        {
                if (nAlStatus == STATE_OP)
 8022bdc:	4b0b      	ldr	r3, [pc, #44]	; (8022c0c <AL_ControlInd+0x660>)
 8022bde:	781b      	ldrb	r3, [r3, #0]
 8022be0:	2b08      	cmp	r3, #8
 8022be2:	d102      	bne.n	8022bea <AL_ControlInd+0x63e>
                {
                    nAlStatus = STATE_SAFEOP;
 8022be4:	4b09      	ldr	r3, [pc, #36]	; (8022c0c <AL_ControlInd+0x660>)
 8022be6:	2204      	movs	r2, #4
 8022be8:	701a      	strb	r2, [r3, #0]
                }
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 8022bea:	4b08      	ldr	r3, [pc, #32]	; (8022c0c <AL_ControlInd+0x660>)
 8022bec:	781b      	ldrb	r3, [r3, #0]
 8022bee:	f043 0310 	orr.w	r3, r3, #16
 8022bf2:	b2da      	uxtb	r2, r3
 8022bf4:	4b05      	ldr	r3, [pc, #20]	; (8022c0c <AL_ControlInd+0x660>)
 8022bf6:	701a      	strb	r2, [r3, #0]
 8022bf8:	e022      	b.n	8022c40 <AL_ControlInd+0x694>
 8022bfa:	bf00      	nop
 8022bfc:	1fff2718 	.word	0x1fff2718
 8022c00:	1fff2732 	.word	0x1fff2732
 8022c04:	1fff2756 	.word	0x1fff2756
 8022c08:	1fff2751 	.word	0x1fff2751
 8022c0c:	1fff2719 	.word	0x1fff2719
 8022c10:	1fff271a 	.word	0x1fff271a
 8022c14:	1fff2746 	.word	0x1fff2746
 8022c18:	1fff2744 	.word	0x1fff2744
 8022c1c:	1fff2716 	.word	0x1fff2716
 8022c20:	1fff274e 	.word	0x1fff274e
 8022c24:	66666667 	.word	0x66666667
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 8022c28:	88bb      	ldrh	r3, [r7, #4]
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	d005      	beq.n	8022c3a <AL_ControlInd+0x68e>
            {
                /* state change request from the user */
                result = alStatusCode;
 8022c2e:	88bb      	ldrh	r3, [r7, #4]
 8022c30:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 8022c32:	79fb      	ldrb	r3, [r7, #7]
 8022c34:	f043 0310 	orr.w	r3, r3, #16
 8022c38:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 8022c3a:	4a0d      	ldr	r2, [pc, #52]	; (8022c70 <AL_ControlInd+0x6c4>)
 8022c3c:	79fb      	ldrb	r3, [r7, #7]
 8022c3e:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 8022c40:	4b0c      	ldr	r3, [pc, #48]	; (8022c74 <AL_ControlInd+0x6c8>)
 8022c42:	2200      	movs	r2, #0
 8022c44:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 8022c46:	4b0a      	ldr	r3, [pc, #40]	; (8022c70 <AL_ControlInd+0x6c4>)
 8022c48:	781a      	ldrb	r2, [r3, #0]
 8022c4a:	89fb      	ldrh	r3, [r7, #14]
 8022c4c:	4610      	mov	r0, r2
 8022c4e:	4619      	mov	r1, r3
 8022c50:	f7ff fc48 	bl	80224e4 <SetALStatus>
 8022c54:	e008      	b.n	8022c68 <AL_ControlInd+0x6bc>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 8022c56:	4b07      	ldr	r3, [pc, #28]	; (8022c74 <AL_ControlInd+0x6c8>)
 8022c58:	2200      	movs	r2, #0
 8022c5a:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 8022c5c:	4b04      	ldr	r3, [pc, #16]	; (8022c70 <AL_ControlInd+0x6c4>)
 8022c5e:	781b      	ldrb	r3, [r3, #0]
 8022c60:	4618      	mov	r0, r3
 8022c62:	2100      	movs	r1, #0
 8022c64:	f7ff fc3e 	bl	80224e4 <SetALStatus>
    }

}
 8022c68:	3710      	adds	r7, #16
 8022c6a:	46bd      	mov	sp, r7
 8022c6c:	bd80      	pop	{r7, pc}
 8022c6e:	bf00      	nop
 8022c70:	1fff2719 	.word	0x1fff2719
 8022c74:	1fff2744 	.word	0x1fff2744

08022c78 <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 8022c78:	b580      	push	{r7, lr}
 8022c7a:	b082      	sub	sp, #8
 8022c7c:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 8022c7e:	4ba1      	ldr	r3, [pc, #644]	; (8022f04 <AL_ControlRes+0x28c>)
 8022c80:	781b      	ldrb	r3, [r3, #0]
 8022c82:	2b00      	cmp	r3, #0
 8022c84:	f000 813b 	beq.w	8022efe <AL_ControlRes+0x286>
    {
        UINT16 result = 0;
 8022c88:	2300      	movs	r3, #0
 8022c8a:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8022c8c:	2300      	movs	r3, #0
 8022c8e:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 8022c90:	2300      	movs	r3, #0
 8022c92:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8022c94:	4b9c      	ldr	r3, [pc, #624]	; (8022f08 <AL_ControlRes+0x290>)
 8022c96:	881b      	ldrh	r3, [r3, #0]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d17c      	bne.n	8022d96 <AL_ControlRes+0x11e>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 8022c9c:	4b9b      	ldr	r3, [pc, #620]	; (8022f0c <AL_ControlRes+0x294>)
 8022c9e:	881b      	ldrh	r3, [r3, #0]
 8022ca0:	091b      	lsrs	r3, r3, #4
 8022ca2:	b29b      	uxth	r3, r3
 8022ca4:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 8022ca6:	4b99      	ldr	r3, [pc, #612]	; (8022f0c <AL_ControlRes+0x294>)
 8022ca8:	881b      	ldrh	r3, [r3, #0]
 8022caa:	2b24      	cmp	r3, #36	; 0x24
 8022cac:	d01f      	beq.n	8022cee <AL_ControlRes+0x76>
 8022cae:	2b24      	cmp	r3, #36	; 0x24
 8022cb0:	dc04      	bgt.n	8022cbc <AL_ControlRes+0x44>
 8022cb2:	3b12      	subs	r3, #18
 8022cb4:	2b01      	cmp	r3, #1
 8022cb6:	f200 810f 	bhi.w	8022ed8 <AL_ControlRes+0x260>
 8022cba:	e002      	b.n	8022cc2 <AL_ControlRes+0x4a>
 8022cbc:	2b48      	cmp	r3, #72	; 0x48
 8022cbe:	d02c      	beq.n	8022d1a <AL_ControlRes+0xa2>
 8022cc0:	e10a      	b.n	8022ed8 <AL_ControlRes+0x260>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                        if (!bApplEsmPending)
 8022cc2:	4b93      	ldr	r3, [pc, #588]	; (8022f10 <AL_ControlRes+0x298>)
 8022cc4:	781b      	ldrb	r3, [r3, #0]
 8022cc6:	f083 0301 	eor.w	r3, r3, #1
 8022cca:	b2db      	uxtb	r3, r3
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d001      	beq.n	8022cd4 <AL_ControlRes+0x5c>
                        {
                            APPL_StopMailboxHandler();
 8022cd0:	f7fd fa22 	bl	8020118 <APPL_StopMailboxHandler>
                        }

                    MBX_StopMailboxHandler();
 8022cd4:	f000 fd2e 	bl	8023734 <MBX_StopMailboxHandler>
                    if(bLocalErrorFlag)
 8022cd8:	4b8e      	ldr	r3, [pc, #568]	; (8022f14 <AL_ControlRes+0x29c>)
 8022cda:	781b      	ldrb	r3, [r3, #0]
 8022cdc:	2b00      	cmp	r3, #0
 8022cde:	d003      	beq.n	8022ce8 <AL_ControlRes+0x70>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8022ce0:	4b8d      	ldr	r3, [pc, #564]	; (8022f18 <AL_ControlRes+0x2a0>)
 8022ce2:	881b      	ldrh	r3, [r3, #0]
 8022ce4:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8022ce6:	e055      	b.n	8022d94 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8022ce8:	2301      	movs	r3, #1
 8022cea:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 8022cec:	e052      	b.n	8022d94 <AL_ControlRes+0x11c>
                case PREOP_2_SAFEOP:

                        if (!bApplEsmPending)
 8022cee:	4b88      	ldr	r3, [pc, #544]	; (8022f10 <AL_ControlRes+0x298>)
 8022cf0:	781b      	ldrb	r3, [r3, #0]
 8022cf2:	f083 0301 	eor.w	r3, r3, #1
 8022cf6:	b2db      	uxtb	r3, r3
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d001      	beq.n	8022d00 <AL_ControlRes+0x88>
                        {
                            APPL_StopInputHandler();
 8022cfc:	f7fd fa20 	bl	8020140 <APPL_StopInputHandler>
                        }

                    StopInputHandler();
 8022d00:	f7ff fb4e 	bl	80223a0 <StopInputHandler>
                    
                    if(bLocalErrorFlag)
 8022d04:	4b83      	ldr	r3, [pc, #524]	; (8022f14 <AL_ControlRes+0x29c>)
 8022d06:	781b      	ldrb	r3, [r3, #0]
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	d003      	beq.n	8022d14 <AL_ControlRes+0x9c>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8022d0c:	4b82      	ldr	r3, [pc, #520]	; (8022f18 <AL_ControlRes+0x2a0>)
 8022d0e:	881b      	ldrh	r3, [r3, #0]
 8022d10:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8022d12:	e03f      	b.n	8022d94 <AL_ControlRes+0x11c>
                        StatusCode = u16LocalErrorCode;
                    }
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8022d14:	2301      	movs	r3, #1
 8022d16:	80bb      	strh	r3, [r7, #4]
                    }
                break;
 8022d18:	e03c      	b.n	8022d94 <AL_ControlRes+0x11c>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 8022d1a:	4b80      	ldr	r3, [pc, #512]	; (8022f1c <AL_ControlRes+0x2a4>)
 8022d1c:	781b      	ldrb	r3, [r3, #0]
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	d01a      	beq.n	8022d58 <AL_ControlRes+0xe0>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning)
 8022d22:	4b7f      	ldr	r3, [pc, #508]	; (8022f20 <AL_ControlRes+0x2a8>)
 8022d24:	781b      	ldrb	r3, [r3, #0]
 8022d26:	f083 0301 	eor.w	r3, r3, #1
 8022d2a:	b2db      	uxtb	r3, r3
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d002      	beq.n	8022d36 <AL_ControlRes+0xbe>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 8022d30:	232d      	movs	r3, #45	; 0x2d
 8022d32:	80bb      	strh	r3, [r7, #4]
 8022d34:	e01e      	b.n	8022d74 <AL_ControlRes+0xfc>
                        }
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 8022d36:	4b7b      	ldr	r3, [pc, #492]	; (8022f24 <AL_ControlRes+0x2ac>)
 8022d38:	781b      	ldrb	r3, [r3, #0]
 8022d3a:	f083 0301 	eor.w	r3, r3, #1
 8022d3e:	b2db      	uxtb	r3, r3
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	d006      	beq.n	8022d52 <AL_ControlRes+0xda>
 8022d44:	4b78      	ldr	r3, [pc, #480]	; (8022f28 <AL_ControlRes+0x2b0>)
 8022d46:	881b      	ldrh	r3, [r3, #0]
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	d002      	beq.n	8022d52 <AL_ControlRes+0xda>
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8022d4c:	231b      	movs	r3, #27
 8022d4e:	80bb      	strh	r3, [r7, #4]
 8022d50:	e010      	b.n	8022d74 <AL_ControlRes+0xfc>
                        }
                        else
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 8022d52:	231a      	movs	r3, #26
 8022d54:	80bb      	strh	r3, [r7, #4]
 8022d56:	e00d      	b.n	8022d74 <AL_ControlRes+0xfc>
                        }
                    }
                    else
                    {
                        if (nPdOutputSize > 0)
 8022d58:	4b73      	ldr	r3, [pc, #460]	; (8022f28 <AL_ControlRes+0x2b0>)
 8022d5a:	881b      	ldrh	r3, [r3, #0]
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d002      	beq.n	8022d66 <AL_ControlRes+0xee>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8022d60:	231b      	movs	r3, #27
 8022d62:	80bb      	strh	r3, [r7, #4]
 8022d64:	e006      	b.n	8022d74 <AL_ControlRes+0xfc>
                        }
                        else
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 8022d66:	2308      	movs	r3, #8
 8022d68:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 8022d6a:	2300      	movs	r3, #0
 8022d6c:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 8022d6e:	4b6f      	ldr	r3, [pc, #444]	; (8022f2c <AL_ControlRes+0x2b4>)
 8022d70:	2201      	movs	r2, #1
 8022d72:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 8022d74:	88bb      	ldrh	r3, [r7, #4]
 8022d76:	2b00      	cmp	r3, #0
 8022d78:	d00b      	beq.n	8022d92 <AL_ControlRes+0x11a>
                    {
                            if (!bApplEsmPending)
 8022d7a:	4b65      	ldr	r3, [pc, #404]	; (8022f10 <AL_ControlRes+0x298>)
 8022d7c:	781b      	ldrb	r3, [r3, #0]
 8022d7e:	f083 0301 	eor.w	r3, r3, #1
 8022d82:	b2db      	uxtb	r3, r3
 8022d84:	2b00      	cmp	r3, #0
 8022d86:	d001      	beq.n	8022d8c <AL_ControlRes+0x114>
                            {
                                APPL_StopOutputHandler();
 8022d88:	f7fd f9ea 	bl	8020160 <APPL_StopOutputHandler>
                            }

                        StopOutputHandler();
 8022d8c:	f7ff faf8 	bl	8022380 <StopOutputHandler>
                    }
                break;
 8022d90:	e7ff      	b.n	8022d92 <AL_ControlRes+0x11a>
 8022d92:	bf00      	nop
 8022d94:	e0a0      	b.n	8022ed8 <AL_ControlRes+0x260>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 8022d96:	4b5d      	ldr	r3, [pc, #372]	; (8022f0c <AL_ControlRes+0x294>)
 8022d98:	881b      	ldrh	r3, [r3, #0]
 8022d9a:	2b24      	cmp	r3, #36	; 0x24
 8022d9c:	d02a      	beq.n	8022df4 <AL_ControlRes+0x17c>
 8022d9e:	2b24      	cmp	r3, #36	; 0x24
 8022da0:	dc04      	bgt.n	8022dac <AL_ControlRes+0x134>
 8022da2:	3b12      	subs	r3, #18
 8022da4:	2b01      	cmp	r3, #1
 8022da6:	f200 8097 	bhi.w	8022ed8 <AL_ControlRes+0x260>
 8022daa:	e002      	b.n	8022db2 <AL_ControlRes+0x13a>
 8022dac:	2b48      	cmp	r3, #72	; 0x48
 8022dae:	d03f      	beq.n	8022e30 <AL_ControlRes+0x1b8>
 8022db0:	e092      	b.n	8022ed8 <AL_ControlRes+0x260>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 8022db2:	4b57      	ldr	r3, [pc, #348]	; (8022f10 <AL_ControlRes+0x298>)
 8022db4:	781b      	ldrb	r3, [r3, #0]
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d01b      	beq.n	8022df2 <AL_ControlRes+0x17a>
                    {
                        bApplEsmPending = FALSE;
 8022dba:	4b55      	ldr	r3, [pc, #340]	; (8022f10 <AL_ControlRes+0x298>)
 8022dbc:	2200      	movs	r2, #0
 8022dbe:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 8022dc0:	f7fd f9a2 	bl	8020108 <APPL_StartMailboxHandler>
 8022dc4:	4603      	mov	r3, r0
 8022dc6:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8022dc8:	887b      	ldrh	r3, [r7, #2]
 8022dca:	2b00      	cmp	r3, #0
 8022dcc:	d109      	bne.n	8022de2 <AL_ControlRes+0x16a>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 8022dce:	4b58      	ldr	r3, [pc, #352]	; (8022f30 <AL_ControlRes+0x2b8>)
 8022dd0:	2201      	movs	r2, #1
 8022dd2:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 8022dd4:	4b4d      	ldr	r3, [pc, #308]	; (8022f0c <AL_ControlRes+0x294>)
 8022dd6:	881b      	ldrh	r3, [r3, #0]
 8022dd8:	b2db      	uxtb	r3, r3
 8022dda:	f003 030f 	and.w	r3, r3, #15
 8022dde:	71fb      	strb	r3, [r7, #7]
 8022de0:	e007      	b.n	8022df2 <AL_ControlRes+0x17a>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 8022de2:	887b      	ldrh	r3, [r7, #2]
 8022de4:	2bff      	cmp	r3, #255	; 0xff
 8022de6:	d004      	beq.n	8022df2 <AL_ControlRes+0x17a>
                            {
                                APPL_StopMailboxHandler();
 8022de8:	f7fd f996 	bl	8020118 <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 8022dec:	f000 fca2 	bl	8023734 <MBX_StopMailboxHandler>
                            }
                        }
                    }
                break;
 8022df0:	e072      	b.n	8022ed8 <AL_ControlRes+0x260>
 8022df2:	e071      	b.n	8022ed8 <AL_ControlRes+0x260>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 8022df4:	4b46      	ldr	r3, [pc, #280]	; (8022f10 <AL_ControlRes+0x298>)
 8022df6:	781b      	ldrb	r3, [r3, #0]
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	d018      	beq.n	8022e2e <AL_ControlRes+0x1b6>
                    {
                        bApplEsmPending = FALSE;
 8022dfc:	4b44      	ldr	r3, [pc, #272]	; (8022f10 <AL_ControlRes+0x298>)
 8022dfe:	2200      	movs	r2, #0
 8022e00:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 8022e02:	484c      	ldr	r0, [pc, #304]	; (8022f34 <AL_ControlRes+0x2bc>)
 8022e04:	f7fd f990 	bl	8020128 <APPL_StartInputHandler>
 8022e08:	4603      	mov	r3, r0
 8022e0a:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8022e0c:	887b      	ldrh	r3, [r7, #2]
 8022e0e:	2b00      	cmp	r3, #0
 8022e10:	d105      	bne.n	8022e1e <AL_ControlRes+0x1a6>
                        {
                            bEcatInputUpdateRunning = TRUE;
 8022e12:	4b49      	ldr	r3, [pc, #292]	; (8022f38 <AL_ControlRes+0x2c0>)
 8022e14:	2201      	movs	r2, #1
 8022e16:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 8022e18:	2304      	movs	r3, #4
 8022e1a:	71fb      	strb	r3, [r7, #7]
 8022e1c:	e007      	b.n	8022e2e <AL_ControlRes+0x1b6>
                        else
                        {
                            /*The application specific transition failed.
                            (In pending case the application need to complete the transition)*/

                            if(result != NOERROR_INWORK)
 8022e1e:	887b      	ldrh	r3, [r7, #2]
 8022e20:	2bff      	cmp	r3, #255	; 0xff
 8022e22:	d004      	beq.n	8022e2e <AL_ControlRes+0x1b6>
                            {
                                APPL_StopInputHandler();
 8022e24:	f7fd f98c 	bl	8020140 <APPL_StopInputHandler>
                                StopInputHandler();
 8022e28:	f7ff faba 	bl	80223a0 <StopInputHandler>
                            }
                        }
                    }
                break;
 8022e2c:	e054      	b.n	8022ed8 <AL_ControlRes+0x260>
 8022e2e:	e053      	b.n	8022ed8 <AL_ControlRes+0x260>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 8022e30:	4b37      	ldr	r3, [pc, #220]	; (8022f10 <AL_ControlRes+0x298>)
 8022e32:	781b      	ldrb	r3, [r3, #0]
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d04e      	beq.n	8022ed6 <AL_ControlRes+0x25e>
                    {
                        if(bDcSyncActive)
 8022e38:	4b38      	ldr	r3, [pc, #224]	; (8022f1c <AL_ControlRes+0x2a4>)
 8022e3a:	781b      	ldrb	r3, [r3, #0]
 8022e3c:	2b00      	cmp	r3, #0
 8022e3e:	d02a      	beq.n	8022e96 <AL_ControlRes+0x21e>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 8022e40:	4b3e      	ldr	r3, [pc, #248]	; (8022f3c <AL_ControlRes+0x2c4>)
 8022e42:	881b      	ldrh	r3, [r3, #0]
 8022e44:	b21b      	sxth	r3, r3
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	dd45      	ble.n	8022ed6 <AL_ControlRes+0x25e>
 8022e4a:	4b3c      	ldr	r3, [pc, #240]	; (8022f3c <AL_ControlRes+0x2c4>)
 8022e4c:	881a      	ldrh	r2, [r3, #0]
 8022e4e:	4b3c      	ldr	r3, [pc, #240]	; (8022f40 <AL_ControlRes+0x2c8>)
 8022e50:	881b      	ldrh	r3, [r3, #0]
 8022e52:	b212      	sxth	r2, r2
 8022e54:	b21b      	sxth	r3, r3
 8022e56:	429a      	cmp	r2, r3
 8022e58:	dc3d      	bgt.n	8022ed6 <AL_ControlRes+0x25e>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 8022e5a:	4b38      	ldr	r3, [pc, #224]	; (8022f3c <AL_ControlRes+0x2c4>)
 8022e5c:	2200      	movs	r2, #0
 8022e5e:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 8022e60:	4b37      	ldr	r3, [pc, #220]	; (8022f40 <AL_ControlRes+0x2c8>)
 8022e62:	2200      	movs	r2, #0
 8022e64:	801a      	strh	r2, [r3, #0]

/*ECATCHANGE_START(V5.12) ESM4*/
                                bApplEsmPending = FALSE;
 8022e66:	4b2a      	ldr	r3, [pc, #168]	; (8022f10 <AL_ControlRes+0x298>)
 8022e68:	2200      	movs	r2, #0
 8022e6a:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) ESM4*/
                                result = APPL_StartOutputHandler();
 8022e6c:	f7fd f970 	bl	8020150 <APPL_StartOutputHandler>
 8022e70:	4603      	mov	r3, r0
 8022e72:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 8022e74:	887b      	ldrh	r3, [r7, #2]
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d105      	bne.n	8022e86 <AL_ControlRes+0x20e>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 8022e7a:	4b2c      	ldr	r3, [pc, #176]	; (8022f2c <AL_ControlRes+0x2b4>)
 8022e7c:	2201      	movs	r2, #1
 8022e7e:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8022e80:	2308      	movs	r3, #8
 8022e82:	71fb      	strb	r3, [r7, #7]
 8022e84:	e027      	b.n	8022ed6 <AL_ControlRes+0x25e>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 8022e86:	887b      	ldrh	r3, [r7, #2]
 8022e88:	2bff      	cmp	r3, #255	; 0xff
 8022e8a:	d024      	beq.n	8022ed6 <AL_ControlRes+0x25e>
                                    {
                                        APPL_StopOutputHandler();
 8022e8c:	f7fd f968 	bl	8020160 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8022e90:	f7ff fa76 	bl	8022380 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8022e94:	e01f      	b.n	8022ed6 <AL_ControlRes+0x25e>
                                }
                            }
                        }
                        else
                        {
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 8022e96:	4b24      	ldr	r3, [pc, #144]	; (8022f28 <AL_ControlRes+0x2b0>)
 8022e98:	881b      	ldrh	r3, [r3, #0]
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d003      	beq.n	8022ea6 <AL_ControlRes+0x22e>
 8022e9e:	4b21      	ldr	r3, [pc, #132]	; (8022f24 <AL_ControlRes+0x2ac>)
 8022ea0:	781b      	ldrb	r3, [r3, #0]
 8022ea2:	2b00      	cmp	r3, #0
 8022ea4:	d017      	beq.n	8022ed6 <AL_ControlRes+0x25e>
                            {
/*ECATCHANGE_START(V5.12) ESM4*/
                                bApplEsmPending = FALSE;  
 8022ea6:	4b1a      	ldr	r3, [pc, #104]	; (8022f10 <AL_ControlRes+0x298>)
 8022ea8:	2200      	movs	r2, #0
 8022eaa:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.12) ESM4*/
                                result = APPL_StartOutputHandler();
 8022eac:	f7fd f950 	bl	8020150 <APPL_StartOutputHandler>
 8022eb0:	4603      	mov	r3, r0
 8022eb2:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 8022eb4:	887b      	ldrh	r3, [r7, #2]
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d105      	bne.n	8022ec6 <AL_ControlRes+0x24e>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 8022eba:	4b1c      	ldr	r3, [pc, #112]	; (8022f2c <AL_ControlRes+0x2b4>)
 8022ebc:	2201      	movs	r2, #1
 8022ebe:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8022ec0:	2308      	movs	r3, #8
 8022ec2:	71fb      	strb	r3, [r7, #7]
 8022ec4:	e007      	b.n	8022ed6 <AL_ControlRes+0x25e>
                                }
                                else
                                {
                                    if(result != NOERROR_INWORK)
 8022ec6:	887b      	ldrh	r3, [r7, #2]
 8022ec8:	2bff      	cmp	r3, #255	; 0xff
 8022eca:	d004      	beq.n	8022ed6 <AL_ControlRes+0x25e>
                                    {
                                        APPL_StopOutputHandler();
 8022ecc:	f7fd f948 	bl	8020160 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8022ed0:	f7ff fa56 	bl	8022380 <StopOutputHandler>
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8022ed4:	e7ff      	b.n	8022ed6 <AL_ControlRes+0x25e>
 8022ed6:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8022ed8:	79fb      	ldrb	r3, [r7, #7]
 8022eda:	2b00      	cmp	r3, #0
 8022edc:	d00f      	beq.n	8022efe <AL_ControlRes+0x286>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 8022ede:	4b09      	ldr	r3, [pc, #36]	; (8022f04 <AL_ControlRes+0x28c>)
 8022ee0:	2200      	movs	r2, #0
 8022ee2:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 8022ee4:	88bb      	ldrh	r3, [r7, #4]
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	d003      	beq.n	8022ef2 <AL_ControlRes+0x27a>
            {
                Status |= STATE_CHANGE;
 8022eea:	79fb      	ldrb	r3, [r7, #7]
 8022eec:	f043 0310 	orr.w	r3, r3, #16
 8022ef0:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 8022ef2:	79fa      	ldrb	r2, [r7, #7]
 8022ef4:	88bb      	ldrh	r3, [r7, #4]
 8022ef6:	4610      	mov	r0, r2
 8022ef8:	4619      	mov	r1, r3
 8022efa:	f7ff faf3 	bl	80224e4 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 8022efe:	3708      	adds	r7, #8
 8022f00:	46bd      	mov	sp, r7
 8022f02:	bd80      	pop	{r7, pc}
 8022f04:	1fff2744 	.word	0x1fff2744
 8022f08:	1fff274e 	.word	0x1fff274e
 8022f0c:	1fff2716 	.word	0x1fff2716
 8022f10:	1fff2718 	.word	0x1fff2718
 8022f14:	1fff2720 	.word	0x1fff2720
 8022f18:	1fff271c 	.word	0x1fff271c
 8022f1c:	1fff2750 	.word	0x1fff2750
 8022f20:	1fff2734 	.word	0x1fff2734
 8022f24:	1fff274c 	.word	0x1fff274c
 8022f28:	1fff271a 	.word	0x1fff271a
 8022f2c:	1fff2751 	.word	0x1fff2751
 8022f30:	1fff27ce 	.word	0x1fff27ce
 8022f34:	1fff2732 	.word	0x1fff2732
 8022f38:	1fff2756 	.word	0x1fff2756
 8022f3c:	1fff272c 	.word	0x1fff272c
 8022f40:	1fff2724 	.word	0x1fff2724

08022f44 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 8022f44:	b480      	push	{r7}
 8022f46:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.12) ECAT5*/
/*ECATCHANGE_END(V5.12) ECAT5*/

    if(bDcSyncActive && bEcatInputUpdateRunning)
 8022f48:	4b39      	ldr	r3, [pc, #228]	; (8023030 <DC_CheckWatchdog+0xec>)
 8022f4a:	781b      	ldrb	r3, [r3, #0]
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	d06b      	beq.n	8023028 <DC_CheckWatchdog+0xe4>
 8022f50:	4b38      	ldr	r3, [pc, #224]	; (8023034 <DC_CheckWatchdog+0xf0>)
 8022f52:	781b      	ldrb	r3, [r3, #0]
 8022f54:	2b00      	cmp	r3, #0
 8022f56:	d067      	beq.n	8023028 <DC_CheckWatchdog+0xe4>
    {
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 8022f58:	4b37      	ldr	r3, [pc, #220]	; (8023038 <DC_CheckWatchdog+0xf4>)
 8022f5a:	881b      	ldrh	r3, [r3, #0]
 8022f5c:	2b00      	cmp	r3, #0
 8022f5e:	d009      	beq.n	8022f74 <DC_CheckWatchdog+0x30>
 8022f60:	4b36      	ldr	r3, [pc, #216]	; (802303c <DC_CheckWatchdog+0xf8>)
 8022f62:	881a      	ldrh	r2, [r3, #0]
 8022f64:	4b34      	ldr	r3, [pc, #208]	; (8023038 <DC_CheckWatchdog+0xf4>)
 8022f66:	881b      	ldrh	r3, [r3, #0]
 8022f68:	429a      	cmp	r2, r3
 8022f6a:	d303      	bcc.n	8022f74 <DC_CheckWatchdog+0x30>
        {
                /*Sync0 watchdog expired*/
                bDcRunning = FALSE;        
 8022f6c:	4b34      	ldr	r3, [pc, #208]	; (8023040 <DC_CheckWatchdog+0xfc>)
 8022f6e:	2200      	movs	r2, #0
 8022f70:	701a      	strb	r2, [r3, #0]
 8022f72:	e00e      	b.n	8022f92 <DC_CheckWatchdog+0x4e>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 8022f74:	4b31      	ldr	r3, [pc, #196]	; (802303c <DC_CheckWatchdog+0xf8>)
 8022f76:	881a      	ldrh	r2, [r3, #0]
 8022f78:	4b2f      	ldr	r3, [pc, #188]	; (8023038 <DC_CheckWatchdog+0xf4>)
 8022f7a:	881b      	ldrh	r3, [r3, #0]
 8022f7c:	429a      	cmp	r2, r3
 8022f7e:	d205      	bcs.n	8022f8c <DC_CheckWatchdog+0x48>
            {
                Sync0WdCounter ++;
 8022f80:	4b2e      	ldr	r3, [pc, #184]	; (802303c <DC_CheckWatchdog+0xf8>)
 8022f82:	881b      	ldrh	r3, [r3, #0]
 8022f84:	3301      	adds	r3, #1
 8022f86:	b29a      	uxth	r2, r3
 8022f88:	4b2c      	ldr	r3, [pc, #176]	; (802303c <DC_CheckWatchdog+0xf8>)
 8022f8a:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8022f8c:	4b2c      	ldr	r3, [pc, #176]	; (8023040 <DC_CheckWatchdog+0xfc>)
 8022f8e:	2201      	movs	r2, #1
 8022f90:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 8022f92:	4b2b      	ldr	r3, [pc, #172]	; (8023040 <DC_CheckWatchdog+0xfc>)
 8022f94:	781b      	ldrb	r3, [r3, #0]
 8022f96:	2b00      	cmp	r3, #0
 8022f98:	d013      	beq.n	8022fc2 <DC_CheckWatchdog+0x7e>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 8022f9a:	4b2a      	ldr	r3, [pc, #168]	; (8023044 <DC_CheckWatchdog+0x100>)
 8022f9c:	881b      	ldrh	r3, [r3, #0]
 8022f9e:	2b00      	cmp	r3, #0
 8022fa0:	d00f      	beq.n	8022fc2 <DC_CheckWatchdog+0x7e>
            {
                if(Sync1WdCounter < Sync1WdValue)
 8022fa2:	4b29      	ldr	r3, [pc, #164]	; (8023048 <DC_CheckWatchdog+0x104>)
 8022fa4:	881a      	ldrh	r2, [r3, #0]
 8022fa6:	4b27      	ldr	r3, [pc, #156]	; (8023044 <DC_CheckWatchdog+0x100>)
 8022fa8:	881b      	ldrh	r3, [r3, #0]
 8022faa:	429a      	cmp	r2, r3
 8022fac:	d206      	bcs.n	8022fbc <DC_CheckWatchdog+0x78>
                {
                    Sync1WdCounter ++;
 8022fae:	4b26      	ldr	r3, [pc, #152]	; (8023048 <DC_CheckWatchdog+0x104>)
 8022fb0:	881b      	ldrh	r3, [r3, #0]
 8022fb2:	3301      	adds	r3, #1
 8022fb4:	b29a      	uxth	r2, r3
 8022fb6:	4b24      	ldr	r3, [pc, #144]	; (8023048 <DC_CheckWatchdog+0x104>)
 8022fb8:	801a      	strh	r2, [r3, #0]
 8022fba:	e002      	b.n	8022fc2 <DC_CheckWatchdog+0x7e>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 8022fbc:	4b20      	ldr	r3, [pc, #128]	; (8023040 <DC_CheckWatchdog+0xfc>)
 8022fbe:	2200      	movs	r2, #0
 8022fc0:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        if(bDcRunning)
 8022fc2:	4b1f      	ldr	r3, [pc, #124]	; (8023040 <DC_CheckWatchdog+0xfc>)
 8022fc4:	781b      	ldrb	r3, [r3, #0]
 8022fc6:	2b00      	cmp	r3, #0
 8022fc8:	d027      	beq.n	802301a <DC_CheckWatchdog+0xd6>
        {
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 8022fca:	4b20      	ldr	r3, [pc, #128]	; (802304c <DC_CheckWatchdog+0x108>)
 8022fcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022fce:	4b20      	ldr	r3, [pc, #128]	; (8023050 <DC_CheckWatchdog+0x10c>)
 8022fd0:	891b      	ldrh	r3, [r3, #8]
 8022fd2:	429a      	cmp	r2, r3
 8022fd4:	d211      	bcs.n	8022ffa <DC_CheckWatchdog+0xb6>
            {
                bSmSyncSequenceValid = TRUE;
 8022fd6:	4b1f      	ldr	r3, [pc, #124]	; (8023054 <DC_CheckWatchdog+0x110>)
 8022fd8:	2201      	movs	r2, #1
 8022fda:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 8022fdc:	4b1e      	ldr	r3, [pc, #120]	; (8023058 <DC_CheckWatchdog+0x114>)
 8022fde:	881b      	ldrh	r3, [r3, #0]
 8022fe0:	b21b      	sxth	r3, r3
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	dd20      	ble.n	8023028 <DC_CheckWatchdog+0xe4>
                {
                    i16WaitForPllRunningCnt++;
 8022fe6:	4b1d      	ldr	r3, [pc, #116]	; (802305c <DC_CheckWatchdog+0x118>)
 8022fe8:	881b      	ldrh	r3, [r3, #0]
 8022fea:	b29b      	uxth	r3, r3
 8022fec:	b29b      	uxth	r3, r3
 8022fee:	3301      	adds	r3, #1
 8022ff0:	b29b      	uxth	r3, r3
 8022ff2:	b29a      	uxth	r2, r3
 8022ff4:	4b19      	ldr	r3, [pc, #100]	; (802305c <DC_CheckWatchdog+0x118>)
 8022ff6:	801a      	strh	r2, [r3, #0]
 8022ff8:	e016      	b.n	8023028 <DC_CheckWatchdog+0xe4>
                }
            }
            else if (bSmSyncSequenceValid)
 8022ffa:	4b16      	ldr	r3, [pc, #88]	; (8023054 <DC_CheckWatchdog+0x110>)
 8022ffc:	781b      	ldrb	r3, [r3, #0]
 8022ffe:	2b00      	cmp	r3, #0
 8023000:	d012      	beq.n	8023028 <DC_CheckWatchdog+0xe4>
            {
                    bSmSyncSequenceValid = FALSE;
 8023002:	4b14      	ldr	r3, [pc, #80]	; (8023054 <DC_CheckWatchdog+0x110>)
 8023004:	2200      	movs	r2, #0
 8023006:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active reset the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 8023008:	4b13      	ldr	r3, [pc, #76]	; (8023058 <DC_CheckWatchdog+0x114>)
 802300a:	881b      	ldrh	r3, [r3, #0]
 802300c:	b21b      	sxth	r3, r3
 802300e:	2b00      	cmp	r3, #0
 8023010:	dd0a      	ble.n	8023028 <DC_CheckWatchdog+0xe4>
                {
                    i16WaitForPllRunningCnt = 0;
 8023012:	4b12      	ldr	r3, [pc, #72]	; (802305c <DC_CheckWatchdog+0x118>)
 8023014:	2200      	movs	r2, #0
 8023016:	801a      	strh	r2, [r3, #0]
 8023018:	e006      	b.n	8023028 <DC_CheckWatchdog+0xe4>
                }
            }
        }
        else if(bSmSyncSequenceValid)
 802301a:	4b0e      	ldr	r3, [pc, #56]	; (8023054 <DC_CheckWatchdog+0x110>)
 802301c:	781b      	ldrb	r3, [r3, #0]
 802301e:	2b00      	cmp	r3, #0
 8023020:	d002      	beq.n	8023028 <DC_CheckWatchdog+0xe4>
        {
           bSmSyncSequenceValid = FALSE;
 8023022:	4b0c      	ldr	r3, [pc, #48]	; (8023054 <DC_CheckWatchdog+0x110>)
 8023024:	2200      	movs	r2, #0
 8023026:	701a      	strb	r2, [r3, #0]
        }
    }
    /*ECATCHANGE_START(V5.12) ECAT5*/
    /*ECATCHANGE_END(V5.12) ECAT5*/
}
 8023028:	46bd      	mov	sp, r7
 802302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802302e:	4770      	bx	lr
 8023030:	1fff2750 	.word	0x1fff2750
 8023034:	1fff2756 	.word	0x1fff2756
 8023038:	1fff2728 	.word	0x1fff2728
 802303c:	1fff271e 	.word	0x1fff271e
 8023040:	1fff2734 	.word	0x1fff2734
 8023044:	1fff272e 	.word	0x1fff272e
 8023048:	1fff2752 	.word	0x1fff2752
 802304c:	1fff2838 	.word	0x1fff2838
 8023050:	1fff1440 	.word	0x1fff1440
 8023054:	1fff274d 	.word	0x1fff274d
 8023058:	1fff272c 	.word	0x1fff272c
 802305c:	1fff2724 	.word	0x1fff2724

08023060 <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 8023060:	b580      	push	{r7, lr}
 8023062:	b082      	sub	sp, #8
 8023064:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 8023066:	4b20      	ldr	r3, [pc, #128]	; (80230e8 <CheckIfEcatError+0x88>)
 8023068:	881b      	ldrh	r3, [r3, #0]
 802306a:	2b00      	cmp	r3, #0
 802306c:	d019      	beq.n	80230a2 <CheckIfEcatError+0x42>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 802306e:	2300      	movs	r3, #0
 8023070:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 8023072:	4b1e      	ldr	r3, [pc, #120]	; (80230ec <CheckIfEcatError+0x8c>)
 8023074:	881b      	ldrh	r3, [r3, #0]
 8023076:	80fb      	strh	r3, [r7, #6]
      WdStatusOK = SWAPWORD(WdStatusOK);

      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 8023078:	88fb      	ldrh	r3, [r7, #6]
 802307a:	f003 0301 	and.w	r3, r3, #1
 802307e:	2b00      	cmp	r3, #0
 8023080:	d10f      	bne.n	80230a2 <CheckIfEcatError+0x42>
 8023082:	4b1b      	ldr	r3, [pc, #108]	; (80230f0 <CheckIfEcatError+0x90>)
 8023084:	881b      	ldrh	r3, [r3, #0]
 8023086:	2b00      	cmp	r3, #0
 8023088:	d00b      	beq.n	80230a2 <CheckIfEcatError+0x42>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning
 802308a:	4b1a      	ldr	r3, [pc, #104]	; (80230f4 <CheckIfEcatError+0x94>)
 802308c:	781b      	ldrb	r3, [r3, #0]
 802308e:	2b00      	cmp	r3, #0
 8023090:	d004      	beq.n	802309c <CheckIfEcatError+0x3c>
            )
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 8023092:	2004      	movs	r0, #4
 8023094:	211b      	movs	r1, #27
 8023096:	f7ff fa89 	bl	80225ac <AL_ControlInd>
            return;
 802309a:	e022      	b.n	80230e2 <CheckIfEcatError+0x82>
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 802309c:	4b16      	ldr	r3, [pc, #88]	; (80230f8 <CheckIfEcatError+0x98>)
 802309e:	2200      	movs	r2, #0
 80230a0:	701a      	strb	r2, [r3, #0]
         }
      }
   }

   if(bDcSyncActive)
 80230a2:	4b16      	ldr	r3, [pc, #88]	; (80230fc <CheckIfEcatError+0x9c>)
 80230a4:	781b      	ldrb	r3, [r3, #0]
 80230a6:	2b00      	cmp	r3, #0
 80230a8:	d01b      	beq.n	80230e2 <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 80230aa:	4b12      	ldr	r3, [pc, #72]	; (80230f4 <CheckIfEcatError+0x94>)
 80230ac:	781b      	ldrb	r3, [r3, #0]
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	d017      	beq.n	80230e2 <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 80230b2:	4b13      	ldr	r3, [pc, #76]	; (8023100 <CheckIfEcatError+0xa0>)
 80230b4:	781b      	ldrb	r3, [r3, #0]
 80230b6:	f083 0301 	eor.w	r3, r3, #1
 80230ba:	b2db      	uxtb	r3, r3
 80230bc:	2b00      	cmp	r3, #0
 80230be:	d004      	beq.n	80230ca <CheckIfEcatError+0x6a>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 80230c0:	2004      	movs	r0, #4
 80230c2:	212c      	movs	r1, #44	; 0x2c
 80230c4:	f7ff fa72 	bl	80225ac <AL_ControlInd>
               return;
 80230c8:	e00b      	b.n	80230e2 <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 80230ca:	4b0e      	ldr	r3, [pc, #56]	; (8023104 <CheckIfEcatError+0xa4>)
 80230cc:	781b      	ldrb	r3, [r3, #0]
 80230ce:	f083 0301 	eor.w	r3, r3, #1
 80230d2:	b2db      	uxtb	r3, r3
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	d004      	beq.n	80230e2 <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 80230d8:	2004      	movs	r0, #4
 80230da:	211a      	movs	r1, #26
 80230dc:	f7ff fa66 	bl	80225ac <AL_ControlInd>
               return;
 80230e0:	bf00      	nop
           }
        
       }
   }
}
 80230e2:	3708      	adds	r7, #8
 80230e4:	46bd      	mov	sp, r7
 80230e6:	bd80      	pop	{r7, pc}
 80230e8:	1fff2754 	.word	0x1fff2754
 80230ec:	54010440 	.word	0x54010440
 80230f0:	1fff271a 	.word	0x1fff271a
 80230f4:	1fff2751 	.word	0x1fff2751
 80230f8:	1fff274c 	.word	0x1fff274c
 80230fc:	1fff2750 	.word	0x1fff2750
 8023100:	1fff2734 	.word	0x1fff2734
 8023104:	1fff274d 	.word	0x1fff274d

08023108 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8023108:	b580      	push	{r7, lr}
 802310a:	b082      	sub	sp, #8
 802310c:	af00      	add	r7, sp, #0
    UINT8 i;

    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    HW_EscReadByte(nMaxSyncMan, ESC_SM_CHANNELS_OFFSET);
 802310e:	4b39      	ldr	r3, [pc, #228]	; (80231f4 <ECAT_Init+0xec>)
 8023110:	781b      	ldrb	r3, [r3, #0]
 8023112:	b2da      	uxtb	r2, r3
 8023114:	4b38      	ldr	r3, [pc, #224]	; (80231f8 <ECAT_Init+0xf0>)
 8023116:	701a      	strb	r2, [r3, #0]

    HW_EscReadWord(nMaxEscAddress, ESC_DPRAM_SIZE_OFFSET);
 8023118:	4b38      	ldr	r3, [pc, #224]	; (80231fc <ECAT_Init+0xf4>)
 802311a:	881b      	ldrh	r3, [r3, #0]
 802311c:	b29a      	uxth	r2, r3
 802311e:	4b38      	ldr	r3, [pc, #224]	; (8023200 <ECAT_Init+0xf8>)
 8023120:	801a      	strh	r2, [r3, #0]
    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    nMaxEscAddress = (nMaxEscAddress << 10) + 0xFFF;
 8023122:	4b37      	ldr	r3, [pc, #220]	; (8023200 <ECAT_Init+0xf8>)
 8023124:	881b      	ldrh	r3, [r3, #0]
 8023126:	029b      	lsls	r3, r3, #10
 8023128:	b29b      	uxth	r3, r3
 802312a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 802312e:	b29a      	uxth	r2, r3
 8023130:	4b33      	ldr	r3, [pc, #204]	; (8023200 <ECAT_Init+0xf8>)
 8023132:	801a      	strh	r2, [r3, #0]

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 8023134:	f7fe fab2 	bl	802169c <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8023138:	2300      	movs	r3, #0
 802313a:	71fb      	strb	r3, [r7, #7]
 802313c:	e006      	b.n	802314c <ECAT_Init+0x44>
    {
        DisableSyncManChannel(i);
 802313e:	79fb      	ldrb	r3, [r7, #7]
 8023140:	4618      	mov	r0, r3
 8023142:	f7fe fae5 	bl	8021710 <DisableSyncManChannel>

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8023146:	79fb      	ldrb	r3, [r7, #7]
 8023148:	3301      	adds	r3, #1
 802314a:	71fb      	strb	r3, [r7, #7]
 802314c:	4b2a      	ldr	r3, [pc, #168]	; (80231f8 <ECAT_Init+0xf0>)
 802314e:	781b      	ldrb	r3, [r3, #0]
 8023150:	79fa      	ldrb	r2, [r7, #7]
 8023152:	429a      	cmp	r2, r3
 8023154:	d3f3      	bcc.n	802313e <ECAT_Init+0x36>
    {
        DisableSyncManChannel(i);
    }

    /* initialize the mailbox handler */
    MBX_Init();
 8023156:	f000 f9f3 	bl	8023540 <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 802315a:	4b2a      	ldr	r3, [pc, #168]	; (8023204 <ECAT_Init+0xfc>)
 802315c:	2200      	movs	r2, #0
 802315e:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 8023160:	4b29      	ldr	r3, [pc, #164]	; (8023208 <ECAT_Init+0x100>)
 8023162:	2200      	movs	r2, #0
 8023164:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 8023166:	4b29      	ldr	r3, [pc, #164]	; (802320c <ECAT_Init+0x104>)
 8023168:	2200      	movs	r2, #0
 802316a:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 802316c:	4b28      	ldr	r3, [pc, #160]	; (8023210 <ECAT_Init+0x108>)
 802316e:	2200      	movs	r2, #0
 8023170:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 8023172:	4b28      	ldr	r3, [pc, #160]	; (8023214 <ECAT_Init+0x10c>)
 8023174:	2200      	movs	r2, #0
 8023176:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 8023178:	4b27      	ldr	r3, [pc, #156]	; (8023218 <ECAT_Init+0x110>)
 802317a:	2200      	movs	r2, #0
 802317c:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 802317e:	4b27      	ldr	r3, [pc, #156]	; (802321c <ECAT_Init+0x114>)
 8023180:	2200      	movs	r2, #0
 8023182:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8023184:	4b26      	ldr	r3, [pc, #152]	; (8023220 <ECAT_Init+0x118>)
 8023186:	2200      	movs	r2, #0
 8023188:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 802318a:	4b26      	ldr	r3, [pc, #152]	; (8023224 <ECAT_Init+0x11c>)
 802318c:	2200      	movs	r2, #0
 802318e:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8023190:	4b25      	ldr	r3, [pc, #148]	; (8023228 <ECAT_Init+0x120>)
 8023192:	2200      	movs	r2, #0
 8023194:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8023196:	4b25      	ldr	r3, [pc, #148]	; (802322c <ECAT_Init+0x124>)
 8023198:	2200      	movs	r2, #0
 802319a:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 802319c:	4b24      	ldr	r3, [pc, #144]	; (8023230 <ECAT_Init+0x128>)
 802319e:	2200      	movs	r2, #0
 80231a0:	701a      	strb	r2, [r3, #0]
    bLocalErrorFlag = FALSE;
 80231a2:	4b24      	ldr	r3, [pc, #144]	; (8023234 <ECAT_Init+0x12c>)
 80231a4:	2200      	movs	r2, #0
 80231a6:	701a      	strb	r2, [r3, #0]
    u16LocalErrorCode = 0x00;
 80231a8:	4b23      	ldr	r3, [pc, #140]	; (8023238 <ECAT_Init+0x130>)
 80231aa:	2200      	movs	r2, #0
 80231ac:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 80231ae:	4b23      	ldr	r3, [pc, #140]	; (802323c <ECAT_Init+0x134>)
 80231b0:	2200      	movs	r2, #0
 80231b2:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 80231b4:	4b22      	ldr	r3, [pc, #136]	; (8023240 <ECAT_Init+0x138>)
 80231b6:	2200      	movs	r2, #0
 80231b8:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 80231ba:	4b22      	ldr	r3, [pc, #136]	; (8023244 <ECAT_Init+0x13c>)
 80231bc:	2200      	movs	r2, #0
 80231be:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 80231c0:	4b21      	ldr	r3, [pc, #132]	; (8023248 <ECAT_Init+0x140>)
 80231c2:	2201      	movs	r2, #1
 80231c4:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 80231c6:	4b20      	ldr	r3, [pc, #128]	; (8023248 <ECAT_Init+0x140>)
 80231c8:	781b      	ldrb	r3, [r3, #0]
 80231ca:	4618      	mov	r0, r3
 80231cc:	2100      	movs	r1, #0
 80231ce:	f7ff f989 	bl	80224e4 <SetALStatus>
    nEcatStateTrans = 0;
 80231d2:	4b1e      	ldr	r3, [pc, #120]	; (802324c <ECAT_Init+0x144>)
 80231d4:	2200      	movs	r2, #0
 80231d6:	801a      	strh	r2, [r3, #0]
    u8EcatErrorLed = LED_OFF;
 80231d8:	4b1d      	ldr	r3, [pc, #116]	; (8023250 <ECAT_Init+0x148>)
 80231da:	2200      	movs	r2, #0
 80231dc:	701a      	strb	r2, [r3, #0]

    bEscIntEnabled = FALSE;
 80231de:	4b1d      	ldr	r3, [pc, #116]	; (8023254 <ECAT_Init+0x14c>)
 80231e0:	2200      	movs	r2, #0
 80231e2:	701a      	strb	r2, [r3, #0]

    /* initialize the COE part */
    COE_Init();
 80231e4:	f7fe f988 	bl	80214f8 <COE_Init>

    /*reset AL event mask*/
    ResetALEventMask(0);
 80231e8:	2000      	movs	r0, #0
 80231ea:	f7fe fa27 	bl	802163c <ResetALEventMask>
}
 80231ee:	3708      	adds	r7, #8
 80231f0:	46bd      	mov	sp, r7
 80231f2:	bd80      	pop	{r7, pc}
 80231f4:	54010005 	.word	0x54010005
 80231f8:	1fff275c 	.word	0x1fff275c
 80231fc:	54010006 	.word	0x54010006
 8023200:	1fff274a 	.word	0x1fff274a
 8023204:	1fff2718 	.word	0x1fff2718
 8023208:	1fff2744 	.word	0x1fff2744
 802320c:	1fff274c 	.word	0x1fff274c
 8023210:	1fff2751 	.word	0x1fff2751
 8023214:	1fff2756 	.word	0x1fff2756
 8023218:	1fff2758 	.word	0x1fff2758
 802321c:	1fff2754 	.word	0x1fff2754
 8023220:	1fff271e 	.word	0x1fff271e
 8023224:	1fff2728 	.word	0x1fff2728
 8023228:	1fff2752 	.word	0x1fff2752
 802322c:	1fff272e 	.word	0x1fff272e
 8023230:	1fff2750 	.word	0x1fff2750
 8023234:	1fff2720 	.word	0x1fff2720
 8023238:	1fff271c 	.word	0x1fff271c
 802323c:	1fff2732 	.word	0x1fff2732
 8023240:	1fff271a 	.word	0x1fff271a
 8023244:	1fff2746 	.word	0x1fff2746
 8023248:	1fff2719 	.word	0x1fff2719
 802324c:	1fff2716 	.word	0x1fff2716
 8023250:	1fff275d 	.word	0x1fff275d
 8023254:	1fff2757 	.word	0x1fff2757

08023258 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8023258:	b580      	push	{r7, lr}
 802325a:	b082      	sub	sp, #8
 802325c:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 802325e:	2300      	movs	r3, #0
 8023260:	807b      	strh	r3, [r7, #2]
    UINT8 sm1Activate = SM_SETTING_ENABLE_VALUE;
 8023262:	2301      	movs	r3, #1
 8023264:	717b      	strb	r3, [r7, #5]


    /* check if services are stored in the mailbox */
    MBX_Main();
 8023266:	f000 fd99 	bl	8023d9c <MBX_Main>


    if ( bMbxRunning )
 802326a:	4b58      	ldr	r3, [pc, #352]	; (80233cc <ECAT_Main+0x174>)
 802326c:	781b      	ldrb	r3, [r3, #0]
 802326e:	2b00      	cmp	r3, #0
 8023270:	d002      	beq.n	8023278 <ECAT_Main+0x20>
    {
        /* Slave is at least in PREOP, Mailbox is running */
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadByte(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8023272:	4b57      	ldr	r3, [pc, #348]	; (80233d0 <ECAT_Main+0x178>)
 8023274:	781b      	ldrb	r3, [r3, #0]
 8023276:	717b      	strb	r3, [r7, #5]
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 8023278:	f7fe f9d8 	bl	802162c <HW_GetALEventRegister>
 802327c:	4603      	mov	r3, r0
 802327e:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);

    if ((ALEventReg & EEPROM_CMD_PENDING)) 
 8023280:	88fb      	ldrh	r3, [r7, #6]
 8023282:	f003 0320 	and.w	r3, r3, #32
 8023286:	2b00      	cmp	r3, #0
 8023288:	d001      	beq.n	802328e <ECAT_Main+0x36>
    {
        EEPROM_CommandHandler();
 802328a:	f7fd fffd 	bl	8021288 <EEPROM_CommandHandler>
    }

    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 802328e:	88fb      	ldrh	r3, [r7, #6]
 8023290:	f003 0301 	and.w	r3, r3, #1
 8023294:	2b00      	cmp	r3, #0
 8023296:	d014      	beq.n	80232c2 <ECAT_Main+0x6a>
 8023298:	4b4e      	ldr	r3, [pc, #312]	; (80233d4 <ECAT_Main+0x17c>)
 802329a:	781b      	ldrb	r3, [r3, #0]
 802329c:	f083 0301 	eor.w	r3, r3, #1
 80232a0:	b2db      	uxtb	r3, r3
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	d00d      	beq.n	80232c2 <ECAT_Main+0x6a>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */
        HW_EscReadByte( EscAlControl, ESC_AL_CONTROL_OFFSET);
 80232a6:	4b4c      	ldr	r3, [pc, #304]	; (80233d8 <ECAT_Main+0x180>)
 80232a8:	781b      	ldrb	r3, [r3, #0]
 80232aa:	b2db      	uxtb	r3, r3
 80232ac:	807b      	strh	r3, [r7, #2]
        EscAlControl = SWAPWORD(EscAlControl);


        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
        ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 80232ae:	88fb      	ldrh	r3, [r7, #6]
 80232b0:	f023 0311 	bic.w	r3, r3, #17
 80232b4:	80fb      	strh	r3, [r7, #6]

        AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 80232b6:	887b      	ldrh	r3, [r7, #2]
 80232b8:	b2db      	uxtb	r3, r3
 80232ba:	4618      	mov	r0, r3
 80232bc:	2100      	movs	r1, #0
 80232be:	f7ff f975 	bl	80225ac <AL_ControlInd>
        
        /* SM-Change-Event was handled too */
    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 80232c2:	88fb      	ldrh	r3, [r7, #6]
 80232c4:	f003 0310 	and.w	r3, r3, #16
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d01f      	beq.n	802330c <ECAT_Main+0xb4>
 80232cc:	4b41      	ldr	r3, [pc, #260]	; (80233d4 <ECAT_Main+0x17c>)
 80232ce:	781b      	ldrb	r3, [r3, #0]
 80232d0:	f083 0301 	eor.w	r3, r3, #1
 80232d4:	b2db      	uxtb	r3, r3
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	d018      	beq.n	802330c <ECAT_Main+0xb4>
 80232da:	4b40      	ldr	r3, [pc, #256]	; (80233dc <ECAT_Main+0x184>)
 80232dc:	781b      	ldrb	r3, [r3, #0]
 80232de:	f003 0310 	and.w	r3, r3, #16
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d112      	bne.n	802330c <ECAT_Main+0xb4>
 80232e6:	4b3d      	ldr	r3, [pc, #244]	; (80233dc <ECAT_Main+0x184>)
 80232e8:	781b      	ldrb	r3, [r3, #0]
 80232ea:	f023 0310 	bic.w	r3, r3, #16
 80232ee:	2b01      	cmp	r3, #1
 80232f0:	d00c      	beq.n	802330c <ECAT_Main+0xb4>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 80232f2:	88fb      	ldrh	r3, [r7, #6]
 80232f4:	f023 0310 	bic.w	r3, r3, #16
 80232f8:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 80232fa:	4b38      	ldr	r3, [pc, #224]	; (80233dc <ECAT_Main+0x184>)
 80232fc:	781b      	ldrb	r3, [r3, #0]
 80232fe:	f003 030f 	and.w	r3, r3, #15
 8023302:	b2db      	uxtb	r3, r3
 8023304:	4618      	mov	r0, r3
 8023306:	2100      	movs	r1, #0
 8023308:	f7ff f950 	bl	80225ac <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 802330c:	4b31      	ldr	r3, [pc, #196]	; (80233d4 <ECAT_Main+0x17c>)
 802330e:	781b      	ldrb	r3, [r3, #0]
 8023310:	2b00      	cmp	r3, #0
 8023312:	d001      	beq.n	8023318 <ECAT_Main+0xc0>
    {
        AL_ControlRes();
 8023314:	f7ff fcb0 	bl	8022c78 <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 8023318:	4b2c      	ldr	r3, [pc, #176]	; (80233cc <ECAT_Main+0x174>)
 802331a:	781b      	ldrb	r3, [r3, #0]
 802331c:	2b00      	cmp	r3, #0
 802331e:	d052      	beq.n	80233c6 <ECAT_Main+0x16e>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
            if (!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8023320:	797b      	ldrb	r3, [r7, #5]
 8023322:	f003 0301 	and.w	r3, r3, #1
 8023326:	2b00      	cmp	r3, #0
 8023328:	d108      	bne.n	802333c <ECAT_Main+0xe4>
            {
                AL_ControlInd(nAlStatus & STATE_MASK, 0);
 802332a:	4b2c      	ldr	r3, [pc, #176]	; (80233dc <ECAT_Main+0x184>)
 802332c:	781b      	ldrb	r3, [r3, #0]
 802332e:	f003 030f 	and.w	r3, r3, #15
 8023332:	b2db      	uxtb	r3, r3
 8023334:	4618      	mov	r0, r3
 8023336:	2100      	movs	r1, #0
 8023338:	f7ff f938 	bl	80225ac <AL_ControlInd>
            }

        if ( ALEventReg & (MAILBOX_READ_EVENT) )
 802333c:	88fb      	ldrh	r3, [r7, #6]
 802333e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023342:	2b00      	cmp	r3, #0
 8023344:	d012      	beq.n	802336c <ECAT_Main+0x114>
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u8dummy = 0;
 8023346:	4b26      	ldr	r3, [pc, #152]	; (80233e0 <ECAT_Main+0x188>)
 8023348:	2200      	movs	r2, #0
 802334a:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,u16EscAddrSendMbx);
 802334c:	4b25      	ldr	r3, [pc, #148]	; (80233e4 <ECAT_Main+0x18c>)
 802334e:	881b      	ldrh	r3, [r3, #0]
 8023350:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023354:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8023358:	4a21      	ldr	r2, [pc, #132]	; (80233e0 <ECAT_Main+0x188>)
 802335a:	7812      	ldrb	r2, [r2, #0]
 802335c:	b2d2      	uxtb	r2, r2
 802335e:	701a      	strb	r2, [r3, #0]

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8023360:	88fb      	ldrh	r3, [r7, #6]
 8023362:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8023366:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 8023368:	f000 faf6 	bl	8023958 <MBX_MailboxReadInd>
        }

        /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

        if ( ( (sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle )
 802336c:	797b      	ldrb	r3, [r7, #5]
 802336e:	f003 0302 	and.w	r3, r3, #2
 8023372:	2b00      	cmp	r3, #0
 8023374:	d006      	beq.n	8023384 <ECAT_Main+0x12c>
 8023376:	4b1c      	ldr	r3, [pc, #112]	; (80233e8 <ECAT_Main+0x190>)
 8023378:	781b      	ldrb	r3, [r3, #0]
 802337a:	f083 0301 	eor.w	r3, r3, #1
 802337e:	b2db      	uxtb	r3, r3
 8023380:	2b00      	cmp	r3, #0
 8023382:	d108      	bne.n	8023396 <ECAT_Main+0x13e>
            ||( !(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle ))
 8023384:	797b      	ldrb	r3, [r7, #5]
 8023386:	f003 0302 	and.w	r3, r3, #2
 802338a:	2b00      	cmp	r3, #0
 802338c:	d10c      	bne.n	80233a8 <ECAT_Main+0x150>
 802338e:	4b16      	ldr	r3, [pc, #88]	; (80233e8 <ECAT_Main+0x190>)
 8023390:	781b      	ldrb	r3, [r3, #0]
 8023392:	2b00      	cmp	r3, #0
 8023394:	d008      	beq.n	80233a8 <ECAT_Main+0x150>
        {
            /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
               response will put in the send mailbox again */
            MBX_MailboxRepeatReq();
 8023396:	f000 fb47 	bl	8023a28 <MBX_MailboxRepeatReq>
            /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
               in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
            sm1Activate &= SM_SETTING_REPEAT_ACK;
 802339a:	797b      	ldrb	r3, [r7, #5]
 802339c:	f003 0302 	and.w	r3, r3, #2
 80233a0:	717b      	strb	r3, [r7, #5]
            HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80233a2:	4a12      	ldr	r2, [pc, #72]	; (80233ec <ECAT_Main+0x194>)
 80233a4:	797b      	ldrb	r3, [r7, #5]
 80233a6:	7013      	strb	r3, [r2, #0]
        }

        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 80233a8:	f7fe f940 	bl	802162c <HW_GetALEventRegister>
 80233ac:	4603      	mov	r3, r0
 80233ae:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 80233b0:	88fb      	ldrh	r3, [r7, #6]
 80233b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80233b6:	2b00      	cmp	r3, #0
 80233b8:	d005      	beq.n	80233c6 <ECAT_Main+0x16e>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 80233ba:	88fb      	ldrh	r3, [r7, #6]
 80233bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80233c0:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 80233c2:	f000 fbdd 	bl	8023b80 <MBX_CheckAndCopyMailbox>

        }
    }
}
 80233c6:	3708      	adds	r7, #8
 80233c8:	46bd      	mov	sp, r7
 80233ca:	bd80      	pop	{r7, pc}
 80233cc:	1fff27ce 	.word	0x1fff27ce
 80233d0:	5401080e 	.word	0x5401080e
 80233d4:	1fff2744 	.word	0x1fff2744
 80233d8:	54010120 	.word	0x54010120
 80233dc:	1fff2719 	.word	0x1fff2719
 80233e0:	1fff2730 	.word	0x1fff2730
 80233e4:	1fff27e2 	.word	0x1fff27e2
 80233e8:	1fff27ec 	.word	0x1fff27ec
 80233ec:	5401080f 	.word	0x5401080f

080233f0 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 80233f0:	b580      	push	{r7, lr}
 80233f2:	b082      	sub	sp, #8
 80233f4:	af00      	add	r7, sp, #0
 80233f6:	6078      	str	r0, [r7, #4]
 80233f8:	460b      	mov	r3, r1
 80233fa:	807b      	strh	r3, [r7, #2]
 80233fc:	4613      	mov	r3, r2
 80233fe:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8023400:	887b      	ldrh	r3, [r7, #2]
 8023402:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023406:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802340a:	883a      	ldrh	r2, [r7, #0]
 802340c:	6878      	ldr	r0, [r7, #4]
 802340e:	4619      	mov	r1, r3
 8023410:	f006 fd1c 	bl	8029e4c <memcpy>
}
 8023414:	3708      	adds	r7, #8
 8023416:	46bd      	mov	sp, r7
 8023418:	bd80      	pop	{r7, pc}
 802341a:	bf00      	nop

0802341c <HW_EscReadMbxMem>:
 * Reads data from the ESC and copies to slave mailbox memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscRead.
 *
 */
__STATIC_INLINE void HW_EscReadMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 802341c:	b580      	push	{r7, lr}
 802341e:	b082      	sub	sp, #8
 8023420:	af00      	add	r7, sp, #0
 8023422:	6078      	str	r0, [r7, #4]
 8023424:	460b      	mov	r3, r1
 8023426:	807b      	strh	r3, [r7, #2]
 8023428:	4613      	mov	r3, r2
 802342a:	803b      	strh	r3, [r7, #0]
  HW_EscRead(pData, Address, Len);
 802342c:	887a      	ldrh	r2, [r7, #2]
 802342e:	883b      	ldrh	r3, [r7, #0]
 8023430:	6878      	ldr	r0, [r7, #4]
 8023432:	4611      	mov	r1, r2
 8023434:	461a      	mov	r2, r3
 8023436:	f7ff ffdb 	bl	80233f0 <HW_EscRead>
}
 802343a:	3708      	adds	r7, #8
 802343c:	46bd      	mov	sp, r7
 802343e:	bd80      	pop	{r7, pc}

08023440 <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8023440:	b580      	push	{r7, lr}
 8023442:	b082      	sub	sp, #8
 8023444:	af00      	add	r7, sp, #0
 8023446:	6078      	str	r0, [r7, #4]
 8023448:	460b      	mov	r3, r1
 802344a:	807b      	strh	r3, [r7, #2]
 802344c:	4613      	mov	r3, r2
 802344e:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8023450:	887b      	ldrh	r3, [r7, #2]
 8023452:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023456:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 802345a:	883a      	ldrh	r2, [r7, #0]
 802345c:	4618      	mov	r0, r3
 802345e:	6879      	ldr	r1, [r7, #4]
 8023460:	f006 fcf4 	bl	8029e4c <memcpy>
}
 8023464:	3708      	adds	r7, #8
 8023466:	46bd      	mov	sp, r7
 8023468:	bd80      	pop	{r7, pc}
 802346a:	bf00      	nop

0802346c <HW_EscWriteMbxMem>:
 * Writes data from the slave mailbox memory to ESC memory. If the local mailbox memory is also located in the
 * application memory this function is equal to HW_EscWrite.
 *
 */
__STATIC_INLINE void HW_EscWriteMbxMem(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 802346c:	b580      	push	{r7, lr}
 802346e:	b082      	sub	sp, #8
 8023470:	af00      	add	r7, sp, #0
 8023472:	6078      	str	r0, [r7, #4]
 8023474:	460b      	mov	r3, r1
 8023476:	807b      	strh	r3, [r7, #2]
 8023478:	4613      	mov	r3, r2
 802347a:	803b      	strh	r3, [r7, #0]
  HW_EscWrite(pData, Address, Len);
 802347c:	887a      	ldrh	r2, [r7, #2]
 802347e:	883b      	ldrh	r3, [r7, #0]
 8023480:	6878      	ldr	r0, [r7, #4]
 8023482:	4611      	mov	r1, r2
 8023484:	461a      	mov	r2, r3
 8023486:	f7ff ffdb 	bl	8023440 <HW_EscWrite>
}
 802348a:	3708      	adds	r7, #8
 802348c:	46bd      	mov	sp, r7
 802348e:	bd80      	pop	{r7, pc}

08023490 <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 8023490:	b480      	push	{r7}
 8023492:	b085      	sub	sp, #20
 8023494:	af00      	add	r7, sp, #0
 8023496:	6078      	str	r0, [r7, #4]
 8023498:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 802349a:	683b      	ldr	r3, [r7, #0]
 802349c:	885b      	ldrh	r3, [r3, #2]
 802349e:	3301      	adds	r3, #1
 80234a0:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 80234a2:	683b      	ldr	r3, [r7, #0]
 80234a4:	889b      	ldrh	r3, [r3, #4]
 80234a6:	89fa      	ldrh	r2, [r7, #14]
 80234a8:	429a      	cmp	r2, r3
 80234aa:	d101      	bne.n	80234b0 <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 80234ac:	2300      	movs	r3, #0
 80234ae:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 80234b0:	683b      	ldr	r3, [r7, #0]
 80234b2:	881b      	ldrh	r3, [r3, #0]
 80234b4:	89fa      	ldrh	r2, [r7, #14]
 80234b6:	429a      	cmp	r2, r3
 80234b8:	d101      	bne.n	80234be <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 80234ba:	2307      	movs	r3, #7
 80234bc:	e00b      	b.n	80234d6 <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 80234be:	683b      	ldr	r3, [r7, #0]
 80234c0:	885b      	ldrh	r3, [r3, #2]
 80234c2:	461a      	mov	r2, r3
 80234c4:	683b      	ldr	r3, [r7, #0]
 80234c6:	3202      	adds	r2, #2
 80234c8:	6879      	ldr	r1, [r7, #4]
 80234ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 80234ce:	683b      	ldr	r3, [r7, #0]
 80234d0:	89fa      	ldrh	r2, [r7, #14]
 80234d2:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 80234d4:	2300      	movs	r3, #0
}
 80234d6:	4618      	mov	r0, r3
 80234d8:	3714      	adds	r7, #20
 80234da:	46bd      	mov	sp, r7
 80234dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234e0:	4770      	bx	lr
 80234e2:	bf00      	nop

080234e4 <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 80234e4:	b480      	push	{r7}
 80234e6:	b085      	sub	sp, #20
 80234e8:	af00      	add	r7, sp, #0
 80234ea:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	881a      	ldrh	r2, [r3, #0]
 80234f0:	687b      	ldr	r3, [r7, #4]
 80234f2:	885b      	ldrh	r3, [r3, #2]
 80234f4:	429a      	cmp	r2, r3
 80234f6:	d019      	beq.n	802352c <GetOutOfMbxQueue+0x48>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	881b      	ldrh	r3, [r3, #0]
 80234fc:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 80234fe:	897a      	ldrh	r2, [r7, #10]
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	3202      	adds	r2, #2
 8023504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023508:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 802350a:	897b      	ldrh	r3, [r7, #10]
 802350c:	3301      	adds	r3, #1
 802350e:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	897a      	ldrh	r2, [r7, #10]
 8023514:	801a      	strh	r2, [r3, #0]
        
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 8023516:	687b      	ldr	r3, [r7, #4]
 8023518:	881a      	ldrh	r2, [r3, #0]
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	889b      	ldrh	r3, [r3, #4]
 802351e:	429a      	cmp	r2, r3
 8023520:	d103      	bne.n	802352a <GetOutOfMbxQueue+0x46>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	2200      	movs	r2, #0
 8023526:	801a      	strh	r2, [r3, #0]
 8023528:	e002      	b.n	8023530 <GetOutOfMbxQueue+0x4c>
 802352a:	e001      	b.n	8023530 <GetOutOfMbxQueue+0x4c>
        }
    }
    else
    {
        pMbx = 0;
 802352c:	2300      	movs	r3, #0
 802352e:	60fb      	str	r3, [r7, #12]
    }


    LEAVE_MBX_CRITICAL;

    return pMbx;
 8023530:	68fb      	ldr	r3, [r7, #12]
}
 8023532:	4618      	mov	r0, r3
 8023534:	3714      	adds	r7, #20
 8023536:	46bd      	mov	sp, r7
 8023538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802353c:	4770      	bx	lr
 802353e:	bf00      	nop

08023540 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 8023540:	b480      	push	{r7}
 8023542:	b083      	sub	sp, #12
 8023544:	af00      	add	r7, sp, #0
    
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 8023546:	4b29      	ldr	r3, [pc, #164]	; (80235ec <MBX_Init+0xac>)
 8023548:	2224      	movs	r2, #36	; 0x24
 802354a:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 802354c:	4b28      	ldr	r3, [pc, #160]	; (80235f0 <MBX_Init+0xb0>)
 802354e:	2280      	movs	r2, #128	; 0x80
 8023550:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 8023552:	4b28      	ldr	r3, [pc, #160]	; (80235f4 <MBX_Init+0xb4>)
 8023554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023558:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 802355a:	4b27      	ldr	r3, [pc, #156]	; (80235f8 <MBX_Init+0xb8>)
 802355c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023560:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 8023562:	4b26      	ldr	r3, [pc, #152]	; (80235fc <MBX_Init+0xbc>)
 8023564:	2200      	movs	r2, #0
 8023566:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 8023568:	4b24      	ldr	r3, [pc, #144]	; (80235fc <MBX_Init+0xbc>)
 802356a:	2200      	movs	r2, #0
 802356c:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 802356e:	4b23      	ldr	r3, [pc, #140]	; (80235fc <MBX_Init+0xbc>)
 8023570:	220a      	movs	r2, #10
 8023572:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8023574:	4b22      	ldr	r3, [pc, #136]	; (8023600 <MBX_Init+0xc0>)
 8023576:	2200      	movs	r2, #0
 8023578:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 802357a:	4b21      	ldr	r3, [pc, #132]	; (8023600 <MBX_Init+0xc0>)
 802357c:	2200      	movs	r2, #0
 802357e:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 8023580:	4b1f      	ldr	r3, [pc, #124]	; (8023600 <MBX_Init+0xc0>)
 8023582:	220a      	movs	r2, #10
 8023584:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 8023586:	4b1f      	ldr	r3, [pc, #124]	; (8023604 <MBX_Init+0xc4>)
 8023588:	2200      	movs	r2, #0
 802358a:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 802358c:	4b1e      	ldr	r3, [pc, #120]	; (8023608 <MBX_Init+0xc8>)
 802358e:	2200      	movs	r2, #0
 8023590:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 8023592:	4b1e      	ldr	r3, [pc, #120]	; (802360c <MBX_Init+0xcc>)
 8023594:	2200      	movs	r2, #0
 8023596:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 8023598:	4b1d      	ldr	r3, [pc, #116]	; (8023610 <MBX_Init+0xd0>)
 802359a:	2200      	movs	r2, #0
 802359c:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 802359e:	4b1d      	ldr	r3, [pc, #116]	; (8023614 <MBX_Init+0xd4>)
 80235a0:	2200      	movs	r2, #0
 80235a2:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 80235a4:	2300      	movs	r3, #0
 80235a6:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80235a8:	4b1b      	ldr	r3, [pc, #108]	; (8023618 <MBX_Init+0xd8>)
 80235aa:	781b      	ldrb	r3, [r3, #0]
 80235ac:	71fb      	strb	r3, [r7, #7]
        sm1Activate &= ~0x02;
 80235ae:	79fb      	ldrb	r3, [r7, #7]
 80235b0:	f023 0302 	bic.w	r3, r3, #2
 80235b4:	71fb      	strb	r3, [r7, #7]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80235b6:	4a18      	ldr	r2, [pc, #96]	; (8023618 <MBX_Init+0xd8>)
 80235b8:	79fb      	ldrb	r3, [r7, #7]
 80235ba:	7013      	strb	r3, [r2, #0]
    }
    bMbxRunning = FALSE;
 80235bc:	4b17      	ldr	r3, [pc, #92]	; (802361c <MBX_Init+0xdc>)
 80235be:	2200      	movs	r2, #0
 80235c0:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 80235c2:	4b17      	ldr	r3, [pc, #92]	; (8023620 <MBX_Init+0xe0>)
 80235c4:	2200      	movs	r2, #0
 80235c6:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 80235c8:	4b16      	ldr	r3, [pc, #88]	; (8023624 <MBX_Init+0xe4>)
 80235ca:	2200      	movs	r2, #0
 80235cc:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 80235ce:	4b16      	ldr	r3, [pc, #88]	; (8023628 <MBX_Init+0xe8>)
 80235d0:	2200      	movs	r2, #0
 80235d2:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 80235d4:	4b15      	ldr	r3, [pc, #84]	; (802362c <MBX_Init+0xec>)
 80235d6:	2200      	movs	r2, #0
 80235d8:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 80235da:	4b15      	ldr	r3, [pc, #84]	; (8023630 <MBX_Init+0xf0>)
 80235dc:	2200      	movs	r2, #0
 80235de:	701a      	strb	r2, [r3, #0]
}
 80235e0:	370c      	adds	r7, #12
 80235e2:	46bd      	mov	sp, r7
 80235e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235e8:	4770      	bx	lr
 80235ea:	bf00      	nop
 80235ec:	1fff27ea 	.word	0x1fff27ea
 80235f0:	1fff27d8 	.word	0x1fff27d8
 80235f4:	1fff27d0 	.word	0x1fff27d0
 80235f8:	1fff27e2 	.word	0x1fff27e2
 80235fc:	1fff2798 	.word	0x1fff2798
 8023600:	1fff2764 	.word	0x1fff2764
 8023604:	1fff27e4 	.word	0x1fff27e4
 8023608:	1fff27f0 	.word	0x1fff27f0
 802360c:	1fff27dc 	.word	0x1fff27dc
 8023610:	1fff27d4 	.word	0x1fff27d4
 8023614:	1fff27ec 	.word	0x1fff27ec
 8023618:	5401080f 	.word	0x5401080f
 802361c:	1fff27ce 	.word	0x1fff27ce
 8023620:	1fff27cd 	.word	0x1fff27cd
 8023624:	1fff27e0 	.word	0x1fff27e0
 8023628:	1fff27e9 	.word	0x1fff27e9
 802362c:	1fff27e8 	.word	0x1fff27e8
 8023630:	1fff2760 	.word	0x1fff2760

08023634 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8023634:	b580      	push	{r7, lr}
 8023636:	b082      	sub	sp, #8
 8023638:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 802363a:	2300      	movs	r3, #0
 802363c:	80fb      	strh	r3, [r7, #6]
    
    /* get address of the receive mailbox sync manager (SM0) */
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 802363e:	2000      	movs	r0, #0
 8023640:	f7fe f84e 	bl	80216e0 <GetSyncMan>
 8023644:	6038      	str	r0, [r7, #0]

    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8023646:	683b      	ldr	r3, [r7, #0]
 8023648:	885b      	ldrh	r3, [r3, #2]
 802364a:	b29a      	uxth	r2, r3
 802364c:	4b33      	ldr	r3, [pc, #204]	; (802371c <MBX_StartMailboxHandler+0xe8>)
 802364e:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8023650:	683b      	ldr	r3, [r7, #0]
 8023652:	881b      	ldrh	r3, [r3, #0]
 8023654:	b29a      	uxth	r2, r3
 8023656:	4b32      	ldr	r3, [pc, #200]	; (8023720 <MBX_StartMailboxHandler+0xec>)
 8023658:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 802365a:	2001      	movs	r0, #1
 802365c:	f7fe f840 	bl	80216e0 <GetSyncMan>
 8023660:	6038      	str	r0, [r7, #0]

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 8023662:	683b      	ldr	r3, [r7, #0]
 8023664:	885b      	ldrh	r3, [r3, #2]
 8023666:	b29a      	uxth	r2, r3
 8023668:	4b2e      	ldr	r3, [pc, #184]	; (8023724 <MBX_StartMailboxHandler+0xf0>)
 802366a:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 802366c:	683b      	ldr	r3, [r7, #0]
 802366e:	881b      	ldrh	r3, [r3, #0]
 8023670:	b29a      	uxth	r2, r3
 8023672:	4b2d      	ldr	r3, [pc, #180]	; (8023728 <MBX_StartMailboxHandler+0xf4>)
 8023674:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 8023676:	4b2a      	ldr	r3, [pc, #168]	; (8023720 <MBX_StartMailboxHandler+0xec>)
 8023678:	881b      	ldrh	r3, [r3, #0]
 802367a:	461a      	mov	r2, r3
 802367c:	4b27      	ldr	r3, [pc, #156]	; (802371c <MBX_StartMailboxHandler+0xe8>)
 802367e:	881b      	ldrh	r3, [r3, #0]
 8023680:	4413      	add	r3, r2
 8023682:	4a29      	ldr	r2, [pc, #164]	; (8023728 <MBX_StartMailboxHandler+0xf4>)
 8023684:	8812      	ldrh	r2, [r2, #0]
 8023686:	4293      	cmp	r3, r2
 8023688:	dd0c      	ble.n	80236a4 <MBX_StartMailboxHandler+0x70>
 802368a:	4b25      	ldr	r3, [pc, #148]	; (8023720 <MBX_StartMailboxHandler+0xec>)
 802368c:	881b      	ldrh	r3, [r3, #0]
 802368e:	461a      	mov	r2, r3
 8023690:	4b25      	ldr	r3, [pc, #148]	; (8023728 <MBX_StartMailboxHandler+0xf4>)
 8023692:	881b      	ldrh	r3, [r3, #0]
 8023694:	4619      	mov	r1, r3
 8023696:	4b23      	ldr	r3, [pc, #140]	; (8023724 <MBX_StartMailboxHandler+0xf0>)
 8023698:	881b      	ldrh	r3, [r3, #0]
 802369a:	440b      	add	r3, r1
 802369c:	429a      	cmp	r2, r3
 802369e:	da01      	bge.n	80236a4 <MBX_StartMailboxHandler+0x70>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80236a0:	2316      	movs	r3, #22
 80236a2:	e037      	b.n	8023714 <MBX_StartMailboxHandler+0xe0>
    }


    /* enable the receive mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_WRITE);
 80236a4:	2000      	movs	r0, #0
 80236a6:	f7fe f85d 	bl	8021764 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 80236aa:	2001      	movs	r0, #1
 80236ac:	f7fe f85a 	bl	8021764 <EnableSyncManChannel>

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 80236b0:	4b1a      	ldr	r3, [pc, #104]	; (802371c <MBX_StartMailboxHandler+0xe8>)
 80236b2:	881b      	ldrh	r3, [r3, #0]
 80236b4:	4618      	mov	r0, r3
 80236b6:	f006 fba9 	bl	8029e0c <malloc>
 80236ba:	4603      	mov	r3, r0
 80236bc:	461a      	mov	r2, r3
 80236be:	4b1b      	ldr	r3, [pc, #108]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 80236c0:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 80236c2:	4b1a      	ldr	r3, [pc, #104]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 80236c4:	681b      	ldr	r3, [r3, #0]
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	d118      	bne.n	80236fc <MBX_StartMailboxHandler+0xc8>
        {
            bNoMbxMemoryAvailable = TRUE;
 80236ca:	4b19      	ldr	r3, [pc, #100]	; (8023730 <MBX_StartMailboxHandler+0xfc>)
 80236cc:	2201      	movs	r2, #1
 80236ce:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 80236d0:	200a      	movs	r0, #10
 80236d2:	f006 fb9b 	bl	8029e0c <malloc>
 80236d6:	4603      	mov	r3, r0
 80236d8:	461a      	mov	r2, r3
 80236da:	4b14      	ldr	r3, [pc, #80]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 80236dc:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 80236de:	4b13      	ldr	r3, [pc, #76]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 80236e0:	681b      	ldr	r3, [r3, #0]
 80236e2:	2b00      	cmp	r3, #0
 80236e4:	d101      	bne.n	80236ea <MBX_StartMailboxHandler+0xb6>
            {
                result = ALSTATUSCODE_NOMEMORY;
 80236e6:	2302      	movs	r3, #2
 80236e8:	80fb      	strh	r3, [r7, #6]
            }

            APPL_FreeMailboxBuffer(psWriteMbx);
 80236ea:	4b10      	ldr	r3, [pc, #64]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 80236ec:	681b      	ldr	r3, [r3, #0]
 80236ee:	4618      	mov	r0, r3
 80236f0:	f006 fb94 	bl	8029e1c <free>
            psWriteMbx = NULL;
 80236f4:	4b0d      	ldr	r3, [pc, #52]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 80236f6:	2200      	movs	r2, #0
 80236f8:	601a      	str	r2, [r3, #0]
 80236fa:	e00a      	b.n	8023712 <MBX_StartMailboxHandler+0xde>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 80236fc:	4b0c      	ldr	r3, [pc, #48]	; (8023730 <MBX_StartMailboxHandler+0xfc>)
 80236fe:	2200      	movs	r2, #0
 8023700:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 8023702:	4b0a      	ldr	r3, [pc, #40]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 8023704:	681b      	ldr	r3, [r3, #0]
 8023706:	4618      	mov	r0, r3
 8023708:	f006 fb88 	bl	8029e1c <free>
            psWriteMbx = NULL;
 802370c:	4b07      	ldr	r3, [pc, #28]	; (802372c <MBX_StartMailboxHandler+0xf8>)
 802370e:	2200      	movs	r2, #0
 8023710:	601a      	str	r2, [r3, #0]
        }

    return result;
 8023712:	88fb      	ldrh	r3, [r7, #6]
}
 8023714:	4618      	mov	r0, r3
 8023716:	3708      	adds	r7, #8
 8023718:	46bd      	mov	sp, r7
 802371a:	bd80      	pop	{r7, pc}
 802371c:	1fff27ea 	.word	0x1fff27ea
 8023720:	1fff27d0 	.word	0x1fff27d0
 8023724:	1fff27d8 	.word	0x1fff27d8
 8023728:	1fff27e2 	.word	0x1fff27e2
 802372c:	1fff27e4 	.word	0x1fff27e4
 8023730:	1fff27cc 	.word	0x1fff27cc

08023734 <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 8023734:	b580      	push	{r7, lr}
 8023736:	b082      	sub	sp, #8
 8023738:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 802373a:	4b3f      	ldr	r3, [pc, #252]	; (8023838 <MBX_StopMailboxHandler+0x104>)
 802373c:	2200      	movs	r2, #0
 802373e:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_WRITE);
 8023740:	2000      	movs	r0, #0
 8023742:	f7fd ffe5 	bl	8021710 <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 8023746:	2001      	movs	r0, #1
 8023748:	f7fd ffe2 	bl	8021710 <DisableSyncManChannel>
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 802374c:	4b3b      	ldr	r3, [pc, #236]	; (802383c <MBX_StopMailboxHandler+0x108>)
 802374e:	681b      	ldr	r3, [r3, #0]
 8023750:	2b00      	cmp	r3, #0
 8023752:	d004      	beq.n	802375e <MBX_StopMailboxHandler+0x2a>
    {
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8023754:	4b39      	ldr	r3, [pc, #228]	; (802383c <MBX_StopMailboxHandler+0x108>)
 8023756:	681b      	ldr	r3, [r3, #0]
 8023758:	4618      	mov	r0, r3
 802375a:	f006 fb5f 	bl	8029e1c <free>
    }

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 802375e:	4b38      	ldr	r3, [pc, #224]	; (8023840 <MBX_StopMailboxHandler+0x10c>)
 8023760:	681b      	ldr	r3, [r3, #0]
 8023762:	2b00      	cmp	r3, #0
 8023764:	d00a      	beq.n	802377c <MBX_StopMailboxHandler+0x48>
 8023766:	4b36      	ldr	r3, [pc, #216]	; (8023840 <MBX_StopMailboxHandler+0x10c>)
 8023768:	681a      	ldr	r2, [r3, #0]
 802376a:	4b34      	ldr	r3, [pc, #208]	; (802383c <MBX_StopMailboxHandler+0x108>)
 802376c:	681b      	ldr	r3, [r3, #0]
 802376e:	429a      	cmp	r2, r3
 8023770:	d004      	beq.n	802377c <MBX_StopMailboxHandler+0x48>
    {
        APPL_FreeMailboxBuffer(psStoreMbx);
 8023772:	4b33      	ldr	r3, [pc, #204]	; (8023840 <MBX_StopMailboxHandler+0x10c>)
 8023774:	681b      	ldr	r3, [r3, #0]
 8023776:	4618      	mov	r0, r3
 8023778:	f006 fb50 	bl	8029e1c <free>
    }

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 802377c:	4b31      	ldr	r3, [pc, #196]	; (8023844 <MBX_StopMailboxHandler+0x110>)
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	2b00      	cmp	r3, #0
 8023782:	d010      	beq.n	80237a6 <MBX_StopMailboxHandler+0x72>
 8023784:	4b2f      	ldr	r3, [pc, #188]	; (8023844 <MBX_StopMailboxHandler+0x110>)
 8023786:	681a      	ldr	r2, [r3, #0]
 8023788:	4b2c      	ldr	r3, [pc, #176]	; (802383c <MBX_StopMailboxHandler+0x108>)
 802378a:	681b      	ldr	r3, [r3, #0]
 802378c:	429a      	cmp	r2, r3
 802378e:	d00a      	beq.n	80237a6 <MBX_StopMailboxHandler+0x72>
 8023790:	4b2c      	ldr	r3, [pc, #176]	; (8023844 <MBX_StopMailboxHandler+0x110>)
 8023792:	681a      	ldr	r2, [r3, #0]
 8023794:	4b2a      	ldr	r3, [pc, #168]	; (8023840 <MBX_StopMailboxHandler+0x10c>)
 8023796:	681b      	ldr	r3, [r3, #0]
 8023798:	429a      	cmp	r2, r3
 802379a:	d004      	beq.n	80237a6 <MBX_StopMailboxHandler+0x72>
    {
        APPL_FreeMailboxBuffer(psReadMbx);
 802379c:	4b29      	ldr	r3, [pc, #164]	; (8023844 <MBX_StopMailboxHandler+0x110>)
 802379e:	681b      	ldr	r3, [r3, #0]
 80237a0:	4618      	mov	r0, r3
 80237a2:	f006 fb3b 	bl	8029e1c <free>
    }


    SODS_ClearPendingResponse();
 80237a6:	f002 fba7 	bl	8025ef8 <SODS_ClearPendingResponse>



    psWriteMbx = NULL;
 80237aa:	4b27      	ldr	r3, [pc, #156]	; (8023848 <MBX_StopMailboxHandler+0x114>)
 80237ac:	2200      	movs	r2, #0
 80237ae:	601a      	str	r2, [r3, #0]
    psRepeatMbx = NULL;
 80237b0:	4b22      	ldr	r3, [pc, #136]	; (802383c <MBX_StopMailboxHandler+0x108>)
 80237b2:	2200      	movs	r2, #0
 80237b4:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 80237b6:	4b23      	ldr	r3, [pc, #140]	; (8023844 <MBX_StopMailboxHandler+0x110>)
 80237b8:	2200      	movs	r2, #0
 80237ba:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 80237bc:	4b20      	ldr	r3, [pc, #128]	; (8023840 <MBX_StopMailboxHandler+0x10c>)
 80237be:	2200      	movs	r2, #0
 80237c0:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 80237c2:	4b22      	ldr	r3, [pc, #136]	; (802384c <MBX_StopMailboxHandler+0x118>)
 80237c4:	2200      	movs	r2, #0
 80237c6:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 80237c8:	2300      	movs	r3, #0
 80237ca:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80237cc:	4b20      	ldr	r3, [pc, #128]	; (8023850 <MBX_StopMailboxHandler+0x11c>)
 80237ce:	781b      	ldrb	r3, [r3, #0]
 80237d0:	71fb      	strb	r3, [r7, #7]
        sm1Activate &= ~0x02;
 80237d2:	79fb      	ldrb	r3, [r7, #7]
 80237d4:	f023 0302 	bic.w	r3, r3, #2
 80237d8:	71fb      	strb	r3, [r7, #7]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80237da:	4a1d      	ldr	r2, [pc, #116]	; (8023850 <MBX_StopMailboxHandler+0x11c>)
 80237dc:	79fb      	ldrb	r3, [r7, #7]
 80237de:	7013      	strb	r3, [r2, #0]
    }
    bSendMbxIsFull         = FALSE;
 80237e0:	4b1c      	ldr	r3, [pc, #112]	; (8023854 <MBX_StopMailboxHandler+0x120>)
 80237e2:	2200      	movs	r2, #0
 80237e4:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 80237e6:	4b1c      	ldr	r3, [pc, #112]	; (8023858 <MBX_StopMailboxHandler+0x124>)
 80237e8:	2200      	movs	r2, #0
 80237ea:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 80237ec:	4b1b      	ldr	r3, [pc, #108]	; (802385c <MBX_StopMailboxHandler+0x128>)
 80237ee:	2200      	movs	r2, #0
 80237f0:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 80237f2:	4b1b      	ldr	r3, [pc, #108]	; (8023860 <MBX_StopMailboxHandler+0x12c>)
 80237f4:	2200      	movs	r2, #0
 80237f6:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 80237f8:	4b1a      	ldr	r3, [pc, #104]	; (8023864 <MBX_StopMailboxHandler+0x130>)
 80237fa:	2200      	movs	r2, #0
 80237fc:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 80237fe:	481a      	ldr	r0, [pc, #104]	; (8023868 <MBX_StopMailboxHandler+0x134>)
 8023800:	f7ff fe70 	bl	80234e4 <GetOutOfMbxQueue>
 8023804:	6038      	str	r0, [r7, #0]
        if (pMbx)
 8023806:	683b      	ldr	r3, [r7, #0]
 8023808:	2b00      	cmp	r3, #0
 802380a:	d002      	beq.n	8023812 <MBX_StopMailboxHandler+0xde>
        {
            APPL_FreeMailboxBuffer(pMbx);
 802380c:	6838      	ldr	r0, [r7, #0]
 802380e:	f006 fb05 	bl	8029e1c <free>
/*ECATCHANGE_START(V5.12) MBX1*/
/*ECATCHANGE_END(V5.12) MBX1*/
        }
    } while (pMbx != NULL);
 8023812:	683b      	ldr	r3, [r7, #0]
 8023814:	2b00      	cmp	r3, #0
 8023816:	d1f2      	bne.n	80237fe <MBX_StopMailboxHandler+0xca>
    
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8023818:	4814      	ldr	r0, [pc, #80]	; (802386c <MBX_StopMailboxHandler+0x138>)
 802381a:	f7ff fe63 	bl	80234e4 <GetOutOfMbxQueue>
 802381e:	6038      	str	r0, [r7, #0]
        if (pMbx)
 8023820:	683b      	ldr	r3, [r7, #0]
 8023822:	2b00      	cmp	r3, #0
 8023824:	d002      	beq.n	802382c <MBX_StopMailboxHandler+0xf8>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8023826:	6838      	ldr	r0, [r7, #0]
 8023828:	f006 faf8 	bl	8029e1c <free>
/*ECATCHANGE_START(V5.12) MBX1*/
/*ECATCHANGE_END(V5.12) MBX1*/
        }
    } while (pMbx != NULL);
 802382c:	683b      	ldr	r3, [r7, #0]
 802382e:	2b00      	cmp	r3, #0
 8023830:	d1f2      	bne.n	8023818 <MBX_StopMailboxHandler+0xe4>

}
 8023832:	3708      	adds	r7, #8
 8023834:	46bd      	mov	sp, r7
 8023836:	bd80      	pop	{r7, pc}
 8023838:	1fff27ce 	.word	0x1fff27ce
 802383c:	1fff27f0 	.word	0x1fff27f0
 8023840:	1fff27d4 	.word	0x1fff27d4
 8023844:	1fff27dc 	.word	0x1fff27dc
 8023848:	1fff27e4 	.word	0x1fff27e4
 802384c:	1fff27ec 	.word	0x1fff27ec
 8023850:	5401080f 	.word	0x5401080f
 8023854:	1fff27cd 	.word	0x1fff27cd
 8023858:	1fff27e0 	.word	0x1fff27e0
 802385c:	1fff27e9 	.word	0x1fff27e9
 8023860:	1fff27e8 	.word	0x1fff27e8
 8023864:	1fff2760 	.word	0x1fff2760
 8023868:	1fff2798 	.word	0x1fff2798
 802386c:	1fff2764 	.word	0x1fff2764

08023870 <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8023870:	b580      	push	{r7, lr}
 8023872:	b084      	sub	sp, #16
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]
    UINT8 result;


    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	795b      	ldrb	r3, [r3, #5]
 802387c:	f003 030f 	and.w	r3, r3, #15
 8023880:	2b03      	cmp	r3, #3
 8023882:	d105      	bne.n	8023890 <MailboxServiceInd+0x20>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 8023884:	6878      	ldr	r0, [r7, #4]
 8023886:	f7fd fe47 	bl	8021518 <COE_ServiceInd>
 802388a:	4603      	mov	r3, r0
 802388c:	73fb      	strb	r3, [r7, #15]
        break;
 802388e:	e002      	b.n	8023896 <MailboxServiceInd+0x26>

    default:
        result = MBXERR_UNSUPPORTEDPROTOCOL;
 8023890:	2302      	movs	r3, #2
 8023892:	73fb      	strb	r3, [r7, #15]
        break;
 8023894:	bf00      	nop
    }

    return result;
 8023896:	7bfb      	ldrb	r3, [r7, #15]
}
 8023898:	4618      	mov	r0, r3
 802389a:	3710      	adds	r7, #16
 802389c:	46bd      	mov	sp, r7
 802389e:	bd80      	pop	{r7, pc}

080238a0 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 80238a0:	b580      	push	{r7, lr}
 80238a2:	b084      	sub	sp, #16
 80238a4:	af00      	add	r7, sp, #0
 80238a6:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 80238a8:	2300      	movs	r3, #0
 80238aa:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 80238ac:	687b      	ldr	r3, [r7, #4]
 80238ae:	795b      	ldrb	r3, [r3, #5]
 80238b0:	091b      	lsrs	r3, r3, #4
 80238b2:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 80238b4:	687b      	ldr	r3, [r7, #4]
 80238b6:	881b      	ldrh	r3, [r3, #0]
 80238b8:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 80238ba:	89bb      	ldrh	r3, [r7, #12]
 80238bc:	2b80      	cmp	r3, #128	; 0x80
 80238be:	d914      	bls.n	80238ea <MBX_MailboxWriteInd+0x4a>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 80238c0:	687b      	ldr	r3, [r7, #4]
 80238c2:	2204      	movs	r2, #4
 80238c4:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	795b      	ldrb	r3, [r3, #5]
 80238ca:	f023 030f 	bic.w	r3, r3, #15
 80238ce:	b2da      	uxtb	r2, r3
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	715a      	strb	r2, [r3, #5]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	2201      	movs	r2, #1
 80238d8:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	2208      	movs	r2, #8
 80238de:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 80238e0:	6878      	ldr	r0, [r7, #4]
 80238e2:	2100      	movs	r1, #0
 80238e4:	f000 f8e2 	bl	8023aac <MBX_MailboxSendReq>
 80238e8:	e02f      	b.n	802394a <MBX_MailboxWriteInd+0xaa>
    else
    /* if the mailbox datagram counter (Bit 4-6 of Byte 5 of the mailbox header) is unequal zero,
       the master supports the mailbox data link layer,
        in that case a repeated mailbox write request will be detected, if the counter is unequal zero
        and unchanged */
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 80238ea:	7bbb      	ldrb	r3, [r7, #14]
 80238ec:	2b00      	cmp	r3, #0
 80238ee:	d004      	beq.n	80238fa <MBX_MailboxWriteInd+0x5a>
 80238f0:	4b17      	ldr	r3, [pc, #92]	; (8023950 <MBX_MailboxWriteInd+0xb0>)
 80238f2:	781b      	ldrb	r3, [r3, #0]
 80238f4:	7bba      	ldrb	r2, [r7, #14]
 80238f6:	429a      	cmp	r2, r3
 80238f8:	d022      	beq.n	8023940 <MBX_MailboxWriteInd+0xa0>
    {
        /* new mailbox service received */
        /* mbxCounter = 0: old EtherCAT master */
        /* new MBX service received, store the new mailbox counter */
        u8MbxWriteCounter = mbxCounter;
 80238fa:	4a15      	ldr	r2, [pc, #84]	; (8023950 <MBX_MailboxWriteInd+0xb0>)
 80238fc:	7bbb      	ldrb	r3, [r7, #14]
 80238fe:	7013      	strb	r3, [r2, #0]

        {
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 8023900:	6878      	ldr	r0, [r7, #4]
 8023902:	4914      	ldr	r1, [pc, #80]	; (8023954 <MBX_MailboxWriteInd+0xb4>)
 8023904:	f7ff fdc4 	bl	8023490 <PutInMbxQueue>
 8023908:	4603      	mov	r3, r0
 802390a:	73fb      	strb	r3, [r7, #15]
        }

        if ( result != 0 )
 802390c:	7bfb      	ldrb	r3, [r7, #15]
 802390e:	2b00      	cmp	r3, #0
 8023910:	d015      	beq.n	802393e <MBX_MailboxWriteInd+0x9e>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8023912:	687b      	ldr	r3, [r7, #4]
 8023914:	2204      	movs	r2, #4
 8023916:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	795b      	ldrb	r3, [r3, #5]
 802391c:	f023 030f 	bic.w	r3, r3, #15
 8023920:	b2da      	uxtb	r2, r3
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023926:	687b      	ldr	r3, [r7, #4]
 8023928:	2201      	movs	r2, #1
 802392a:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 802392c:	7bfb      	ldrb	r3, [r7, #15]
 802392e:	b29a      	uxth	r2, r3
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8023934:	6878      	ldr	r0, [r7, #4]
 8023936:	2100      	movs	r1, #0
 8023938:	f000 f8b8 	bl	8023aac <MBX_MailboxSendReq>
            /* check the protocol type and call the XXXX_ServiceInd-function */

            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
        }

        if ( result != 0 )
 802393c:	e005      	b.n	802394a <MBX_MailboxWriteInd+0xaa>
 802393e:	e004      	b.n	802394a <MBX_MailboxWriteInd+0xaa>
        }
    }
    else
    {
        // the mailbox buffer has to be freed here
        APPL_FreeMailboxBuffer(pMbx);
 8023940:	6878      	ldr	r0, [r7, #4]
 8023942:	f006 fa6b 	bl	8029e1c <free>
        pMbx = NULL;
 8023946:	2300      	movs	r3, #0
 8023948:	607b      	str	r3, [r7, #4]

    }
}
 802394a:	3710      	adds	r7, #16
 802394c:	46bd      	mov	sp, r7
 802394e:	bd80      	pop	{r7, pc}
 8023950:	1fff27e8 	.word	0x1fff27e8
 8023954:	1fff2798 	.word	0x1fff2798

08023958 <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 8023958:	b580      	push	{r7, lr}
 802395a:	b082      	sub	sp, #8
 802395c:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 802395e:	4b2b      	ldr	r3, [pc, #172]	; (8023a0c <MBX_MailboxReadInd+0xb4>)
 8023960:	2200      	movs	r2, #0
 8023962:	701a      	strb	r2, [r3, #0]

    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if ( psRepeatMbx && psStoreMbx == NULL )
 8023964:	4b2a      	ldr	r3, [pc, #168]	; (8023a10 <MBX_MailboxReadInd+0xb8>)
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	2b00      	cmp	r3, #0
 802396a:	d00b      	beq.n	8023984 <MBX_MailboxReadInd+0x2c>
 802396c:	4b29      	ldr	r3, [pc, #164]	; (8023a14 <MBX_MailboxReadInd+0xbc>)
 802396e:	681b      	ldr	r3, [r3, #0]
 8023970:	2b00      	cmp	r3, #0
 8023972:	d107      	bne.n	8023984 <MBX_MailboxReadInd+0x2c>
    {
    /* the last sent service is not stored for repeat any longer */
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8023974:	4b26      	ldr	r3, [pc, #152]	; (8023a10 <MBX_MailboxReadInd+0xb8>)
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	4618      	mov	r0, r3
 802397a:	f006 fa4f 	bl	8029e1c <free>
        psRepeatMbx = NULL;
 802397e:	4b24      	ldr	r3, [pc, #144]	; (8023a10 <MBX_MailboxReadInd+0xb8>)
 8023980:	2200      	movs	r2, #0
 8023982:	601a      	str	r2, [r3, #0]
    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 8023984:	4b24      	ldr	r3, [pc, #144]	; (8023a18 <MBX_MailboxReadInd+0xc0>)
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	4a21      	ldr	r2, [pc, #132]	; (8023a10 <MBX_MailboxReadInd+0xb8>)
 802398a:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 802398c:	4b21      	ldr	r3, [pc, #132]	; (8023a14 <MBX_MailboxReadInd+0xbc>)
 802398e:	681b      	ldr	r3, [r3, #0]
 8023990:	2b00      	cmp	r3, #0
 8023992:	d008      	beq.n	80239a6 <MBX_MailboxReadInd+0x4e>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 8023994:	4b1f      	ldr	r3, [pc, #124]	; (8023a14 <MBX_MailboxReadInd+0xbc>)
 8023996:	681b      	ldr	r3, [r3, #0]
 8023998:	4618      	mov	r0, r3
 802399a:	f000 f995 	bl	8023cc8 <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 802399e:	4b1d      	ldr	r3, [pc, #116]	; (8023a14 <MBX_MailboxReadInd+0xbc>)
 80239a0:	2200      	movs	r2, #0
 80239a2:	601a      	str	r2, [r3, #0]
 80239a4:	e009      	b.n	80239ba <MBX_MailboxReadInd+0x62>
      }
      else
    {
        TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 80239a6:	481d      	ldr	r0, [pc, #116]	; (8023a1c <MBX_MailboxReadInd+0xc4>)
 80239a8:	f7ff fd9c 	bl	80234e4 <GetOutOfMbxQueue>
 80239ac:	6078      	str	r0, [r7, #4]
        if (pMbx)
 80239ae:	687b      	ldr	r3, [r7, #4]
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	d002      	beq.n	80239ba <MBX_MailboxReadInd+0x62>
        {
            MBX_CopyToSendMailbox(pMbx);
 80239b4:	6878      	ldr	r0, [r7, #4]
 80239b6:	f000 f987 	bl	8023cc8 <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 80239ba:	4b19      	ldr	r3, [pc, #100]	; (8023a20 <MBX_MailboxReadInd+0xc8>)
 80239bc:	781b      	ldrb	r3, [r3, #0]
 80239be:	2b00      	cmp	r3, #0
 80239c0:	d020      	beq.n	8023a04 <MBX_MailboxReadInd+0xac>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 80239c2:	4b17      	ldr	r3, [pc, #92]	; (8023a20 <MBX_MailboxReadInd+0xc8>)
 80239c4:	781b      	ldrb	r3, [r3, #0]
 80239c6:	f003 0302 	and.w	r3, r3, #2
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	d01a      	beq.n	8023a04 <MBX_MailboxReadInd+0xac>
        {
           UINT8 result = 0;
 80239ce:	2300      	movs	r3, #0
 80239d0:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 80239d2:	4b13      	ldr	r3, [pc, #76]	; (8023a20 <MBX_MailboxReadInd+0xc8>)
 80239d4:	781b      	ldrb	r3, [r3, #0]
 80239d6:	f023 0302 	bic.w	r3, r3, #2
 80239da:	b2da      	uxtb	r2, r3
 80239dc:	4b10      	ldr	r3, [pc, #64]	; (8023a20 <MBX_MailboxReadInd+0xc8>)
 80239de:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 80239e0:	4b10      	ldr	r3, [pc, #64]	; (8023a24 <MBX_MailboxReadInd+0xcc>)
 80239e2:	681b      	ldr	r3, [r3, #0]
 80239e4:	4618      	mov	r0, r3
 80239e6:	f7fd fdcf 	bl	8021588 <COE_ContinueInd>
 80239ea:	4603      	mov	r3, r0
 80239ec:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 80239ee:	78fb      	ldrb	r3, [r7, #3]
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	d007      	beq.n	8023a04 <MBX_MailboxReadInd+0xac>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 80239f4:	4b0a      	ldr	r3, [pc, #40]	; (8023a20 <MBX_MailboxReadInd+0xc8>)
 80239f6:	781b      	ldrb	r3, [r3, #0]
 80239f8:	f043 0302 	orr.w	r3, r3, #2
 80239fc:	b2da      	uxtb	r2, r3
 80239fe:	4b08      	ldr	r3, [pc, #32]	; (8023a20 <MBX_MailboxReadInd+0xc8>)
 8023a00:	701a      	strb	r2, [r3, #0]
 8023a02:	e7ff      	b.n	8023a04 <MBX_MailboxReadInd+0xac>
        }
        else
        {
        }
    }
}
 8023a04:	3708      	adds	r7, #8
 8023a06:	46bd      	mov	sp, r7
 8023a08:	bd80      	pop	{r7, pc}
 8023a0a:	bf00      	nop
 8023a0c:	1fff27cd 	.word	0x1fff27cd
 8023a10:	1fff27f0 	.word	0x1fff27f0
 8023a14:	1fff27d4 	.word	0x1fff27d4
 8023a18:	1fff27dc 	.word	0x1fff27dc
 8023a1c:	1fff2764 	.word	0x1fff2764
 8023a20:	1fff27e9 	.word	0x1fff27e9
 8023a24:	1fff27e4 	.word	0x1fff27e4

08023a28 <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 8023a28:	b580      	push	{r7, lr}
 8023a2a:	b082      	sub	sp, #8
 8023a2c:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 8023a2e:	4b1a      	ldr	r3, [pc, #104]	; (8023a98 <MBX_MailboxRepeatReq+0x70>)
 8023a30:	681b      	ldr	r3, [r3, #0]
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	d01d      	beq.n	8023a72 <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 8023a36:	4b18      	ldr	r3, [pc, #96]	; (8023a98 <MBX_MailboxRepeatReq+0x70>)
 8023a38:	681b      	ldr	r3, [r3, #0]
 8023a3a:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 8023a3c:	4b17      	ldr	r3, [pc, #92]	; (8023a9c <MBX_MailboxRepeatReq+0x74>)
 8023a3e:	781b      	ldrb	r3, [r3, #0]
 8023a40:	2b00      	cmp	r3, #0
 8023a42:	d010      	beq.n	8023a66 <MBX_MailboxRepeatReq+0x3e>
 8023a44:	4b16      	ldr	r3, [pc, #88]	; (8023aa0 <MBX_MailboxRepeatReq+0x78>)
 8023a46:	681b      	ldr	r3, [r3, #0]
 8023a48:	2b00      	cmp	r3, #0
 8023a4a:	d10c      	bne.n	8023a66 <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
            DisableSyncManChannel(MAILBOX_READ);
 8023a4c:	2001      	movs	r0, #1
 8023a4e:	f7fd fe5f 	bl	8021710 <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 8023a52:	4b14      	ldr	r3, [pc, #80]	; (8023aa4 <MBX_MailboxRepeatReq+0x7c>)
 8023a54:	681b      	ldr	r3, [r3, #0]
 8023a56:	4a12      	ldr	r2, [pc, #72]	; (8023aa0 <MBX_MailboxRepeatReq+0x78>)
 8023a58:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 8023a5a:	2001      	movs	r0, #1
 8023a5c:	f7fd fe82 	bl	8021764 <EnableSyncManChannel>

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8023a60:	4b0e      	ldr	r3, [pc, #56]	; (8023a9c <MBX_MailboxRepeatReq+0x74>)
 8023a62:	2200      	movs	r2, #0
 8023a64:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 8023a66:	6878      	ldr	r0, [r7, #4]
 8023a68:	f000 f92e 	bl	8023cc8 <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 8023a6c:	4b0a      	ldr	r3, [pc, #40]	; (8023a98 <MBX_MailboxRepeatReq+0x70>)
 8023a6e:	2200      	movs	r2, #0
 8023a70:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 8023a72:	4b0d      	ldr	r3, [pc, #52]	; (8023aa8 <MBX_MailboxRepeatReq+0x80>)
 8023a74:	781b      	ldrb	r3, [r3, #0]
 8023a76:	2b00      	cmp	r3, #0
 8023a78:	bf14      	ite	ne
 8023a7a:	2301      	movne	r3, #1
 8023a7c:	2300      	moveq	r3, #0
 8023a7e:	b2db      	uxtb	r3, r3
 8023a80:	f083 0301 	eor.w	r3, r3, #1
 8023a84:	b2db      	uxtb	r3, r3
 8023a86:	f003 0301 	and.w	r3, r3, #1
 8023a8a:	b2da      	uxtb	r2, r3
 8023a8c:	4b06      	ldr	r3, [pc, #24]	; (8023aa8 <MBX_MailboxRepeatReq+0x80>)
 8023a8e:	701a      	strb	r2, [r3, #0]
}
 8023a90:	3708      	adds	r7, #8
 8023a92:	46bd      	mov	sp, r7
 8023a94:	bd80      	pop	{r7, pc}
 8023a96:	bf00      	nop
 8023a98:	1fff27f0 	.word	0x1fff27f0
 8023a9c:	1fff27cd 	.word	0x1fff27cd
 8023aa0:	1fff27d4 	.word	0x1fff27d4
 8023aa4:	1fff27dc 	.word	0x1fff27dc
 8023aa8:	1fff27ec 	.word	0x1fff27ec

08023aac <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 8023aac:	b580      	push	{r7, lr}
 8023aae:	b084      	sub	sp, #16
 8023ab0:	af00      	add	r7, sp, #0
 8023ab2:	6078      	str	r0, [r7, #4]
 8023ab4:	460b      	mov	r3, r1
 8023ab6:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 8023ab8:	2300      	movs	r3, #0
 8023aba:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 8023abc:	4b2c      	ldr	r3, [pc, #176]	; (8023b70 <MBX_MailboxSendReq+0xc4>)
 8023abe:	781b      	ldrb	r3, [r3, #0]
 8023ac0:	f003 030f 	and.w	r3, r3, #15
 8023ac4:	2b01      	cmp	r3, #1
 8023ac6:	d101      	bne.n	8023acc <MBX_MailboxSendReq+0x20>
    {
        return ERROR_INVALIDSTATE;
 8023ac8:	23f0      	movs	r3, #240	; 0xf0
 8023aca:	e04d      	b.n	8023b68 <MBX_MailboxSendReq+0xbc>

    ENTER_MBX_CRITICAL;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	795b      	ldrb	r3, [r3, #5]
 8023ad0:	f003 030f 	and.w	r3, r3, #15
 8023ad4:	b2da      	uxtb	r2, r3
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	715a      	strb	r2, [r3, #5]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 8023ada:	4b26      	ldr	r3, [pc, #152]	; (8023b74 <MBX_MailboxSendReq+0xc8>)
 8023adc:	781b      	ldrb	r3, [r3, #0]
 8023ade:	f003 0307 	and.w	r3, r3, #7
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	d102      	bne.n	8023aec <MBX_MailboxSendReq+0x40>
    {
        u8MbxReadCounter = 1;
 8023ae6:	4b23      	ldr	r3, [pc, #140]	; (8023b74 <MBX_MailboxSendReq+0xc8>)
 8023ae8:	2201      	movs	r2, #1
 8023aea:	701a      	strb	r2, [r3, #0]
    }

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	795b      	ldrb	r3, [r3, #5]
 8023af0:	b2da      	uxtb	r2, r3
 8023af2:	4b20      	ldr	r3, [pc, #128]	; (8023b74 <MBX_MailboxSendReq+0xc8>)
 8023af4:	781b      	ldrb	r3, [r3, #0]
 8023af6:	011b      	lsls	r3, r3, #4
 8023af8:	b2db      	uxtb	r3, r3
 8023afa:	4313      	orrs	r3, r2
 8023afc:	b2db      	uxtb	r3, r3
 8023afe:	b2da      	uxtb	r2, r3
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	715a      	strb	r2, [r3, #5]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 8023b04:	6878      	ldr	r0, [r7, #4]
 8023b06:	f000 f8df 	bl	8023cc8 <MBX_CopyToSendMailbox>
 8023b0a:	4603      	mov	r3, r0
 8023b0c:	2b00      	cmp	r3, #0
 8023b0e:	d014      	beq.n	8023b3a <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 8023b10:	6878      	ldr	r0, [r7, #4]
 8023b12:	4919      	ldr	r1, [pc, #100]	; (8023b78 <MBX_MailboxSendReq+0xcc>)
 8023b14:	f7ff fcbc 	bl	8023490 <PutInMbxQueue>
 8023b18:	4603      	mov	r3, r0
 8023b1a:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 8023b1c:	7bfb      	ldrb	r3, [r7, #15]
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	d004      	beq.n	8023b2c <MBX_MailboxSendReq+0x80>
        {
            flags |= FRAGMENTS_FOLLOW;
 8023b22:	78fb      	ldrb	r3, [r7, #3]
 8023b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023b28:	70fb      	strb	r3, [r7, #3]
 8023b2a:	e00c      	b.n	8023b46 <MBX_MailboxSendReq+0x9a>
        }
        else
        {
            u8MbxReadCounter++;
 8023b2c:	4b11      	ldr	r3, [pc, #68]	; (8023b74 <MBX_MailboxSendReq+0xc8>)
 8023b2e:	781b      	ldrb	r3, [r3, #0]
 8023b30:	3301      	adds	r3, #1
 8023b32:	b2da      	uxtb	r2, r3
 8023b34:	4b0f      	ldr	r3, [pc, #60]	; (8023b74 <MBX_MailboxSendReq+0xc8>)
 8023b36:	701a      	strb	r2, [r3, #0]
 8023b38:	e005      	b.n	8023b46 <MBX_MailboxSendReq+0x9a>
        }
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 8023b3a:	4b0e      	ldr	r3, [pc, #56]	; (8023b74 <MBX_MailboxSendReq+0xc8>)
 8023b3c:	781b      	ldrb	r3, [r3, #0]
 8023b3e:	3301      	adds	r3, #1
 8023b40:	b2da      	uxtb	r2, r3
 8023b42:	4b0c      	ldr	r3, [pc, #48]	; (8023b74 <MBX_MailboxSendReq+0xc8>)
 8023b44:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 8023b46:	78fb      	ldrb	r3, [r7, #3]
 8023b48:	b25b      	sxtb	r3, r3
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	da0b      	bge.n	8023b66 <MBX_MailboxSendReq+0xba>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 8023b4e:	78fb      	ldrb	r3, [r7, #3]
 8023b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023b54:	b2da      	uxtb	r2, r3
 8023b56:	4b09      	ldr	r3, [pc, #36]	; (8023b7c <MBX_MailboxSendReq+0xd0>)
 8023b58:	781b      	ldrb	r3, [r3, #0]
 8023b5a:	b2db      	uxtb	r3, r3
 8023b5c:	4313      	orrs	r3, r2
 8023b5e:	b2db      	uxtb	r3, r3
 8023b60:	b2da      	uxtb	r2, r3
 8023b62:	4b06      	ldr	r3, [pc, #24]	; (8023b7c <MBX_MailboxSendReq+0xd0>)
 8023b64:	701a      	strb	r2, [r3, #0]
    }

    LEAVE_MBX_CRITICAL;

    return result;
 8023b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8023b68:	4618      	mov	r0, r3
 8023b6a:	3710      	adds	r7, #16
 8023b6c:	46bd      	mov	sp, r7
 8023b6e:	bd80      	pop	{r7, pc}
 8023b70:	1fff2719 	.word	0x1fff2719
 8023b74:	1fff2760 	.word	0x1fff2760
 8023b78:	1fff2764 	.word	0x1fff2764
 8023b7c:	1fff27e9 	.word	0x1fff27e9

08023b80 <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 8023b80:	b580      	push	{r7, lr}
 8023b82:	b084      	sub	sp, #16
 8023b84:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 8023b86:	4b46      	ldr	r3, [pc, #280]	; (8023ca0 <MBX_CheckAndCopyMailbox+0x120>)
 8023b88:	881b      	ldrh	r3, [r3, #0]
 8023b8a:	085b      	lsrs	r3, r3, #1
 8023b8c:	b29b      	uxth	r3, r3
 8023b8e:	005b      	lsls	r3, r3, #1
 8023b90:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8023b94:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8023b98:	881b      	ldrh	r3, [r3, #0]
 8023b9a:	81fb      	strh	r3, [r7, #14]
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);

    if(bNoMbxMemoryAvailable == TRUE)
 8023b9c:	4b41      	ldr	r3, [pc, #260]	; (8023ca4 <MBX_CheckAndCopyMailbox+0x124>)
 8023b9e:	781b      	ldrb	r3, [r3, #0]
 8023ba0:	2b00      	cmp	r3, #0
 8023ba2:	d023      	beq.n	8023bec <MBX_CheckAndCopyMailbox+0x6c>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8023ba4:	200a      	movs	r0, #10
 8023ba6:	f006 f931 	bl	8029e0c <malloc>
 8023baa:	4603      	mov	r3, r0
 8023bac:	60bb      	str	r3, [r7, #8]

        if(pMbx != NULL)
 8023bae:	68bb      	ldr	r3, [r7, #8]
 8023bb0:	2b00      	cmp	r3, #0
 8023bb2:	d01b      	beq.n	8023bec <MBX_CheckAndCopyMailbox+0x6c>
        {
            HMEMSET(pMbx,0x00,10);
 8023bb4:	68b8      	ldr	r0, [r7, #8]
 8023bb6:	2100      	movs	r1, #0
 8023bb8:	220a      	movs	r2, #10
 8023bba:	f006 f952 	bl	8029e62 <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8023bbe:	68bb      	ldr	r3, [r7, #8]
 8023bc0:	2204      	movs	r2, #4
 8023bc2:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 8023bc4:	68bb      	ldr	r3, [r7, #8]
 8023bc6:	795b      	ldrb	r3, [r3, #5]
 8023bc8:	f023 030f 	bic.w	r3, r3, #15
 8023bcc:	b2da      	uxtb	r2, r3
 8023bce:	68bb      	ldr	r3, [r7, #8]
 8023bd0:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023bd2:	68bb      	ldr	r3, [r7, #8]
 8023bd4:	2201      	movs	r2, #1
 8023bd6:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 8023bd8:	68bb      	ldr	r3, [r7, #8]
 8023bda:	2207      	movs	r2, #7
 8023bdc:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8023bde:	68b8      	ldr	r0, [r7, #8]
 8023be0:	2100      	movs	r1, #0
 8023be2:	f7ff ff63 	bl	8023aac <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 8023be6:	68b8      	ldr	r0, [r7, #8]
 8023be8:	f006 f918 	bl	8029e1c <free>
        }
    }
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 8023bec:	89fb      	ldrh	r3, [r7, #14]
 8023bee:	3306      	adds	r3, #6
 8023bf0:	81fb      	strh	r3, [r7, #14]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 8023bf2:	4b2d      	ldr	r3, [pc, #180]	; (8023ca8 <MBX_CheckAndCopyMailbox+0x128>)
 8023bf4:	781b      	ldrb	r3, [r3, #0]
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	d103      	bne.n	8023c02 <MBX_CheckAndCopyMailbox+0x82>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 8023bfa:	4b2c      	ldr	r3, [pc, #176]	; (8023cac <MBX_CheckAndCopyMailbox+0x12c>)
 8023bfc:	781b      	ldrb	r3, [r3, #0]
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d003      	beq.n	8023c0a <MBX_CheckAndCopyMailbox+0x8a>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 8023c02:	4b2b      	ldr	r3, [pc, #172]	; (8023cb0 <MBX_CheckAndCopyMailbox+0x130>)
 8023c04:	2201      	movs	r2, #1
 8023c06:	701a      	strb	r2, [r3, #0]
 8023c08:	e046      	b.n	8023c98 <MBX_CheckAndCopyMailbox+0x118>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 8023c0a:	4b29      	ldr	r3, [pc, #164]	; (8023cb0 <MBX_CheckAndCopyMailbox+0x130>)
 8023c0c:	2200      	movs	r2, #0
 8023c0e:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 8023c10:	4b28      	ldr	r3, [pc, #160]	; (8023cb4 <MBX_CheckAndCopyMailbox+0x134>)
 8023c12:	881b      	ldrh	r3, [r3, #0]
 8023c14:	89fa      	ldrh	r2, [r7, #14]
 8023c16:	429a      	cmp	r2, r3
 8023c18:	d902      	bls.n	8023c20 <MBX_CheckAndCopyMailbox+0xa0>
        {
            mbxLen = u16ReceiveMbxSize;
 8023c1a:	4b26      	ldr	r3, [pc, #152]	; (8023cb4 <MBX_CheckAndCopyMailbox+0x134>)
 8023c1c:	881b      	ldrh	r3, [r3, #0]
 8023c1e:	81fb      	strh	r3, [r7, #14]
        }

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8023c20:	4b24      	ldr	r3, [pc, #144]	; (8023cb4 <MBX_CheckAndCopyMailbox+0x134>)
 8023c22:	881b      	ldrh	r3, [r3, #0]
 8023c24:	4618      	mov	r0, r3
 8023c26:	f006 f8f1 	bl	8029e0c <malloc>
 8023c2a:	4603      	mov	r3, r0
 8023c2c:	461a      	mov	r2, r3
 8023c2e:	4b22      	ldr	r3, [pc, #136]	; (8023cb8 <MBX_CheckAndCopyMailbox+0x138>)
 8023c30:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 8023c32:	4b21      	ldr	r3, [pc, #132]	; (8023cb8 <MBX_CheckAndCopyMailbox+0x138>)
 8023c34:	681b      	ldr	r3, [r3, #0]
 8023c36:	2b00      	cmp	r3, #0
 8023c38:	d103      	bne.n	8023c42 <MBX_CheckAndCopyMailbox+0xc2>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 8023c3a:	4b1d      	ldr	r3, [pc, #116]	; (8023cb0 <MBX_CheckAndCopyMailbox+0x130>)
 8023c3c:	2201      	movs	r2, #1
 8023c3e:	701a      	strb	r2, [r3, #0]
            return;
 8023c40:	e02a      	b.n	8023c98 <MBX_CheckAndCopyMailbox+0x118>
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 8023c42:	4b1d      	ldr	r3, [pc, #116]	; (8023cb8 <MBX_CheckAndCopyMailbox+0x138>)
 8023c44:	6819      	ldr	r1, [r3, #0]
 8023c46:	4b16      	ldr	r3, [pc, #88]	; (8023ca0 <MBX_CheckAndCopyMailbox+0x120>)
 8023c48:	881a      	ldrh	r2, [r3, #0]
 8023c4a:	89fb      	ldrh	r3, [r7, #14]
 8023c4c:	4608      	mov	r0, r1
 8023c4e:	4611      	mov	r1, r2
 8023c50:	461a      	mov	r2, r3
 8023c52:	f7ff fbe3 	bl	802341c <HW_EscReadMbxMem>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT8 smstate = 0x00;
 8023c56:	2300      	movs	r3, #0
 8023c58:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(smstate,ESC_SYNCMAN_STATUS_OFFSET);
 8023c5a:	4b18      	ldr	r3, [pc, #96]	; (8023cbc <MBX_CheckAndCopyMailbox+0x13c>)
 8023c5c:	781b      	ldrb	r3, [r3, #0]
 8023c5e:	b2db      	uxtb	r3, r3
 8023c60:	71fb      	strb	r3, [r7, #7]

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 8023c62:	79fb      	ldrb	r3, [r7, #7]
 8023c64:	b2db      	uxtb	r3, r3
 8023c66:	f003 0308 	and.w	r3, r3, #8
 8023c6a:	2b00      	cmp	r3, #0
 8023c6c:	d00f      	beq.n	8023c8e <MBX_CheckAndCopyMailbox+0x10e>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u8dummy = 0;
 8023c6e:	4b14      	ldr	r3, [pc, #80]	; (8023cc0 <MBX_CheckAndCopyMailbox+0x140>)
 8023c70:	2200      	movs	r2, #0
 8023c72:	701a      	strb	r2, [r3, #0]
            HW_EscReadByte(u8dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 1));
 8023c74:	4b0a      	ldr	r3, [pc, #40]	; (8023ca0 <MBX_CheckAndCopyMailbox+0x120>)
 8023c76:	881b      	ldrh	r3, [r3, #0]
 8023c78:	461a      	mov	r2, r3
 8023c7a:	4b0e      	ldr	r3, [pc, #56]	; (8023cb4 <MBX_CheckAndCopyMailbox+0x134>)
 8023c7c:	881b      	ldrh	r3, [r3, #0]
 8023c7e:	4413      	add	r3, r2
 8023c80:	461a      	mov	r2, r3
 8023c82:	4b10      	ldr	r3, [pc, #64]	; (8023cc4 <MBX_CheckAndCopyMailbox+0x144>)
 8023c84:	4413      	add	r3, r2
 8023c86:	781b      	ldrb	r3, [r3, #0]
 8023c88:	b2da      	uxtb	r2, r3
 8023c8a:	4b0d      	ldr	r3, [pc, #52]	; (8023cc0 <MBX_CheckAndCopyMailbox+0x140>)
 8023c8c:	701a      	strb	r2, [r3, #0]
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 8023c8e:	4b0a      	ldr	r3, [pc, #40]	; (8023cb8 <MBX_CheckAndCopyMailbox+0x138>)
 8023c90:	681b      	ldr	r3, [r3, #0]
 8023c92:	4618      	mov	r0, r3
 8023c94:	f7ff fe04 	bl	80238a0 <MBX_MailboxWriteInd>

    }
}
 8023c98:	3710      	adds	r7, #16
 8023c9a:	46bd      	mov	sp, r7
 8023c9c:	bd80      	pop	{r7, pc}
 8023c9e:	bf00      	nop
 8023ca0:	1fff27d0 	.word	0x1fff27d0
 8023ca4:	1fff27cc 	.word	0x1fff27cc
 8023ca8:	1fff27cd 	.word	0x1fff27cd
 8023cac:	1fff27e9 	.word	0x1fff27e9
 8023cb0:	1fff27e0 	.word	0x1fff27e0
 8023cb4:	1fff27ea 	.word	0x1fff27ea
 8023cb8:	1fff27e4 	.word	0x1fff27e4
 8023cbc:	54010805 	.word	0x54010805
 8023cc0:	1fff2730 	.word	0x1fff2730
 8023cc4:	5400ffff 	.word	0x5400ffff

08023cc8 <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 8023cc8:	b580      	push	{r7, lr}
 8023cca:	b084      	sub	sp, #16
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 8023cd0:	4b28      	ldr	r3, [pc, #160]	; (8023d74 <MBX_CopyToSendMailbox+0xac>)
 8023cd2:	781b      	ldrb	r3, [r3, #0]
 8023cd4:	f003 030f 	and.w	r3, r3, #15
 8023cd8:	2b01      	cmp	r3, #1
 8023cda:	d101      	bne.n	8023ce0 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8023cdc:	23f0      	movs	r3, #240	; 0xf0
 8023cde:	e045      	b.n	8023d6c <MBX_CopyToSendMailbox+0xa4>
    }


    if ( !bMbxRunning )
 8023ce0:	4b25      	ldr	r3, [pc, #148]	; (8023d78 <MBX_CopyToSendMailbox+0xb0>)
 8023ce2:	781b      	ldrb	r3, [r3, #0]
 8023ce4:	f083 0301 	eor.w	r3, r3, #1
 8023ce8:	b2db      	uxtb	r3, r3
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	d001      	beq.n	8023cf2 <MBX_CopyToSendMailbox+0x2a>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8023cee:	23f0      	movs	r3, #240	; 0xf0
 8023cf0:	e03c      	b.n	8023d6c <MBX_CopyToSendMailbox+0xa4>
    }

    if ( bSendMbxIsFull )
 8023cf2:	4b22      	ldr	r3, [pc, #136]	; (8023d7c <MBX_CopyToSendMailbox+0xb4>)
 8023cf4:	781b      	ldrb	r3, [r3, #0]
 8023cf6:	2b00      	cmp	r3, #0
 8023cf8:	d001      	beq.n	8023cfe <MBX_CopyToSendMailbox+0x36>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 8023cfa:	2307      	movs	r3, #7
 8023cfc:	e036      	b.n	8023d6c <MBX_CopyToSendMailbox+0xa4>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	881b      	ldrh	r3, [r3, #0]
 8023d02:	81fb      	strh	r3, [r7, #14]
        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 8023d04:	4b1e      	ldr	r3, [pc, #120]	; (8023d80 <MBX_CopyToSendMailbox+0xb8>)
 8023d06:	881a      	ldrh	r2, [r3, #0]
 8023d08:	89fb      	ldrh	r3, [r7, #14]
 8023d0a:	3306      	adds	r3, #6
 8023d0c:	b29b      	uxth	r3, r3
 8023d0e:	6878      	ldr	r0, [r7, #4]
 8023d10:	4611      	mov	r1, r2
 8023d12:	461a      	mov	r2, r3
 8023d14:	f7ff fbaa 	bl	802346c <HW_EscWriteMbxMem>
/* ECATCHANGE_HW(V5.10) HW1*/

        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT8 smstate = 0x00;
 8023d18:	2300      	movs	r3, #0
 8023d1a:	737b      	strb	r3, [r7, #13]
        HW_EscReadByte(smstate,(ESC_SYNCMAN_STATUS_OFFSET + SIZEOF_SM_REGISTER));
 8023d1c:	4b19      	ldr	r3, [pc, #100]	; (8023d84 <MBX_CopyToSendMailbox+0xbc>)
 8023d1e:	781b      	ldrb	r3, [r3, #0]
 8023d20:	b2db      	uxtb	r3, r3
 8023d22:	737b      	strb	r3, [r7, #13]

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 8023d24:	7b7b      	ldrb	r3, [r7, #13]
 8023d26:	b2db      	uxtb	r3, r3
 8023d28:	f003 0308 	and.w	r3, r3, #8
 8023d2c:	2b00      	cmp	r3, #0
 8023d2e:	d10f      	bne.n	8023d50 <MBX_CopyToSendMailbox+0x88>
        {

            /*Write last Byte to trigger mailbox full flag*/
            u8dummy = 0;
 8023d30:	4b15      	ldr	r3, [pc, #84]	; (8023d88 <MBX_CopyToSendMailbox+0xc0>)
 8023d32:	2200      	movs	r2, #0
 8023d34:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,(u16EscAddrSendMbx + u16SendMbxSize - 1));
 8023d36:	4b12      	ldr	r3, [pc, #72]	; (8023d80 <MBX_CopyToSendMailbox+0xb8>)
 8023d38:	881b      	ldrh	r3, [r3, #0]
 8023d3a:	461a      	mov	r2, r3
 8023d3c:	4b13      	ldr	r3, [pc, #76]	; (8023d8c <MBX_CopyToSendMailbox+0xc4>)
 8023d3e:	881b      	ldrh	r3, [r3, #0]
 8023d40:	4413      	add	r3, r2
 8023d42:	461a      	mov	r2, r3
 8023d44:	4b12      	ldr	r3, [pc, #72]	; (8023d90 <MBX_CopyToSendMailbox+0xc8>)
 8023d46:	4413      	add	r3, r2
 8023d48:	4a0f      	ldr	r2, [pc, #60]	; (8023d88 <MBX_CopyToSendMailbox+0xc0>)
 8023d4a:	7812      	ldrb	r2, [r2, #0]
 8023d4c:	b2d2      	uxtb	r2, r2
 8023d4e:	701a      	strb	r2, [r3, #0]
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 8023d50:	4b10      	ldr	r3, [pc, #64]	; (8023d94 <MBX_CopyToSendMailbox+0xcc>)
 8023d52:	681b      	ldr	r3, [r3, #0]
 8023d54:	2b00      	cmp	r3, #0
 8023d56:	d002      	beq.n	8023d5e <MBX_CopyToSendMailbox+0x96>
        {
            psWriteMbx = NULL;
 8023d58:	4b0f      	ldr	r3, [pc, #60]	; (8023d98 <MBX_CopyToSendMailbox+0xd0>)
 8023d5a:	2200      	movs	r2, #0
 8023d5c:	601a      	str	r2, [r3, #0]
        }
        // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
        // psRepeatMbx = psReadMbx;
        psReadMbx = pMbx;
 8023d5e:	4a0d      	ldr	r2, [pc, #52]	; (8023d94 <MBX_CopyToSendMailbox+0xcc>)
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 8023d64:	4b05      	ldr	r3, [pc, #20]	; (8023d7c <MBX_CopyToSendMailbox+0xb4>)
 8023d66:	2201      	movs	r2, #1
 8023d68:	701a      	strb	r2, [r3, #0]


        return 0;
 8023d6a:	2300      	movs	r3, #0
    }
}
 8023d6c:	4618      	mov	r0, r3
 8023d6e:	3710      	adds	r7, #16
 8023d70:	46bd      	mov	sp, r7
 8023d72:	bd80      	pop	{r7, pc}
 8023d74:	1fff2719 	.word	0x1fff2719
 8023d78:	1fff27ce 	.word	0x1fff27ce
 8023d7c:	1fff27cd 	.word	0x1fff27cd
 8023d80:	1fff27e2 	.word	0x1fff27e2
 8023d84:	5401080d 	.word	0x5401080d
 8023d88:	1fff2730 	.word	0x1fff2730
 8023d8c:	1fff27d8 	.word	0x1fff27d8
 8023d90:	5400ffff 	.word	0x5400ffff
 8023d94:	1fff27dc 	.word	0x1fff27dc
 8023d98:	1fff27e4 	.word	0x1fff27e4

08023d9c <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 8023d9c:	b580      	push	{r7, lr}
 8023d9e:	b082      	sub	sp, #8
 8023da0:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 8023da2:	2300      	movs	r3, #0
 8023da4:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 8023da6:	2300      	movs	r3, #0
 8023da8:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 8023daa:	4818      	ldr	r0, [pc, #96]	; (8023e0c <MBX_Main+0x70>)
 8023dac:	f7ff fb9a 	bl	80234e4 <GetOutOfMbxQueue>
 8023db0:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 8023db2:	683b      	ldr	r3, [r7, #0]
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	d004      	beq.n	8023dc2 <MBX_Main+0x26>
        {
            result = MailboxServiceInd(pMbx);
 8023db8:	6838      	ldr	r0, [r7, #0]
 8023dba:	f7ff fd59 	bl	8023870 <MailboxServiceInd>
 8023dbe:	4603      	mov	r3, r0
 8023dc0:	71fb      	strb	r3, [r7, #7]
        }

        if ( result != 0 )
 8023dc2:	79fb      	ldrb	r3, [r7, #7]
 8023dc4:	2b00      	cmp	r3, #0
 8023dc6:	d014      	beq.n	8023df2 <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 8023dc8:	683b      	ldr	r3, [r7, #0]
 8023dca:	2204      	movs	r2, #4
 8023dcc:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 8023dce:	683b      	ldr	r3, [r7, #0]
 8023dd0:	795b      	ldrb	r3, [r3, #5]
 8023dd2:	f023 030f 	bic.w	r3, r3, #15
 8023dd6:	b2da      	uxtb	r2, r3
 8023dd8:	683b      	ldr	r3, [r7, #0]
 8023dda:	715a      	strb	r2, [r3, #5]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8023ddc:	683b      	ldr	r3, [r7, #0]
 8023dde:	2201      	movs	r2, #1
 8023de0:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8023de2:	79fb      	ldrb	r3, [r7, #7]
 8023de4:	b29a      	uxth	r2, r3
 8023de6:	683b      	ldr	r3, [r7, #0]
 8023de8:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8023dea:	6838      	ldr	r0, [r7, #0]
 8023dec:	2100      	movs	r1, #0
 8023dee:	f7ff fe5d 	bl	8023aac <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 8023df2:	683b      	ldr	r3, [r7, #0]
 8023df4:	2b00      	cmp	r3, #0
 8023df6:	d1d6      	bne.n	8023da6 <MBX_Main+0xa>


      if ( bReceiveMbxIsLocked )
 8023df8:	4b05      	ldr	r3, [pc, #20]	; (8023e10 <MBX_Main+0x74>)
 8023dfa:	781b      	ldrb	r3, [r3, #0]
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	d001      	beq.n	8023e04 <MBX_Main+0x68>
      {
          /* the work on the receive mailbox is locked, check if it can be unlocked (if all
             mailbox commands has been sent */
          MBX_CheckAndCopyMailbox();
 8023e00:	f7ff febe 	bl	8023b80 <MBX_CheckAndCopyMailbox>
      }
}
 8023e04:	3708      	adds	r7, #8
 8023e06:	46bd      	mov	sp, r7
 8023e08:	bd80      	pop	{r7, pc}
 8023e0a:	bf00      	nop
 8023e0c:	1fff2798 	.word	0x1fff2798
 8023e10:	1fff27e0 	.word	0x1fff27e0

08023e14 <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 8023e14:	b580      	push	{r7, lr}
 8023e16:	b084      	sub	sp, #16
 8023e18:	af00      	add	r7, sp, #0
 8023e1a:	4603      	mov	r3, r0
 8023e1c:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8023e1e:	f7fc fb1b 	bl	8020458 <COE_GetObjectDictionary>
 8023e22:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 8023e24:	e009      	b.n	8023e3a <OBJ_GetObjectHandle+0x26>
    {
        
        if (pObjEntry->Index == index)
 8023e26:	68fb      	ldr	r3, [r7, #12]
 8023e28:	891b      	ldrh	r3, [r3, #8]
 8023e2a:	88fa      	ldrh	r2, [r7, #6]
 8023e2c:	429a      	cmp	r2, r3
 8023e2e:	d101      	bne.n	8023e34 <OBJ_GetObjectHandle+0x20>
        {
            return pObjEntry;
 8023e30:	68fb      	ldr	r3, [r7, #12]
 8023e32:	e006      	b.n	8023e42 <OBJ_GetObjectHandle+0x2e>
        }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8023e34:	68fb      	ldr	r3, [r7, #12]
 8023e36:	685b      	ldr	r3, [r3, #4]
 8023e38:	60fb      	str	r3, [r7, #12]

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();

    while (pObjEntry!= NULL)
 8023e3a:	68fb      	ldr	r3, [r7, #12]
 8023e3c:	2b00      	cmp	r3, #0
 8023e3e:	d1f2      	bne.n	8023e26 <OBJ_GetObjectHandle+0x12>
        {
            return pObjEntry;
        }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }
    return 0;
 8023e40:	2300      	movs	r3, #0
}
 8023e42:	4618      	mov	r0, r3
 8023e44:	3710      	adds	r7, #16
 8023e46:	46bd      	mov	sp, r7
 8023e48:	bd80      	pop	{r7, pc}
 8023e4a:	bf00      	nop

08023e4c <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 8023e4c:	b480      	push	{r7}
 8023e4e:	b085      	sub	sp, #20
 8023e50:	af00      	add	r7, sp, #0
 8023e52:	603a      	str	r2, [r7, #0]
 8023e54:	461a      	mov	r2, r3
 8023e56:	4603      	mov	r3, r0
 8023e58:	80fb      	strh	r3, [r7, #6]
 8023e5a:	460b      	mov	r3, r1
 8023e5c:	717b      	strb	r3, [r7, #5]
 8023e5e:	4613      	mov	r3, r2
 8023e60:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8023e62:	683b      	ldr	r3, [r7, #0]
 8023e64:	899b      	ldrh	r3, [r3, #12]
 8023e66:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8023e6a:	121b      	asrs	r3, r3, #8
 8023e6c:	72bb      	strb	r3, [r7, #10]
    
/*ECATCHANGE_START(V5.12) COE6*/
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8023e6e:	683b      	ldr	r3, [r7, #0]
 8023e70:	899b      	ldrh	r3, [r3, #12]
 8023e72:	727b      	strb	r3, [r7, #9]
/*ECATCHANGE_END(V5.12) COE6*/
    UINT32 size = 0;
 8023e74:	2300      	movs	r3, #0
 8023e76:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 8023e78:	793b      	ldrb	r3, [r7, #4]
 8023e7a:	2b00      	cmp	r3, #0
 8023e7c:	d043      	beq.n	8023f06 <OBJ_GetObjectLength+0xba>
    {
        if ( objCode == OBJCODE_VAR )
 8023e7e:	7abb      	ldrb	r3, [r7, #10]
 8023e80:	2b07      	cmp	r3, #7
 8023e82:	d101      	bne.n	8023e88 <OBJ_GetObjectLength+0x3c>
        {
            return 0;
 8023e84:	2300      	movs	r3, #0
 8023e86:	e067      	b.n	8023f58 <OBJ_GetObjectLength+0x10c>
        }
        else if ((objCode == OBJCODE_ARR)
 8023e88:	7abb      	ldrb	r3, [r7, #10]
 8023e8a:	2b08      	cmp	r3, #8
 8023e8c:	d118      	bne.n	8023ec0 <OBJ_GetObjectLength+0x74>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8023e8e:	683b      	ldr	r3, [r7, #0]
 8023e90:	699b      	ldr	r3, [r3, #24]
 8023e92:	881b      	ldrh	r3, [r3, #0]
 8023e94:	727b      	strb	r3, [r7, #9]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 8023e96:	683b      	ldr	r3, [r7, #0]
 8023e98:	691b      	ldr	r3, [r3, #16]
 8023e9a:	3306      	adds	r3, #6
 8023e9c:	885b      	ldrh	r3, [r3, #2]
 8023e9e:	461a      	mov	r2, r3
 8023ea0:	7a7b      	ldrb	r3, [r7, #9]
 8023ea2:	fb03 f302 	mul.w	r3, r3, r2
 8023ea6:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8023ea8:	68fb      	ldr	r3, [r7, #12]
 8023eaa:	3307      	adds	r3, #7
 8023eac:	08db      	lsrs	r3, r3, #3
 8023eae:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8023eb0:	797b      	ldrb	r3, [r7, #5]
 8023eb2:	2b00      	cmp	r3, #0
 8023eb4:	d102      	bne.n	8023ebc <OBJ_GetObjectLength+0x70>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8023eb6:	68fb      	ldr	r3, [r7, #12]
 8023eb8:	3302      	adds	r3, #2
 8023eba:	60fb      	str	r3, [r7, #12]
            }
            return size;
 8023ebc:	68fb      	ldr	r3, [r7, #12]
 8023ebe:	e04b      	b.n	8023f58 <OBJ_GetObjectLength+0x10c>
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 8023ec0:	2301      	movs	r3, #1
 8023ec2:	72fb      	strb	r3, [r7, #11]
 8023ec4:	e00f      	b.n	8023ee6 <OBJ_GetObjectLength+0x9a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 8023ec6:	683b      	ldr	r3, [r7, #0]
 8023ec8:	6919      	ldr	r1, [r3, #16]
 8023eca:	7afa      	ldrb	r2, [r7, #11]
 8023ecc:	4613      	mov	r3, r2
 8023ece:	005b      	lsls	r3, r3, #1
 8023ed0:	4413      	add	r3, r2
 8023ed2:	005b      	lsls	r3, r3, #1
 8023ed4:	440b      	add	r3, r1
 8023ed6:	885b      	ldrh	r3, [r3, #2]
 8023ed8:	461a      	mov	r2, r3
 8023eda:	68fb      	ldr	r3, [r7, #12]
 8023edc:	4413      	add	r3, r2
 8023ede:	60fb      	str	r3, [r7, #12]
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 8023ee0:	7afb      	ldrb	r3, [r7, #11]
 8023ee2:	3301      	adds	r3, #1
 8023ee4:	72fb      	strb	r3, [r7, #11]
 8023ee6:	7afa      	ldrb	r2, [r7, #11]
 8023ee8:	7a7b      	ldrb	r3, [r7, #9]
 8023eea:	429a      	cmp	r2, r3
 8023eec:	d9eb      	bls.n	8023ec6 <OBJ_GetObjectLength+0x7a>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 8023eee:	68fb      	ldr	r3, [r7, #12]
 8023ef0:	3307      	adds	r3, #7
 8023ef2:	08db      	lsrs	r3, r3, #3
 8023ef4:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8023ef6:	797b      	ldrb	r3, [r7, #5]
 8023ef8:	2b00      	cmp	r3, #0
 8023efa:	d102      	bne.n	8023f02 <OBJ_GetObjectLength+0xb6>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8023efc:	68fb      	ldr	r3, [r7, #12]
 8023efe:	3302      	adds	r3, #2
 8023f00:	60fb      	str	r3, [r7, #12]
            }
            return size;
 8023f02:	68fb      	ldr	r3, [r7, #12]
 8023f04:	e028      	b.n	8023f58 <OBJ_GetObjectLength+0x10c>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 8023f06:	7abb      	ldrb	r3, [r7, #10]
 8023f08:	2b07      	cmp	r3, #7
 8023f0a:	d105      	bne.n	8023f18 <OBJ_GetObjectLength+0xcc>
        {

            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 8023f0c:	683b      	ldr	r3, [r7, #0]
 8023f0e:	691b      	ldr	r3, [r3, #16]
 8023f10:	885b      	ldrh	r3, [r3, #2]
 8023f12:	3307      	adds	r3, #7
 8023f14:	10db      	asrs	r3, r3, #3
 8023f16:	e01f      	b.n	8023f58 <OBJ_GetObjectLength+0x10c>

        }
        else if ( subindex == 0 )
 8023f18:	797b      	ldrb	r3, [r7, #5]
 8023f1a:	2b00      	cmp	r3, #0
 8023f1c:	d101      	bne.n	8023f22 <OBJ_GetObjectLength+0xd6>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 8023f1e:	2301      	movs	r3, #1
 8023f20:	e01a      	b.n	8023f58 <OBJ_GetObjectLength+0x10c>
        }
        else if((objCode == OBJCODE_ARR)
 8023f22:	7abb      	ldrb	r3, [r7, #10]
 8023f24:	2b08      	cmp	r3, #8
 8023f26:	d106      	bne.n	8023f36 <OBJ_GetObjectLength+0xea>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 8023f28:	683b      	ldr	r3, [r7, #0]
 8023f2a:	691b      	ldr	r3, [r3, #16]
 8023f2c:	3306      	adds	r3, #6
 8023f2e:	885b      	ldrh	r3, [r3, #2]
 8023f30:	3307      	adds	r3, #7
 8023f32:	10db      	asrs	r3, r3, #3
 8023f34:	e010      	b.n	8023f58 <OBJ_GetObjectLength+0x10c>
        }
        else
        {
            {
/*ECATCHANGE_START(V5.12) COE6*/
                if (maxSubindex < subindex)
 8023f36:	7a7a      	ldrb	r2, [r7, #9]
 8023f38:	797b      	ldrb	r3, [r7, #5]
 8023f3a:	429a      	cmp	r2, r3
 8023f3c:	d201      	bcs.n	8023f42 <OBJ_GetObjectLength+0xf6>
                {
                    return 0;
 8023f3e:	2300      	movs	r3, #0
 8023f40:	e00a      	b.n	8023f58 <OBJ_GetObjectLength+0x10c>

                }
                else
                {
                    return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 8023f42:	683b      	ldr	r3, [r7, #0]
 8023f44:	6919      	ldr	r1, [r3, #16]
 8023f46:	797a      	ldrb	r2, [r7, #5]
 8023f48:	4613      	mov	r3, r2
 8023f4a:	005b      	lsls	r3, r3, #1
 8023f4c:	4413      	add	r3, r2
 8023f4e:	005b      	lsls	r3, r3, #1
 8023f50:	440b      	add	r3, r1
 8023f52:	885b      	ldrh	r3, [r3, #2]
 8023f54:	3307      	adds	r3, #7
 8023f56:	10db      	asrs	r3, r3, #3
                }
/*ECATCHANGE_END(V5.12) COE6*/
            }
        }
    }
}
 8023f58:	4618      	mov	r0, r3
 8023f5a:	3714      	adds	r7, #20
 8023f5c:	46bd      	mov	sp, r7
 8023f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f62:	4770      	bx	lr

08023f64 <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 8023f64:	b490      	push	{r4, r7}
 8023f66:	b084      	sub	sp, #16
 8023f68:	af00      	add	r7, sp, #0
 8023f6a:	6078      	str	r0, [r7, #4]
 8023f6c:	460b      	mov	r3, r1
 8023f6e:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	3302      	adds	r3, #2
 8023f74:	2230      	movs	r2, #48	; 0x30
 8023f76:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 8023f78:	687b      	ldr	r3, [r7, #4]
 8023f7a:	781a      	ldrb	r2, [r3, #0]
 8023f7c:	78fb      	ldrb	r3, [r7, #3]
 8023f7e:	491c      	ldr	r1, [pc, #112]	; (8023ff0 <OBJ_CopyNumberToString+0x8c>)
 8023f80:	fba1 1303 	umull	r1, r3, r1, r3
 8023f84:	095b      	lsrs	r3, r3, #5
 8023f86:	b2db      	uxtb	r3, r3
 8023f88:	4413      	add	r3, r2
 8023f8a:	b2da      	uxtb	r2, r3
 8023f8c:	687b      	ldr	r3, [r7, #4]
 8023f8e:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 8023f90:	78fb      	ldrb	r3, [r7, #3]
 8023f92:	4a17      	ldr	r2, [pc, #92]	; (8023ff0 <OBJ_CopyNumberToString+0x8c>)
 8023f94:	fba2 1203 	umull	r1, r2, r2, r3
 8023f98:	0952      	lsrs	r2, r2, #5
 8023f9a:	2164      	movs	r1, #100	; 0x64
 8023f9c:	fb01 f202 	mul.w	r2, r1, r2
 8023fa0:	1a9b      	subs	r3, r3, r2
 8023fa2:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 8023fa4:	687b      	ldr	r3, [r7, #4]
 8023fa6:	3301      	adds	r3, #1
 8023fa8:	687a      	ldr	r2, [r7, #4]
 8023faa:	3201      	adds	r2, #1
 8023fac:	7811      	ldrb	r1, [r2, #0]
 8023fae:	7bfa      	ldrb	r2, [r7, #15]
 8023fb0:	4810      	ldr	r0, [pc, #64]	; (8023ff4 <OBJ_CopyNumberToString+0x90>)
 8023fb2:	fba0 0202 	umull	r0, r2, r0, r2
 8023fb6:	08d2      	lsrs	r2, r2, #3
 8023fb8:	b2d2      	uxtb	r2, r2
 8023fba:	440a      	add	r2, r1
 8023fbc:	b2d2      	uxtb	r2, r2
 8023fbe:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	1c98      	adds	r0, r3, #2
 8023fc4:	687b      	ldr	r3, [r7, #4]
 8023fc6:	3302      	adds	r3, #2
 8023fc8:	781c      	ldrb	r4, [r3, #0]
 8023fca:	7bfa      	ldrb	r2, [r7, #15]
 8023fcc:	4b09      	ldr	r3, [pc, #36]	; (8023ff4 <OBJ_CopyNumberToString+0x90>)
 8023fce:	fba3 1302 	umull	r1, r3, r3, r2
 8023fd2:	08d9      	lsrs	r1, r3, #3
 8023fd4:	460b      	mov	r3, r1
 8023fd6:	009b      	lsls	r3, r3, #2
 8023fd8:	440b      	add	r3, r1
 8023fda:	005b      	lsls	r3, r3, #1
 8023fdc:	1ad3      	subs	r3, r2, r3
 8023fde:	b2db      	uxtb	r3, r3
 8023fe0:	4423      	add	r3, r4
 8023fe2:	b2db      	uxtb	r3, r3
 8023fe4:	7003      	strb	r3, [r0, #0]
}
 8023fe6:	3710      	adds	r7, #16
 8023fe8:	46bd      	mov	sp, r7
 8023fea:	bc90      	pop	{r4, r7}
 8023fec:	4770      	bx	lr
 8023fee:	bf00      	nop
 8023ff0:	51eb851f 	.word	0x51eb851f
 8023ff4:	cccccccd 	.word	0xcccccccd

08023ff8 <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 8023ff8:	b580      	push	{r7, lr}
 8023ffa:	b086      	sub	sp, #24
 8023ffc:	af00      	add	r7, sp, #0
 8023ffe:	4603      	mov	r3, r0
 8024000:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 8024002:	79fb      	ldrb	r3, [r7, #7]
 8024004:	2220      	movs	r2, #32
 8024006:	fa02 f303 	lsl.w	r3, r2, r3
 802400a:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 802400c:	f7fc fa24 	bl	8020458 <COE_GetObjectDictionary>
 8024010:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 8024012:	2300      	movs	r3, #0
 8024014:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 8024016:	e032      	b.n	802407e <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 8024018:	697b      	ldr	r3, [r7, #20]
 802401a:	891b      	ldrh	r3, [r3, #8]
 802401c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024020:	d32a      	bcc.n	8024078 <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 8024022:	79fb      	ldrb	r3, [r7, #7]
 8024024:	747b      	strb	r3, [r7, #17]
            if ( t )
 8024026:	7c7b      	ldrb	r3, [r7, #17]
 8024028:	2b00      	cmp	r3, #0
 802402a:	d01f      	beq.n	802406c <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 802402c:	697b      	ldr	r3, [r7, #20]
 802402e:	899b      	ldrh	r3, [r3, #12]
 8024030:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 8024032:	2300      	movs	r3, #0
 8024034:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 8024036:	e011      	b.n	802405c <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 8024038:	89fb      	ldrh	r3, [r7, #14]
 802403a:	b2db      	uxtb	r3, r3
 802403c:	6978      	ldr	r0, [r7, #20]
 802403e:	4619      	mov	r1, r3
 8024040:	f000 f932 	bl	80242a8 <OBJ_GetEntryDesc>
 8024044:	4603      	mov	r3, r0
 8024046:	889a      	ldrh	r2, [r3, #4]
 8024048:	89bb      	ldrh	r3, [r7, #12]
 802404a:	4013      	ands	r3, r2
 802404c:	b29b      	uxth	r3, r3
 802404e:	2b00      	cmp	r3, #0
 8024050:	d001      	beq.n	8024056 <OBJ_GetNoOfObjects+0x5e>
                    {
                        t = 0;
 8024052:	2300      	movs	r3, #0
 8024054:	747b      	strb	r3, [r7, #17]
                    }
                    i++;
 8024056:	89fb      	ldrh	r3, [r7, #14]
 8024058:	3301      	adds	r3, #1
 802405a:	81fb      	strh	r3, [r7, #14]
            if ( t )
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                UINT16 i = 0;

                while ( t && i <= maxSubindex )
 802405c:	7c7b      	ldrb	r3, [r7, #17]
 802405e:	2b00      	cmp	r3, #0
 8024060:	d004      	beq.n	802406c <OBJ_GetNoOfObjects+0x74>
 8024062:	7afb      	ldrb	r3, [r7, #11]
 8024064:	b29b      	uxth	r3, r3
 8024066:	89fa      	ldrh	r2, [r7, #14]
 8024068:	429a      	cmp	r2, r3
 802406a:	d9e5      	bls.n	8024038 <OBJ_GetNoOfObjects+0x40>
                        t = 0;
                    }
                    i++;
                }
            }
            if ( !t )
 802406c:	7c7b      	ldrb	r3, [r7, #17]
 802406e:	2b00      	cmp	r3, #0
 8024070:	d102      	bne.n	8024078 <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 8024072:	8a7b      	ldrh	r3, [r7, #18]
 8024074:	3301      	adds	r3, #1
 8024076:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8024078:	697b      	ldr	r3, [r7, #20]
 802407a:	685b      	ldr	r3, [r3, #4]
 802407c:	617b      	str	r3, [r7, #20]
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
    UINT16 n = 0;


    while (pObjEntry != NULL)
 802407e:	697b      	ldr	r3, [r7, #20]
 8024080:	2b00      	cmp	r3, #0
 8024082:	d1c9      	bne.n	8024018 <OBJ_GetNoOfObjects+0x20>
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
    }

    return n;
 8024084:	8a7b      	ldrh	r3, [r7, #18]
}
 8024086:	4618      	mov	r0, r3
 8024088:	3718      	adds	r7, #24
 802408a:	46bd      	mov	sp, r7
 802408c:	bd80      	pop	{r7, pc}
 802408e:	bf00      	nop

08024090 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 8024090:	b580      	push	{r7, lr}
 8024092:	b088      	sub	sp, #32
 8024094:	af00      	add	r7, sp, #0
 8024096:	60b9      	str	r1, [r7, #8]
 8024098:	607b      	str	r3, [r7, #4]
 802409a:	4603      	mov	r3, r0
 802409c:	81fb      	strh	r3, [r7, #14]
 802409e:	4613      	mov	r3, r2
 80240a0:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 80240a2:	89fb      	ldrh	r3, [r7, #14]
 80240a4:	2220      	movs	r2, #32
 80240a6:	fa02 f303 	lsl.w	r3, r2, r3
 80240aa:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 80240ac:	68bb      	ldr	r3, [r7, #8]
 80240ae:	881b      	ldrh	r3, [r3, #0]
 80240b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80240b4:	d10c      	bne.n	80240d0 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 80240b6:	f7fc f9cf 	bl	8020458 <COE_GetObjectDictionary>
 80240ba:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 80240bc:	69fb      	ldr	r3, [r7, #28]
 80240be:	2b00      	cmp	r3, #0
 80240c0:	d109      	bne.n	80240d6 <OBJ_GetObjectList+0x46>
 80240c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80240c4:	2b00      	cmp	r3, #0
 80240c6:	d006      	beq.n	80240d6 <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 80240c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80240ca:	221b      	movs	r2, #27
 80240cc:	701a      	strb	r2, [r3, #0]
 80240ce:	e002      	b.n	80240d6 <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 80240d0:	4b2c      	ldr	r3, [pc, #176]	; (8024184 <OBJ_GetObjectList+0xf4>)
 80240d2:	681b      	ldr	r3, [r3, #0]
 80240d4:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 80240d6:	69fb      	ldr	r3, [r7, #28]
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d03e      	beq.n	802415a <OBJ_GetObjectList+0xca>
    {
        while (pObjEntry != NULL && size > 1 )
 80240dc:	e037      	b.n	802414e <OBJ_GetObjectList+0xbe>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 80240de:	69fb      	ldr	r3, [r7, #28]
 80240e0:	891b      	ldrh	r3, [r3, #8]
 80240e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80240e6:	d32f      	bcc.n	8024148 <OBJ_GetObjectList+0xb8>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 80240e8:	89fb      	ldrh	r3, [r7, #14]
 80240ea:	837b      	strh	r3, [r7, #26]
                if ( t )
 80240ec:	8b7b      	ldrh	r3, [r7, #26]
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d01d      	beq.n	802412e <OBJ_GetObjectList+0x9e>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80240f2:	69fb      	ldr	r3, [r7, #28]
 80240f4:	899b      	ldrh	r3, [r3, #12]
 80240f6:	757b      	strb	r3, [r7, #21]
                    UINT8 i = 0;
 80240f8:	2300      	movs	r3, #0
 80240fa:	767b      	strb	r3, [r7, #25]

                    while ( t && i <= maxSubindex )
 80240fc:	e010      	b.n	8024120 <OBJ_GetObjectList+0x90>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
 80240fe:	7e7b      	ldrb	r3, [r7, #25]
 8024100:	69f8      	ldr	r0, [r7, #28]
 8024102:	4619      	mov	r1, r3
 8024104:	f000 f8d0 	bl	80242a8 <OBJ_GetEntryDesc>
 8024108:	4603      	mov	r3, r0
 802410a:	889a      	ldrh	r2, [r3, #4]
 802410c:	8afb      	ldrh	r3, [r7, #22]
 802410e:	4013      	ands	r3, r2
 8024110:	b29b      	uxth	r3, r3
 8024112:	2b00      	cmp	r3, #0
 8024114:	d001      	beq.n	802411a <OBJ_GetObjectList+0x8a>
                        {
                            t = 0;
 8024116:	2300      	movs	r3, #0
 8024118:	837b      	strh	r3, [r7, #26]
                        }
                        i++;
 802411a:	7e7b      	ldrb	r3, [r7, #25]
 802411c:	3301      	adds	r3, #1
 802411e:	767b      	strb	r3, [r7, #25]
                if ( t )
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
                    UINT8 i = 0;

                    while ( t && i <= maxSubindex )
 8024120:	8b7b      	ldrh	r3, [r7, #26]
 8024122:	2b00      	cmp	r3, #0
 8024124:	d003      	beq.n	802412e <OBJ_GetObjectList+0x9e>
 8024126:	7e7a      	ldrb	r2, [r7, #25]
 8024128:	7d7b      	ldrb	r3, [r7, #21]
 802412a:	429a      	cmp	r2, r3
 802412c:	d9e7      	bls.n	80240fe <OBJ_GetObjectList+0x6e>
                            t = 0;
                        }
                        i++;
                    }
                }
                if ( !t )
 802412e:	8b7b      	ldrh	r3, [r7, #26]
 8024130:	2b00      	cmp	r3, #0
 8024132:	d109      	bne.n	8024148 <OBJ_GetObjectList+0xb8>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 8024134:	69fb      	ldr	r3, [r7, #28]
 8024136:	891a      	ldrh	r2, [r3, #8]
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	801a      	strh	r2, [r3, #0]
                    pData++;
 802413c:	687b      	ldr	r3, [r7, #4]
 802413e:	3302      	adds	r3, #2
 8024140:	607b      	str	r3, [r7, #4]
                    size -= 2;
 8024142:	89bb      	ldrh	r3, [r7, #12]
 8024144:	3b02      	subs	r3, #2
 8024146:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8024148:	69fb      	ldr	r3, [r7, #28]
 802414a:	685b      	ldr	r3, [r3, #4]
 802414c:	61fb      	str	r3, [r7, #28]
        pObjEntry = pSdoInfoObjEntry;
    }

    if ( pObjEntry != NULL )
    {
        while (pObjEntry != NULL && size > 1 )
 802414e:	69fb      	ldr	r3, [r7, #28]
 8024150:	2b00      	cmp	r3, #0
 8024152:	d002      	beq.n	802415a <OBJ_GetObjectList+0xca>
 8024154:	89bb      	ldrh	r3, [r7, #12]
 8024156:	2b01      	cmp	r3, #1
 8024158:	d8c1      	bhi.n	80240de <OBJ_GetObjectList+0x4e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 802415a:	69fb      	ldr	r3, [r7, #28]
 802415c:	2b00      	cmp	r3, #0
 802415e:	d004      	beq.n	802416a <OBJ_GetObjectList+0xda>
        {
            pIndex[0] = pObjEntry->Index;
 8024160:	69fb      	ldr	r3, [r7, #28]
 8024162:	891a      	ldrh	r2, [r3, #8]
 8024164:	68bb      	ldr	r3, [r7, #8]
 8024166:	801a      	strh	r2, [r3, #0]
 8024168:	e003      	b.n	8024172 <OBJ_GetObjectList+0xe2>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 802416a:	68bb      	ldr	r3, [r7, #8]
 802416c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024170:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 8024172:	4a04      	ldr	r2, [pc, #16]	; (8024184 <OBJ_GetObjectList+0xf4>)
 8024174:	69fb      	ldr	r3, [r7, #28]
 8024176:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 8024178:	89bb      	ldrh	r3, [r7, #12]
}
 802417a:	4618      	mov	r0, r3
 802417c:	3720      	adds	r7, #32
 802417e:	46bd      	mov	sp, r7
 8024180:	bd80      	pop	{r7, pc}
 8024182:	bf00      	nop
 8024184:	1fff28a0 	.word	0x1fff28a0

08024188 <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 8024188:	b590      	push	{r4, r7, lr}
 802418a:	b08d      	sub	sp, #52	; 0x34
 802418c:	af00      	add	r7, sp, #0
 802418e:	60ba      	str	r2, [r7, #8]
 8024190:	607b      	str	r3, [r7, #4]
 8024192:	4603      	mov	r3, r0
 8024194:	81fb      	strh	r3, [r7, #14]
 8024196:	460b      	mov	r3, r1
 8024198:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 802419a:	2300      	movs	r3, #0
 802419c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 802419e:	68bb      	ldr	r3, [r7, #8]
 80241a0:	695b      	ldr	r3, [r3, #20]
 80241a2:	627b      	str	r3, [r7, #36]	; 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80241a4:	68bb      	ldr	r3, [r7, #8]
 80241a6:	899b      	ldrh	r3, [r3, #12]
 80241a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80241ac:	121b      	asrs	r3, r3, #8
 80241ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23



    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 80241b2:	7b7b      	ldrb	r3, [r7, #13]
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	d003      	beq.n	80241c0 <OBJ_GetDesc+0x38>
 80241b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80241bc:	2b07      	cmp	r3, #7
 80241be:	d10f      	bne.n	80241e0 <OBJ_GetDesc+0x58>
    {
        // Get object description length
       strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pDesc);
 80241c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80241c2:	f005 ff01 	bl	8029fc8 <strlen>
 80241c6:	4603      	mov	r3, r0
 80241c8:	85fb      	strh	r3, [r7, #46]	; 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d006      	beq.n	80241de <OBJ_GetDesc+0x56>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 80241d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80241d2:	6878      	ldr	r0, [r7, #4]
 80241d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80241d6:	461a      	mov	r2, r3
 80241d8:	f005 fe38 	bl	8029e4c <memcpy>
    {
        // Get object description length
       strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pDesc);

        // If there is a pointer given, copy data:
        if ( pData )
 80241dc:	e05d      	b.n	802429a <OBJ_GetDesc+0x112>
 80241de:	e05c      	b.n	802429a <OBJ_GetDesc+0x112>
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 80241e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80241e4:	2b09      	cmp	r3, #9
 80241e6:	d13a      	bne.n	802425e <OBJ_GetDesc+0xd6>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 80241e8:	2301      	movs	r3, #1
 80241ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
            UINT16 tmpSubindex = subindex;
 80241ec:	7b7b      	ldrb	r3, [r7, #13]
 80241ee:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 80241f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80241f2:	f005 fee9 	bl	8029fc8 <strlen>
 80241f6:	4603      	mov	r3, r0
 80241f8:	3301      	adds	r3, #1
 80241fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80241fc:	4413      	add	r3, r2
 80241fe:	62bb      	str	r3, [r7, #40]	; 0x28
/* ECATCHANGE_START(V5.12) COE10*/
            while (( i <= tmpSubindex )
 8024200:	e021      	b.n	8024246 <OBJ_GetDesc+0xbe>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE && pSubDesc[0] != 0xFFFF))
/* ECATCHANGE_END(V5.12) COE10*/
            {
                if ( i == tmpSubindex )
 8024202:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8024204:	8c3b      	ldrh	r3, [r7, #32]
 8024206:	429a      	cmp	r2, r3
 8024208:	d112      	bne.n	8024230 <OBJ_GetDesc+0xa8>
                {
                   strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pSubDesc);
 802420a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802420c:	f005 fedc 	bl	8029fc8 <strlen>
 8024210:	4603      	mov	r3, r0
 8024212:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if ( pData && strSize )
 8024214:	687b      	ldr	r3, [r7, #4]
 8024216:	2b00      	cmp	r3, #0
 8024218:	d009      	beq.n	802422e <OBJ_GetDesc+0xa6>
 802421a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802421c:	2b00      	cmp	r3, #0
 802421e:	d006      	beq.n	802422e <OBJ_GetDesc+0xa6>
                    {
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 8024220:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024222:	6878      	ldr	r0, [r7, #4]
 8024224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024226:	461a      	mov	r2, r3
 8024228:	f005 fe10 	bl	8029e4c <memcpy>
                    }
                    break;
 802422c:	e017      	b.n	802425e <OBJ_GetDesc+0xd6>
 802422e:	e016      	b.n	802425e <OBJ_GetDesc+0xd6>
                }
                else
                {
                    i++;
 8024230:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024232:	3301      	adds	r3, #1
 8024234:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 8024236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024238:	f005 fec6 	bl	8029fc8 <strlen>
 802423c:	4603      	mov	r3, r0
 802423e:	3301      	adds	r3, #1
 8024240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024242:	4413      	add	r3, r2
 8024244:	62bb      	str	r3, [r7, #40]	; 0x28

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
/* ECATCHANGE_START(V5.12) COE10*/
            while (( i <= tmpSubindex )
 8024246:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8024248:	8c3b      	ldrh	r3, [r7, #32]
 802424a:	429a      	cmp	r2, r3
 802424c:	d807      	bhi.n	802425e <OBJ_GetDesc+0xd6>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE && pSubDesc[0] != 0xFFFF))
 802424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024250:	781b      	ldrb	r3, [r3, #0]
 8024252:	2bff      	cmp	r3, #255	; 0xff
 8024254:	d003      	beq.n	802425e <OBJ_GetDesc+0xd6>
 8024256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024258:	781b      	ldrb	r3, [r3, #0]
 802425a:	2bfe      	cmp	r3, #254	; 0xfe
 802425c:	d1d1      	bne.n	8024202 <OBJ_GetDesc+0x7a>
            }
            }
            }
        }

        if ( strSize == 0 )
 802425e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024260:	2b00      	cmp	r3, #0
 8024262:	d11a      	bne.n	802429a <OBJ_GetDesc+0x112>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 8024264:	230c      	movs	r3, #12
 8024266:	85fb      	strh	r3, [r7, #46]	; 0x2e

            if ( pData )
 8024268:	687b      	ldr	r3, [r7, #4]
 802426a:	2b00      	cmp	r3, #0
 802426c:	d015      	beq.n	802429a <OBJ_GetDesc+0x112>
            {
                UCHAR OBJMEM         TmpDescr[13];
                OBJSTRCPY(TmpDescr,aSubindexDesc,SIZEOF(TmpDescr));
 802426e:	4b0d      	ldr	r3, [pc, #52]	; (80242a4 <OBJ_GetDesc+0x11c>)
 8024270:	f107 0410 	add.w	r4, r7, #16
 8024274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024276:	c407      	stmia	r4!, {r0, r1, r2}
 8024278:	7023      	strb	r3, [r4, #0]
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 802427a:	f107 0310 	add.w	r3, r7, #16
 802427e:	f103 0209 	add.w	r2, r3, #9
 8024282:	7b7b      	ldrb	r3, [r7, #13]
 8024284:	4610      	mov	r0, r2
 8024286:	4619      	mov	r1, r3
 8024288:	f7ff fe6c 	bl	8023f64 <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 802428c:	f107 0310 	add.w	r3, r7, #16
 8024290:	6878      	ldr	r0, [r7, #4]
 8024292:	4619      	mov	r1, r3
 8024294:	220d      	movs	r2, #13
 8024296:	f005 fdd9 	bl	8029e4c <memcpy>
            }
        }
    }

    return strSize;
 802429a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 802429c:	4618      	mov	r0, r3
 802429e:	3734      	adds	r7, #52	; 0x34
 80242a0:	46bd      	mov	sp, r7
 80242a2:	bd90      	pop	{r4, r7, pc}
 80242a4:	1fff144c 	.word	0x1fff144c

080242a8 <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 80242a8:	b480      	push	{r7}
 80242aa:	b085      	sub	sp, #20
 80242ac:	af00      	add	r7, sp, #0
 80242ae:	6078      	str	r0, [r7, #4]
 80242b0:	460b      	mov	r3, r1
 80242b2:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	899b      	ldrh	r3, [r3, #12]
 80242b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80242bc:	121b      	asrs	r3, r3, #8
 80242be:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 80242c0:	7afb      	ldrb	r3, [r7, #11]
 80242c2:	2b08      	cmp	r3, #8
 80242c4:	d10b      	bne.n	80242de <OBJ_GetEntryDesc+0x36>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 80242c6:	78fb      	ldrb	r3, [r7, #3]
 80242c8:	2b00      	cmp	r3, #0
 80242ca:	d103      	bne.n	80242d4 <OBJ_GetEntryDesc+0x2c>
        {
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 80242cc:	687b      	ldr	r3, [r7, #4]
 80242ce:	691b      	ldr	r3, [r3, #16]
 80242d0:	60fb      	str	r3, [r7, #12]
 80242d2:	e00d      	b.n	80242f0 <OBJ_GetEntryDesc+0x48>
        }
        else
        {
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 80242d4:	687b      	ldr	r3, [r7, #4]
 80242d6:	691b      	ldr	r3, [r3, #16]
 80242d8:	3306      	adds	r3, #6
 80242da:	60fb      	str	r3, [r7, #12]
 80242dc:	e008      	b.n	80242f0 <OBJ_GetEntryDesc+0x48>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	6919      	ldr	r1, [r3, #16]
 80242e2:	78fa      	ldrb	r2, [r7, #3]
 80242e4:	4613      	mov	r3, r2
 80242e6:	005b      	lsls	r3, r3, #1
 80242e8:	4413      	add	r3, r2
 80242ea:	005b      	lsls	r3, r3, #1
 80242ec:	440b      	add	r3, r1
 80242ee:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 80242f0:	68fb      	ldr	r3, [r7, #12]
}
 80242f2:	4618      	mov	r0, r3
 80242f4:	3714      	adds	r7, #20
 80242f6:	46bd      	mov	sp, r7
 80242f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242fc:	4770      	bx	lr
 80242fe:	bf00      	nop

08024300 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8024300:	b480      	push	{r7}
 8024302:	b083      	sub	sp, #12
 8024304:	af00      	add	r7, sp, #0
 8024306:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	330a      	adds	r3, #10
}
 802430c:	4618      	mov	r0, r3
 802430e:	370c      	adds	r7, #12
 8024310:	46bd      	mov	sp, r7
 8024312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024316:	4770      	bx	lr

08024318 <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8024318:	b480      	push	{r7}
 802431a:	b087      	sub	sp, #28
 802431c:	af00      	add	r7, sp, #0
 802431e:	4603      	mov	r3, r0
 8024320:	6039      	str	r1, [r7, #0]
 8024322:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
    UINT16 bitOffset = 0;
 8024324:	2300      	movs	r3, #0
 8024326:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024328:	683b      	ldr	r3, [r7, #0]
 802432a:	899b      	ldrh	r3, [r3, #12]
 802432c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024330:	121b      	asrs	r3, r3, #8
 8024332:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    
    if(subindex > 0)
 8024334:	79fb      	ldrb	r3, [r7, #7]
 8024336:	2b00      	cmp	r3, #0
 8024338:	d002      	beq.n	8024340 <OBJ_GetEntryOffset+0x28>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 802433a:	8abb      	ldrh	r3, [r7, #20]
 802433c:	3310      	adds	r3, #16
 802433e:	82bb      	strh	r3, [r7, #20]
    }

    if (objCode == OBJCODE_VAR)
 8024340:	7bfb      	ldrb	r3, [r7, #15]
 8024342:	2b07      	cmp	r3, #7
 8024344:	d101      	bne.n	802434a <OBJ_GetEntryOffset+0x32>
    {
        return 0;
 8024346:	2300      	movs	r3, #0
 8024348:	e091      	b.n	802446e <OBJ_GetEntryOffset+0x156>
    }

    for (i = 1; i <= subindex; i++)
 802434a:	2301      	movs	r3, #1
 802434c:	82fb      	strh	r3, [r7, #22]
 802434e:	e087      	b.n	8024460 <OBJ_GetEntryOffset+0x148>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 8024350:	7bfb      	ldrb	r3, [r7, #15]
 8024352:	2b08      	cmp	r3, #8
 8024354:	d104      	bne.n	8024360 <OBJ_GetEntryOffset+0x48>
           )
           {
            pEntry = &pObjEntry->pEntryDesc[1];
 8024356:	683b      	ldr	r3, [r7, #0]
 8024358:	691b      	ldr	r3, [r3, #16]
 802435a:	3306      	adds	r3, #6
 802435c:	613b      	str	r3, [r7, #16]
 802435e:	e008      	b.n	8024372 <OBJ_GetEntryOffset+0x5a>
           }
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 8024360:	683b      	ldr	r3, [r7, #0]
 8024362:	6919      	ldr	r1, [r3, #16]
 8024364:	8afa      	ldrh	r2, [r7, #22]
 8024366:	4613      	mov	r3, r2
 8024368:	005b      	lsls	r3, r3, #1
 802436a:	4413      	add	r3, r2
 802436c:	005b      	lsls	r3, r3, #1
 802436e:	440b      	add	r3, r1
 8024370:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 8024372:	693b      	ldr	r3, [r7, #16]
 8024374:	881b      	ldrh	r3, [r3, #0]
 8024376:	2b1f      	cmp	r3, #31
 8024378:	d023      	beq.n	80243c2 <OBJ_GetEntryOffset+0xaa>
 802437a:	2b1f      	cmp	r3, #31
 802437c:	dc0d      	bgt.n	802439a <OBJ_GetEntryOffset+0x82>
 802437e:	2b06      	cmp	r3, #6
 8024380:	d01f      	beq.n	80243c2 <OBJ_GetEntryOffset+0xaa>
 8024382:	2b06      	cmp	r3, #6
 8024384:	dc04      	bgt.n	8024390 <OBJ_GetEntryOffset+0x78>
 8024386:	2b03      	cmp	r3, #3
 8024388:	d01b      	beq.n	80243c2 <OBJ_GetEntryOffset+0xaa>
 802438a:	2b04      	cmp	r3, #4
 802438c:	d037      	beq.n	80243fe <OBJ_GetEntryOffset+0xe6>
 802438e:	e058      	b.n	8024442 <OBJ_GetEntryOffset+0x12a>
 8024390:	2b08      	cmp	r3, #8
 8024392:	dd34      	ble.n	80243fe <OBJ_GetEntryOffset+0xe6>
 8024394:	2b0b      	cmp	r3, #11
 8024396:	d014      	beq.n	80243c2 <OBJ_GetEntryOffset+0xaa>
 8024398:	e053      	b.n	8024442 <OBJ_GetEntryOffset+0x12a>
 802439a:	2b2f      	cmp	r3, #47	; 0x2f
 802439c:	d02f      	beq.n	80243fe <OBJ_GetEntryOffset+0xe6>
 802439e:	2b2f      	cmp	r3, #47	; 0x2f
 80243a0:	dc04      	bgt.n	80243ac <OBJ_GetEntryOffset+0x94>
 80243a2:	2b20      	cmp	r3, #32
 80243a4:	d02b      	beq.n	80243fe <OBJ_GetEntryOffset+0xe6>
 80243a6:	2b2e      	cmp	r3, #46	; 0x2e
 80243a8:	d00b      	beq.n	80243c2 <OBJ_GetEntryOffset+0xaa>
 80243aa:	e04a      	b.n	8024442 <OBJ_GetEntryOffset+0x12a>
 80243ac:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80243b0:	d007      	beq.n	80243c2 <OBJ_GetEntryOffset+0xaa>
 80243b2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80243b6:	db44      	blt.n	8024442 <OBJ_GetEntryOffset+0x12a>
 80243b8:	f2a3 2362 	subw	r3, r3, #610	; 0x262
 80243bc:	2b01      	cmp	r3, #1
 80243be:	d840      	bhi.n	8024442 <OBJ_GetEntryOffset+0x12a>
 80243c0:	e01d      	b.n	80243fe <OBJ_GetEntryOffset+0xe6>
        case    DEFTYPE_ARRAY_OF_INT :

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 80243c2:	8abb      	ldrh	r3, [r7, #20]
 80243c4:	330f      	adds	r3, #15
 80243c6:	b29b      	uxth	r3, r3
 80243c8:	f023 030f 	bic.w	r3, r3, #15
 80243cc:	82bb      	strh	r3, [r7, #20]
#endif


            if (i < subindex)
 80243ce:	79fb      	ldrb	r3, [r7, #7]
 80243d0:	b29b      	uxth	r3, r3
 80243d2:	8afa      	ldrh	r2, [r7, #22]
 80243d4:	429a      	cmp	r2, r3
 80243d6:	d211      	bcs.n	80243fc <OBJ_GetEntryOffset+0xe4>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 80243d8:	693b      	ldr	r3, [r7, #16]
 80243da:	881b      	ldrh	r3, [r3, #0]
 80243dc:	2b0b      	cmp	r3, #11
 80243de:	d004      	beq.n	80243ea <OBJ_GetEntryOffset+0xd2>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 80243e0:	693b      	ldr	r3, [r7, #16]
 80243e2:	881b      	ldrh	r3, [r3, #0]
 80243e4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80243e8:	d104      	bne.n	80243f4 <OBJ_GetEntryOffset+0xdc>
                {
                    bitOffset += pEntry->BitLength;
 80243ea:	693b      	ldr	r3, [r7, #16]
 80243ec:	885a      	ldrh	r2, [r3, #2]
 80243ee:	8abb      	ldrh	r3, [r7, #20]
 80243f0:	4413      	add	r3, r2
 80243f2:	82bb      	strh	r3, [r7, #20]
                }

                bitOffset += 16;
 80243f4:	8abb      	ldrh	r3, [r7, #20]
 80243f6:	3310      	adds	r3, #16
 80243f8:	82bb      	strh	r3, [r7, #20]
            }
            break;
 80243fa:	e02e      	b.n	802445a <OBJ_GetEntryOffset+0x142>
 80243fc:	e02d      	b.n	802445a <OBJ_GetEntryOffset+0x142>
        case    DEFTYPE_ARRAY_OF_DINT :
        case    DEFTYPE_ARRAY_OF_UDINT:
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 80243fe:	8abb      	ldrh	r3, [r7, #20]
 8024400:	331f      	adds	r3, #31
 8024402:	b29b      	uxth	r3, r3
 8024404:	f023 031f 	bic.w	r3, r3, #31
 8024408:	82bb      	strh	r3, [r7, #20]
            /* the 32-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

            if (i < subindex)
 802440a:	79fb      	ldrb	r3, [r7, #7]
 802440c:	b29b      	uxth	r3, r3
 802440e:	8afa      	ldrh	r2, [r7, #22]
 8024410:	429a      	cmp	r2, r3
 8024412:	d215      	bcs.n	8024440 <OBJ_GetEntryOffset+0x128>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 8024414:	693b      	ldr	r3, [r7, #16]
 8024416:	881b      	ldrh	r3, [r3, #0]
 8024418:	f240 2262 	movw	r2, #610	; 0x262
 802441c:	4293      	cmp	r3, r2
 802441e:	d005      	beq.n	802442c <OBJ_GetEntryOffset+0x114>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 8024420:	693b      	ldr	r3, [r7, #16]
 8024422:	881b      	ldrh	r3, [r3, #0]
 8024424:	f240 2263 	movw	r2, #611	; 0x263
 8024428:	4293      	cmp	r3, r2
 802442a:	d105      	bne.n	8024438 <OBJ_GetEntryOffset+0x120>
                {
                    bitOffset += pEntry->BitLength;
 802442c:	693b      	ldr	r3, [r7, #16]
 802442e:	885a      	ldrh	r2, [r3, #2]
 8024430:	8abb      	ldrh	r3, [r7, #20]
 8024432:	4413      	add	r3, r2
 8024434:	82bb      	strh	r3, [r7, #20]
 8024436:	e003      	b.n	8024440 <OBJ_GetEntryOffset+0x128>
                }
                else
                {
                   bitOffset += 32;
 8024438:	8abb      	ldrh	r3, [r7, #20]
 802443a:	3320      	adds	r3, #32
 802443c:	82bb      	strh	r3, [r7, #20]
                }
            }
            break;
 802443e:	e00c      	b.n	802445a <OBJ_GetEntryOffset+0x142>
 8024440:	e00b      	b.n	802445a <OBJ_GetEntryOffset+0x142>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 8024442:	79fb      	ldrb	r3, [r7, #7]
 8024444:	b29b      	uxth	r3, r3
 8024446:	8afa      	ldrh	r2, [r7, #22]
 8024448:	429a      	cmp	r2, r3
 802444a:	d205      	bcs.n	8024458 <OBJ_GetEntryOffset+0x140>
            {
                bitOffset += pEntry->BitLength;
 802444c:	693b      	ldr	r3, [r7, #16]
 802444e:	885a      	ldrh	r2, [r3, #2]
 8024450:	8abb      	ldrh	r3, [r7, #20]
 8024452:	4413      	add	r3, r2
 8024454:	82bb      	strh	r3, [r7, #20]
            }
            break;
 8024456:	e7ff      	b.n	8024458 <OBJ_GetEntryOffset+0x140>
 8024458:	bf00      	nop
    if (objCode == OBJCODE_VAR)
    {
        return 0;
    }

    for (i = 1; i <= subindex; i++)
 802445a:	8afb      	ldrh	r3, [r7, #22]
 802445c:	3301      	adds	r3, #1
 802445e:	82fb      	strh	r3, [r7, #22]
 8024460:	79fb      	ldrb	r3, [r7, #7]
 8024462:	b29b      	uxth	r3, r3
 8024464:	8afa      	ldrh	r2, [r7, #22]
 8024466:	429a      	cmp	r2, r3
 8024468:	f67f af72 	bls.w	8024350 <OBJ_GetEntryOffset+0x38>
            }
            break;
        }
    }

    return bitOffset;
 802446c:	8abb      	ldrh	r3, [r7, #20]
}
 802446e:	4618      	mov	r0, r3
 8024470:	371c      	adds	r7, #28
 8024472:	46bd      	mov	sp, r7
 8024474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024478:	4770      	bx	lr
 802447a:	bf00      	nop

0802447c <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 802447c:	b480      	push	{r7}
 802447e:	b083      	sub	sp, #12
 8024480:	af00      	add	r7, sp, #0
 8024482:	4603      	mov	r3, r0
 8024484:	460a      	mov	r2, r1
 8024486:	80fb      	strh	r3, [r7, #6]
 8024488:	4613      	mov	r3, r2
 802448a:	80bb      	strh	r3, [r7, #4]
    switch (NewSyncType)
 802448c:	88bb      	ldrh	r3, [r7, #4]
 802448e:	2b22      	cmp	r3, #34	; 0x22
 8024490:	f200 80bb 	bhi.w	802460a <CheckSyncTypeValue+0x18e>
 8024494:	a201      	add	r2, pc, #4	; (adr r2, 802449c <CheckSyncTypeValue+0x20>)
 8024496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802449a:	bf00      	nop
 802449c:	08024529 	.word	0x08024529
 80244a0:	0802452d 	.word	0x0802452d
 80244a4:	0802459f 	.word	0x0802459f
 80244a8:	080245d5 	.word	0x080245d5
 80244ac:	0802460b 	.word	0x0802460b
 80244b0:	0802460b 	.word	0x0802460b
 80244b4:	0802460b 	.word	0x0802460b
 80244b8:	0802460b 	.word	0x0802460b
 80244bc:	0802460b 	.word	0x0802460b
 80244c0:	0802460b 	.word	0x0802460b
 80244c4:	0802460b 	.word	0x0802460b
 80244c8:	0802460b 	.word	0x0802460b
 80244cc:	0802460b 	.word	0x0802460b
 80244d0:	0802460b 	.word	0x0802460b
 80244d4:	0802460b 	.word	0x0802460b
 80244d8:	0802460b 	.word	0x0802460b
 80244dc:	0802460b 	.word	0x0802460b
 80244e0:	0802460b 	.word	0x0802460b
 80244e4:	0802460b 	.word	0x0802460b
 80244e8:	0802460b 	.word	0x0802460b
 80244ec:	0802460b 	.word	0x0802460b
 80244f0:	0802460b 	.word	0x0802460b
 80244f4:	0802460b 	.word	0x0802460b
 80244f8:	0802460b 	.word	0x0802460b
 80244fc:	0802460b 	.word	0x0802460b
 8024500:	0802460b 	.word	0x0802460b
 8024504:	0802460b 	.word	0x0802460b
 8024508:	0802460b 	.word	0x0802460b
 802450c:	0802460b 	.word	0x0802460b
 8024510:	0802460b 	.word	0x0802460b
 8024514:	0802460b 	.word	0x0802460b
 8024518:	0802460b 	.word	0x0802460b
 802451c:	0802460b 	.word	0x0802460b
 8024520:	0802460b 	.word	0x0802460b
 8024524:	0802457b 	.word	0x0802457b
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 8024528:	2300      	movs	r3, #0
 802452a:	e06f      	b.n	802460c <CheckSyncTypeValue+0x190>

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 802452c:	88fb      	ldrh	r3, [r7, #6]
 802452e:	f641 4232 	movw	r2, #7218	; 0x1c32
 8024532:	4293      	cmp	r3, r2
 8024534:	d10b      	bne.n	802454e <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 8024536:	4b38      	ldr	r3, [pc, #224]	; (8024618 <CheckSyncTypeValue+0x19c>)
 8024538:	881b      	ldrh	r3, [r3, #0]
 802453a:	2b00      	cmp	r3, #0
 802453c:	d007      	beq.n	802454e <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 802453e:	4b37      	ldr	r3, [pc, #220]	; (802461c <CheckSyncTypeValue+0x1a0>)
 8024540:	899b      	ldrh	r3, [r3, #12]
 8024542:	f003 0302 	and.w	r3, r3, #2
 8024546:	2b00      	cmp	r3, #0
 8024548:	dd01      	ble.n	802454e <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 802454a:	2300      	movs	r3, #0
 802454c:	e05e      	b.n	802460c <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) 
 802454e:	88fb      	ldrh	r3, [r7, #6]
 8024550:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024554:	4293      	cmp	r3, r2
 8024556:	d10f      	bne.n	8024578 <CheckSyncTypeValue+0xfc>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8024558:	4b31      	ldr	r3, [pc, #196]	; (8024620 <CheckSyncTypeValue+0x1a4>)
 802455a:	899b      	ldrh	r3, [r3, #12]
 802455c:	f003 0302 	and.w	r3, r3, #2
 8024560:	2b00      	cmp	r3, #0
 8024562:	dd09      	ble.n	8024578 <CheckSyncTypeValue+0xfc>
            && (nPdOutputSize == 0) 
 8024564:	4b2c      	ldr	r3, [pc, #176]	; (8024618 <CheckSyncTypeValue+0x19c>)
 8024566:	881b      	ldrh	r3, [r3, #0]
 8024568:	2b00      	cmp	r3, #0
 802456a:	d105      	bne.n	8024578 <CheckSyncTypeValue+0xfc>
            && (nPdInputSize > 0))
 802456c:	4b2d      	ldr	r3, [pc, #180]	; (8024624 <CheckSyncTypeValue+0x1a8>)
 802456e:	881b      	ldrh	r3, [r3, #0]
 8024570:	2b00      	cmp	r3, #0
 8024572:	d001      	beq.n	8024578 <CheckSyncTypeValue+0xfc>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 8024574:	2300      	movs	r3, #0
 8024576:	e049      	b.n	802460c <CheckSyncTypeValue+0x190>
            }
        break;
 8024578:	e047      	b.n	802460a <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 802457a:	88fb      	ldrh	r3, [r7, #6]
 802457c:	f641 4233 	movw	r2, #7219	; 0x1c33
 8024580:	4293      	cmp	r3, r2
 8024582:	d10b      	bne.n	802459c <CheckSyncTypeValue+0x120>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8024584:	4b26      	ldr	r3, [pc, #152]	; (8024620 <CheckSyncTypeValue+0x1a4>)
 8024586:	899b      	ldrh	r3, [r3, #12]
 8024588:	f003 0302 	and.w	r3, r3, #2
 802458c:	2b00      	cmp	r3, #0
 802458e:	dd05      	ble.n	802459c <CheckSyncTypeValue+0x120>
            && (nPdOutputSize > 0))
 8024590:	4b21      	ldr	r3, [pc, #132]	; (8024618 <CheckSyncTypeValue+0x19c>)
 8024592:	881b      	ldrh	r3, [r3, #0]
 8024594:	2b00      	cmp	r3, #0
 8024596:	d001      	beq.n	802459c <CheckSyncTypeValue+0x120>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 8024598:	2300      	movs	r3, #0
 802459a:	e037      	b.n	802460c <CheckSyncTypeValue+0x190>
            }
        break;
 802459c:	e035      	b.n	802460a <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 802459e:	88fb      	ldrh	r3, [r7, #6]
 80245a0:	f641 4232 	movw	r2, #7218	; 0x1c32
 80245a4:	4293      	cmp	r3, r2
 80245a6:	d107      	bne.n	80245b8 <CheckSyncTypeValue+0x13c>
 80245a8:	4b1c      	ldr	r3, [pc, #112]	; (802461c <CheckSyncTypeValue+0x1a0>)
 80245aa:	899b      	ldrh	r3, [r3, #12]
 80245ac:	f003 0304 	and.w	r3, r3, #4
 80245b0:	2b00      	cmp	r3, #0
 80245b2:	dd01      	ble.n	80245b8 <CheckSyncTypeValue+0x13c>
        {
            return 0;
 80245b4:	2300      	movs	r3, #0
 80245b6:	e029      	b.n	802460c <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 80245b8:	88fb      	ldrh	r3, [r7, #6]
 80245ba:	f641 4233 	movw	r2, #7219	; 0x1c33
 80245be:	4293      	cmp	r3, r2
 80245c0:	d107      	bne.n	80245d2 <CheckSyncTypeValue+0x156>
 80245c2:	4b17      	ldr	r3, [pc, #92]	; (8024620 <CheckSyncTypeValue+0x1a4>)
 80245c4:	899b      	ldrh	r3, [r3, #12]
 80245c6:	f003 0304 	and.w	r3, r3, #4
 80245ca:	2b00      	cmp	r3, #0
 80245cc:	dd01      	ble.n	80245d2 <CheckSyncTypeValue+0x156>
        {
            return 0;
 80245ce:	2300      	movs	r3, #0
 80245d0:	e01c      	b.n	802460c <CheckSyncTypeValue+0x190>
        }
        break;
 80245d2:	e01a      	b.n	802460a <CheckSyncTypeValue+0x18e>

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 80245d4:	88fb      	ldrh	r3, [r7, #6]
 80245d6:	f641 4232 	movw	r2, #7218	; 0x1c32
 80245da:	4293      	cmp	r3, r2
 80245dc:	d107      	bne.n	80245ee <CheckSyncTypeValue+0x172>
 80245de:	4b0f      	ldr	r3, [pc, #60]	; (802461c <CheckSyncTypeValue+0x1a0>)
 80245e0:	899b      	ldrh	r3, [r3, #12]
 80245e2:	f003 0308 	and.w	r3, r3, #8
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	dd01      	ble.n	80245ee <CheckSyncTypeValue+0x172>
        {
            return 0;
 80245ea:	2300      	movs	r3, #0
 80245ec:	e00e      	b.n	802460c <CheckSyncTypeValue+0x190>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 80245ee:	88fb      	ldrh	r3, [r7, #6]
 80245f0:	f641 4233 	movw	r2, #7219	; 0x1c33
 80245f4:	4293      	cmp	r3, r2
 80245f6:	d107      	bne.n	8024608 <CheckSyncTypeValue+0x18c>
 80245f8:	4b09      	ldr	r3, [pc, #36]	; (8024620 <CheckSyncTypeValue+0x1a4>)
 80245fa:	899b      	ldrh	r3, [r3, #12]
 80245fc:	f003 0308 	and.w	r3, r3, #8
 8024600:	2b00      	cmp	r3, #0
 8024602:	dd01      	ble.n	8024608 <CheckSyncTypeValue+0x18c>
        {
            return 0;
 8024604:	2300      	movs	r3, #0
 8024606:	e001      	b.n	802460c <CheckSyncTypeValue+0x190>
        }
        break;
 8024608:	bf00      	nop
    } //switch 
    return ABORTIDX_VALUE_EXCEEDED;
 802460a:	2312      	movs	r3, #18

}
 802460c:	4618      	mov	r0, r3
 802460e:	370c      	adds	r7, #12
 8024610:	46bd      	mov	sp, r7
 8024612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024616:	4770      	bx	lr
 8024618:	1fff271a 	.word	0x1fff271a
 802461c:	1fff2838 	.word	0x1fff2838
 8024620:	1fff27f4 	.word	0x1fff27f4
 8024624:	1fff2746 	.word	0x1fff2746

08024628 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8024628:	b590      	push	{r4, r7, lr}
 802462a:	b091      	sub	sp, #68	; 0x44
 802462c:	af02      	add	r7, sp, #8
 802462e:	60ba      	str	r2, [r7, #8]
 8024630:	607b      	str	r3, [r7, #4]
 8024632:	4603      	mov	r3, r0
 8024634:	81fb      	strh	r3, [r7, #14]
 8024636:	460b      	mov	r3, r1
 8024638:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 802463a:	7b7b      	ldrb	r3, [r7, #13]
 802463c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 802463e:	687b      	ldr	r3, [r7, #4]
 8024640:	899b      	ldrh	r3, [r3, #12]
 8024642:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024646:	121b      	asrs	r3, r3, #8
 8024648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 802464c:	687b      	ldr	r3, [r7, #4]
 802464e:	899b      	ldrh	r3, [r3, #12]
 8024650:	b2db      	uxtb	r3, r3
 8024652:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8024654:	7b7b      	ldrb	r3, [r7, #13]
 8024656:	867b      	strh	r3, [r7, #50]	; 0x32

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8024658:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 802465c:	2b07      	cmp	r3, #7
 802465e:	d008      	beq.n	8024672 <OBJ_Read+0x4a>
 8024660:	89fb      	ldrh	r3, [r7, #14]
 8024662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024666:	d304      	bcc.n	8024672 <OBJ_Read+0x4a>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 8024668:	687b      	ldr	r3, [r7, #4]
 802466a:	699b      	ldr	r3, [r3, #24]
 802466c:	881b      	ldrh	r3, [r3, #0]
 802466e:	b2db      	uxtb	r3, r3
 8024670:	86bb      	strh	r3, [r7, #52]	; 0x34

    }

    if ( bCompleteAccess )
 8024672:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024676:	2b00      	cmp	r3, #0
 8024678:	d00c      	beq.n	8024694 <OBJ_Read+0x6c>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 802467a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 802467e:	2b07      	cmp	r3, #7
 8024680:	d003      	beq.n	802468a <OBJ_Read+0x62>
 8024682:	89fb      	ldrh	r3, [r7, #14]
 8024684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024688:	d201      	bcs.n	802468e <OBJ_Read+0x66>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 802468a:	2305      	movs	r3, #5
 802468c:	e29e      	b.n	8024bcc <OBJ_Read+0x5a4>
        }


        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 802468e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8024690:	867b      	strh	r3, [r7, #50]	; 0x32
 8024692:	e02d      	b.n	80246f0 <OBJ_Read+0xc8>
    }
    else
        if ( subindex > maxSubindex )
 8024694:	7b7b      	ldrb	r3, [r7, #13]
 8024696:	b29b      	uxth	r3, r3
 8024698:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 802469a:	429a      	cmp	r2, r3
 802469c:	d201      	bcs.n	80246a2 <OBJ_Read+0x7a>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 802469e:	2311      	movs	r3, #17
 80246a0:	e294      	b.n	8024bcc <OBJ_Read+0x5a4>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 80246a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80246a4:	b2db      	uxtb	r3, r3
 80246a6:	6878      	ldr	r0, [r7, #4]
 80246a8:	4619      	mov	r1, r3
 80246aa:	f7ff fdfd 	bl	80242a8 <OBJ_GetEntryDesc>
 80246ae:	6278      	str	r0, [r7, #36]	; 0x24

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 80246b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246b2:	889b      	ldrh	r3, [r3, #4]
 80246b4:	2b00      	cmp	r3, #0
 80246b6:	d019      	beq.n	80246ec <OBJ_Read+0xc4>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
/*ECATCHANGE_START(V5.12) COE3*/
                if (0 == (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)))
 80246b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246ba:	889b      	ldrh	r3, [r3, #4]
 80246bc:	b2db      	uxtb	r3, r3
 80246be:	f003 0307 	and.w	r3, r3, #7
 80246c2:	b2db      	uxtb	r3, r3
 80246c4:	005b      	lsls	r3, r3, #1
 80246c6:	b2db      	uxtb	r3, r3
 80246c8:	461a      	mov	r2, r3
 80246ca:	4ba0      	ldr	r3, [pc, #640]	; (802494c <OBJ_Read+0x324>)
 80246cc:	781b      	ldrb	r3, [r3, #0]
 80246ce:	f003 030f 	and.w	r3, r3, #15
 80246d2:	4013      	ands	r3, r2
 80246d4:	2b00      	cmp	r3, #0
 80246d6:	d10b      	bne.n	80246f0 <OBJ_Read+0xc8>
/*ECATCHANGE_END(V5.12) COE3*/
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 80246d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246da:	889b      	ldrh	r3, [r3, #4]
 80246dc:	f003 0307 	and.w	r3, r3, #7
 80246e0:	2b00      	cmp	r3, #0
 80246e2:	d101      	bne.n	80246e8 <OBJ_Read+0xc0>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 80246e4:	2306      	movs	r3, #6
 80246e6:	e271      	b.n	8024bcc <OBJ_Read+0x5a4>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80246e8:	231a      	movs	r3, #26
 80246ea:	e26f      	b.n	8024bcc <OBJ_Read+0x5a4>
                }
            }
/* ECATCHANGE_START(V5.12) COE7*/
            else
            {
                return ABORTIDX_UNSUPPORTED_ACCESS;
 80246ec:	2305      	movs	r3, #5
 80246ee:	e26d      	b.n	8024bcc <OBJ_Read+0x5a4>
            }
/* ECATCHANGE_END(V5.12) COE7*/
        }
        if ( pObjEntry->Read != NULL )
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	69db      	ldr	r3, [r3, #28]
 80246f4:	2b00      	cmp	r3, #0
 80246f6:	d00d      	beq.n	8024714 <OBJ_Read+0xec>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 80246f8:	687b      	ldr	r3, [r7, #4]
 80246fa:	69dc      	ldr	r4, [r3, #28]
 80246fc:	89f9      	ldrh	r1, [r7, #14]
 80246fe:	7b7a      	ldrb	r2, [r7, #13]
 8024700:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024704:	9300      	str	r3, [sp, #0]
 8024706:	4608      	mov	r0, r1
 8024708:	4611      	mov	r1, r2
 802470a:	68ba      	ldr	r2, [r7, #8]
 802470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802470e:	47a0      	blx	r4
 8024710:	4603      	mov	r3, r0
 8024712:	e25b      	b.n	8024bcc <OBJ_Read+0x5a4>
        }
        else if ( index < 0x1000 && subindex != 0 )
 8024714:	89fb      	ldrh	r3, [r7, #14]
 8024716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802471a:	d232      	bcs.n	8024782 <OBJ_Read+0x15a>
 802471c:	7b7b      	ldrb	r3, [r7, #13]
 802471e:	2b00      	cmp	r3, #0
 8024720:	d02f      	beq.n	8024782 <OBJ_Read+0x15a>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8024722:	687b      	ldr	r3, [r7, #4]
 8024724:	699b      	ldr	r3, [r3, #24]
 8024726:	623b      	str	r3, [r7, #32]
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8024728:	7b7b      	ldrb	r3, [r7, #13]
 802472a:	6878      	ldr	r0, [r7, #4]
 802472c:	4619      	mov	r1, r3
 802472e:	f7ff fdbb 	bl	80242a8 <OBJ_GetEntryDesc>
 8024732:	6278      	str	r0, [r7, #36]	; 0x24
            size = BIT2BYTE(pEntry->BitLength);
 8024734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024736:	885b      	ldrh	r3, [r3, #2]
 8024738:	3307      	adds	r3, #7
 802473a:	10db      	asrs	r3, r3, #3
 802473c:	83fb      	strh	r3, [r7, #30]

            p = (CHAR **) pVarPtr;
 802473e:	6a3b      	ldr	r3, [r7, #32]
 8024740:	61bb      	str	r3, [r7, #24]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 8024742:	7b7b      	ldrb	r3, [r7, #13]
 8024744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8024748:	3b01      	subs	r3, #1
 802474a:	009b      	lsls	r3, r3, #2
 802474c:	69ba      	ldr	r2, [r7, #24]
 802474e:	4413      	add	r3, r2
 8024750:	681b      	ldr	r3, [r3, #0]
 8024752:	623b      	str	r3, [r7, #32]

            {
            // Get enum value (first 32Bit)
            pData[0] = pVarPtr[0];
 8024754:	6a3b      	ldr	r3, [r7, #32]
 8024756:	881a      	ldrh	r2, [r3, #0]
 8024758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802475a:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 802475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802475e:	3302      	adds	r3, #2
 8024760:	6a3a      	ldr	r2, [r7, #32]
 8024762:	8852      	ldrh	r2, [r2, #2]
 8024764:	801a      	strh	r2, [r3, #0]
            pData += 2;
 8024766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024768:	3304      	adds	r3, #4
 802476a:	64bb      	str	r3, [r7, #72]	; 0x48
            pVarPtr += 2;
 802476c:	6a3b      	ldr	r3, [r7, #32]
 802476e:	3304      	adds	r3, #4
 8024770:	623b      	str	r3, [r7, #32]

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 8024772:	8bfb      	ldrh	r3, [r7, #30]
 8024774:	3b04      	subs	r3, #4
 8024776:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024778:	6a39      	ldr	r1, [r7, #32]
 802477a:	461a      	mov	r2, r3
 802477c:	f005 fb66 	bl	8029e4c <memcpy>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
        }
        else if ( index < 0x1000 && subindex != 0 )
        {
 8024780:	e223      	b.n	8024bca <OBJ_Read+0x5a2>
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 8024782:	2300      	movs	r3, #0
 8024784:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            UINT8 result = 0;
 8024788:	2300      	movs	r3, #0
 802478a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 802478e:	7b7b      	ldrb	r3, [r7, #13]
 8024790:	86fb      	strh	r3, [r7, #54]	; 0x36
 8024792:	e20e      	b.n	8024bb2 <OBJ_Read+0x58a>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	699b      	ldr	r3, [r3, #24]
 8024798:	617b      	str	r3, [r7, #20]
                UINT16 bitOffset = 0;
 802479a:	2300      	movs	r3, #0
 802479c:	85fb      	strh	r3, [r7, #46]	; 0x2e

                
                if (i == 0)
 802479e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	d00b      	beq.n	80247bc <OBJ_Read+0x194>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 80247a4:	89fb      	ldrh	r3, [r7, #14]
 80247a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80247aa:	d307      	bcc.n	80247bc <OBJ_Read+0x194>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 80247ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80247ae:	b2db      	uxtb	r3, r3
 80247b0:	4618      	mov	r0, r3
 80247b2:	6879      	ldr	r1, [r7, #4]
 80247b4:	f7ff fdb0 	bl	8024318 <OBJ_GetEntryOffset>
 80247b8:	4603      	mov	r3, r0
 80247ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 80247bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80247be:	091b      	lsrs	r3, r3, #4
 80247c0:	b29b      	uxth	r3, r3
 80247c2:	005b      	lsls	r3, r3, #1
 80247c4:	697a      	ldr	r2, [r7, #20]
 80247c6:	4413      	add	r3, r2
 80247c8:	617b      	str	r3, [r7, #20]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 80247ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80247cc:	b2db      	uxtb	r3, r3
 80247ce:	6878      	ldr	r0, [r7, #4]
 80247d0:	4619      	mov	r1, r3
 80247d2:	f7ff fd69 	bl	80242a8 <OBJ_GetEntryDesc>
 80247d6:	6278      	str	r0, [r7, #36]	; 0x24
/*ECATCHANGE_START(V5.12) COE3*/
                if (0 != (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)) )
 80247d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247da:	889b      	ldrh	r3, [r3, #4]
 80247dc:	b2db      	uxtb	r3, r3
 80247de:	f003 0307 	and.w	r3, r3, #7
 80247e2:	b2db      	uxtb	r3, r3
 80247e4:	005b      	lsls	r3, r3, #1
 80247e6:	b2db      	uxtb	r3, r3
 80247e8:	461a      	mov	r2, r3
 80247ea:	4b58      	ldr	r3, [pc, #352]	; (802494c <OBJ_Read+0x324>)
 80247ec:	781b      	ldrb	r3, [r3, #0]
 80247ee:	f003 030f 	and.w	r3, r3, #15
 80247f2:	4013      	ands	r3, r2
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	f000 8195 	beq.w	8024b24 <OBJ_Read+0x4fc>
/*ECATCHANGE_END(V5.12) COE3*/
                {
                    if ( i == subindex                                     /* requested entry */
 80247fa:	7b7b      	ldrb	r3, [r7, #13]
 80247fc:	b29b      	uxth	r3, r3
 80247fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024800:	429a      	cmp	r2, r3
 8024802:	d00a      	beq.n	802481a <OBJ_Read+0x1f2>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8024804:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024808:	2b00      	cmp	r3, #0
 802480a:	f000 818a 	beq.w	8024b22 <OBJ_Read+0x4fa>
 802480e:	7b7b      	ldrb	r3, [r7, #13]
 8024810:	b29b      	uxth	r3, r3
 8024812:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024814:	429a      	cmp	r2, r3
 8024816:	f0c0 8184 	bcc.w	8024b22 <OBJ_Read+0x4fa>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 802481a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802481c:	2b00      	cmp	r3, #0
 802481e:	d10a      	bne.n	8024836 <OBJ_Read+0x20e>
 8024820:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8024824:	2b07      	cmp	r3, #7
 8024826:	d006      	beq.n	8024836 <OBJ_Read+0x20e>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 8024828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802482a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 802482c:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 802482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024830:	3302      	adds	r3, #2
 8024832:	64bb      	str	r3, [r7, #72]	; 0x48
 8024834:	e175      	b.n	8024b22 <OBJ_Read+0x4fa>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 8024836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024838:	881b      	ldrh	r3, [r3, #0]
 802483a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            
                            if (pEntry->DataType >= 0x700)
 802483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802483e:	881b      	ldrh	r3, [r3, #0]
 8024840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8024844:	d315      	bcc.n	8024872 <OBJ_Read+0x24a>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 8024846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024848:	885b      	ldrh	r3, [r3, #2]
 802484a:	2b08      	cmp	r3, #8
 802484c:	d804      	bhi.n	8024858 <OBJ_Read+0x230>
                                {
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 802484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024850:	885b      	ldrh	r3, [r3, #2]
 8024852:	332f      	adds	r3, #47	; 0x2f
 8024854:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8024856:	e00c      	b.n	8024872 <OBJ_Read+0x24a>
                                }
                                else if ( pEntry->BitLength == 16 )
 8024858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802485a:	885b      	ldrh	r3, [r3, #2]
 802485c:	2b10      	cmp	r3, #16
 802485e:	d102      	bne.n	8024866 <OBJ_Read+0x23e>
                                {
                                    dataType = DEFTYPE_UNSIGNED16;
 8024860:	2306      	movs	r3, #6
 8024862:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8024864:	e005      	b.n	8024872 <OBJ_Read+0x24a>
                                }
                                else if ( pEntry->BitLength == 32 )
 8024866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024868:	885b      	ldrh	r3, [r3, #2]
 802486a:	2b20      	cmp	r3, #32
 802486c:	d101      	bne.n	8024872 <OBJ_Read+0x24a>
                                {
                                    dataType = DEFTYPE_UNSIGNED32;
 802486e:	2307      	movs	r3, #7
 8024870:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                }
                            }

                            switch (dataType)
 8024872:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8024874:	2b11      	cmp	r3, #17
 8024876:	f000 80e0 	beq.w	8024a3a <OBJ_Read+0x412>
 802487a:	2b11      	cmp	r3, #17
 802487c:	dc1e      	bgt.n	80248bc <OBJ_Read+0x294>
 802487e:	2b05      	cmp	r3, #5
 8024880:	d066      	beq.n	8024950 <OBJ_Read+0x328>
 8024882:	2b05      	cmp	r3, #5
 8024884:	dc0d      	bgt.n	80248a2 <OBJ_Read+0x27a>
 8024886:	2b02      	cmp	r3, #2
 8024888:	dc04      	bgt.n	8024894 <OBJ_Read+0x26c>
 802488a:	2b01      	cmp	r3, #1
 802488c:	da60      	bge.n	8024950 <OBJ_Read+0x328>
 802488e:	2b00      	cmp	r3, #0
 8024890:	d03a      	beq.n	8024908 <OBJ_Read+0x2e0>
 8024892:	e140      	b.n	8024b16 <OBJ_Read+0x4ee>
 8024894:	2b03      	cmp	r3, #3
 8024896:	f000 80ad 	beq.w	80249f4 <OBJ_Read+0x3cc>
 802489a:	2b04      	cmp	r3, #4
 802489c:	f000 80b9 	beq.w	8024a12 <OBJ_Read+0x3ea>
 80248a0:	e139      	b.n	8024b16 <OBJ_Read+0x4ee>
 80248a2:	2b08      	cmp	r3, #8
 80248a4:	dc03      	bgt.n	80248ae <OBJ_Read+0x286>
 80248a6:	2b07      	cmp	r3, #7
 80248a8:	f280 80b3 	bge.w	8024a12 <OBJ_Read+0x3ea>
 80248ac:	e0a2      	b.n	80249f4 <OBJ_Read+0x3cc>
 80248ae:	2b09      	cmp	r3, #9
 80248b0:	f000 8109 	beq.w	8024ac6 <OBJ_Read+0x49e>
 80248b4:	2b0b      	cmp	r3, #11
 80248b6:	f300 812e 	bgt.w	8024b16 <OBJ_Read+0x4ee>
 80248ba:	e0dc      	b.n	8024a76 <OBJ_Read+0x44e>
 80248bc:	2b2d      	cmp	r3, #45	; 0x2d
 80248be:	d047      	beq.n	8024950 <OBJ_Read+0x328>
 80248c0:	2b2d      	cmp	r3, #45	; 0x2d
 80248c2:	dc11      	bgt.n	80248e8 <OBJ_Read+0x2c0>
 80248c4:	2b1e      	cmp	r3, #30
 80248c6:	d043      	beq.n	8024950 <OBJ_Read+0x328>
 80248c8:	2b1e      	cmp	r3, #30
 80248ca:	dc06      	bgt.n	80248da <OBJ_Read+0x2b2>
 80248cc:	2b15      	cmp	r3, #21
 80248ce:	f000 80b4 	beq.w	8024a3a <OBJ_Read+0x412>
 80248d2:	2b1b      	cmp	r3, #27
 80248d4:	f000 80b1 	beq.w	8024a3a <OBJ_Read+0x412>
 80248d8:	e11d      	b.n	8024b16 <OBJ_Read+0x4ee>
 80248da:	2b1f      	cmp	r3, #31
 80248dc:	f000 808a 	beq.w	80249f4 <OBJ_Read+0x3cc>
 80248e0:	2b20      	cmp	r3, #32
 80248e2:	f000 8096 	beq.w	8024a12 <OBJ_Read+0x3ea>
 80248e6:	e116      	b.n	8024b16 <OBJ_Read+0x4ee>
 80248e8:	2b37      	cmp	r3, #55	; 0x37
 80248ea:	dc07      	bgt.n	80248fc <OBJ_Read+0x2d4>
 80248ec:	2b30      	cmp	r3, #48	; 0x30
 80248ee:	da2f      	bge.n	8024950 <OBJ_Read+0x328>
 80248f0:	2b2e      	cmp	r3, #46	; 0x2e
 80248f2:	d07f      	beq.n	80249f4 <OBJ_Read+0x3cc>
 80248f4:	2b2f      	cmp	r3, #47	; 0x2f
 80248f6:	f000 808c 	beq.w	8024a12 <OBJ_Read+0x3ea>
 80248fa:	e10c      	b.n	8024b16 <OBJ_Read+0x4ee>
 80248fc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8024900:	2b03      	cmp	r3, #3
 8024902:	f200 8108 	bhi.w	8024b16 <OBJ_Read+0x4ee>
 8024906:	e0b6      	b.n	8024a76 <OBJ_Read+0x44e>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 8024908:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802490c:	2b00      	cmp	r3, #0
 802490e:	d01a      	beq.n	8024946 <OBJ_Read+0x31e>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 8024910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024912:	885b      	ldrh	r3, [r3, #2]
 8024914:	f003 030f 	and.w	r3, r3, #15
 8024918:	2b00      	cmp	r3, #0
 802491a:	dd0a      	ble.n	8024932 <OBJ_Read+0x30a>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 802491c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024920:	8852      	ldrh	r2, [r2, #2]
 8024922:	4413      	add	r3, r2
 8024924:	f003 030f 	and.w	r3, r3, #15
 8024928:	2b00      	cmp	r3, #0
 802492a:	d102      	bne.n	8024932 <OBJ_Read+0x30a>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 802492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802492e:	3302      	adds	r3, #2
 8024930:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 8024932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024934:	885b      	ldrh	r3, [r3, #2]
 8024936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802493a:	111b      	asrs	r3, r3, #4
 802493c:	005b      	lsls	r3, r3, #1
 802493e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024940:	4413      	add	r3, r2
 8024942:	64bb      	str	r3, [r7, #72]	; 0x48
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 8024944:	e0e9      	b.n	8024b1a <OBJ_Read+0x4f2>
                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024946:	2318      	movs	r3, #24
 8024948:	e140      	b.n	8024bcc <OBJ_Read+0x5a4>
 802494a:	bf00      	nop
 802494c:	1fff2719 	.word	0x1fff2719
                            case    DEFTYPE_INTEGER8:
                            case    DEFTYPE_UNSIGNED8:
                            case    DEFTYPE_BYTE :
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 8024950:	2300      	movs	r3, #0
 8024952:	827b      	strh	r3, [r7, #18]

                                    
                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8024954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024956:	885b      	ldrh	r3, [r3, #2]
 8024958:	461a      	mov	r2, r3
 802495a:	4b9e      	ldr	r3, [pc, #632]	; (8024bd4 <OBJ_Read+0x5ac>)
 802495c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024960:	461a      	mov	r2, r3
 8024962:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024964:	f003 030f 	and.w	r3, r3, #15
 8024968:	fa02 f303 	lsl.w	r3, r2, r3
 802496c:	823b      	strh	r3, [r7, #16]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 802496e:	697b      	ldr	r3, [r7, #20]
 8024970:	881b      	ldrh	r3, [r3, #0]
 8024972:	827b      	strh	r3, [r7, #18]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 8024974:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024976:	f003 030f 	and.w	r3, r3, #15
 802497a:	2b00      	cmp	r3, #0
 802497c:	d102      	bne.n	8024984 <OBJ_Read+0x35c>
                                    {
                                        pData[0] = 0;
 802497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024980:	2200      	movs	r2, #0
 8024982:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 8024984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024986:	881a      	ldrh	r2, [r3, #0]
 8024988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802498a:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 802498c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024990:	2b00      	cmp	r3, #0
 8024992:	d00a      	beq.n	80249aa <OBJ_Read+0x382>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 8024994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024996:	881a      	ldrh	r2, [r3, #0]
 8024998:	8a79      	ldrh	r1, [r7, #18]
 802499a:	8a3b      	ldrh	r3, [r7, #16]
 802499c:	400b      	ands	r3, r1
 802499e:	b29b      	uxth	r3, r3
 80249a0:	4313      	orrs	r3, r2
 80249a2:	b29a      	uxth	r2, r3
 80249a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80249a6:	801a      	strh	r2, [r3, #0]
 80249a8:	e013      	b.n	80249d2 <OBJ_Read+0x3aa>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 80249aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80249ac:	881b      	ldrh	r3, [r3, #0]
 80249ae:	b299      	uxth	r1, r3
 80249b0:	8a7a      	ldrh	r2, [r7, #18]
 80249b2:	8a3b      	ldrh	r3, [r7, #16]
 80249b4:	4013      	ands	r3, r2
 80249b6:	b29b      	uxth	r3, r3
 80249b8:	461a      	mov	r2, r3
 80249ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80249bc:	f003 030f 	and.w	r3, r3, #15
 80249c0:	fa42 f303 	asr.w	r3, r2, r3
 80249c4:	b29b      	uxth	r3, r3
 80249c6:	460a      	mov	r2, r1
 80249c8:	4313      	orrs	r3, r2
 80249ca:	b29b      	uxth	r3, r3
 80249cc:	b29a      	uxth	r2, r3
 80249ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80249d0:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 80249d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80249d4:	881a      	ldrh	r2, [r3, #0]
 80249d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80249d8:	801a      	strh	r2, [r3, #0]
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 80249da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80249dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80249de:	8852      	ldrh	r2, [r2, #2]
 80249e0:	4413      	add	r3, r2
 80249e2:	f003 030f 	and.w	r3, r3, #15
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	d103      	bne.n	80249f2 <OBJ_Read+0x3ca>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 80249ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80249ec:	3302      	adds	r3, #2
 80249ee:	64bb      	str	r3, [r7, #72]	; 0x48
                                    }

                                }
                                break;
 80249f0:	e093      	b.n	8024b1a <OBJ_Read+0x4f2>
 80249f2:	e092      	b.n	8024b1a <OBJ_Read+0x4f2>
                            case    DEFTYPE_INTEGER16:
                            case    DEFTYPE_UNSIGNED16:
                            case    DEFTYPE_BITARR16:
                            case    DEFTYPE_WORD:

                                if(bitOffset & 0xF)
 80249f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80249f6:	f003 030f 	and.w	r3, r3, #15
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	d001      	beq.n	8024a02 <OBJ_Read+0x3da>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80249fe:	2305      	movs	r3, #5
 8024a00:	e0e4      	b.n	8024bcc <OBJ_Read+0x5a4>
                                }
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 8024a02:	697b      	ldr	r3, [r7, #20]
 8024a04:	881a      	ldrh	r2, [r3, #0]
 8024a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a08:	801a      	strh	r2, [r3, #0]
                                pData++;
 8024a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a0c:	3302      	adds	r3, #2
 8024a0e:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024a10:	e083      	b.n	8024b1a <OBJ_Read+0x4f2>
                            case    DEFTYPE_UNSIGNED32:
                            case    DEFTYPE_INTEGER32:
                            case    DEFTYPE_REAL32:
                            case    DEFTYPE_BITARR32:
                            case    DEFTYPE_DWORD:
                                if(bitOffset & 0xF)
 8024a12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024a14:	f003 030f 	and.w	r3, r3, #15
 8024a18:	2b00      	cmp	r3, #0
 8024a1a:	d001      	beq.n	8024a20 <OBJ_Read+0x3f8>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024a1c:	2305      	movs	r3, #5
 8024a1e:	e0d5      	b.n	8024bcc <OBJ_Read+0x5a4>
                                }

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8024a20:	697b      	ldr	r3, [r7, #20]
 8024a22:	881a      	ldrh	r2, [r3, #0]
 8024a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a26:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8024a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a2a:	3302      	adds	r3, #2
 8024a2c:	697a      	ldr	r2, [r7, #20]
 8024a2e:	8852      	ldrh	r2, [r2, #2]
 8024a30:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 8024a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a34:	3304      	adds	r3, #4
 8024a36:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024a38:	e06f      	b.n	8024b1a <OBJ_Read+0x4f2>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
                                if(bitOffset & 0xF)
 8024a3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024a3c:	f003 030f 	and.w	r3, r3, #15
 8024a40:	2b00      	cmp	r3, #0
 8024a42:	d001      	beq.n	8024a48 <OBJ_Read+0x420>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024a44:	2305      	movs	r3, #5
 8024a46:	e0c1      	b.n	8024bcc <OBJ_Read+0x5a4>
                                }

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 8024a48:	697b      	ldr	r3, [r7, #20]
 8024a4a:	881a      	ldrh	r2, [r3, #0]
 8024a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a4e:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8024a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a52:	3302      	adds	r3, #2
 8024a54:	697a      	ldr	r2, [r7, #20]
 8024a56:	8852      	ldrh	r2, [r2, #2]
 8024a58:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 8024a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a5c:	3304      	adds	r3, #4
 8024a5e:	697a      	ldr	r2, [r7, #20]
 8024a60:	8892      	ldrh	r2, [r2, #4]
 8024a62:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 8024a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a66:	3306      	adds	r3, #6
 8024a68:	697a      	ldr	r2, [r7, #20]
 8024a6a:	88d2      	ldrh	r2, [r2, #6]
 8024a6c:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 8024a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024a70:	3308      	adds	r3, #8
 8024a72:	64bb      	str	r3, [r7, #72]	; 0x48
                                break;
 8024a74:	e051      	b.n	8024b1a <OBJ_Read+0x4f2>
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:

                                if(bitOffset & 0xF)
 8024a76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024a78:	f003 030f 	and.w	r3, r3, #15
 8024a7c:	2b00      	cmp	r3, #0
 8024a7e:	d001      	beq.n	8024a84 <OBJ_Read+0x45c>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024a80:	2305      	movs	r3, #5
 8024a82:	e0a3      	b.n	8024bcc <OBJ_Read+0x5a4>
                                }

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8024a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a86:	885b      	ldrh	r3, [r3, #2]
 8024a88:	3307      	adds	r3, #7
 8024a8a:	10db      	asrs	r3, r3, #3
 8024a8c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024a8e:	6979      	ldr	r1, [r7, #20]
 8024a90:	461a      	mov	r2, r3
 8024a92:	f005 f9db 	bl	8029e4c <memcpy>

                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8024a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a98:	885b      	ldrh	r3, [r3, #2]
 8024a9a:	f023 030f 	bic.w	r3, r3, #15
 8024a9e:	330f      	adds	r3, #15
 8024aa0:	111b      	asrs	r3, r3, #4
 8024aa2:	005b      	lsls	r3, r3, #1
 8024aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024aa6:	4413      	add	r3, r2
 8024aa8:	64bb      	str	r3, [r7, #72]	; 0x48
                                
                                if((pEntry->BitLength & 0xF) != 0)
 8024aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024aac:	885b      	ldrh	r3, [r3, #2]
 8024aae:	f003 030f 	and.w	r3, r3, #15
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	d006      	beq.n	8024ac4 <OBJ_Read+0x49c>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8024ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ab8:	881b      	ldrh	r3, [r3, #0]
 8024aba:	b2db      	uxtb	r3, r3
 8024abc:	b29a      	uxth	r2, r3
 8024abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ac0:	801a      	strh	r2, [r3, #0]
                                }

                                break;
 8024ac2:	e02a      	b.n	8024b1a <OBJ_Read+0x4f2>
 8024ac4:	e029      	b.n	8024b1a <OBJ_Read+0x4f2>
                            case    DEFTYPE_VISIBLESTRING:
                                if(bitOffset & 0xF)
 8024ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024ac8:	f003 030f 	and.w	r3, r3, #15
 8024acc:	2b00      	cmp	r3, #0
 8024ace:	d001      	beq.n	8024ad4 <OBJ_Read+0x4ac>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8024ad0:	2305      	movs	r3, #5
 8024ad2:	e07b      	b.n	8024bcc <OBJ_Read+0x5a4>
                                }

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8024ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ad6:	885b      	ldrh	r3, [r3, #2]
 8024ad8:	3307      	adds	r3, #7
 8024ada:	10db      	asrs	r3, r3, #3
 8024adc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8024ade:	6979      	ldr	r1, [r7, #20]
 8024ae0:	461a      	mov	r2, r3
 8024ae2:	f005 f9b3 	bl	8029e4c <memcpy>
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 8024ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ae8:	885b      	ldrh	r3, [r3, #2]
 8024aea:	f023 030f 	bic.w	r3, r3, #15
 8024aee:	330f      	adds	r3, #15
 8024af0:	111b      	asrs	r3, r3, #4
 8024af2:	005b      	lsls	r3, r3, #1
 8024af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024af6:	4413      	add	r3, r2
 8024af8:	64bb      	str	r3, [r7, #72]	; 0x48

                                if((pEntry->BitLength & 0xF) != 0)
 8024afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024afc:	885b      	ldrh	r3, [r3, #2]
 8024afe:	f003 030f 	and.w	r3, r3, #15
 8024b02:	2b00      	cmp	r3, #0
 8024b04:	d006      	beq.n	8024b14 <OBJ_Read+0x4ec>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 8024b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b08:	881b      	ldrh	r3, [r3, #0]
 8024b0a:	b2db      	uxtb	r3, r3
 8024b0c:	b29a      	uxth	r2, r3
 8024b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b10:	801a      	strh	r2, [r3, #0]
                                }
                                
                                break;
 8024b12:	e002      	b.n	8024b1a <OBJ_Read+0x4f2>
 8024b14:	e001      	b.n	8024b1a <OBJ_Read+0x4f2>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024b16:	2318      	movs	r3, #24
 8024b18:	e058      	b.n	8024bcc <OBJ_Read+0x5a4>
                            } //switch (deftype)

                            bRead = 1;
 8024b1a:	2301      	movs	r3, #1
 8024b1c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8024b20:	e044      	b.n	8024bac <OBJ_Read+0x584>
 8024b22:	e043      	b.n	8024bac <OBJ_Read+0x584>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 8024b24:	2300      	movs	r3, #0
 8024b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 8024b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024b2c:	f003 030f 	and.w	r3, r3, #15
 8024b30:	2b00      	cmp	r3, #0
 8024b32:	d102      	bne.n	8024b3a <OBJ_Read+0x512>
                    {
                        *pData = 0;
 8024b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b36:	2200      	movs	r2, #0
 8024b38:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8024b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b3c:	885b      	ldrh	r3, [r3, #2]
 8024b3e:	f003 030f 	and.w	r3, r3, #15
 8024b42:	2b00      	cmp	r3, #0
 8024b44:	dd0d      	ble.n	8024b62 <OBJ_Read+0x53a>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8024b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8024b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024b4a:	8852      	ldrh	r2, [r2, #2]
 8024b4c:	4413      	add	r3, r2
 8024b4e:	f003 030f 	and.w	r3, r3, #15
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	d105      	bne.n	8024b62 <OBJ_Read+0x53a>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8024b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b58:	3302      	adds	r3, #2
 8024b5a:	64bb      	str	r3, [r7, #72]	; 0x48
                        
                        /*Clear new buffer*/
                        *pData = 0;
 8024b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b5e:	2200      	movs	r2, #0
 8024b60:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8024b62:	2300      	movs	r3, #0
 8024b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8024b68:	e00a      	b.n	8024b80 <OBJ_Read+0x558>
                    {
                        
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 8024b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b6c:	3302      	adds	r3, #2
 8024b6e:	64bb      	str	r3, [r7, #72]	; 0x48

                        /*Clear new buffer*/
                        *pData = 0;
 8024b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024b72:	2200      	movs	r2, #0
 8024b74:	801a      	strh	r2, [r3, #0]
                        /*Clear new buffer*/
                        *pData = 0;
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8024b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8024b7a:	3301      	adds	r3, #1
 8024b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8024b80:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8024b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b86:	885b      	ldrh	r3, [r3, #2]
 8024b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024b8c:	111b      	asrs	r3, r3, #4
 8024b8e:	429a      	cmp	r2, r3
 8024b90:	dbeb      	blt.n	8024b6a <OBJ_Read+0x542>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8024b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b94:	889b      	ldrh	r3, [r3, #4]
 8024b96:	f003 0307 	and.w	r3, r3, #7
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	d103      	bne.n	8024ba6 <OBJ_Read+0x57e>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 8024b9e:	2306      	movs	r3, #6
 8024ba0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8024ba4:	e002      	b.n	8024bac <OBJ_Read+0x584>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8024ba6:	231a      	movs	r3, #26
 8024ba8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            UINT8 bRead = 0x0;
            UINT8 result = 0;


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 8024bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024bae:	3301      	adds	r3, #1
 8024bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8024bb2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024bb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8024bb6:	429a      	cmp	r2, r3
 8024bb8:	f67f adec 	bls.w	8024794 <OBJ_Read+0x16c>
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
                    }
                }
            }

            if(bRead == 0)
 8024bbc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	d102      	bne.n	8024bca <OBJ_Read+0x5a2>
            {
                return result;
 8024bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8024bc8:	e000      	b.n	8024bcc <OBJ_Read+0x5a4>
            }
        }

    return 0;
 8024bca:	2300      	movs	r3, #0
}
 8024bcc:	4618      	mov	r0, r3
 8024bce:	373c      	adds	r7, #60	; 0x3c
 8024bd0:	46bd      	mov	sp, r7
 8024bd2:	bd90      	pop	{r4, r7, pc}
 8024bd4:	0802a970 	.word	0x0802a970

08024bd8 <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8024bd8:	b590      	push	{r4, r7, lr}
 8024bda:	b091      	sub	sp, #68	; 0x44
 8024bdc:	af02      	add	r7, sp, #8
 8024bde:	60ba      	str	r2, [r7, #8]
 8024be0:	607b      	str	r3, [r7, #4]
 8024be2:	4603      	mov	r3, r0
 8024be4:	81fb      	strh	r3, [r7, #14]
 8024be6:	460b      	mov	r3, r1
 8024be8:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8024bea:	7b7b      	ldrb	r3, [r7, #13]
 8024bec:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8024bee:	687b      	ldr	r3, [r7, #4]
 8024bf0:	899b      	ldrh	r3, [r3, #12]
 8024bf2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8024bf6:	121b      	asrs	r3, r3, #8
 8024bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    UINT16 maxSubindex = 0;
 8024bfc:	2300      	movs	r3, #0
 8024bfe:	86bb      	strh	r3, [r7, #52]	; 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	899b      	ldrh	r3, [r3, #12]
 8024c04:	b2db      	uxtb	r3, r3
 8024c06:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 8024c08:	2300      	movs	r3, #0
 8024c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8024c0e:	7b7b      	ldrb	r3, [r7, #13]
 8024c10:	863b      	strh	r3, [r7, #48]	; 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 8024c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024c16:	2b07      	cmp	r3, #7
 8024c18:	d028      	beq.n	8024c6c <OBJ_Write+0x94>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8024c1a:	687b      	ldr	r3, [r7, #4]
 8024c1c:	699b      	ldr	r3, [r3, #24]
 8024c1e:	881b      	ldrh	r3, [r3, #0]
 8024c20:	b2db      	uxtb	r3, r3
 8024c22:	86bb      	strh	r3, [r7, #52]	; 0x34

/*ECATCHANGE_START(V5.12) COE9*/
        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index) || (index == 0xF030)))
 8024c24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	d120      	bne.n	8024c6c <OBJ_Write+0x94>
 8024c2a:	89fb      	ldrh	r3, [r7, #14]
 8024c2c:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8024c30:	4293      	cmp	r3, r2
 8024c32:	d904      	bls.n	8024c3e <OBJ_Write+0x66>
 8024c34:	89fb      	ldrh	r3, [r7, #14]
 8024c36:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8024c3a:	4293      	cmp	r3, r2
 8024c3c:	d914      	bls.n	8024c68 <OBJ_Write+0x90>
 8024c3e:	89fb      	ldrh	r3, [r7, #14]
 8024c40:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8024c44:	d303      	bcc.n	8024c4e <OBJ_Write+0x76>
 8024c46:	89fb      	ldrh	r3, [r7, #14]
 8024c48:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8024c4c:	d30c      	bcc.n	8024c68 <OBJ_Write+0x90>
 8024c4e:	89fb      	ldrh	r3, [r7, #14]
 8024c50:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8024c54:	d303      	bcc.n	8024c5e <OBJ_Write+0x86>
 8024c56:	89fb      	ldrh	r3, [r7, #14]
 8024c58:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8024c5c:	d304      	bcc.n	8024c68 <OBJ_Write+0x90>
 8024c5e:	89fb      	ldrh	r3, [r7, #14]
 8024c60:	f24f 0230 	movw	r2, #61488	; 0xf030
 8024c64:	4293      	cmp	r3, r2
 8024c66:	d101      	bne.n	8024c6c <OBJ_Write+0x94>
/*ECATCHANGE_END(V5.12) COE9*/
        {
            maxSubindex = maxConfiguredSubindex;
 8024c68:	8c3b      	ldrh	r3, [r7, #32]
 8024c6a:	86bb      	strh	r3, [r7, #52]	; 0x34
        }
    }


    if ( bCompleteAccess )
 8024c6c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	d012      	beq.n	8024c9a <OBJ_Write+0xc2>
    {
        if ( objCode == OBJCODE_VAR )
 8024c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024c78:	2b07      	cmp	r3, #7
 8024c7a:	d101      	bne.n	8024c80 <OBJ_Write+0xa8>
        {
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8024c7c:	2305      	movs	r3, #5
 8024c7e:	e30f      	b.n	80252a0 <OBJ_Write+0x6c8>
        }

        if ((subindex == 0) && (dataSize > 0))
 8024c80:	7b7b      	ldrb	r3, [r7, #13]
 8024c82:	2b00      	cmp	r3, #0
 8024c84:	d106      	bne.n	8024c94 <OBJ_Write+0xbc>
 8024c86:	68bb      	ldr	r3, [r7, #8]
 8024c88:	2b00      	cmp	r3, #0
 8024c8a:	d003      	beq.n	8024c94 <OBJ_Write+0xbc>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 8024c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024c8e:	881b      	ldrh	r3, [r3, #0]
 8024c90:	b2db      	uxtb	r3, r3
 8024c92:	86bb      	strh	r3, [r7, #52]	; 0x34
        }


        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 8024c94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8024c96:	863b      	strh	r3, [r7, #48]	; 0x30
 8024c98:	e02a      	b.n	8024cf0 <OBJ_Write+0x118>
    }
    else
    if (subindex > maxSubindex)
 8024c9a:	7b7b      	ldrb	r3, [r7, #13]
 8024c9c:	b29b      	uxth	r3, r3
 8024c9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8024ca0:	429a      	cmp	r2, r3
 8024ca2:	d201      	bcs.n	8024ca8 <OBJ_Write+0xd0>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8024ca4:	2311      	movs	r3, #17
 8024ca6:	e2fb      	b.n	80252a0 <OBJ_Write+0x6c8>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8024ca8:	7b7b      	ldrb	r3, [r7, #13]
 8024caa:	6878      	ldr	r0, [r7, #4]
 8024cac:	4619      	mov	r1, r3
 8024cae:	f7ff fafb 	bl	80242a8 <OBJ_GetEntryDesc>
 8024cb2:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
/*ECATCHANGE_START(V5.12) COE3*/
        if (0 == (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 8024cb4:	69fb      	ldr	r3, [r7, #28]
 8024cb6:	889b      	ldrh	r3, [r3, #4]
 8024cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8024cbc:	109b      	asrs	r3, r3, #2
 8024cbe:	b2db      	uxtb	r3, r3
 8024cc0:	461a      	mov	r2, r3
 8024cc2:	4ba2      	ldr	r3, [pc, #648]	; (8024f4c <OBJ_Write+0x374>)
 8024cc4:	781b      	ldrb	r3, [r3, #0]
 8024cc6:	f003 030f 	and.w	r3, r3, #15
 8024cca:	4013      	ands	r3, r2
 8024ccc:	2b00      	cmp	r3, #0
 8024cce:	d10f      	bne.n	8024cf0 <OBJ_Write+0x118>
/*ECATCHANGE_END(V5.12) COE3*/
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 8024cd0:	69fb      	ldr	r3, [r7, #28]
 8024cd2:	889b      	ldrh	r3, [r3, #4]
 8024cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	d107      	bne.n	8024cec <OBJ_Write+0x114>
            {
/* ECATCHANGE_START(V5.12) COE7*/
                if (pEntry->ObjAccess == 0)
 8024cdc:	69fb      	ldr	r3, [r7, #28]
 8024cde:	889b      	ldrh	r3, [r3, #4]
 8024ce0:	2b00      	cmp	r3, #0
 8024ce2:	d101      	bne.n	8024ce8 <OBJ_Write+0x110>
                {
                        return ABORTIDX_UNSUPPORTED_ACCESS;
 8024ce4:	2305      	movs	r3, #5
 8024ce6:	e2db      	b.n	80252a0 <OBJ_Write+0x6c8>
                }
/* ECATCHANGE_END(V5.12) COE7*/
                else
                {
                        /* it is a read only entry */
                        return ABORTIDX_READ_ONLY_ENTRY;
 8024ce8:	2307      	movs	r3, #7
 8024cea:	e2d9      	b.n	80252a0 <OBJ_Write+0x6c8>
                }
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8024cec:	231a      	movs	r3, #26
 8024cee:	e2d7      	b.n	80252a0 <OBJ_Write+0x6c8>
    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
/*ECATCHANGE_START(V5.12) COE9*/
    if((subindex > 0) &&
 8024cf0:	7b7b      	ldrb	r3, [r7, #13]
 8024cf2:	2b00      	cmp	r3, #0
 8024cf4:	d029      	beq.n	8024d4a <OBJ_Write+0x172>
 8024cf6:	89fb      	ldrh	r3, [r7, #14]
 8024cf8:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8024cfc:	4293      	cmp	r3, r2
 8024cfe:	d904      	bls.n	8024d0a <OBJ_Write+0x132>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index) || (index == 0xF030))
 8024d00:	89fb      	ldrh	r3, [r7, #14]
 8024d02:	f641 422f 	movw	r2, #7215	; 0x1c2f
 8024d06:	4293      	cmp	r3, r2
 8024d08:	d914      	bls.n	8024d34 <OBJ_Write+0x15c>
 8024d0a:	89fb      	ldrh	r3, [r7, #14]
 8024d0c:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8024d10:	d303      	bcc.n	8024d1a <OBJ_Write+0x142>
 8024d12:	89fb      	ldrh	r3, [r7, #14]
 8024d14:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8024d18:	d30c      	bcc.n	8024d34 <OBJ_Write+0x15c>
 8024d1a:	89fb      	ldrh	r3, [r7, #14]
 8024d1c:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8024d20:	d303      	bcc.n	8024d2a <OBJ_Write+0x152>
 8024d22:	89fb      	ldrh	r3, [r7, #14]
 8024d24:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8024d28:	d304      	bcc.n	8024d34 <OBJ_Write+0x15c>
 8024d2a:	89fb      	ldrh	r3, [r7, #14]
 8024d2c:	f24f 0230 	movw	r2, #61488	; 0xf030
 8024d30:	4293      	cmp	r3, r2
 8024d32:	d10a      	bne.n	8024d4a <OBJ_Write+0x172>
/*ECATCHANGE_END(V5.12) COE9*/
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	699b      	ldr	r3, [r3, #24]
 8024d38:	881b      	ldrh	r3, [r3, #0]
 8024d3a:	b2db      	uxtb	r3, r3
 8024d3c:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 8024d3e:	8b7b      	ldrh	r3, [r7, #26]
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	d002      	beq.n	8024d4a <OBJ_Write+0x172>
        {
            bClearSubindex0Required = TRUE;
 8024d44:	2301      	movs	r3, #1
 8024d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }
    }

    if ( pObjEntry->Write != NULL )
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	6a1b      	ldr	r3, [r3, #32]
 8024d4e:	2b00      	cmp	r3, #0
 8024d50:	d00d      	beq.n	8024d6e <OBJ_Write+0x196>
    {
        /* Write function is defined, we call the object specific write function */
        return pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	6a1c      	ldr	r4, [r3, #32]
 8024d56:	89f9      	ldrh	r1, [r7, #14]
 8024d58:	7b7a      	ldrb	r2, [r7, #13]
 8024d5a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024d5e:	9300      	str	r3, [sp, #0]
 8024d60:	4608      	mov	r0, r1
 8024d62:	4611      	mov	r1, r2
 8024d64:	68ba      	ldr	r2, [r7, #8]
 8024d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024d68:	47a0      	blx	r4
 8024d6a:	4603      	mov	r3, r0
 8024d6c:	e298      	b.n	80252a0 <OBJ_Write+0x6c8>
    }
    else
    {
        UINT8 bWritten = 0;
 8024d6e:	2300      	movs	r3, #0
 8024d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 8024d74:	2307      	movs	r3, #7
 8024d76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if (dataSize == 0)
 8024d7a:	68bb      	ldr	r3, [r7, #8]
 8024d7c:	2b00      	cmp	r3, #0
 8024d7e:	d101      	bne.n	8024d84 <OBJ_Write+0x1ac>
        {
           return 0; //no error
 8024d80:	2300      	movs	r3, #0
 8024d82:	e28d      	b.n	80252a0 <OBJ_Write+0x6c8>
        }

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8024d84:	7b7b      	ldrb	r3, [r7, #13]
 8024d86:	86fb      	strh	r3, [r7, #54]	; 0x36
 8024d88:	e27d      	b.n	8025286 <OBJ_Write+0x6ae>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8024d8a:	687b      	ldr	r3, [r7, #4]
 8024d8c:	699b      	ldr	r3, [r3, #24]
 8024d8e:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 bitOffset = 0;
 8024d90:	2300      	movs	r3, #0
 8024d92:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 8024d94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024d96:	b2db      	uxtb	r3, r3
 8024d98:	6878      	ldr	r0, [r7, #4]
 8024d9a:	4619      	mov	r1, r3
 8024d9c:	f7ff fa84 	bl	80242a8 <OBJ_GetEntryDesc>
 8024da0:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 8024da2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024da4:	b2db      	uxtb	r3, r3
 8024da6:	4618      	mov	r0, r3
 8024da8:	6879      	ldr	r1, [r7, #4]
 8024daa:	f7ff fab5 	bl	8024318 <OBJ_GetEntryOffset>
 8024dae:	4603      	mov	r3, r0
 8024db0:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
/*ECATCHANGE_START(V5.12) COE3*/
            if (0 != (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 8024db2:	69fb      	ldr	r3, [r7, #28]
 8024db4:	889b      	ldrh	r3, [r3, #4]
 8024db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8024dba:	109b      	asrs	r3, r3, #2
 8024dbc:	b2db      	uxtb	r3, r3
 8024dbe:	461a      	mov	r2, r3
 8024dc0:	4b62      	ldr	r3, [pc, #392]	; (8024f4c <OBJ_Write+0x374>)
 8024dc2:	781b      	ldrb	r3, [r3, #0]
 8024dc4:	f003 030f 	and.w	r3, r3, #15
 8024dc8:	4013      	ands	r3, r2
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	f000 8235 	beq.w	802523a <OBJ_Write+0x662>
/*ECATCHANGE_END(V5.12) COE3*/
            {
                /* we have write access for this entry */
                if (i != 0)
 8024dd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024dd2:	2b00      	cmp	r3, #0
 8024dd4:	d006      	beq.n	8024de4 <OBJ_Write+0x20c>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 8024dd6:	8b3b      	ldrh	r3, [r7, #24]
 8024dd8:	091b      	lsrs	r3, r3, #4
 8024dda:	b29b      	uxth	r3, r3
 8024ddc:	005b      	lsls	r3, r3, #1
 8024dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024de0:	4413      	add	r3, r2
 8024de2:	62bb      	str	r3, [r7, #40]	; 0x28
                }


                if ( i == subindex                                     /* requested entry */
 8024de4:	7b7b      	ldrb	r3, [r7, #13]
 8024de6:	b29b      	uxth	r3, r3
 8024de8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024dea:	429a      	cmp	r2, r3
 8024dec:	d00a      	beq.n	8024e04 <OBJ_Write+0x22c>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8024dee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024df2:	2b00      	cmp	r3, #0
 8024df4:	f000 8244 	beq.w	8025280 <OBJ_Write+0x6a8>
 8024df8:	7b7b      	ldrb	r3, [r7, #13]
 8024dfa:	b29b      	uxth	r3, r3
 8024dfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8024dfe:	429a      	cmp	r2, r3
 8024e00:	f0c0 823e 	bcc.w	8025280 <OBJ_Write+0x6a8>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 8024e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8024e06:	2b00      	cmp	r3, #0
 8024e08:	d115      	bne.n	8024e36 <OBJ_Write+0x25e>
 8024e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024e0e:	2b07      	cmp	r3, #7
 8024e10:	d011      	beq.n	8024e36 <OBJ_Write+0x25e>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 8024e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e14:	881b      	ldrh	r3, [r3, #0]
 8024e16:	74fb      	strb	r3, [r7, #19]
                        
                        if(maxConfiguredSubindex < NewSubindex0)
 8024e18:	7cfb      	ldrb	r3, [r7, #19]
 8024e1a:	b29b      	uxth	r3, r3
 8024e1c:	8c3a      	ldrh	r2, [r7, #32]
 8024e1e:	429a      	cmp	r2, r3
 8024e20:	d201      	bcs.n	8024e26 <OBJ_Write+0x24e>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 8024e22:	2313      	movs	r3, #19
 8024e24:	e23c      	b.n	80252a0 <OBJ_Write+0x6c8>
                        }

                        /* subindex 0 of an array or record shall be written */
                        pVarPtr[0] = SWAPWORD(pData[0]);
 8024e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e28:	881a      	ldrh	r2, [r3, #0]
 8024e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e2c:	801a      	strh	r2, [r3, #0]
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 8024e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024e30:	3302      	adds	r3, #2
 8024e32:	64bb      	str	r3, [r7, #72]	; 0x48
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
                    {
 8024e34:	e1fd      	b.n	8025232 <OBJ_Write+0x65a>
                           transmitted as UINT16 for a complete access */
                        pData++;
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 8024e36:	69fb      	ldr	r3, [r7, #28]
 8024e38:	881b      	ldrh	r3, [r3, #0]
 8024e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (pEntry->DataType >= 0x700)
 8024e3c:	69fb      	ldr	r3, [r7, #28]
 8024e3e:	881b      	ldrh	r3, [r3, #0]
 8024e40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8024e44:	d315      	bcc.n	8024e72 <OBJ_Write+0x29a>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 8024e46:	69fb      	ldr	r3, [r7, #28]
 8024e48:	885b      	ldrh	r3, [r3, #2]
 8024e4a:	2b08      	cmp	r3, #8
 8024e4c:	d804      	bhi.n	8024e58 <OBJ_Write+0x280>
                            {
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 8024e4e:	69fb      	ldr	r3, [r7, #28]
 8024e50:	885b      	ldrh	r3, [r3, #2]
 8024e52:	332f      	adds	r3, #47	; 0x2f
 8024e54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8024e56:	e00c      	b.n	8024e72 <OBJ_Write+0x29a>
                            }
                            else if ( pEntry->BitLength == 16 )
 8024e58:	69fb      	ldr	r3, [r7, #28]
 8024e5a:	885b      	ldrh	r3, [r3, #2]
 8024e5c:	2b10      	cmp	r3, #16
 8024e5e:	d102      	bne.n	8024e66 <OBJ_Write+0x28e>
                            {
                                dataType = DEFTYPE_UNSIGNED16;
 8024e60:	2306      	movs	r3, #6
 8024e62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8024e64:	e005      	b.n	8024e72 <OBJ_Write+0x29a>
                            }
                            else if ( pEntry->BitLength == 32 )
 8024e66:	69fb      	ldr	r3, [r7, #28]
 8024e68:	885b      	ldrh	r3, [r3, #2]
 8024e6a:	2b20      	cmp	r3, #32
 8024e6c:	d101      	bne.n	8024e72 <OBJ_Write+0x29a>
                            {
                                dataType = DEFTYPE_UNSIGNED32;
 8024e6e:	2307      	movs	r3, #7
 8024e70:	84fb      	strh	r3, [r7, #38]	; 0x26
                            }
                        }

                        switch (dataType)
 8024e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8024e74:	2b11      	cmp	r3, #17
 8024e76:	f000 817b 	beq.w	8025170 <OBJ_Write+0x598>
 8024e7a:	2b11      	cmp	r3, #17
 8024e7c:	dc1e      	bgt.n	8024ebc <OBJ_Write+0x2e4>
 8024e7e:	2b05      	cmp	r3, #5
 8024e80:	d066      	beq.n	8024f50 <OBJ_Write+0x378>
 8024e82:	2b05      	cmp	r3, #5
 8024e84:	dc0d      	bgt.n	8024ea2 <OBJ_Write+0x2ca>
 8024e86:	2b02      	cmp	r3, #2
 8024e88:	dc04      	bgt.n	8024e94 <OBJ_Write+0x2bc>
 8024e8a:	2b01      	cmp	r3, #1
 8024e8c:	da60      	bge.n	8024f50 <OBJ_Write+0x378>
 8024e8e:	2b00      	cmp	r3, #0
 8024e90:	d03b      	beq.n	8024f0a <OBJ_Write+0x332>
 8024e92:	e1cc      	b.n	802522e <OBJ_Write+0x656>
 8024e94:	2b03      	cmp	r3, #3
 8024e96:	f000 80b5 	beq.w	8025004 <OBJ_Write+0x42c>
 8024e9a:	2b04      	cmp	r3, #4
 8024e9c:	f000 8140 	beq.w	8025120 <OBJ_Write+0x548>
 8024ea0:	e1c5      	b.n	802522e <OBJ_Write+0x656>
 8024ea2:	2b08      	cmp	r3, #8
 8024ea4:	dc03      	bgt.n	8024eae <OBJ_Write+0x2d6>
 8024ea6:	2b07      	cmp	r3, #7
 8024ea8:	f280 813a 	bge.w	8025120 <OBJ_Write+0x548>
 8024eac:	e0aa      	b.n	8025004 <OBJ_Write+0x42c>
 8024eae:	2b09      	cmp	r3, #9
 8024eb0:	f000 817c 	beq.w	80251ac <OBJ_Write+0x5d4>
 8024eb4:	2b0b      	cmp	r3, #11
 8024eb6:	f300 81ba 	bgt.w	802522e <OBJ_Write+0x656>
 8024eba:	e19d      	b.n	80251f8 <OBJ_Write+0x620>
 8024ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8024ebe:	d047      	beq.n	8024f50 <OBJ_Write+0x378>
 8024ec0:	2b2d      	cmp	r3, #45	; 0x2d
 8024ec2:	dc11      	bgt.n	8024ee8 <OBJ_Write+0x310>
 8024ec4:	2b1e      	cmp	r3, #30
 8024ec6:	d043      	beq.n	8024f50 <OBJ_Write+0x378>
 8024ec8:	2b1e      	cmp	r3, #30
 8024eca:	dc06      	bgt.n	8024eda <OBJ_Write+0x302>
 8024ecc:	2b15      	cmp	r3, #21
 8024ece:	f000 814f 	beq.w	8025170 <OBJ_Write+0x598>
 8024ed2:	2b1b      	cmp	r3, #27
 8024ed4:	f000 814c 	beq.w	8025170 <OBJ_Write+0x598>
 8024ed8:	e1a9      	b.n	802522e <OBJ_Write+0x656>
 8024eda:	2b1f      	cmp	r3, #31
 8024edc:	f000 8092 	beq.w	8025004 <OBJ_Write+0x42c>
 8024ee0:	2b20      	cmp	r3, #32
 8024ee2:	f000 811d 	beq.w	8025120 <OBJ_Write+0x548>
 8024ee6:	e1a2      	b.n	802522e <OBJ_Write+0x656>
 8024ee8:	2b37      	cmp	r3, #55	; 0x37
 8024eea:	dc08      	bgt.n	8024efe <OBJ_Write+0x326>
 8024eec:	2b30      	cmp	r3, #48	; 0x30
 8024eee:	da2f      	bge.n	8024f50 <OBJ_Write+0x378>
 8024ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8024ef2:	f000 8087 	beq.w	8025004 <OBJ_Write+0x42c>
 8024ef6:	2b2f      	cmp	r3, #47	; 0x2f
 8024ef8:	f000 8112 	beq.w	8025120 <OBJ_Write+0x548>
 8024efc:	e197      	b.n	802522e <OBJ_Write+0x656>
 8024efe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8024f02:	2b03      	cmp	r3, #3
 8024f04:	f200 8193 	bhi.w	802522e <OBJ_Write+0x656>
 8024f08:	e176      	b.n	80251f8 <OBJ_Write+0x620>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 8024f0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	d01a      	beq.n	8024f48 <OBJ_Write+0x370>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 8024f12:	69fb      	ldr	r3, [r7, #28]
 8024f14:	885b      	ldrh	r3, [r3, #2]
 8024f16:	f003 030f 	and.w	r3, r3, #15
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	dd0a      	ble.n	8024f34 <OBJ_Write+0x35c>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8024f1e:	8b3b      	ldrh	r3, [r7, #24]
 8024f20:	69fa      	ldr	r2, [r7, #28]
 8024f22:	8852      	ldrh	r2, [r2, #2]
 8024f24:	4413      	add	r3, r2
 8024f26:	f003 030f 	and.w	r3, r3, #15
 8024f2a:	2b00      	cmp	r3, #0
 8024f2c:	d102      	bne.n	8024f34 <OBJ_Write+0x35c>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 8024f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f30:	3302      	adds	r3, #2
 8024f32:	64bb      	str	r3, [r7, #72]	; 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 8024f34:	69fb      	ldr	r3, [r7, #28]
 8024f36:	885b      	ldrh	r3, [r3, #2]
 8024f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024f3c:	111b      	asrs	r3, r3, #4
 8024f3e:	005b      	lsls	r3, r3, #1
 8024f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024f42:	4413      	add	r3, r2
 8024f44:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 8024f46:	e174      	b.n	8025232 <OBJ_Write+0x65a>
                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8024f48:	2318      	movs	r3, #24
 8024f4a:	e1a9      	b.n	80252a0 <OBJ_Write+0x6c8>
 8024f4c:	1fff2719 	.word	0x1fff2719
                        case    DEFTYPE_INTEGER8:
                        case    DEFTYPE_UNSIGNED8:
                        case    DEFTYPE_BYTE :
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 8024f50:	2300      	movs	r3, #0
 8024f52:	84bb      	strh	r3, [r7, #36]	; 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8024f54:	69fb      	ldr	r3, [r7, #28]
 8024f56:	885b      	ldrh	r3, [r3, #2]
 8024f58:	461a      	mov	r2, r3
 8024f5a:	4ba2      	ldr	r3, [pc, #648]	; (80251e4 <OBJ_Write+0x60c>)
 8024f5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024f60:	461a      	mov	r2, r3
 8024f62:	8b3b      	ldrh	r3, [r7, #24]
 8024f64:	f003 030f 	and.w	r3, r3, #15
 8024f68:	fa02 f303 	lsl.w	r3, r2, r3
 8024f6c:	82fb      	strh	r3, [r7, #22]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 8024f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024f70:	881b      	ldrh	r3, [r3, #0]
 8024f72:	84bb      	strh	r3, [r7, #36]	; 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 8024f74:	8afb      	ldrh	r3, [r7, #22]
 8024f76:	43db      	mvns	r3, r3
 8024f78:	b29a      	uxth	r2, r3
 8024f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024f7c:	4013      	ands	r3, r2
 8024f7e:	b29b      	uxth	r3, r3
 8024f80:	84bb      	strh	r3, [r7, #36]	; 0x24

                            if (bCompleteAccess) 
 8024f82:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8024f86:	2b00      	cmp	r3, #0
 8024f88:	d008      	beq.n	8024f9c <OBJ_Write+0x3c4>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 8024f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f8c:	881a      	ldrh	r2, [r3, #0]
 8024f8e:	8afb      	ldrh	r3, [r7, #22]
 8024f90:	4013      	ands	r3, r2
 8024f92:	b29a      	uxth	r2, r3
 8024f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024f96:	4313      	orrs	r3, r2
 8024f98:	84bb      	strh	r3, [r7, #36]	; 0x24
 8024f9a:	e023      	b.n	8024fe4 <OBJ_Write+0x40c>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 8024f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024f9e:	881b      	ldrh	r3, [r3, #0]
 8024fa0:	461a      	mov	r2, r3
 8024fa2:	69fb      	ldr	r3, [r7, #28]
 8024fa4:	885b      	ldrh	r3, [r3, #2]
 8024fa6:	4619      	mov	r1, r3
 8024fa8:	4b8e      	ldr	r3, [pc, #568]	; (80251e4 <OBJ_Write+0x60c>)
 8024faa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8024fae:	43db      	mvns	r3, r3
 8024fb0:	4013      	ands	r3, r2
 8024fb2:	2b00      	cmp	r3, #0
 8024fb4:	d001      	beq.n	8024fba <OBJ_Write+0x3e2>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 8024fb6:	2312      	movs	r3, #18
 8024fb8:	e172      	b.n	80252a0 <OBJ_Write+0x6c8>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 8024fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024fbc:	881a      	ldrh	r2, [r3, #0]
 8024fbe:	69fb      	ldr	r3, [r7, #28]
 8024fc0:	885b      	ldrh	r3, [r3, #2]
 8024fc2:	4619      	mov	r1, r3
 8024fc4:	4b87      	ldr	r3, [pc, #540]	; (80251e4 <OBJ_Write+0x60c>)
 8024fc6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8024fca:	4013      	ands	r3, r2
 8024fcc:	b29b      	uxth	r3, r3
 8024fce:	461a      	mov	r2, r3
 8024fd0:	8b3b      	ldrh	r3, [r7, #24]
 8024fd2:	f003 030f 	and.w	r3, r3, #15
 8024fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8024fda:	b29a      	uxth	r2, r3
 8024fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024fde:	4313      	orrs	r3, r2
 8024fe0:	b29b      	uxth	r3, r3
 8024fe2:	84bb      	strh	r3, [r7, #36]	; 0x24
                                }
                            }

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 8024fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024fe6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8024fe8:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 8024fea:	8b3b      	ldrh	r3, [r7, #24]
 8024fec:	69fa      	ldr	r2, [r7, #28]
 8024fee:	8852      	ldrh	r2, [r2, #2]
 8024ff0:	4413      	add	r3, r2
 8024ff2:	f003 030f 	and.w	r3, r3, #15
 8024ff6:	2b00      	cmp	r3, #0
 8024ff8:	d103      	bne.n	8025002 <OBJ_Write+0x42a>
                            {
                                /* we have reached the UINT16 border */
                                pData++;
 8024ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024ffc:	3302      	adds	r3, #2
 8024ffe:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                        }
                            break;
 8025000:	e117      	b.n	8025232 <OBJ_Write+0x65a>
 8025002:	e116      	b.n	8025232 <OBJ_Write+0x65a>
                        case    DEFTYPE_INTEGER16:
                        case    DEFTYPE_UNSIGNED16:
                        case    DEFTYPE_BITARR16:
                        case    DEFTYPE_WORD:
                            if(bitOffset & 0xF)
 8025004:	8b3b      	ldrh	r3, [r7, #24]
 8025006:	f003 030f 	and.w	r3, r3, #15
 802500a:	2b00      	cmp	r3, #0
 802500c:	d001      	beq.n	8025012 <OBJ_Write+0x43a>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 802500e:	2305      	movs	r3, #5
 8025010:	e146      	b.n	80252a0 <OBJ_Write+0x6c8>
                            }

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 8025012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025014:	881b      	ldrh	r3, [r3, #0]
 8025016:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 8025018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802501c:	2b00      	cmp	r3, #0
 802501e:	d006      	beq.n	802502e <OBJ_Write+0x456>
 8025020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025022:	881b      	ldrh	r3, [r3, #0]
 8025024:	8aba      	ldrh	r2, [r7, #20]
 8025026:	429a      	cmp	r2, r3
 8025028:	d001      	beq.n	802502e <OBJ_Write+0x456>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 802502a:	231c      	movs	r3, #28
 802502c:	e138      	b.n	80252a0 <OBJ_Write+0x6c8>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 802502e:	89fb      	ldrh	r3, [r7, #14]
 8025030:	f641 420f 	movw	r2, #7183	; 0x1c0f
 8025034:	4293      	cmp	r3, r2
 8025036:	d919      	bls.n	802506c <OBJ_Write+0x494>
 8025038:	89fb      	ldrh	r3, [r7, #14]
 802503a:	f641 422f 	movw	r2, #7215	; 0x1c2f
 802503e:	4293      	cmp	r3, r2
 8025040:	d814      	bhi.n	802506c <OBJ_Write+0x494>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 8025042:	8abb      	ldrh	r3, [r7, #20]
 8025044:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8025048:	d303      	bcc.n	8025052 <OBJ_Write+0x47a>
 802504a:	8abb      	ldrh	r3, [r7, #20]
 802504c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8025050:	d30c      	bcc.n	802506c <OBJ_Write+0x494>
 8025052:	8abb      	ldrh	r3, [r7, #20]
 8025054:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8025058:	d303      	bcc.n	8025062 <OBJ_Write+0x48a>
 802505a:	8abb      	ldrh	r3, [r7, #20]
 802505c:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8025060:	d304      	bcc.n	802506c <OBJ_Write+0x494>
 8025062:	8abb      	ldrh	r3, [r7, #20]
 8025064:	2b00      	cmp	r3, #0
 8025066:	d001      	beq.n	802506c <OBJ_Write+0x494>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8025068:	2312      	movs	r3, #18
 802506a:	e119      	b.n	80252a0 <OBJ_Write+0x6c8>
                                }
                            }

                            if(index == 0x1C32 || index == 0x1C33)
 802506c:	89fb      	ldrh	r3, [r7, #14]
 802506e:	f641 4232 	movw	r2, #7218	; 0x1c32
 8025072:	4293      	cmp	r3, r2
 8025074:	d004      	beq.n	8025080 <OBJ_Write+0x4a8>
 8025076:	89fb      	ldrh	r3, [r7, #14]
 8025078:	f641 4233 	movw	r2, #7219	; 0x1c33
 802507c:	4293      	cmp	r3, r2
 802507e:	d148      	bne.n	8025112 <OBJ_Write+0x53a>
                            {
                               if (i == 1) /* "Synchronisation type" written */
 8025080:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025082:	2b01      	cmp	r3, #1
 8025084:	d117      	bne.n	80250b6 <OBJ_Write+0x4de>
                               {
                                  /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                  if (pVarPtr[0] != u16NewData)
 8025086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025088:	881b      	ldrh	r3, [r3, #0]
 802508a:	8aba      	ldrh	r2, [r7, #20]
 802508c:	429a      	cmp	r2, r3
 802508e:	d00f      	beq.n	80250b0 <OBJ_Write+0x4d8>
                                  {
                                     result = CheckSyncTypeValue(index, u16NewData);
 8025090:	89fa      	ldrh	r2, [r7, #14]
 8025092:	8abb      	ldrh	r3, [r7, #20]
 8025094:	4610      	mov	r0, r2
 8025096:	4619      	mov	r1, r3
 8025098:	f7ff f9f0 	bl	802447c <CheckSyncTypeValue>
 802509c:	4603      	mov	r3, r0
 802509e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                                     if (result != 0)
 80250a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	d002      	beq.n	80250b0 <OBJ_Write+0x4d8>
                                     {
                                        return result;
 80250aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80250ae:	e0f7      	b.n	80252a0 <OBJ_Write+0x6c8>
                                     }
                                  }

                                  /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                  bSyncSetByUser = TRUE;
 80250b0:	4b4d      	ldr	r3, [pc, #308]	; (80251e8 <OBJ_Write+0x610>)
 80250b2:	2201      	movs	r2, #1
 80250b4:	701a      	strb	r2, [r3, #0]
                               }

/*ECATCHANGE_START(V5.12) ECAT1*/
                               if (i == 8) /* "Get Cycle Time" written*/
 80250b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80250b8:	2b08      	cmp	r3, #8
 80250ba:	d12a      	bne.n	8025112 <OBJ_Write+0x53a>
                               {

                                   sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 80250bc:	4b4b      	ldr	r3, [pc, #300]	; (80251ec <OBJ_Write+0x614>)
 80250be:	2200      	movs	r2, #0
 80250c0:	615a      	str	r2, [r3, #20]
                                   sSyncManOutPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 80250c2:	4b4a      	ldr	r3, [pc, #296]	; (80251ec <OBJ_Write+0x614>)
 80250c4:	4a4a      	ldr	r2, [pc, #296]	; (80251f0 <OBJ_Write+0x618>)
 80250c6:	611a      	str	r2, [r3, #16]
                                   sSyncManOutPar.u32CycleTime = 0;
 80250c8:	4b48      	ldr	r3, [pc, #288]	; (80251ec <OBJ_Write+0x614>)
 80250ca:	2200      	movs	r2, #0
 80250cc:	605a      	str	r2, [r3, #4]

                                   sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 80250ce:	4b49      	ldr	r3, [pc, #292]	; (80251f4 <OBJ_Write+0x61c>)
 80250d0:	2200      	movs	r2, #0
 80250d2:	615a      	str	r2, [r3, #20]
                                   sSyncManInPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 80250d4:	4b47      	ldr	r3, [pc, #284]	; (80251f4 <OBJ_Write+0x61c>)
 80250d6:	4a46      	ldr	r2, [pc, #280]	; (80251f0 <OBJ_Write+0x618>)
 80250d8:	611a      	str	r2, [r3, #16]
                                   sSyncManInPar.u32CycleTime = 0;
 80250da:	4b46      	ldr	r3, [pc, #280]	; (80251f4 <OBJ_Write+0x61c>)
 80250dc:	2200      	movs	r2, #0
 80250de:	605a      	str	r2, [r3, #4]


                                  if ((u16NewData & 0x2) == 0x2)
 80250e0:	8abb      	ldrh	r3, [r7, #20]
 80250e2:	f003 0302 	and.w	r3, r3, #2
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	d013      	beq.n	8025112 <OBJ_Write+0x53a>
                                  {
                                     /* reset the error counters*/
                                     sSyncManOutPar.u16CycleExceededCounter = 0;
 80250ea:	4b40      	ldr	r3, [pc, #256]	; (80251ec <OBJ_Write+0x614>)
 80250ec:	2200      	movs	r2, #0
 80250ee:	855a      	strh	r2, [r3, #42]	; 0x2a
                                     sSyncManOutPar.u16SmEventMissedCounter = 0;
 80250f0:	4b3e      	ldr	r3, [pc, #248]	; (80251ec <OBJ_Write+0x614>)
 80250f2:	2200      	movs	r2, #0
 80250f4:	851a      	strh	r2, [r3, #40]	; 0x28
                                     sSyncManOutPar.u8SyncError = 0;
 80250f6:	4b3d      	ldr	r3, [pc, #244]	; (80251ec <OBJ_Write+0x614>)
 80250f8:	2200      	movs	r2, #0
 80250fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                                     sSyncManInPar.u16CycleExceededCounter = 0;
 80250fe:	4b3d      	ldr	r3, [pc, #244]	; (80251f4 <OBJ_Write+0x61c>)
 8025100:	2200      	movs	r2, #0
 8025102:	855a      	strh	r2, [r3, #42]	; 0x2a
                                     sSyncManInPar.u16SmEventMissedCounter = 0;
 8025104:	4b3b      	ldr	r3, [pc, #236]	; (80251f4 <OBJ_Write+0x61c>)
 8025106:	2200      	movs	r2, #0
 8025108:	851a      	strh	r2, [r3, #40]	; 0x28
                                     sSyncManInPar.u8SyncError = 0;
 802510a:	4b3a      	ldr	r3, [pc, #232]	; (80251f4 <OBJ_Write+0x61c>)
 802510c:	2200      	movs	r2, #0
 802510e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                  }
                               } /* Subindex 8 written*/
/*ECATCHANGE_END(V5.12) ECAT1*/
                            }

                            pVarPtr[0] = u16NewData;
 8025112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025114:	8aba      	ldrh	r2, [r7, #20]
 8025116:	801a      	strh	r2, [r3, #0]
                            pData++;
 8025118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802511a:	3302      	adds	r3, #2
 802511c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 802511e:	e088      	b.n	8025232 <OBJ_Write+0x65a>
                        case    DEFTYPE_UNSIGNED32:
                        case    DEFTYPE_INTEGER32:
                        case    DEFTYPE_REAL32:
                        case    DEFTYPE_BITARR32:
                        case    DEFTYPE_DWORD:
                            if(bitOffset & 0xF)
 8025120:	8b3b      	ldrh	r3, [r7, #24]
 8025122:	f003 030f 	and.w	r3, r3, #15
 8025126:	2b00      	cmp	r3, #0
 8025128:	d001      	beq.n	802512e <OBJ_Write+0x556>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 802512a:	2305      	movs	r3, #5
 802512c:	e0b8      	b.n	80252a0 <OBJ_Write+0x6c8>
                            }
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 802512e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8025132:	2b00      	cmp	r3, #0
 8025134:	d00f      	beq.n	8025156 <OBJ_Write+0x57e>
                                ((pVarPtr[0] != pData[0])
 8025136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025138:	881a      	ldrh	r2, [r3, #0]
 802513a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802513c:	881b      	ldrh	r3, [r3, #0]
                            }
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 802513e:	429a      	cmp	r2, r3
 8025140:	d107      	bne.n	8025152 <OBJ_Write+0x57a>
                                ((pVarPtr[0] != pData[0])
                                || (pVarPtr[1] != pData[1])))
 8025142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025144:	3302      	adds	r3, #2
 8025146:	881a      	ldrh	r2, [r3, #0]
 8025148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802514a:	3302      	adds	r3, #2
 802514c:	881b      	ldrh	r3, [r3, #0]
 802514e:	429a      	cmp	r2, r3
 8025150:	d001      	beq.n	8025156 <OBJ_Write+0x57e>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 8025152:	231c      	movs	r3, #28
 8025154:	e0a4      	b.n	80252a0 <OBJ_Write+0x6c8>
                            }

                            pVarPtr[0] = pData[0];
 8025156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025158:	881a      	ldrh	r2, [r3, #0]
 802515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802515c:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 802515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025160:	3302      	adds	r3, #2
 8025162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025164:	8852      	ldrh	r2, [r2, #2]
 8025166:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 8025168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802516a:	3304      	adds	r3, #4
 802516c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 802516e:	e060      	b.n	8025232 <OBJ_Write+0x65a>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
                            if(bitOffset & 0xF)
 8025170:	8b3b      	ldrh	r3, [r7, #24]
 8025172:	f003 030f 	and.w	r3, r3, #15
 8025176:	2b00      	cmp	r3, #0
 8025178:	d001      	beq.n	802517e <OBJ_Write+0x5a6>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 802517a:	2305      	movs	r3, #5
 802517c:	e090      	b.n	80252a0 <OBJ_Write+0x6c8>
                            }
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 802517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025180:	881a      	ldrh	r2, [r3, #0]
 8025182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025184:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8025186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025188:	3302      	adds	r3, #2
 802518a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802518c:	8852      	ldrh	r2, [r2, #2]
 802518e:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 8025190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025192:	3304      	adds	r3, #4
 8025194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025196:	8892      	ldrh	r2, [r2, #4]
 8025198:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 802519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802519c:	3306      	adds	r3, #6
 802519e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80251a0:	88d2      	ldrh	r2, [r2, #6]
 80251a2:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 80251a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80251a6:	3308      	adds	r3, #8
 80251a8:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 80251aa:	e042      	b.n	8025232 <OBJ_Write+0x65a>
                        case    DEFTYPE_VISIBLESTRING:
                            if(bitOffset & 0xF)
 80251ac:	8b3b      	ldrh	r3, [r7, #24]
 80251ae:	f003 030f 	and.w	r3, r3, #15
 80251b2:	2b00      	cmp	r3, #0
 80251b4:	d001      	beq.n	80251ba <OBJ_Write+0x5e2>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 80251b6:	2305      	movs	r3, #5
 80251b8:	e072      	b.n	80252a0 <OBJ_Write+0x6c8>
                            }

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 80251ba:	69fb      	ldr	r3, [r7, #28]
 80251bc:	885b      	ldrh	r3, [r3, #2]
 80251be:	3307      	adds	r3, #7
 80251c0:	10db      	asrs	r3, r3, #3
 80251c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80251c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80251c6:	461a      	mov	r2, r3
 80251c8:	f004 fe40 	bl	8029e4c <memcpy>

                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 80251cc:	69fb      	ldr	r3, [r7, #28]
 80251ce:	885b      	ldrh	r3, [r3, #2]
 80251d0:	f023 030f 	bic.w	r3, r3, #15
 80251d4:	330f      	adds	r3, #15
 80251d6:	111b      	asrs	r3, r3, #4
 80251d8:	005b      	lsls	r3, r3, #1
 80251da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80251dc:	4413      	add	r3, r2
 80251de:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 80251e0:	e027      	b.n	8025232 <OBJ_Write+0x65a>
 80251e2:	bf00      	nop
 80251e4:	0802a970 	.word	0x0802a970
 80251e8:	1fff287c 	.word	0x1fff287c
 80251ec:	1fff2838 	.word	0x1fff2838
 80251f0:	0001e848 	.word	0x0001e848
 80251f4:	1fff27f4 	.word	0x1fff27f4
                        case    DEFTYPE_UNICODE_STRING:
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
                            if(bitOffset & 0xF)
 80251f8:	8b3b      	ldrh	r3, [r7, #24]
 80251fa:	f003 030f 	and.w	r3, r3, #15
 80251fe:	2b00      	cmp	r3, #0
 8025200:	d001      	beq.n	8025206 <OBJ_Write+0x62e>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8025202:	2305      	movs	r3, #5
 8025204:	e04c      	b.n	80252a0 <OBJ_Write+0x6c8>
                            }

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8025206:	69fb      	ldr	r3, [r7, #28]
 8025208:	885b      	ldrh	r3, [r3, #2]
 802520a:	3307      	adds	r3, #7
 802520c:	10db      	asrs	r3, r3, #3
 802520e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025210:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8025212:	461a      	mov	r2, r3
 8025214:	f004 fe1a 	bl	8029e4c <memcpy>
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 8025218:	69fb      	ldr	r3, [r7, #28]
 802521a:	885b      	ldrh	r3, [r3, #2]
 802521c:	f023 030f 	bic.w	r3, r3, #15
 8025220:	330f      	adds	r3, #15
 8025222:	111b      	asrs	r3, r3, #4
 8025224:	005b      	lsls	r3, r3, #1
 8025226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025228:	4413      	add	r3, r2
 802522a:	64bb      	str	r3, [r7, #72]	; 0x48

                            break;
 802522c:	e001      	b.n	8025232 <OBJ_Write+0x65a>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 802522e:	2318      	movs	r3, #24
 8025230:	e036      	b.n	80252a0 <OBJ_Write+0x6c8>
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 8025232:	2301      	movs	r3, #1
 8025234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8025238:	e022      	b.n	8025280 <OBJ_Write+0x6a8>

                }
            }
            else
            {
                if(i == 0)
 802523a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802523c:	2b00      	cmp	r3, #0
 802523e:	d103      	bne.n	8025248 <OBJ_Write+0x670>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 8025240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025242:	3302      	adds	r3, #2
 8025244:	64bb      	str	r3, [r7, #72]	; 0x48
 8025246:	e018      	b.n	802527a <OBJ_Write+0x6a2>
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8025248:	69fb      	ldr	r3, [r7, #28]
 802524a:	885b      	ldrh	r3, [r3, #2]
 802524c:	f003 030f 	and.w	r3, r3, #15
 8025250:	2b00      	cmp	r3, #0
 8025252:	dd0a      	ble.n	802526a <OBJ_Write+0x692>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8025254:	8b3b      	ldrh	r3, [r7, #24]
 8025256:	69fa      	ldr	r2, [r7, #28]
 8025258:	8852      	ldrh	r2, [r2, #2]
 802525a:	4413      	add	r3, r2
 802525c:	f003 030f 	and.w	r3, r3, #15
 8025260:	2b00      	cmp	r3, #0
 8025262:	d102      	bne.n	802526a <OBJ_Write+0x692>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8025264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025266:	3302      	adds	r3, #2
 8025268:	64bb      	str	r3, [r7, #72]	; 0x48
                    }

                    /*increment WORD offset*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 802526a:	69fb      	ldr	r3, [r7, #28]
 802526c:	885b      	ldrh	r3, [r3, #2]
 802526e:	091b      	lsrs	r3, r3, #4
 8025270:	b29b      	uxth	r3, r3
 8025272:	005b      	lsls	r3, r3, #1
 8025274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8025276:	4413      	add	r3, r2
 8025278:	64bb      	str	r3, [r7, #72]	; 0x48
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 802527a:	2318      	movs	r3, #24
 802527c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        {
           return 0; //no error
        }

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 8025280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8025282:	3301      	adds	r3, #1
 8025284:	86fb      	strh	r3, [r7, #54]	; 0x36
 8025286:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8025288:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802528a:	429a      	cmp	r2, r3
 802528c:	f67f ad7d 	bls.w	8024d8a <OBJ_Write+0x1b2>
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
            }
        }

        if (bWritten == 0)
 8025290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8025294:	2b00      	cmp	r3, #0
 8025296:	d102      	bne.n	802529e <OBJ_Write+0x6c6>
        {
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 8025298:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802529c:	e000      	b.n	80252a0 <OBJ_Write+0x6c8>
        }
    }

    return 0;
 802529e:	2300      	movs	r3, #0
}
 80252a0:	4618      	mov	r0, r3
 80252a2:	373c      	adds	r7, #60	; 0x3c
 80252a4:	46bd      	mov	sp, r7
 80252a6:	bd90      	pop	{r4, r7, pc}

080252a8 <SdoDownloadSegmentInd>:
            the data will be written to the object dictionary. The
            function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd( TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 80252a8:	b5b0      	push	{r4, r5, r7, lr}
 80252aa:	b088      	sub	sp, #32
 80252ac:	af02      	add	r7, sp, #8
 80252ae:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 80252b0:	2300      	movs	r3, #0
 80252b2:	75fb      	strb	r3, [r7, #23]
    UINT32 bytesToSave = 0;
 80252b4:	2300      	movs	r3, #0
 80252b6:	613b      	str	r3, [r7, #16]

/* ECATCHANGE_START(V5.12) ECAT2*/
    if ( SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	7a1b      	ldrb	r3, [r3, #8]
 80252bc:	f003 0310 	and.w	r3, r3, #16
 80252c0:	4a86      	ldr	r2, [pc, #536]	; (80254dc <SdoDownloadSegmentInd+0x234>)
 80252c2:	7812      	ldrb	r2, [r2, #0]
 80252c4:	4293      	cmp	r3, r2
 80252c6:	d102      	bne.n	80252ce <SdoDownloadSegmentInd+0x26>
/* ECATCHANGE_END(V5.12) ECAT2*/
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 80252c8:	2301      	movs	r3, #1
 80252ca:	75fb      	strb	r3, [r7, #23]
 80252cc:	e0bb      	b.n	8025446 <SdoDownloadSegmentInd+0x19e>
    }
    else
    {
        /* maxData contains the maximum data to be received with a SDO-DownloadSegment */
        UINT16 maxData =    u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 80252ce:	4b84      	ldr	r3, [pc, #528]	; (80254e0 <SdoDownloadSegmentInd+0x238>)
 80252d0:	881b      	ldrh	r3, [r3, #0]
 80252d2:	3b09      	subs	r3, #9
 80252d4:	81fb      	strh	r3, [r7, #14]
        /* the new toggle bit is stored in bSdoSegLastToggle */
        /* ECATCHANGE_START(V5.12) ECAT2*/
        bSdoSegLastToggle = SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE);
 80252d6:	687b      	ldr	r3, [r7, #4]
 80252d8:	7a1b      	ldrb	r3, [r3, #8]
 80252da:	f003 0310 	and.w	r3, r3, #16
 80252de:	b2da      	uxtb	r2, r3
 80252e0:	4b7e      	ldr	r3, [pc, #504]	; (80254dc <SdoDownloadSegmentInd+0x234>)
 80252e2:	701a      	strb	r2, [r3, #0]
        /* ECATCHANGE_END(V5.12) ECAT2*/

        /* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
           in that case a buffer for the received data was allocated in SDOS_SdoInd before */
        if ( pSdoSegData )
 80252e4:	4b7f      	ldr	r3, [pc, #508]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 80252e6:	681b      	ldr	r3, [r3, #0]
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	f000 80aa 	beq.w	8025442 <SdoDownloadSegmentInd+0x19a>
        {
            /* bytesToSave contains the remaining data with this and maybe the following
               SDO-Download Segment services */
            bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 80252ee:	4b7e      	ldr	r3, [pc, #504]	; (80254e8 <SdoDownloadSegmentInd+0x240>)
 80252f0:	681a      	ldr	r2, [r3, #0]
 80252f2:	4b7e      	ldr	r3, [pc, #504]	; (80254ec <SdoDownloadSegmentInd+0x244>)
 80252f4:	681b      	ldr	r3, [r3, #0]
 80252f6:	1ad3      	subs	r3, r2, r3
 80252f8:	613b      	str	r3, [r7, #16]

            if ( pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS )
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	7a1b      	ldrb	r3, [r3, #8]
 80252fe:	f003 0301 	and.w	r3, r3, #1
 8025302:	2b00      	cmp	r3, #0
 8025304:	d02c      	beq.n	8025360 <SdoDownloadSegmentInd+0xb8>
            {
                /* the last segment is received, check if the length of the remaining data is the
                   same as the length of the received data */
                if ( bytesToSave <= maxData )
 8025306:	89fa      	ldrh	r2, [r7, #14]
 8025308:	693b      	ldr	r3, [r7, #16]
 802530a:	429a      	cmp	r2, r3
 802530c:	d325      	bcc.n	802535a <SdoDownloadSegmentInd+0xb2>
                {
                    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 802530e:	687b      	ldr	r3, [r7, #4]
 8025310:	881b      	ldrh	r3, [r3, #0]
 8025312:	81bb      	strh	r3, [r7, #12]

                    /* for the check it is distinguished if the remaining bytes are less than 8 (in that
                       case 7 data bytes were sent and the SDO-Download Segment header contains the information
                        how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
                        and the SDO-Download Segment-Headerbyte is ignored */
                    if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8025314:	89bb      	ldrh	r3, [r7, #12]
 8025316:	3b03      	subs	r3, #3
 8025318:	461a      	mov	r2, r3
 802531a:	693b      	ldr	r3, [r7, #16]
 802531c:	429a      	cmp	r2, r3
 802531e:	d30c      	bcc.n	802533a <SdoDownloadSegmentInd+0x92>
                         &&( bytesToSave == ((UINT16) (MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))) )
 8025320:	687b      	ldr	r3, [r7, #4]
 8025322:	7a1b      	ldrb	r3, [r3, #8]
 8025324:	f003 030e 	and.w	r3, r3, #14
 8025328:	105b      	asrs	r3, r3, #1
 802532a:	b29b      	uxth	r3, r3
 802532c:	f1c3 0307 	rsb	r3, r3, #7
 8025330:	b29b      	uxth	r3, r3
 8025332:	461a      	mov	r2, r3
 8025334:	693b      	ldr	r3, [r7, #16]
 8025336:	429a      	cmp	r2, r3
 8025338:	d008      	beq.n	802534c <SdoDownloadSegmentInd+0xa4>
                          )
                        ||( ( bytesToSave > MIN_SEGMENTED_DATA )
 802533a:	693b      	ldr	r3, [r7, #16]
 802533c:	2b07      	cmp	r3, #7
 802533e:	d909      	bls.n	8025354 <SdoDownloadSegmentInd+0xac>
                        && (bytesToSave == (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8025340:	89bb      	ldrh	r3, [r7, #12]
 8025342:	3b03      	subs	r3, #3
 8025344:	461a      	mov	r2, r3
 8025346:	693b      	ldr	r3, [r7, #16]
 8025348:	429a      	cmp	r2, r3
 802534a:	d103      	bne.n	8025354 <SdoDownloadSegmentInd+0xac>
                        ) )
                    {
                        /* length is correct */
                        bSdoSegFollows = FALSE;
 802534c:	4b68      	ldr	r3, [pc, #416]	; (80254f0 <SdoDownloadSegmentInd+0x248>)
 802534e:	2200      	movs	r2, #0
 8025350:	701a      	strb	r2, [r3, #0]
 8025352:	e011      	b.n	8025378 <SdoDownloadSegmentInd+0xd0>
                    }
                    else
                    {
                        abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8025354:	230e      	movs	r3, #14
 8025356:	75fb      	strb	r3, [r7, #23]
 8025358:	e00e      	b.n	8025378 <SdoDownloadSegmentInd+0xd0>
                    }
                }
                else
                {
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 802535a:	230e      	movs	r3, #14
 802535c:	75fb      	strb	r3, [r7, #23]
 802535e:	e00b      	b.n	8025378 <SdoDownloadSegmentInd+0xd0>
                }
            }
            else
            {
                /* its not the last segment */
                bSdoSegFollows = TRUE;
 8025360:	4b63      	ldr	r3, [pc, #396]	; (80254f0 <SdoDownloadSegmentInd+0x248>)
 8025362:	2201      	movs	r2, #1
 8025364:	701a      	strb	r2, [r3, #0]
                /* we have to check if we expect less bytes than the maximum size which can be send with a single
                   SDO Download Segment */
                if ( bytesToSave <= maxData )
 8025366:	89fa      	ldrh	r2, [r7, #14]
 8025368:	693b      	ldr	r3, [r7, #16]
 802536a:	429a      	cmp	r2, r3
 802536c:	d302      	bcc.n	8025374 <SdoDownloadSegmentInd+0xcc>
                {
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 802536e:	230e      	movs	r3, #14
 8025370:	75fb      	strb	r3, [r7, #23]
 8025372:	e001      	b.n	8025378 <SdoDownloadSegmentInd+0xd0>
                }
                else
                {
                    /* length is okay, bytesToSave contains the data size to be copied */
                    bytesToSave = maxData;
 8025374:	89fb      	ldrh	r3, [r7, #14]
 8025376:	613b      	str	r3, [r7, #16]
                }
            }

            if ( abort == 0 )
 8025378:	7dfb      	ldrb	r3, [r7, #23]
 802537a:	2b00      	cmp	r3, #0
 802537c:	d163      	bne.n	8025446 <SdoDownloadSegmentInd+0x19e>
            {
                /* the received data is copied in the buffer */
                MBXMEMCPY( ((UINT8*)pSdoSegData) + (nSdoSegBytesToHandle), pSdoInd->SdoHeader.Data, bytesToSave ); 
 802537e:	4b59      	ldr	r3, [pc, #356]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 8025380:	681a      	ldr	r2, [r3, #0]
 8025382:	4b5a      	ldr	r3, [pc, #360]	; (80254ec <SdoDownloadSegmentInd+0x244>)
 8025384:	681b      	ldr	r3, [r3, #0]
 8025386:	441a      	add	r2, r3
 8025388:	687b      	ldr	r3, [r7, #4]
 802538a:	3309      	adds	r3, #9
 802538c:	4610      	mov	r0, r2
 802538e:	4619      	mov	r1, r3
 8025390:	693a      	ldr	r2, [r7, #16]
 8025392:	f004 fd5b 	bl	8029e4c <memcpy>

                if ( bSdoSegFollows == FALSE    )
 8025396:	4b56      	ldr	r3, [pc, #344]	; (80254f0 <SdoDownloadSegmentInd+0x248>)
 8025398:	781b      	ldrb	r3, [r3, #0]
 802539a:	2b00      	cmp	r3, #0
 802539c:	d153      	bne.n	8025446 <SdoDownloadSegmentInd+0x19e>
                {
                    /* it was the last segment, OBJ_Write will called to make the Write-operation */
                    abort = OBJ_Write( nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess );
 802539e:	4b55      	ldr	r3, [pc, #340]	; (80254f4 <SdoDownloadSegmentInd+0x24c>)
 80253a0:	8818      	ldrh	r0, [r3, #0]
 80253a2:	4b55      	ldr	r3, [pc, #340]	; (80254f8 <SdoDownloadSegmentInd+0x250>)
 80253a4:	7819      	ldrb	r1, [r3, #0]
 80253a6:	4b50      	ldr	r3, [pc, #320]	; (80254e8 <SdoDownloadSegmentInd+0x240>)
 80253a8:	681d      	ldr	r5, [r3, #0]
 80253aa:	4b54      	ldr	r3, [pc, #336]	; (80254fc <SdoDownloadSegmentInd+0x254>)
 80253ac:	681c      	ldr	r4, [r3, #0]
 80253ae:	4b4d      	ldr	r3, [pc, #308]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 80253b0:	681a      	ldr	r2, [r3, #0]
 80253b2:	4b53      	ldr	r3, [pc, #332]	; (8025500 <SdoDownloadSegmentInd+0x258>)
 80253b4:	781b      	ldrb	r3, [r3, #0]
 80253b6:	9200      	str	r2, [sp, #0]
 80253b8:	9301      	str	r3, [sp, #4]
 80253ba:	462a      	mov	r2, r5
 80253bc:	4623      	mov	r3, r4
 80253be:	f7ff fc0b 	bl	8024bd8 <OBJ_Write>
 80253c2:	4603      	mov	r3, r0
 80253c4:	75fb      	strb	r3, [r7, #23]
                    if ( abort == ABORTIDX_WORKING )
 80253c6:	7dfb      	ldrb	r3, [r7, #23]
 80253c8:	2bff      	cmp	r3, #255	; 0xff
 80253ca:	d131      	bne.n	8025430 <SdoDownloadSegmentInd+0x188>
                    {
                        /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                        u8PendingSdo = SDO_PENDING_SEG_WRITE;
 80253cc:	4b4d      	ldr	r3, [pc, #308]	; (8025504 <SdoDownloadSegmentInd+0x25c>)
 80253ce:	2202      	movs	r2, #2
 80253d0:	701a      	strb	r2, [r3, #0]
                        bStoreCompleteAccess = bSdoSegAccess;
 80253d2:	4b4b      	ldr	r3, [pc, #300]	; (8025500 <SdoDownloadSegmentInd+0x258>)
 80253d4:	781b      	ldrb	r3, [r3, #0]
 80253d6:	2b00      	cmp	r3, #0
 80253d8:	bf14      	ite	ne
 80253da:	2301      	movne	r3, #1
 80253dc:	2300      	moveq	r3, #0
 80253de:	b2da      	uxtb	r2, r3
 80253e0:	4b49      	ldr	r3, [pc, #292]	; (8025508 <SdoDownloadSegmentInd+0x260>)
 80253e2:	701a      	strb	r2, [r3, #0]
                        u8StoreSubindex = nSdoSegSubindex;
 80253e4:	4b44      	ldr	r3, [pc, #272]	; (80254f8 <SdoDownloadSegmentInd+0x250>)
 80253e6:	781a      	ldrb	r2, [r3, #0]
 80253e8:	4b48      	ldr	r3, [pc, #288]	; (802550c <SdoDownloadSegmentInd+0x264>)
 80253ea:	701a      	strb	r2, [r3, #0]
                        u16StoreIndex = nSdoSegIndex;
 80253ec:	4b41      	ldr	r3, [pc, #260]	; (80254f4 <SdoDownloadSegmentInd+0x24c>)
 80253ee:	881a      	ldrh	r2, [r3, #0]
 80253f0:	4b47      	ldr	r3, [pc, #284]	; (8025510 <SdoDownloadSegmentInd+0x268>)
 80253f2:	801a      	strh	r2, [r3, #0]
                        u32StoreDataSize = nSdoSegCompleteSize;
 80253f4:	4b3c      	ldr	r3, [pc, #240]	; (80254e8 <SdoDownloadSegmentInd+0x240>)
 80253f6:	681b      	ldr	r3, [r3, #0]
 80253f8:	4a46      	ldr	r2, [pc, #280]	; (8025514 <SdoDownloadSegmentInd+0x26c>)
 80253fa:	6013      	str	r3, [r2, #0]
                        pStoreData = pSdoSegData;
 80253fc:	4b39      	ldr	r3, [pc, #228]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 80253fe:	681b      	ldr	r3, [r3, #0]
 8025400:	4a45      	ldr	r2, [pc, #276]	; (8025518 <SdoDownloadSegmentInd+0x270>)
 8025402:	6013      	str	r3, [r2, #0]

                        pSdoPendFunc = pSdoSegObjEntry->Write;
 8025404:	4b3d      	ldr	r3, [pc, #244]	; (80254fc <SdoDownloadSegmentInd+0x254>)
 8025406:	681b      	ldr	r3, [r3, #0]
 8025408:	6a1b      	ldr	r3, [r3, #32]
 802540a:	4a44      	ldr	r2, [pc, #272]	; (802551c <SdoDownloadSegmentInd+0x274>)
 802540c:	6013      	str	r3, [r2, #0]

                        bSdoInWork = TRUE;
 802540e:	4b44      	ldr	r3, [pc, #272]	; (8025520 <SdoDownloadSegmentInd+0x278>)
 8025410:	2201      	movs	r2, #1
 8025412:	701a      	strb	r2, [r3, #0]
                        pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 8025414:	4a43      	ldr	r2, [pc, #268]	; (8025524 <SdoDownloadSegmentInd+0x27c>)
 8025416:	687b      	ldr	r3, [r7, #4]
 8025418:	6013      	str	r3, [r2, #0]

                        bSdoSegFollows = FALSE;
 802541a:	4b35      	ldr	r3, [pc, #212]	; (80254f0 <SdoDownloadSegmentInd+0x248>)
 802541c:	2200      	movs	r2, #0
 802541e:	701a      	strb	r2, [r3, #0]
                        nSdoSegService    = 0;
 8025420:	4b41      	ldr	r3, [pc, #260]	; (8025528 <SdoDownloadSegmentInd+0x280>)
 8025422:	2200      	movs	r2, #0
 8025424:	701a      	strb	r2, [r3, #0]
                        nSdoSegBytesToHandle = 0;
 8025426:	4b31      	ldr	r3, [pc, #196]	; (80254ec <SdoDownloadSegmentInd+0x244>)
 8025428:	2200      	movs	r2, #0
 802542a:	601a      	str	r2, [r3, #0]

                        return ABORTIDX_WORKING;
 802542c:	23ff      	movs	r3, #255	; 0xff
 802542e:	e051      	b.n	80254d4 <SdoDownloadSegmentInd+0x22c>
                    }
                    else
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8025430:	4b2c      	ldr	r3, [pc, #176]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 8025432:	681b      	ldr	r3, [r3, #0]
 8025434:	4618      	mov	r0, r3
 8025436:	f004 fcf1 	bl	8029e1c <free>
                        pSdoSegData = NULL;
 802543a:	4b2a      	ldr	r3, [pc, #168]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 802543c:	2200      	movs	r2, #0
 802543e:	601a      	str	r2, [r3, #0]
 8025440:	e001      	b.n	8025446 <SdoDownloadSegmentInd+0x19e>
                }
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8025442:	2303      	movs	r3, #3
 8025444:	75fb      	strb	r3, [r7, #23]
        }
    }

    if ( abort == 0)
 8025446:	7dfb      	ldrb	r3, [r7, #23]
 8025448:	2b00      	cmp	r3, #0
 802544a:	d12d      	bne.n	80254a8 <SdoDownloadSegmentInd+0x200>
    {
        /* send the SDO Download Segment response */
        pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 802544c:	687b      	ldr	r3, [r7, #4]
 802544e:	220a      	movs	r2, #10
 8025450:	801a      	strh	r2, [r3, #0]
        pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8025452:	687b      	ldr	r3, [r7, #4]
 8025454:	88db      	ldrh	r3, [r3, #6]
 8025456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802545a:	b29a      	uxth	r2, r3
 802545c:	687b      	ldr	r3, [r7, #4]
 802545e:	80da      	strh	r2, [r3, #6]
        pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	88db      	ldrh	r3, [r3, #6]
 8025464:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8025468:	b29a      	uxth	r2, r3
 802546a:	687b      	ldr	r3, [r7, #4]
 802546c:	80da      	strh	r2, [r3, #6]
        /* the SDO Download Segment header depends if it was the last segment or not */
/* ECATCHANGE_START(V5.12) ECAT2*/
        if ( bSdoSegLastToggle )
 802546e:	4b1b      	ldr	r3, [pc, #108]	; (80254dc <SdoDownloadSegmentInd+0x234>)
 8025470:	781b      	ldrb	r3, [r3, #0]
 8025472:	2b00      	cmp	r3, #0
 8025474:	d003      	beq.n	802547e <SdoDownloadSegmentInd+0x1d6>
        {
           pSdoInd->SdoHeader.SegHeader        = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES|SEGHEADER_TOGGLE);
 8025476:	687b      	ldr	r3, [r7, #4]
 8025478:	2230      	movs	r2, #48	; 0x30
 802547a:	721a      	strb	r2, [r3, #8]
 802547c:	e002      	b.n	8025484 <SdoDownloadSegmentInd+0x1dc>
        }
        else
        {
           pSdoInd->SdoHeader.SegHeader        = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES);
 802547e:	687b      	ldr	r3, [r7, #4]
 8025480:	2220      	movs	r2, #32
 8025482:	721a      	strb	r2, [r3, #8]
        }
/* ECATCHANGE_END(V5.12) ECAT2*/
        
        if ( bSdoSegFollows == TRUE )
 8025484:	4b1a      	ldr	r3, [pc, #104]	; (80254f0 <SdoDownloadSegmentInd+0x248>)
 8025486:	781b      	ldrb	r3, [r3, #0]
 8025488:	2b01      	cmp	r3, #1
 802548a:	d106      	bne.n	802549a <SdoDownloadSegmentInd+0x1f2>
        {
            /* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
            nSdoSegBytesToHandle += bytesToSave;
 802548c:	4b17      	ldr	r3, [pc, #92]	; (80254ec <SdoDownloadSegmentInd+0x244>)
 802548e:	681a      	ldr	r2, [r3, #0]
 8025490:	693b      	ldr	r3, [r7, #16]
 8025492:	4413      	add	r3, r2
 8025494:	4a15      	ldr	r2, [pc, #84]	; (80254ec <SdoDownloadSegmentInd+0x244>)
 8025496:	6013      	str	r3, [r2, #0]
 8025498:	e01b      	b.n	80254d2 <SdoDownloadSegmentInd+0x22a>
        }
        else
        {
            /* the last segment was received, the variables are reset */
            nSdoSegBytesToHandle = 0;
 802549a:	4b14      	ldr	r3, [pc, #80]	; (80254ec <SdoDownloadSegmentInd+0x244>)
 802549c:	2200      	movs	r2, #0
 802549e:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 80254a0:	4b21      	ldr	r3, [pc, #132]	; (8025528 <SdoDownloadSegmentInd+0x280>)
 80254a2:	2200      	movs	r2, #0
 80254a4:	701a      	strb	r2, [r3, #0]
 80254a6:	e014      	b.n	80254d2 <SdoDownloadSegmentInd+0x22a>
        }
    }
    else 
    {
        /* the Abort-Response will be sent in SDOS_SdoInd*/
        bSdoSegFollows = FALSE;
 80254a8:	4b11      	ldr	r3, [pc, #68]	; (80254f0 <SdoDownloadSegmentInd+0x248>)
 80254aa:	2200      	movs	r2, #0
 80254ac:	701a      	strb	r2, [r3, #0]
        nSdoSegService    = 0;
 80254ae:	4b1e      	ldr	r3, [pc, #120]	; (8025528 <SdoDownloadSegmentInd+0x280>)
 80254b0:	2200      	movs	r2, #0
 80254b2:	701a      	strb	r2, [r3, #0]
        if (pSdoSegData)
 80254b4:	4b0b      	ldr	r3, [pc, #44]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 80254b6:	681b      	ldr	r3, [r3, #0]
 80254b8:	2b00      	cmp	r3, #0
 80254ba:	d007      	beq.n	80254cc <SdoDownloadSegmentInd+0x224>
        {
            /* the memory has to be released if it is not released before.
            In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 80254bc:	4b09      	ldr	r3, [pc, #36]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 80254be:	681b      	ldr	r3, [r3, #0]
 80254c0:	4618      	mov	r0, r3
 80254c2:	f004 fcab 	bl	8029e1c <free>
            pSdoSegData = NULL;
 80254c6:	4b07      	ldr	r3, [pc, #28]	; (80254e4 <SdoDownloadSegmentInd+0x23c>)
 80254c8:	2200      	movs	r2, #0
 80254ca:	601a      	str	r2, [r3, #0]
        }

        nSdoSegBytesToHandle = 0;
 80254cc:	4b07      	ldr	r3, [pc, #28]	; (80254ec <SdoDownloadSegmentInd+0x244>)
 80254ce:	2200      	movs	r2, #0
 80254d0:	601a      	str	r2, [r3, #0]
    }

    return abort;
 80254d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80254d4:	4618      	mov	r0, r3
 80254d6:	3718      	adds	r7, #24
 80254d8:	46bd      	mov	sp, r7
 80254da:	bdb0      	pop	{r4, r5, r7, pc}
 80254dc:	1fff289e 	.word	0x1fff289e
 80254e0:	1fff27ea 	.word	0x1fff27ea
 80254e4:	1fff28b0 	.word	0x1fff28b0
 80254e8:	1fff2894 	.word	0x1fff2894
 80254ec:	1fff288c 	.word	0x1fff288c
 80254f0:	1fff2891 	.word	0x1fff2891
 80254f4:	1fff28b4 	.word	0x1fff28b4
 80254f8:	1fff28cc 	.word	0x1fff28cc
 80254fc:	1fff28c8 	.word	0x1fff28c8
 8025500:	1fff2890 	.word	0x1fff2890
 8025504:	1fff289c 	.word	0x1fff289c
 8025508:	1fff289d 	.word	0x1fff289d
 802550c:	1fff28d0 	.word	0x1fff28d0
 8025510:	1fff28ce 	.word	0x1fff28ce
 8025514:	1fff28ac 	.word	0x1fff28ac
 8025518:	1fff2888 	.word	0x1fff2888
 802551c:	1fff2898 	.word	0x1fff2898
 8025520:	1fff1623 	.word	0x1fff1623
 8025524:	1fff28a8 	.word	0x1fff28a8
 8025528:	1fff289f 	.word	0x1fff289f

0802552c <SdoUploadSegmentInd>:
            is received from the master. It prepares and operates the
            response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd( TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 802552c:	b580      	push	{r7, lr}
 802552e:	b086      	sub	sp, #24
 8025530:	af00      	add	r7, sp, #0
 8025532:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8025534:	2300      	movs	r3, #0
 8025536:	75fb      	strb	r3, [r7, #23]
    TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 8025538:	687b      	ldr	r3, [r7, #4]
 802553a:	60fb      	str	r3, [r7, #12]

/* ECATCHANGE_START(V5.12) ECAT2*/
   if ( SWAPWORD(pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 802553c:	687b      	ldr	r3, [r7, #4]
 802553e:	7a1b      	ldrb	r3, [r3, #8]
 8025540:	f003 0310 	and.w	r3, r3, #16
 8025544:	4a4c      	ldr	r2, [pc, #304]	; (8025678 <SdoUploadSegmentInd+0x14c>)
 8025546:	7812      	ldrb	r2, [r2, #0]
 8025548:	4293      	cmp	r3, r2
 802554a:	d102      	bne.n	8025552 <SdoUploadSegmentInd+0x26>
/* ECATCHANGE_END(V5.12) ECAT2*/
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 802554c:	2301      	movs	r3, #1
 802554e:	75fb      	strb	r3, [r7, #23]
 8025550:	e08c      	b.n	802566c <SdoUploadSegmentInd+0x140>
    }
    else
    {
        /* maxData contains the maximum data to be sent with a SDO-Upload Segment response */
         
        UINT32 size = 0;
 8025552:	2300      	movs	r3, #0
 8025554:	613b      	str	r3, [r7, #16]
        UINT16 maxData;
        
        {
            maxData =    u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8025556:	4b49      	ldr	r3, [pc, #292]	; (802567c <SdoUploadSegmentInd+0x150>)
 8025558:	881b      	ldrh	r3, [r3, #0]
 802555a:	3b09      	subs	r3, #9
 802555c:	817b      	strh	r3, [r7, #10]
        }

        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	7a1b      	ldrb	r3, [r3, #8]
 8025562:	f003 0310 	and.w	r3, r3, #16
 8025566:	b2da      	uxtb	r2, r3
 8025568:	4b43      	ldr	r3, [pc, #268]	; (8025678 <SdoUploadSegmentInd+0x14c>)
 802556a:	701a      	strb	r2, [r3, #0]

        if ( nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData) )
 802556c:	897a      	ldrh	r2, [r7, #10]
 802556e:	4b44      	ldr	r3, [pc, #272]	; (8025680 <SdoUploadSegmentInd+0x154>)
 8025570:	681b      	ldr	r3, [r3, #0]
 8025572:	441a      	add	r2, r3
 8025574:	4b43      	ldr	r3, [pc, #268]	; (8025684 <SdoUploadSegmentInd+0x158>)
 8025576:	681b      	ldr	r3, [r3, #0]
 8025578:	429a      	cmp	r2, r3
 802557a:	d909      	bls.n	8025590 <SdoUploadSegmentInd+0x64>
        {
            /* the remaining data can be send with one SDO Upload Segment response,
               size contains the data to be copied */
            size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 802557c:	4b41      	ldr	r3, [pc, #260]	; (8025684 <SdoUploadSegmentInd+0x158>)
 802557e:	681a      	ldr	r2, [r3, #0]
 8025580:	4b3f      	ldr	r3, [pc, #252]	; (8025680 <SdoUploadSegmentInd+0x154>)
 8025582:	681b      	ldr	r3, [r3, #0]
 8025584:	1ad3      	subs	r3, r2, r3
 8025586:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = FALSE;
 8025588:	4b3f      	ldr	r3, [pc, #252]	; (8025688 <SdoUploadSegmentInd+0x15c>)
 802558a:	2200      	movs	r2, #0
 802558c:	701a      	strb	r2, [r3, #0]
 802558e:	e004      	b.n	802559a <SdoUploadSegmentInd+0x6e>
        }
        else
        {
            /* more data will follow, size contains the data to be copied */
            size = maxData;
 8025590:	897b      	ldrh	r3, [r7, #10]
 8025592:	613b      	str	r3, [r7, #16]
            bSdoSegFollows = TRUE;
 8025594:	4b3c      	ldr	r3, [pc, #240]	; (8025688 <SdoUploadSegmentInd+0x15c>)
 8025596:	2201      	movs	r2, #1
 8025598:	701a      	strb	r2, [r3, #0]
        }

        /* copy the object data in the SDO Upload segment response */
        MBXMEMCPY( pSdoSegRes->SdoHeader.Data, &(((UINT8*)pSdoSegData)[nSdoSegBytesToHandle]), size );
 802559a:	68fb      	ldr	r3, [r7, #12]
 802559c:	f103 0109 	add.w	r1, r3, #9
 80255a0:	4b3a      	ldr	r3, [pc, #232]	; (802568c <SdoUploadSegmentInd+0x160>)
 80255a2:	681a      	ldr	r2, [r3, #0]
 80255a4:	4b36      	ldr	r3, [pc, #216]	; (8025680 <SdoUploadSegmentInd+0x154>)
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	4413      	add	r3, r2
 80255aa:	4608      	mov	r0, r1
 80255ac:	4619      	mov	r1, r3
 80255ae:	693a      	ldr	r2, [r7, #16]
 80255b0:	f004 fc4c 	bl	8029e4c <memcpy>
        
        /* the SDO Upload Segment header depends if there is still data to be sent */
        pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80255b4:	68fb      	ldr	r3, [r7, #12]
 80255b6:	88db      	ldrh	r3, [r3, #6]
 80255b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80255bc:	b29a      	uxth	r2, r3
 80255be:	68fb      	ldr	r3, [r7, #12]
 80255c0:	80da      	strh	r2, [r3, #6]
        pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 80255c2:	68fb      	ldr	r3, [r7, #12]
 80255c4:	88db      	ldrh	r3, [r3, #6]
 80255c6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80255ca:	b29a      	uxth	r2, r3
 80255cc:	68fb      	ldr	r3, [r7, #12]
 80255ce:	80da      	strh	r2, [r3, #6]

        /*Clear SDO header*/
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 80255d0:	68fb      	ldr	r3, [r7, #12]
 80255d2:	2200      	movs	r2, #0
 80255d4:	721a      	strb	r2, [r3, #8]
/* ECATCHANGE_START(V5.12) ECAT2*/
        if (bSdoSegFollows)
 80255d6:	4b2c      	ldr	r3, [pc, #176]	; (8025688 <SdoUploadSegmentInd+0x15c>)
 80255d8:	781b      	ldrb	r3, [r3, #0]
 80255da:	2b00      	cmp	r3, #0
 80255dc:	d008      	beq.n	80255f0 <SdoUploadSegmentInd+0xc4>
        {
            pSdoSegRes->SdoHeader.SegHeader        |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle);
 80255de:	68fb      	ldr	r3, [r7, #12]
 80255e0:	7a1a      	ldrb	r2, [r3, #8]
 80255e2:	4b25      	ldr	r3, [pc, #148]	; (8025678 <SdoUploadSegmentInd+0x14c>)
 80255e4:	781b      	ldrb	r3, [r3, #0]
 80255e6:	4313      	orrs	r3, r2
 80255e8:	b2da      	uxtb	r2, r3
 80255ea:	68fb      	ldr	r3, [r7, #12]
 80255ec:	721a      	strb	r2, [r3, #8]
 80255ee:	e00a      	b.n	8025606 <SdoUploadSegmentInd+0xda>
        }
        else
        {
            pSdoSegRes->SdoHeader.SegHeader        |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS);
 80255f0:	68fb      	ldr	r3, [r7, #12]
 80255f2:	7a1a      	ldrb	r2, [r3, #8]
 80255f4:	4b20      	ldr	r3, [pc, #128]	; (8025678 <SdoUploadSegmentInd+0x14c>)
 80255f6:	781b      	ldrb	r3, [r3, #0]
 80255f8:	4313      	orrs	r3, r2
 80255fa:	b2db      	uxtb	r3, r3
 80255fc:	f043 0301 	orr.w	r3, r3, #1
 8025600:	b2da      	uxtb	r2, r3
 8025602:	68fb      	ldr	r3, [r7, #12]
 8025604:	721a      	strb	r2, [r3, #8]
        }
/* ECATCHANGE_END(V5.12) ECAT2*/

        // operate CAN specific flag segDataSize:
        /* HBu 06.02.06: the sizes were wrong */
        if ( size < MIN_SEGMENTED_DATA )
 8025606:	693b      	ldr	r3, [r7, #16]
 8025608:	2b06      	cmp	r3, #6
 802560a:	d810      	bhi.n	802562e <SdoUploadSegmentInd+0x102>
        {
            // at least    MIN_SEGMENTED_DATA bytes have to be send:
            pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 802560c:	68fb      	ldr	r3, [r7, #12]
 802560e:	220a      	movs	r2, #10
 8025610:	801a      	strh	r2, [r3, #0]
            pSdoSegRes->SdoHeader.SegHeader    |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 8025612:	68fb      	ldr	r3, [r7, #12]
 8025614:	7a1a      	ldrb	r2, [r3, #8]
 8025616:	693b      	ldr	r3, [r7, #16]
 8025618:	b2db      	uxtb	r3, r3
 802561a:	f1c3 0307 	rsb	r3, r3, #7
 802561e:	b2db      	uxtb	r3, r3
 8025620:	005b      	lsls	r3, r3, #1
 8025622:	b2db      	uxtb	r3, r3
 8025624:	4313      	orrs	r3, r2
 8025626:	b2da      	uxtb	r2, r3
 8025628:	68fb      	ldr	r3, [r7, #12]
 802562a:	721a      	strb	r2, [r3, #8]
 802562c:	e005      	b.n	802563a <SdoUploadSegmentInd+0x10e>
        }
        else
        {
            pSdoSegRes->MbxHeader.Length         = ((UINT16) size) + SEGMENT_NORM_HEADER_SIZE;
 802562e:	693b      	ldr	r3, [r7, #16]
 8025630:	b29b      	uxth	r3, r3
 8025632:	3303      	adds	r3, #3
 8025634:	b29a      	uxth	r2, r3
 8025636:	68fb      	ldr	r3, [r7, #12]
 8025638:	801a      	strh	r2, [r3, #0]
        }

        if ( bSdoSegFollows == TRUE )
 802563a:	4b13      	ldr	r3, [pc, #76]	; (8025688 <SdoUploadSegmentInd+0x15c>)
 802563c:	781b      	ldrb	r3, [r3, #0]
 802563e:	2b01      	cmp	r3, #1
 8025640:	d106      	bne.n	8025650 <SdoUploadSegmentInd+0x124>
        {
            // updating the value of send bytes:
            nSdoSegBytesToHandle += size;
 8025642:	4b0f      	ldr	r3, [pc, #60]	; (8025680 <SdoUploadSegmentInd+0x154>)
 8025644:	681a      	ldr	r2, [r3, #0]
 8025646:	693b      	ldr	r3, [r7, #16]
 8025648:	4413      	add	r3, r2
 802564a:	4a0d      	ldr	r2, [pc, #52]	; (8025680 <SdoUploadSegmentInd+0x154>)
 802564c:	6013      	str	r3, [r2, #0]
 802564e:	e00d      	b.n	802566c <SdoUploadSegmentInd+0x140>
        }
        else
        {
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8025650:	4b0e      	ldr	r3, [pc, #56]	; (802568c <SdoUploadSegmentInd+0x160>)
 8025652:	681b      	ldr	r3, [r3, #0]
 8025654:	4618      	mov	r0, r3
 8025656:	f004 fbe1 	bl	8029e1c <free>
            pSdoSegData = NULL;
 802565a:	4b0c      	ldr	r3, [pc, #48]	; (802568c <SdoUploadSegmentInd+0x160>)
 802565c:	2200      	movs	r2, #0
 802565e:	601a      	str	r2, [r3, #0]
            nSdoSegBytesToHandle = 0;
 8025660:	4b07      	ldr	r3, [pc, #28]	; (8025680 <SdoUploadSegmentInd+0x154>)
 8025662:	2200      	movs	r2, #0
 8025664:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 8025666:	4b0a      	ldr	r3, [pc, #40]	; (8025690 <SdoUploadSegmentInd+0x164>)
 8025668:	2200      	movs	r2, #0
 802566a:	701a      	strb	r2, [r3, #0]
        }
    }

    return abort;
 802566c:	7dfb      	ldrb	r3, [r7, #23]
}
 802566e:	4618      	mov	r0, r3
 8025670:	3718      	adds	r7, #24
 8025672:	46bd      	mov	sp, r7
 8025674:	bd80      	pop	{r7, pc}
 8025676:	bf00      	nop
 8025678:	1fff289e 	.word	0x1fff289e
 802567c:	1fff27d8 	.word	0x1fff27d8
 8025680:	1fff288c 	.word	0x1fff288c
 8025684:	1fff2894 	.word	0x1fff2894
 8025688:	1fff2891 	.word	0x1fff2891
 802568c:	1fff28b0 	.word	0x1fff28b0
 8025690:	1fff289f 	.word	0x1fff289f

08025694 <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 8025694:	b590      	push	{r4, r7, lr}
 8025696:	b083      	sub	sp, #12
 8025698:	af00      	add	r7, sp, #0
 802569a:	4604      	mov	r4, r0
 802569c:	4608      	mov	r0, r1
 802569e:	4611      	mov	r1, r2
 80256a0:	461a      	mov	r2, r3
 80256a2:	4623      	mov	r3, r4
 80256a4:	71fb      	strb	r3, [r7, #7]
 80256a6:	4603      	mov	r3, r0
 80256a8:	71bb      	strb	r3, [r7, #6]
 80256aa:	460b      	mov	r3, r1
 80256ac:	717b      	strb	r3, [r7, #5]
 80256ae:	4613      	mov	r3, r2
 80256b0:	807b      	strh	r3, [r7, #2]
    /* for an upload segment response the toggle bit was overwritten */
    if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 80256b2:	79bb      	ldrb	r3, [r7, #6]
 80256b4:	2b60      	cmp	r3, #96	; 0x60
 80256b6:	d005      	beq.n	80256c4 <SdoRes+0x30>
 80256b8:	79bb      	ldrb	r3, [r7, #6]
 80256ba:	2b00      	cmp	r3, #0
 80256bc:	d002      	beq.n	80256c4 <SdoRes+0x30>
    {
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] = 0;
 80256be:	69fb      	ldr	r3, [r7, #28]
 80256c0:	2200      	movs	r2, #0
 80256c2:	721a      	strb	r2, [r3, #8]
    }
    if ( abort == 0 )
 80256c4:	79fb      	ldrb	r3, [r7, #7]
 80256c6:	2b00      	cmp	r3, #0
 80256c8:	d16c      	bne.n	80257a4 <SdoRes+0x110>
    {
        /* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80256ca:	69fb      	ldr	r3, [r7, #28]
 80256cc:	88db      	ldrh	r3, [r3, #6]
 80256ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80256d2:	b29a      	uxth	r2, r3
 80256d4:	69fb      	ldr	r3, [r7, #28]
 80256d6:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 80256d8:	69fb      	ldr	r3, [r7, #28]
 80256da:	88db      	ldrh	r3, [r3, #6]
 80256dc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80256e0:	b29a      	uxth	r2, r3
 80256e2:	69fb      	ldr	r3, [r7, #28]
 80256e4:	80da      	strh	r2, [r3, #6]
        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 80256e6:	79bb      	ldrb	r3, [r7, #6]
 80256e8:	2b40      	cmp	r3, #64	; 0x40
 80256ea:	d13f      	bne.n	802576c <SdoRes+0xd8>
        {
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
 80256ec:	69bb      	ldr	r3, [r7, #24]
 80256ee:	2b04      	cmp	r3, #4
 80256f0:	d818      	bhi.n	8025724 <SdoRes+0x90>
 80256f2:	69bb      	ldr	r3, [r7, #24]
 80256f4:	2b00      	cmp	r3, #0
 80256f6:	d015      	beq.n	8025724 <SdoRes+0x90>
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
 80256f8:	69fb      	ldr	r3, [r7, #28]
 80256fa:	220a      	movs	r2, #10
 80256fc:	801a      	strh	r2, [r3, #0]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOHEADER_SIZEINDICATOR |
 80256fe:	69fb      	ldr	r3, [r7, #28]
 8025700:	7a1a      	ldrb	r2, [r3, #8]
                                                                            SDOHEADER_TRANSFERTYPE |
                                                                            completeAccess |
                                                                            ((MAX_EXPEDITED_DATA - ((UINT8)objLength)) << SDOHEADERSHIFT_DATASETSIZE) |
 8025702:	69bb      	ldr	r3, [r7, #24]
 8025704:	b2db      	uxtb	r3, r3
 8025706:	f1c3 0304 	rsb	r3, r3, #4
 802570a:	009b      	lsls	r3, r3, #2
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOHEADER_SIZEINDICATOR |
 802570c:	b2d9      	uxtb	r1, r3
 802570e:	797b      	ldrb	r3, [r7, #5]
 8025710:	430b      	orrs	r3, r1
 8025712:	b2db      	uxtb	r3, r3
 8025714:	4313      	orrs	r3, r2
 8025716:	b2db      	uxtb	r3, r3
 8025718:	f043 0343 	orr.w	r3, r3, #67	; 0x43
 802571c:	b2da      	uxtb	r2, r3
 802571e:	69fb      	ldr	r3, [r7, #28]
 8025720:	721a      	strb	r2, [r3, #8]
 8025722:	e05d      	b.n	80257e0 <SdoRes+0x14c>
                                                                            SDOSERVICE_INITIATEUPLOADRES;
            }
            else
            {
                /* Normal or Segmented Upload Response */
                if (dataSize <  objLength)
 8025724:	887a      	ldrh	r2, [r7, #2]
 8025726:	69bb      	ldr	r3, [r7, #24]
 8025728:	429a      	cmp	r2, r3
 802572a:	d205      	bcs.n	8025738 <SdoRes+0xa4>
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+dataSize;
 802572c:	887b      	ldrh	r3, [r7, #2]
 802572e:	330a      	adds	r3, #10
 8025730:	b29a      	uxth	r2, r3
 8025732:	69fb      	ldr	r3, [r7, #28]
 8025734:	801a      	strh	r2, [r3, #0]
 8025736:	e005      	b.n	8025744 <SdoRes+0xb0>
                }
                else
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+((UINT16)objLength);
 8025738:	69bb      	ldr	r3, [r7, #24]
 802573a:	b29b      	uxth	r3, r3
 802573c:	330a      	adds	r3, #10
 802573e:	b29a      	uxth	r2, r3
 8025740:	69fb      	ldr	r3, [r7, #28]
 8025742:	801a      	strh	r2, [r3, #0]
                }
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 8025744:	69bb      	ldr	r3, [r7, #24]
 8025746:	b29a      	uxth	r2, r3
 8025748:	69fb      	ldr	r3, [r7, #28]
 802574a:	819a      	strh	r2, [r3, #12]
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength>>16));
 802574c:	69bb      	ldr	r3, [r7, #24]
 802574e:	0c1b      	lsrs	r3, r3, #16
 8025750:	b29a      	uxth	r2, r3
 8025752:	69fb      	ldr	r3, [r7, #28]
 8025754:	81da      	strh	r2, [r3, #14]
                   pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOHEADER_SIZEINDICATOR |
 8025756:	69fb      	ldr	r3, [r7, #28]
 8025758:	7a1a      	ldrb	r2, [r3, #8]
 802575a:	797b      	ldrb	r3, [r7, #5]
 802575c:	4313      	orrs	r3, r2
 802575e:	b2db      	uxtb	r3, r3
 8025760:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8025764:	b2da      	uxtb	r2, r3
 8025766:	69fb      	ldr	r3, [r7, #28]
 8025768:	721a      	strb	r2, [r3, #8]
 802576a:	e039      	b.n	80257e0 <SdoRes+0x14c>
                                                                           SDOSERVICE_INITIATEUPLOADRES;

            }
        }
        /* for a segmented response the command was wrong in the response */
        else if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 802576c:	79bb      	ldrb	r3, [r7, #6]
 802576e:	2b00      	cmp	r3, #0
 8025770:	d10a      	bne.n	8025788 <SdoRes+0xf4>
        {
            /* Download segmented response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 8025772:	69fb      	ldr	r3, [r7, #28]
 8025774:	220a      	movs	r2, #10
 8025776:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOSERVICE_DOWNLOADSEGMENTRES;
 8025778:	69fb      	ldr	r3, [r7, #28]
 802577a:	7a1b      	ldrb	r3, [r3, #8]
 802577c:	f043 0320 	orr.w	r3, r3, #32
 8025780:	b2da      	uxtb	r2, r3
 8025782:	69fb      	ldr	r3, [r7, #28]
 8025784:	721a      	strb	r2, [r3, #8]
 8025786:	e02b      	b.n	80257e0 <SdoRes+0x14c>
      }
        else if ( command != SDOSERVICE_UPLOADSEGMENTREQ )
 8025788:	79bb      	ldrb	r3, [r7, #6]
 802578a:	2b60      	cmp	r3, #96	; 0x60
 802578c:	d028      	beq.n	80257e0 <SdoRes+0x14c>
        {
            /* Download response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 802578e:	69fb      	ldr	r3, [r7, #28]
 8025790:	220a      	movs	r2, #10
 8025792:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOSERVICE_INITIATEDOWNLOADRES;
 8025794:	69fb      	ldr	r3, [r7, #28]
 8025796:	7a1b      	ldrb	r3, [r3, #8]
 8025798:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802579c:	b2da      	uxtb	r2, r3
 802579e:	69fb      	ldr	r3, [r7, #28]
 80257a0:	721a      	strb	r2, [r3, #8]
 80257a2:	e01d      	b.n	80257e0 <SdoRes+0x14c>
        }
    }
    else
    {
        /* generate a SDO-Abort-Request */
        pSdoRes->MbxHeader.Length         = ABORT_NORM_RES_SIZE;
 80257a4:	69fb      	ldr	r3, [r7, #28]
 80257a6:	220a      	movs	r2, #10
 80257a8:	801a      	strh	r2, [r3, #0]
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 80257aa:	69fb      	ldr	r3, [r7, #28]
 80257ac:	88db      	ldrh	r3, [r3, #6]
 80257ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80257b2:	b29a      	uxth	r2, r3
 80257b4:	69fb      	ldr	r3, [r7, #28]
 80257b6:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 80257b8:	69fb      	ldr	r3, [r7, #28]
 80257ba:	88db      	ldrh	r3, [r3, #6]
 80257bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80257c0:	b29a      	uxth	r2, r3
 80257c2:	69fb      	ldr	r3, [r7, #28]
 80257c4:	80da      	strh	r2, [r3, #6]
        /* ECATCHANGE_START(V5.12) COE2*/
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SDOSERVICE_ABORTTRANSFER;
 80257c6:	69fb      	ldr	r3, [r7, #28]
 80257c8:	7a1b      	ldrb	r3, [r3, #8]
 80257ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80257ce:	b2da      	uxtb	r2, r3
 80257d0:	69fb      	ldr	r3, [r7, #28]
 80257d2:	721a      	strb	r2, [r3, #8]
        /* ECATCHANGE_END(V5.12) COE2*/

        ((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 80257d4:	79fb      	ldrb	r3, [r7, #7]
 80257d6:	4a09      	ldr	r2, [pc, #36]	; (80257fc <SdoRes+0x168>)
 80257d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80257dc:	69fb      	ldr	r3, [r7, #28]
 80257de:	60da      	str	r2, [r3, #12]
    }

    // HBu 02.05.06: if the CoE-response could not be sent because the
    //               send mailbox is full it should be stored
    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 80257e0:	69f8      	ldr	r0, [r7, #28]
 80257e2:	2102      	movs	r1, #2
 80257e4:	f7fe f962 	bl	8023aac <MBX_MailboxSendReq>
 80257e8:	4603      	mov	r3, r0
 80257ea:	2b00      	cmp	r3, #0
 80257ec:	d002      	beq.n	80257f4 <SdoRes+0x160>
    {
        /* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
        pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 80257ee:	4a04      	ldr	r2, [pc, #16]	; (8025800 <SdoRes+0x16c>)
 80257f0:	69fb      	ldr	r3, [r7, #28]
 80257f2:	6013      	str	r3, [r2, #0]
    }
}
 80257f4:	370c      	adds	r7, #12
 80257f6:	46bd      	mov	sp, r7
 80257f8:	bd90      	pop	{r4, r7, pc}
 80257fa:	bf00      	nop
 80257fc:	0802a990 	.word	0x0802a990
 8025800:	1fff2710 	.word	0x1fff2710

08025804 <SDOS_SdoInd>:
            is received from the master and calls depending from
            the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 8025804:	b590      	push	{r4, r7, lr}
 8025806:	b091      	sub	sp, #68	; 0x44
 8025808:	af02      	add	r7, sp, #8
 802580a:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 802580c:	2300      	movs	r3, #0
 802580e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    UINT8 sdoHeader = (pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK);
 8025812:	687b      	ldr	r3, [r7, #4]
 8025814:	7a1b      	ldrb	r3, [r3, #8]
 8025816:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /* the SDO-command is in bit 5-7 of the first SDO-Byte */
    UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 802581a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802581e:	f023 031f 	bic.w	r3, r3, #31
 8025822:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    /* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8025826:	687b      	ldr	r3, [r7, #4]
 8025828:	881b      	ldrh	r3, [r3, #0]
 802582a:	83fb      	strh	r3, [r7, #30]
    UINT16 index;
    UINT8 subindex;
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    /* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
    UINT8 bCompleteAccess = 0;
 802582c:	2300      	movs	r3, #0
 802582e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    UINT32 objLength = 0;
 8025832:	2300      	movs	r3, #0
 8025834:	633b      	str	r3, [r7, #48]	; 0x30
    UINT32 dataSize = 0;
 8025836:	2300      	movs	r3, #0
 8025838:	62fb      	str	r3, [r7, #44]	; 0x2c

    if ( bSdoInWork )
 802583a:	4bac      	ldr	r3, [pc, #688]	; (8025aec <SDOS_SdoInd+0x2e8>)
 802583c:	781b      	ldrb	r3, [r3, #0]
 802583e:	2b00      	cmp	r3, #0
 8025840:	d001      	beq.n	8025846 <SDOS_SdoInd+0x42>
    {
        /* the last SDO is still in work */
        return MBXERR_SERVICEINWORK;
 8025842:	2309      	movs	r3, #9
 8025844:	e2a3      	b.n	8025d8e <SDOS_SdoInd+0x58a>
    }


    switch (command)
 8025846:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802584a:	2b20      	cmp	r3, #32
 802584c:	d00b      	beq.n	8025866 <SDOS_SdoInd+0x62>
 802584e:	2b20      	cmp	r3, #32
 8025850:	dc03      	bgt.n	802585a <SDOS_SdoInd+0x56>
 8025852:	2b00      	cmp	r3, #0
 8025854:	f000 8264 	beq.w	8025d20 <SDOS_SdoInd+0x51c>
 8025858:	e27e      	b.n	8025d58 <SDOS_SdoInd+0x554>
 802585a:	2b40      	cmp	r3, #64	; 0x40
 802585c:	d003      	beq.n	8025866 <SDOS_SdoInd+0x62>
 802585e:	2b60      	cmp	r3, #96	; 0x60
 8025860:	f000 825e 	beq.w	8025d20 <SDOS_SdoInd+0x51c>
 8025864:	e278      	b.n	8025d58 <SDOS_SdoInd+0x554>
    {
    case SDOSERVICE_INITIATEDOWNLOADREQ:
    case SDOSERVICE_INITIATEUPLOADREQ:
        /* the variable index contains the requested index of the SDO service */
/*ECATCHANGE_START(V5.12) COE5*/
        index = ((UINT16)(pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK));
 8025866:	687b      	ldr	r3, [r7, #4]
 8025868:	7a9b      	ldrb	r3, [r3, #10]
 802586a:	83bb      	strh	r3, [r7, #28]
/*ECATCHANGE_END(V5.12) COE5*/
/* ECATCHANGE_START(V5.12) ECAT2*/
        index <<= 8;
 802586c:	8bbb      	ldrh	r3, [r7, #28]
 802586e:	021b      	lsls	r3, r3, #8
 8025870:	83bb      	strh	r3, [r7, #28]
/*ECATCHANGE_START(V5.12) COE5*/
        index += (pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET]);
 8025872:	687b      	ldr	r3, [r7, #4]
 8025874:	7a5b      	ldrb	r3, [r3, #9]
 8025876:	b29a      	uxth	r2, r3
 8025878:	8bbb      	ldrh	r3, [r7, #28]
 802587a:	4413      	add	r3, r2
 802587c:	83bb      	strh	r3, [r7, #28]
        /* the variable subindex contains the requested subindex of the SDO service */
        subindex = pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET];
 802587e:	687b      	ldr	r3, [r7, #4]
 8025880:	7adb      	ldrb	r3, [r3, #11]
 8025882:	76fb      	strb	r3, [r7, #27]




        /* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
        pObjEntry = OBJ_GetObjectHandle( index );
 8025884:	8bbb      	ldrh	r3, [r7, #28]
 8025886:	4618      	mov	r0, r3
 8025888:	f7fe fac4 	bl	8023e14 <OBJ_GetObjectHandle>
 802588c:	6178      	str	r0, [r7, #20]

        if ( pObjEntry )
 802588e:	697b      	ldr	r3, [r7, #20]
 8025890:	2b00      	cmp	r3, #0
 8025892:	f000 8240 	beq.w	8025d16 <SDOS_SdoInd+0x512>
        {
            /* transferType contains the information if the SDO Download Request or the SDO Upload Response
               can be an expedited service (SDO data length <= 4, that means the data is stored in the
                SDO-Header completely */
            UINT8 bTransferType = 0;
 8025896:	2300      	movs	r3, #0
 8025898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            /* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
            UINT16 MBXMEM * pData = NULL;
 802589c:	2300      	movs	r3, #0
 802589e:	627b      	str	r3, [r7, #36]	; 0x24
            UINT8 segTransfer = 0;
 80258a0:	2300      	movs	r3, #0
 80258a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            {
/*ECATCHANGE_START(V5.12) COE6*/
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 80258a6:	697b      	ldr	r3, [r7, #20]
 80258a8:	899b      	ldrh	r3, [r3, #12]
 80258aa:	74fb      	strb	r3, [r7, #19]

                if (subindex > maxSubindex)
 80258ac:	7efa      	ldrb	r2, [r7, #27]
 80258ae:	7cfb      	ldrb	r3, [r7, #19]
 80258b0:	429a      	cmp	r2, r3
 80258b2:	d903      	bls.n	80258bc <SDOS_SdoInd+0xb8>
                {
                    abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 80258b4:	2311      	movs	r3, #17
 80258b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80258ba:	e00e      	b.n	80258da <SDOS_SdoInd+0xd6>
                }
                else
                {
                    dataSize = objLength = OBJ_GetObjectLength(index, subindex, pObjEntry, (UINT8)(sdoHeader & SDOHEADER_COMPLETEACCESS));
 80258bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80258c0:	f003 0310 	and.w	r3, r3, #16
 80258c4:	b2db      	uxtb	r3, r3
 80258c6:	8bb9      	ldrh	r1, [r7, #28]
 80258c8:	7efa      	ldrb	r2, [r7, #27]
 80258ca:	4608      	mov	r0, r1
 80258cc:	4611      	mov	r1, r2
 80258ce:	697a      	ldr	r2, [r7, #20]
 80258d0:	f7fe fabc 	bl	8023e4c <OBJ_GetObjectLength>
 80258d4:	6338      	str	r0, [r7, #48]	; 0x30
 80258d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80258d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

                if( abort == 0)
 80258da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80258de:	2b00      	cmp	r3, #0
 80258e0:	d132      	bne.n	8025948 <SDOS_SdoInd+0x144>
/*ECATCHANGE_END(V5.12) COE6*/
                {
                    if (command == SDOSERVICE_INITIATEUPLOADREQ)
 80258e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80258e6:	2b40      	cmp	r3, #64	; 0x40
 80258e8:	d128      	bne.n	802593c <SDOS_SdoInd+0x138>
                    {
                            /* SDO Upload */
                            if (mbxSize != EXPEDITED_FRAME_SIZE)
 80258ea:	8bfb      	ldrh	r3, [r7, #30]
 80258ec:	2b0a      	cmp	r3, #10
 80258ee:	d001      	beq.n	80258f4 <SDOS_SdoInd+0xf0>
                            {
                                    /* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                                    return MBXERR_INVALIDSIZE;
 80258f0:	2308      	movs	r3, #8
 80258f2:	e24c      	b.n	8025d8e <SDOS_SdoInd+0x58a>
                            }
                        /* distinguish between expedited and normal upload response within the length of the response data */
                        if ((objLength <= MAX_EXPEDITED_DATA) && objLength != 0)
 80258f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80258f6:	2b04      	cmp	r3, #4
 80258f8:	d810      	bhi.n	802591c <SDOS_SdoInd+0x118>
 80258fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	d00d      	beq.n	802591c <SDOS_SdoInd+0x118>
                        {
                                /* Expedited Upload */
                                bTransferType = 1;
 8025900:	2301      	movs	r3, #1
 8025902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                            /* pData is the pointer where the object data has to be copied for the response */
    /* ECATCHANGE_START(V5.12)*/
                            pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 8025906:	687b      	ldr	r3, [r7, #4]
 8025908:	330c      	adds	r3, #12
 802590a:	627b      	str	r3, [r7, #36]	; 0x24
    /* ECATCHANGE_END(V5.12)*/
                                                    /* initialize the 4 data bytes of the SDO upload response because the requested object data
                                                       could be less than 4 */
                            pData[0] = 0;
 802590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802590e:	2200      	movs	r2, #0
 8025910:	801a      	strh	r2, [r3, #0]
                            pData[1] = 0;
 8025912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025914:	3302      	adds	r3, #2
 8025916:	2200      	movs	r2, #0
 8025918:	801a      	strh	r2, [r3, #0]
 802591a:	e015      	b.n	8025948 <SDOS_SdoInd+0x144>
                        }
                        else
                        {
                                /* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
                                dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 802591c:	4b74      	ldr	r3, [pc, #464]	; (8025af0 <SDOS_SdoInd+0x2ec>)
 802591e:	881b      	ldrh	r3, [r3, #0]
 8025920:	3b10      	subs	r3, #16
 8025922:	62fb      	str	r3, [r7, #44]	; 0x2c
                            if (dataSize < objLength)
 8025924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025928:	429a      	cmp	r2, r3
 802592a:	d203      	bcs.n	8025934 <SDOS_SdoInd+0x130>
                            {
                                    /* Segmented Upload */
                                    segTransfer = 1;
 802592c:	2301      	movs	r3, #1
 802592e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8025932:	e009      	b.n	8025948 <SDOS_SdoInd+0x144>
                            }
                            else
                            {
                                    /* Normal Upload */
        /* ECATCHANGE_START(V5.12)*/
                                    pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 8025934:	687b      	ldr	r3, [r7, #4]
 8025936:	3310      	adds	r3, #16
 8025938:	627b      	str	r3, [r7, #36]	; 0x24
 802593a:	e005      	b.n	8025948 <SDOS_SdoInd+0x144>
                                }
                        }
                    else
                    {
                        /* SDO-Download: store if the request is a expedited or normal request  */
                        bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 802593c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8025940:	f003 0302 	and.w	r3, r3, #2
 8025944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                 }
            }

/*ECATCHANGE_START(V5.12) COE6*/
            if ((abort == 0 ) && (command == SDOSERVICE_INITIATEDOWNLOADREQ ))
 8025948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802594c:	2b00      	cmp	r3, #0
 802594e:	d142      	bne.n	80259d6 <SDOS_SdoInd+0x1d2>
 8025950:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025954:	2b20      	cmp	r3, #32
 8025956:	d13e      	bne.n	80259d6 <SDOS_SdoInd+0x1d2>
/*ECATCHANGE_END(V5.12) COE6*/
            {
                /* SDO Download */
                if ( bTransferType )
 8025958:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802595c:	2b00      	cmp	r3, #0
 802595e:	d010      	beq.n	8025982 <SDOS_SdoInd+0x17e>
                {
                    /* Expedited Download */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 8025960:	8bfb      	ldrh	r3, [r7, #30]
 8025962:	2b0a      	cmp	r3, #10
 8025964:	d001      	beq.n	802596a <SDOS_SdoInd+0x166>
                    {
                        /* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 8025966:	2308      	movs	r3, #8
 8025968:	e211      	b.n	8025d8e <SDOS_SdoInd+0x58a>
                    }
                    /* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
                    dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 802596a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802596e:	f003 030c 	and.w	r3, r3, #12
 8025972:	109b      	asrs	r3, r3, #2
 8025974:	f1c3 0304 	rsb	r3, r3, #4
 8025978:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) &pSdoInd[1];
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	330c      	adds	r3, #12
 802597e:	627b      	str	r3, [r7, #36]	; 0x24
 8025980:	e029      	b.n	80259d6 <SDOS_SdoInd+0x1d2>
                {
                    /* Normal Download */
                    /* downloadSize gets the real size of the downloaded data */
                    /* '&' operator was too much */

                    UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1]))<<16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 8025982:	687b      	ldr	r3, [r7, #4]
 8025984:	89db      	ldrh	r3, [r3, #14]
 8025986:	041b      	lsls	r3, r3, #16
 8025988:	687a      	ldr	r2, [r7, #4]
 802598a:	8992      	ldrh	r2, [r2, #12]
 802598c:	4413      	add	r3, r2
 802598e:	60fb      	str	r3, [r7, #12]

                    /* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
                    if ( (MBX_HEADER_SIZE+EXPEDITED_FRAME_SIZE+downloadSize) > u16ReceiveMbxSize )
 8025990:	68fb      	ldr	r3, [r7, #12]
 8025992:	3310      	adds	r3, #16
 8025994:	4a57      	ldr	r2, [pc, #348]	; (8025af4 <SDOS_SdoInd+0x2f0>)
 8025996:	8812      	ldrh	r2, [r2, #0]
 8025998:	4293      	cmp	r3, r2
 802599a:	d907      	bls.n	80259ac <SDOS_SdoInd+0x1a8>
                    {
                        if ( mbxSize != (u16ReceiveMbxSize-MBX_HEADER_SIZE) )
 802599c:	8bfa      	ldrh	r2, [r7, #30]
 802599e:	4b55      	ldr	r3, [pc, #340]	; (8025af4 <SDOS_SdoInd+0x2f0>)
 80259a0:	881b      	ldrh	r3, [r3, #0]
 80259a2:	3b06      	subs	r3, #6
 80259a4:	429a      	cmp	r2, r3
 80259a6:	d008      	beq.n	80259ba <SDOS_SdoInd+0x1b6>
                        {
                            return MBXERR_INVALIDSIZE;
 80259a8:	2308      	movs	r3, #8
 80259aa:	e1f0      	b.n	8025d8e <SDOS_SdoInd+0x58a>
                        }
                    }
                    else
                    {
                        if ( mbxSize != (EXPEDITED_FRAME_SIZE+downloadSize) )
 80259ac:	8bfa      	ldrh	r2, [r7, #30]
 80259ae:	68fb      	ldr	r3, [r7, #12]
 80259b0:	330a      	adds	r3, #10
 80259b2:	429a      	cmp	r2, r3
 80259b4:	d001      	beq.n	80259ba <SDOS_SdoInd+0x1b6>
                        {
                            /* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
                            return MBXERR_INVALIDSIZE;
 80259b6:	2308      	movs	r3, #8
 80259b8:	e1e9      	b.n	8025d8e <SDOS_SdoInd+0x58a>
                        }
                    }

                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 80259ba:	687b      	ldr	r3, [r7, #4]
 80259bc:	3310      	adds	r3, #16
 80259be:	627b      	str	r3, [r7, #36]	; 0x24
                    /* the received dataSize will be checked in the object specific functions called from
                       OBJ_Write (in objdef.c) */
                    dataSize = downloadSize;
 80259c0:	68fb      	ldr	r3, [r7, #12]
 80259c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ( dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE) )
 80259c4:	8bfb      	ldrh	r3, [r7, #30]
 80259c6:	3b0a      	subs	r3, #10
 80259c8:	461a      	mov	r2, r3
 80259ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80259cc:	429a      	cmp	r2, r3
 80259ce:	d202      	bcs.n	80259d6 <SDOS_SdoInd+0x1d2>
                    {
                        /* Segmented Download */
                        segTransfer = 1;
 80259d0:	2301      	movs	r3, #1
 80259d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    }
                }
            }

/*ECATCHANGE_START(V5.12) COE6*/
            if ((abort == 0) && (sdoHeader & SDOHEADER_COMPLETEACCESS ))
 80259d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80259da:	2b00      	cmp	r3, #0
 80259dc:	d10e      	bne.n	80259fc <SDOS_SdoInd+0x1f8>
 80259de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80259e2:	f003 0310 	and.w	r3, r3, #16
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	d008      	beq.n	80259fc <SDOS_SdoInd+0x1f8>
/*ECATCHANGE_END(V5.12) COE6*/
            {
                bCompleteAccess = 1;
 80259ea:	2301      	movs	r3, #1
 80259ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                // HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
                if (subindex > 1)
 80259f0:	7efb      	ldrb	r3, [r7, #27]
 80259f2:	2b01      	cmp	r3, #1
 80259f4:	d902      	bls.n	80259fc <SDOS_SdoInd+0x1f8>
                {
                    abort = ABORTIDX_UNSUPPORTED_ACCESS;
 80259f6:	2305      	movs	r3, #5
 80259f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
            }

            if ( abort == 0 )
 80259fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025a00:	2b00      	cmp	r3, #0
 8025a02:	f040 8187 	bne.w	8025d14 <SDOS_SdoInd+0x510>
            {
                if ( segTransfer )
 8025a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	f000 80db 	beq.w	8025bc6 <SDOS_SdoInd+0x3c2>
                {
                    bSdoSegFollows         = TRUE;
 8025a10:	4b39      	ldr	r3, [pc, #228]	; (8025af8 <SDOS_SdoInd+0x2f4>)
 8025a12:	2201      	movs	r2, #1
 8025a14:	701a      	strb	r2, [r3, #0]
                    bSdoSegLastToggle     = 1;
 8025a16:	4b39      	ldr	r3, [pc, #228]	; (8025afc <SDOS_SdoInd+0x2f8>)
 8025a18:	2201      	movs	r2, #1
 8025a1a:	701a      	strb	r2, [r3, #0]
                    bSdoSegAccess             = bCompleteAccess;
 8025a1c:	4a38      	ldr	r2, [pc, #224]	; (8025b00 <SDOS_SdoInd+0x2fc>)
 8025a1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025a22:	7013      	strb	r3, [r2, #0]
                    nSdoSegIndex             = index;
 8025a24:	4a37      	ldr	r2, [pc, #220]	; (8025b04 <SDOS_SdoInd+0x300>)
 8025a26:	8bbb      	ldrh	r3, [r7, #28]
 8025a28:	8013      	strh	r3, [r2, #0]
                    nSdoSegSubindex         = subindex;
 8025a2a:	4a37      	ldr	r2, [pc, #220]	; (8025b08 <SDOS_SdoInd+0x304>)
 8025a2c:	7efb      	ldrb	r3, [r7, #27]
 8025a2e:	7013      	strb	r3, [r2, #0]
                    pSdoSegObjEntry        = pObjEntry;
 8025a30:	4a36      	ldr	r2, [pc, #216]	; (8025b0c <SDOS_SdoInd+0x308>)
 8025a32:	697b      	ldr	r3, [r7, #20]
 8025a34:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025a36:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025a3a:	2b40      	cmp	r3, #64	; 0x40
 8025a3c:	d103      	bne.n	8025a46 <SDOS_SdoInd+0x242>
                    {
                        nSdoSegCompleteSize    = objLength;
 8025a3e:	4a34      	ldr	r2, [pc, #208]	; (8025b10 <SDOS_SdoInd+0x30c>)
 8025a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a42:	6013      	str	r3, [r2, #0]
 8025a44:	e002      	b.n	8025a4c <SDOS_SdoInd+0x248>
                    }
                    else
                    {
                        nSdoSegCompleteSize    = dataSize;
 8025a46:	4a32      	ldr	r2, [pc, #200]	; (8025b10 <SDOS_SdoInd+0x30c>)
 8025a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025a4a:	6013      	str	r3, [r2, #0]
                    }

                    if (pSdoSegData != NULL)
 8025a4c:	4b31      	ldr	r3, [pc, #196]	; (8025b14 <SDOS_SdoInd+0x310>)
 8025a4e:	681b      	ldr	r3, [r3, #0]
 8025a50:	2b00      	cmp	r3, #0
 8025a52:	d007      	beq.n	8025a64 <SDOS_SdoInd+0x260>
                    {
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData);
 8025a54:	4b2f      	ldr	r3, [pc, #188]	; (8025b14 <SDOS_SdoInd+0x310>)
 8025a56:	681b      	ldr	r3, [r3, #0]
 8025a58:	4618      	mov	r0, r3
 8025a5a:	f004 f9df 	bl	8029e1c <free>
                        pSdoSegData = NULL;
 8025a5e:	4b2d      	ldr	r3, [pc, #180]	; (8025b14 <SDOS_SdoInd+0x310>)
 8025a60:	2200      	movs	r2, #0
 8025a62:	601a      	str	r2, [r3, #0]
                    }
                    pSdoSegData = (UINT16 VARMEM *) ALLOCMEM( ROUNDUPBYTE2WORD(nSdoSegCompleteSize) );
 8025a64:	4b2a      	ldr	r3, [pc, #168]	; (8025b10 <SDOS_SdoInd+0x30c>)
 8025a66:	681b      	ldr	r3, [r3, #0]
 8025a68:	3301      	adds	r3, #1
 8025a6a:	f023 0301 	bic.w	r3, r3, #1
 8025a6e:	4618      	mov	r0, r3
 8025a70:	f004 f9cc 	bl	8029e0c <malloc>
 8025a74:	4603      	mov	r3, r0
 8025a76:	461a      	mov	r2, r3
 8025a78:	4b26      	ldr	r3, [pc, #152]	; (8025b14 <SDOS_SdoInd+0x310>)
 8025a7a:	601a      	str	r2, [r3, #0]

                    if ( pSdoSegData == NULL )
 8025a7c:	4b25      	ldr	r3, [pc, #148]	; (8025b14 <SDOS_SdoInd+0x310>)
 8025a7e:	681b      	ldr	r3, [r3, #0]
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	d10b      	bne.n	8025a9c <SDOS_SdoInd+0x298>
                    {
                        if(bCompleteAccess)
 8025a84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025a88:	2b00      	cmp	r3, #0
 8025a8a:	d003      	beq.n	8025a94 <SDOS_SdoInd+0x290>
                        {
                            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8025a8c:	2305      	movs	r3, #5
 8025a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8025a92:	e13f      	b.n	8025d14 <SDOS_SdoInd+0x510>
                        }
                        else
                        {
                            abort = ABORTIDX_OUT_OF_MEMORY;
 8025a94:	2304      	movs	r3, #4
 8025a96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8025a9a:	e13b      	b.n	8025d14 <SDOS_SdoInd+0x510>
                        }
                    }
                    else
                    {
                        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025a9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025aa0:	2b40      	cmp	r3, #64	; 0x40
 8025aa2:	d17a      	bne.n	8025b9a <SDOS_SdoInd+0x396>
                        {
                            /* Segmented Upload */
                            abort = OBJ_Read( index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess );
 8025aa4:	4b1b      	ldr	r3, [pc, #108]	; (8025b14 <SDOS_SdoInd+0x310>)
 8025aa6:	681b      	ldr	r3, [r3, #0]
 8025aa8:	8bb9      	ldrh	r1, [r7, #28]
 8025aaa:	7efa      	ldrb	r2, [r7, #27]
 8025aac:	9300      	str	r3, [sp, #0]
 8025aae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025ab2:	9301      	str	r3, [sp, #4]
 8025ab4:	4608      	mov	r0, r1
 8025ab6:	4611      	mov	r1, r2
 8025ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025aba:	697b      	ldr	r3, [r7, #20]
 8025abc:	f7fe fdb4 	bl	8024628 <OBJ_Read>
 8025ac0:	4603      	mov	r3, r0
 8025ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                            if ( abort == 0 )
 8025ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025aca:	2b00      	cmp	r3, #0
 8025acc:	d126      	bne.n	8025b1c <SDOS_SdoInd+0x318>
                            {
/* ECATCHANGE_START(V5.12)*/
                                MBXMEMCPY((UINT16 *) ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize );
 8025ace:	687b      	ldr	r3, [r7, #4]
 8025ad0:	f103 0210 	add.w	r2, r3, #16
 8025ad4:	4b0f      	ldr	r3, [pc, #60]	; (8025b14 <SDOS_SdoInd+0x310>)
 8025ad6:	681b      	ldr	r3, [r3, #0]
 8025ad8:	4610      	mov	r0, r2
 8025ada:	4619      	mov	r1, r3
 8025adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025ade:	f004 f9b5 	bl	8029e4c <memcpy>
/* ECATCHANGE_END(V5.12)*/
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 8025ae2:	4b0d      	ldr	r3, [pc, #52]	; (8025b18 <SDOS_SdoInd+0x314>)
 8025ae4:	2260      	movs	r2, #96	; 0x60
 8025ae6:	701a      	strb	r2, [r3, #0]
 8025ae8:	e069      	b.n	8025bbe <SDOS_SdoInd+0x3ba>
 8025aea:	bf00      	nop
 8025aec:	1fff1623 	.word	0x1fff1623
 8025af0:	1fff27d8 	.word	0x1fff27d8
 8025af4:	1fff27ea 	.word	0x1fff27ea
 8025af8:	1fff2891 	.word	0x1fff2891
 8025afc:	1fff289e 	.word	0x1fff289e
 8025b00:	1fff2890 	.word	0x1fff2890
 8025b04:	1fff28b4 	.word	0x1fff28b4
 8025b08:	1fff28cc 	.word	0x1fff28cc
 8025b0c:	1fff28c8 	.word	0x1fff28c8
 8025b10:	1fff2894 	.word	0x1fff2894
 8025b14:	1fff28b0 	.word	0x1fff28b0
 8025b18:	1fff289f 	.word	0x1fff289f
                            }
                            else if ( abort == ABORTIDX_WORKING )
 8025b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025b20:	2bff      	cmp	r3, #255	; 0xff
 8025b22:	d14c      	bne.n	8025bbe <SDOS_SdoInd+0x3ba>
                            {
                                /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                                u8PendingSdo = SDO_PENDING_SEG_READ;
 8025b24:	4b9c      	ldr	r3, [pc, #624]	; (8025d98 <SDOS_SdoInd+0x594>)
 8025b26:	2204      	movs	r2, #4
 8025b28:	701a      	strb	r2, [r3, #0]
                                bStoreCompleteAccess = bCompleteAccess;
 8025b2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	bf14      	ite	ne
 8025b32:	2301      	movne	r3, #1
 8025b34:	2300      	moveq	r3, #0
 8025b36:	b2da      	uxtb	r2, r3
 8025b38:	4b98      	ldr	r3, [pc, #608]	; (8025d9c <SDOS_SdoInd+0x598>)
 8025b3a:	701a      	strb	r2, [r3, #0]
                                u8StoreSubindex = subindex;
 8025b3c:	4a98      	ldr	r2, [pc, #608]	; (8025da0 <SDOS_SdoInd+0x59c>)
 8025b3e:	7efb      	ldrb	r3, [r7, #27]
 8025b40:	7013      	strb	r3, [r2, #0]
                                u16StoreIndex = index;
 8025b42:	4a98      	ldr	r2, [pc, #608]	; (8025da4 <SDOS_SdoInd+0x5a0>)
 8025b44:	8bbb      	ldrh	r3, [r7, #28]
 8025b46:	8013      	strh	r3, [r2, #0]
                                u32StoreDataSize = objLength;
 8025b48:	4a97      	ldr	r2, [pc, #604]	; (8025da8 <SDOS_SdoInd+0x5a4>)
 8025b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b4c:	6013      	str	r3, [r2, #0]
                                pStoreData = pSdoSegData;
 8025b4e:	4b97      	ldr	r3, [pc, #604]	; (8025dac <SDOS_SdoInd+0x5a8>)
 8025b50:	681b      	ldr	r3, [r3, #0]
 8025b52:	4a97      	ldr	r2, [pc, #604]	; (8025db0 <SDOS_SdoInd+0x5ac>)
 8025b54:	6013      	str	r3, [r2, #0]
                                pSdoPendFunc = pObjEntry->Read;
 8025b56:	697b      	ldr	r3, [r7, #20]
 8025b58:	69db      	ldr	r3, [r3, #28]
 8025b5a:	4a96      	ldr	r2, [pc, #600]	; (8025db4 <SDOS_SdoInd+0x5b0>)
 8025b5c:	6013      	str	r3, [r2, #0]

                                bSdoInWork = TRUE;
 8025b5e:	4b96      	ldr	r3, [pc, #600]	; (8025db8 <SDOS_SdoInd+0x5b4>)
 8025b60:	2201      	movs	r2, #1
 8025b62:	701a      	strb	r2, [r3, #0]
                                /* we have to store the buffer and the response header */
                                pSdoResStored = pSdoInd;
 8025b64:	4a95      	ldr	r2, [pc, #596]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025b66:	687b      	ldr	r3, [r7, #4]
 8025b68:	6013      	str	r3, [r2, #0]

                                /*update command field*/
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   &= ~SDOHEADER_COMMANDMASK;
 8025b6a:	4b94      	ldr	r3, [pc, #592]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025b6c:	681b      	ldr	r3, [r3, #0]
 8025b6e:	2200      	movs	r2, #0
 8025b70:	721a      	strb	r2, [r3, #8]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8025b72:	4b92      	ldr	r3, [pc, #584]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025b74:	681b      	ldr	r3, [r3, #0]
 8025b76:	4a91      	ldr	r2, [pc, #580]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025b78:	6812      	ldr	r2, [r2, #0]
 8025b7a:	7a12      	ldrb	r2, [r2, #8]
 8025b7c:	b2d1      	uxtb	r1, r2
 8025b7e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8025b82:	f022 020f 	bic.w	r2, r2, #15
 8025b86:	b2d2      	uxtb	r2, r2
 8025b88:	430a      	orrs	r2, r1
 8025b8a:	b2d2      	uxtb	r2, r2
 8025b8c:	b2d2      	uxtb	r2, r2
 8025b8e:	721a      	strb	r2, [r3, #8]
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 8025b90:	4b8b      	ldr	r3, [pc, #556]	; (8025dc0 <SDOS_SdoInd+0x5bc>)
 8025b92:	2260      	movs	r2, #96	; 0x60
 8025b94:	701a      	strb	r2, [r3, #0]
                                return 0;
 8025b96:	2300      	movs	r3, #0
 8025b98:	e0f9      	b.n	8025d8e <SDOS_SdoInd+0x58a>
                        }
                        else
                        {
                            /* Segmented Download */
/* ECATCHANGE_START(V5.12)*/
                            MBXMEMCPY( pSdoSegData, (UINT16 *)((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize-DOWNLOAD_NORM_REQ_SIZE );
 8025b9a:	4b84      	ldr	r3, [pc, #528]	; (8025dac <SDOS_SdoInd+0x5a8>)
 8025b9c:	6819      	ldr	r1, [r3, #0]
 8025b9e:	687b      	ldr	r3, [r7, #4]
 8025ba0:	f103 0210 	add.w	r2, r3, #16
 8025ba4:	8bfb      	ldrh	r3, [r7, #30]
 8025ba6:	3b0a      	subs	r3, #10
 8025ba8:	4608      	mov	r0, r1
 8025baa:	4611      	mov	r1, r2
 8025bac:	461a      	mov	r2, r3
 8025bae:	f004 f94d 	bl	8029e4c <memcpy>
/* ECATCHANGE_END(V5.12)*/
                            nSdoSegService    = SDOSERVICE_DOWNLOADSEGMENTREQ;
 8025bb2:	4b83      	ldr	r3, [pc, #524]	; (8025dc0 <SDOS_SdoInd+0x5bc>)
 8025bb4:	2200      	movs	r2, #0
 8025bb6:	701a      	strb	r2, [r3, #0]
                            dataSize = (mbxSize-DOWNLOAD_NORM_REQ_SIZE);
 8025bb8:	8bfb      	ldrh	r3, [r7, #30]
 8025bba:	3b0a      	subs	r3, #10
 8025bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                        }

                        nSdoSegBytesToHandle = dataSize;
 8025bbe:	4a81      	ldr	r2, [pc, #516]	; (8025dc4 <SDOS_SdoInd+0x5c0>)
 8025bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025bc2:	6013      	str	r3, [r2, #0]
 8025bc4:	e0ab      	b.n	8025d1e <SDOS_SdoInd+0x51a>
                    }
                }
                else
                {
                    if ( objLength == 0 )
 8025bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bc8:	2b00      	cmp	r3, #0
 8025bca:	d108      	bne.n	8025bde <SDOS_SdoInd+0x3da>
                    {
                        /* the objLength is not known, therefore the variables for a possible segmented transfer
                            should be initialized */
                        nSdoSegIndex             = index;
 8025bcc:	4a7e      	ldr	r2, [pc, #504]	; (8025dc8 <SDOS_SdoInd+0x5c4>)
 8025bce:	8bbb      	ldrh	r3, [r7, #28]
 8025bd0:	8013      	strh	r3, [r2, #0]
                        nSdoSegSubindex         = subindex;
 8025bd2:	4a7e      	ldr	r2, [pc, #504]	; (8025dcc <SDOS_SdoInd+0x5c8>)
 8025bd4:	7efb      	ldrb	r3, [r7, #27]
 8025bd6:	7013      	strb	r3, [r2, #0]
                        pSdoSegObjEntry        = pObjEntry;
 8025bd8:	4a7d      	ldr	r2, [pc, #500]	; (8025dd0 <SDOS_SdoInd+0x5cc>)
 8025bda:	697b      	ldr	r3, [r7, #20]
 8025bdc:	6013      	str	r3, [r2, #0]
                    }
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025bde:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025be2:	2b40      	cmp	r3, #64	; 0x40
 8025be4:	d14b      	bne.n	8025c7e <SDOS_SdoInd+0x47a>
                    {
                        /* Expedited or Normal Upload */
                        abort = OBJ_Read( index, subindex, objLength, pObjEntry, pData, bCompleteAccess );
 8025be6:	8bb9      	ldrh	r1, [r7, #28]
 8025be8:	7efa      	ldrb	r2, [r7, #27]
 8025bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bec:	9300      	str	r3, [sp, #0]
 8025bee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025bf2:	9301      	str	r3, [sp, #4]
 8025bf4:	4608      	mov	r0, r1
 8025bf6:	4611      	mov	r1, r2
 8025bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025bfa:	697b      	ldr	r3, [r7, #20]
 8025bfc:	f7fe fd14 	bl	8024628 <OBJ_Read>
 8025c00:	4603      	mov	r3, r0
 8025c02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        if ( abort == ABORTIDX_WORKING )
 8025c06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025c0a:	2bff      	cmp	r3, #255	; 0xff
 8025c0c:	f040 8082 	bne.w	8025d14 <SDOS_SdoInd+0x510>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_READ;
 8025c10:	4b61      	ldr	r3, [pc, #388]	; (8025d98 <SDOS_SdoInd+0x594>)
 8025c12:	2203      	movs	r2, #3
 8025c14:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 8025c16:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025c1a:	2b00      	cmp	r3, #0
 8025c1c:	bf14      	ite	ne
 8025c1e:	2301      	movne	r3, #1
 8025c20:	2300      	moveq	r3, #0
 8025c22:	b2da      	uxtb	r2, r3
 8025c24:	4b5d      	ldr	r3, [pc, #372]	; (8025d9c <SDOS_SdoInd+0x598>)
 8025c26:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 8025c28:	4a5d      	ldr	r2, [pc, #372]	; (8025da0 <SDOS_SdoInd+0x59c>)
 8025c2a:	7efb      	ldrb	r3, [r7, #27]
 8025c2c:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8025c2e:	4a5d      	ldr	r2, [pc, #372]	; (8025da4 <SDOS_SdoInd+0x5a0>)
 8025c30:	8bbb      	ldrh	r3, [r7, #28]
 8025c32:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = objLength;
 8025c34:	4a5c      	ldr	r2, [pc, #368]	; (8025da8 <SDOS_SdoInd+0x5a4>)
 8025c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c38:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8025c3a:	4a5d      	ldr	r2, [pc, #372]	; (8025db0 <SDOS_SdoInd+0x5ac>)
 8025c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c3e:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Read;
 8025c40:	697b      	ldr	r3, [r7, #20]
 8025c42:	69db      	ldr	r3, [r3, #28]
 8025c44:	4a5b      	ldr	r2, [pc, #364]	; (8025db4 <SDOS_SdoInd+0x5b0>)
 8025c46:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 8025c48:	4b5b      	ldr	r3, [pc, #364]	; (8025db8 <SDOS_SdoInd+0x5b4>)
 8025c4a:	2201      	movs	r2, #1
 8025c4c:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 8025c4e:	4a5b      	ldr	r2, [pc, #364]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025c50:	687b      	ldr	r3, [r7, #4]
 8025c52:	6013      	str	r3, [r2, #0]
                            
                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 8025c54:	4b59      	ldr	r3, [pc, #356]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025c56:	681b      	ldr	r3, [r3, #0]
 8025c58:	2200      	movs	r2, #0
 8025c5a:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8025c5c:	4b57      	ldr	r3, [pc, #348]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025c5e:	681b      	ldr	r3, [r3, #0]
 8025c60:	4a56      	ldr	r2, [pc, #344]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025c62:	6812      	ldr	r2, [r2, #0]
 8025c64:	7a12      	ldrb	r2, [r2, #8]
 8025c66:	b2d1      	uxtb	r1, r2
 8025c68:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8025c6c:	f022 020f 	bic.w	r2, r2, #15
 8025c70:	b2d2      	uxtb	r2, r2
 8025c72:	430a      	orrs	r2, r1
 8025c74:	b2d2      	uxtb	r2, r2
 8025c76:	b2d2      	uxtb	r2, r2
 8025c78:	721a      	strb	r2, [r3, #8]
                            return 0;
 8025c7a:	2300      	movs	r3, #0
 8025c7c:	e087      	b.n	8025d8e <SDOS_SdoInd+0x58a>
                        }
                    }
                    else
                    {
                        /* Expedited or Normal Download */
                        abort = OBJ_Write( index, subindex, dataSize, pObjEntry, pData, bCompleteAccess );
 8025c7e:	8bb9      	ldrh	r1, [r7, #28]
 8025c80:	7efa      	ldrb	r2, [r7, #27]
 8025c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025c84:	9300      	str	r3, [sp, #0]
 8025c86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025c8a:	9301      	str	r3, [sp, #4]
 8025c8c:	4608      	mov	r0, r1
 8025c8e:	4611      	mov	r1, r2
 8025c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025c92:	697b      	ldr	r3, [r7, #20]
 8025c94:	f7fe ffa0 	bl	8024bd8 <OBJ_Write>
 8025c98:	4603      	mov	r3, r0
 8025c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        if ( abort == ABORTIDX_WORKING )
 8025c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025ca2:	2bff      	cmp	r3, #255	; 0xff
 8025ca4:	d136      	bne.n	8025d14 <SDOS_SdoInd+0x510>
                        {
                            /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                            u8PendingSdo = SDO_PENDING_WRITE;
 8025ca6:	4b3c      	ldr	r3, [pc, #240]	; (8025d98 <SDOS_SdoInd+0x594>)
 8025ca8:	2201      	movs	r2, #1
 8025caa:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 8025cac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8025cb0:	2b00      	cmp	r3, #0
 8025cb2:	bf14      	ite	ne
 8025cb4:	2301      	movne	r3, #1
 8025cb6:	2300      	moveq	r3, #0
 8025cb8:	b2da      	uxtb	r2, r3
 8025cba:	4b38      	ldr	r3, [pc, #224]	; (8025d9c <SDOS_SdoInd+0x598>)
 8025cbc:	701a      	strb	r2, [r3, #0]
                            u8StoreSubindex = subindex;
 8025cbe:	4a38      	ldr	r2, [pc, #224]	; (8025da0 <SDOS_SdoInd+0x59c>)
 8025cc0:	7efb      	ldrb	r3, [r7, #27]
 8025cc2:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 8025cc4:	4a37      	ldr	r2, [pc, #220]	; (8025da4 <SDOS_SdoInd+0x5a0>)
 8025cc6:	8bbb      	ldrh	r3, [r7, #28]
 8025cc8:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = dataSize;
 8025cca:	4a37      	ldr	r2, [pc, #220]	; (8025da8 <SDOS_SdoInd+0x5a4>)
 8025ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025cce:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 8025cd0:	4a37      	ldr	r2, [pc, #220]	; (8025db0 <SDOS_SdoInd+0x5ac>)
 8025cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cd4:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Write;
 8025cd6:	697b      	ldr	r3, [r7, #20]
 8025cd8:	6a1b      	ldr	r3, [r3, #32]
 8025cda:	4a36      	ldr	r2, [pc, #216]	; (8025db4 <SDOS_SdoInd+0x5b0>)
 8025cdc:	6013      	str	r3, [r2, #0]

                            bSdoInWork = TRUE;
 8025cde:	4b36      	ldr	r3, [pc, #216]	; (8025db8 <SDOS_SdoInd+0x5b4>)
 8025ce0:	2201      	movs	r2, #1
 8025ce2:	701a      	strb	r2, [r3, #0]
                            /* we have to store the buffer and the response header */
                            pSdoResStored = pSdoInd;
 8025ce4:	4a35      	ldr	r2, [pc, #212]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	6013      	str	r3, [r2, #0]

                            /*update command field*/
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 8025cea:	4b34      	ldr	r3, [pc, #208]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025cec:	681b      	ldr	r3, [r3, #0]
 8025cee:	2200      	movs	r2, #0
 8025cf0:	721a      	strb	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8025cf2:	4b32      	ldr	r3, [pc, #200]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025cf4:	681b      	ldr	r3, [r3, #0]
 8025cf6:	4a31      	ldr	r2, [pc, #196]	; (8025dbc <SDOS_SdoInd+0x5b8>)
 8025cf8:	6812      	ldr	r2, [r2, #0]
 8025cfa:	7a12      	ldrb	r2, [r2, #8]
 8025cfc:	b2d1      	uxtb	r1, r2
 8025cfe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8025d02:	f022 020f 	bic.w	r2, r2, #15
 8025d06:	b2d2      	uxtb	r2, r2
 8025d08:	430a      	orrs	r2, r1
 8025d0a:	b2d2      	uxtb	r2, r2
 8025d0c:	b2d2      	uxtb	r2, r2
 8025d0e:	721a      	strb	r2, [r3, #8]
                            return 0;
 8025d10:	2300      	movs	r3, #0
 8025d12:	e03c      	b.n	8025d8e <SDOS_SdoInd+0x58a>
 8025d14:	e003      	b.n	8025d1e <SDOS_SdoInd+0x51a>
            } /* if ( abort == 0 ) */

        } //if(pObjEntry) (Object handle found)
        else
        {
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8025d16:	2308      	movs	r3, #8
 8025d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        break;
 8025d1c:	e020      	b.n	8025d60 <SDOS_SdoInd+0x55c>
 8025d1e:	e01f      	b.n	8025d60 <SDOS_SdoInd+0x55c>

    case SDOSERVICE_DOWNLOADSEGMENTREQ:
    case SDOSERVICE_UPLOADSEGMENTREQ:
        if ( command == nSdoSegService )
 8025d20:	4b27      	ldr	r3, [pc, #156]	; (8025dc0 <SDOS_SdoInd+0x5bc>)
 8025d22:	781b      	ldrb	r3, [r3, #0]
 8025d24:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8025d28:	429a      	cmp	r2, r3
 8025d2a:	d111      	bne.n	8025d50 <SDOS_SdoInd+0x54c>
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 8025d2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025d30:	2b00      	cmp	r3, #0
 8025d32:	d106      	bne.n	8025d42 <SDOS_SdoInd+0x53e>
            {
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8025d34:	6878      	ldr	r0, [r7, #4]
 8025d36:	f7ff fab7 	bl	80252a8 <SdoDownloadSegmentInd>
 8025d3a:	4603      	mov	r3, r0
 8025d3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        }
        break;
 8025d40:	e00e      	b.n	8025d60 <SDOS_SdoInd+0x55c>
            {
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            }
            else
            {
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 8025d42:	6878      	ldr	r0, [r7, #4]
 8025d44:	f7ff fbf2 	bl	802552c <SdoUploadSegmentInd>
 8025d48:	4603      	mov	r3, r0
 8025d4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        }
        break;
 8025d4e:	e007      	b.n	8025d60 <SDOS_SdoInd+0x55c>
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8025d50:	2303      	movs	r3, #3
 8025d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        break;
 8025d56:	e003      	b.n	8025d60 <SDOS_SdoInd+0x55c>

    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8025d58:	2303      	movs	r3, #3
 8025d5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        break;
 8025d5e:	bf00      	nop
    }

    if(abort != ABORTIDX_WORKING)
 8025d60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8025d64:	2bff      	cmp	r3, #255	; 0xff
 8025d66:	d011      	beq.n	8025d8c <SDOS_SdoInd+0x588>
    {
        /*  type cast was added because of warning */
        SdoRes(abort, command, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16) dataSize, objLength, pSdoInd);
 8025d68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8025d6c:	f003 0310 	and.w	r3, r3, #16
 8025d70:	b2da      	uxtb	r2, r3
 8025d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d74:	b29c      	uxth	r4, r3
 8025d76:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8025d7a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8025d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025d80:	9300      	str	r3, [sp, #0]
 8025d82:	687b      	ldr	r3, [r7, #4]
 8025d84:	9301      	str	r3, [sp, #4]
 8025d86:	4623      	mov	r3, r4
 8025d88:	f7ff fc84 	bl	8025694 <SdoRes>
    }

    return 0;
 8025d8c:	2300      	movs	r3, #0
}
 8025d8e:	4618      	mov	r0, r3
 8025d90:	373c      	adds	r7, #60	; 0x3c
 8025d92:	46bd      	mov	sp, r7
 8025d94:	bd90      	pop	{r4, r7, pc}
 8025d96:	bf00      	nop
 8025d98:	1fff289c 	.word	0x1fff289c
 8025d9c:	1fff289d 	.word	0x1fff289d
 8025da0:	1fff28d0 	.word	0x1fff28d0
 8025da4:	1fff28ce 	.word	0x1fff28ce
 8025da8:	1fff28ac 	.word	0x1fff28ac
 8025dac:	1fff28b0 	.word	0x1fff28b0
 8025db0:	1fff2888 	.word	0x1fff2888
 8025db4:	1fff2898 	.word	0x1fff2898
 8025db8:	1fff1623 	.word	0x1fff1623
 8025dbc:	1fff28a8 	.word	0x1fff28a8
 8025dc0:	1fff289f 	.word	0x1fff289f
 8025dc4:	1fff288c 	.word	0x1fff288c
 8025dc8:	1fff28b4 	.word	0x1fff28b4
 8025dcc:	1fff28cc 	.word	0x1fff28cc
 8025dd0:	1fff28c8 	.word	0x1fff28c8

08025dd4 <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 8025dd4:	b5b0      	push	{r4, r5, r7, lr}
 8025dd6:	b088      	sub	sp, #32
 8025dd8:	af02      	add	r7, sp, #8
 8025dda:	4603      	mov	r3, r0
 8025ddc:	60b9      	str	r1, [r7, #8]
 8025dde:	607a      	str	r2, [r7, #4]
 8025de0:	73fb      	strb	r3, [r7, #15]
    UINT16 dataSize = 0;
 8025de2:	2300      	movs	r3, #0
 8025de4:	82fb      	strh	r3, [r7, #22]

    if (bSdoInWork)
 8025de6:	4b3a      	ldr	r3, [pc, #232]	; (8025ed0 <SDOS_SdoRes+0xfc>)
 8025de8:	781b      	ldrb	r3, [r3, #0]
 8025dea:	2b00      	cmp	r3, #0
 8025dec:	d06c      	beq.n	8025ec8 <SDOS_SdoRes+0xf4>
    {
        /* SDO-Response is expected */
        UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 8025dee:	4b39      	ldr	r3, [pc, #228]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025df0:	681b      	ldr	r3, [r3, #0]
 8025df2:	7a1b      	ldrb	r3, [r3, #8]
 8025df4:	f023 031f 	bic.w	r3, r3, #31
 8025df8:	757b      	strb	r3, [r7, #21]
        UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 8025dfa:	4b36      	ldr	r3, [pc, #216]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025dfc:	681b      	ldr	r3, [r3, #0]
 8025dfe:	7a1b      	ldrb	r3, [r3, #8]
 8025e00:	f003 0310 	and.w	r3, r3, #16
 8025e04:	753b      	strb	r3, [r7, #20]

        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 8025e06:	7d7b      	ldrb	r3, [r7, #21]
 8025e08:	2b40      	cmp	r3, #64	; 0x40
 8025e0a:	d14d      	bne.n	8025ea8 <SDOS_SdoRes+0xd4>
        {
            /* dataSize contains the available size in one mailbox */
            dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 8025e0c:	4b32      	ldr	r3, [pc, #200]	; (8025ed8 <SDOS_SdoRes+0x104>)
 8025e0e:	881b      	ldrh	r3, [r3, #0]
 8025e10:	3b10      	subs	r3, #16
 8025e12:	82fb      	strh	r3, [r7, #22]
            if ( dataSize < objLength )
 8025e14:	8afa      	ldrh	r2, [r7, #22]
 8025e16:	68bb      	ldr	r3, [r7, #8]
 8025e18:	429a      	cmp	r2, r3
 8025e1a:	d21f      	bcs.n	8025e5c <SDOS_SdoRes+0x88>
            {
                /* Segmented Upload, the variables for the segmented transfer should be initialized */
                bSdoSegFollows         = TRUE;
 8025e1c:	4b2f      	ldr	r3, [pc, #188]	; (8025edc <SDOS_SdoRes+0x108>)
 8025e1e:	2201      	movs	r2, #1
 8025e20:	701a      	strb	r2, [r3, #0]
                bSdoSegLastToggle     = 1;
 8025e22:	4b2f      	ldr	r3, [pc, #188]	; (8025ee0 <SDOS_SdoRes+0x10c>)
 8025e24:	2201      	movs	r2, #1
 8025e26:	701a      	strb	r2, [r3, #0]
                bSdoSegAccess             = completeAccess;
 8025e28:	4a2e      	ldr	r2, [pc, #184]	; (8025ee4 <SDOS_SdoRes+0x110>)
 8025e2a:	7d3b      	ldrb	r3, [r7, #20]
 8025e2c:	7013      	strb	r3, [r2, #0]
                nSdoSegCompleteSize    = objLength;
 8025e2e:	4a2e      	ldr	r2, [pc, #184]	; (8025ee8 <SDOS_SdoRes+0x114>)
 8025e30:	68bb      	ldr	r3, [r7, #8]
 8025e32:	6013      	str	r3, [r2, #0]
                nSdoSegService            = SDOSERVICE_UPLOADSEGMENTREQ;
 8025e34:	4b2d      	ldr	r3, [pc, #180]	; (8025eec <SDOS_SdoRes+0x118>)
 8025e36:	2260      	movs	r2, #96	; 0x60
 8025e38:	701a      	strb	r2, [r3, #0]
                pSdoSegData                = (UINT16 VARMEM *) pData;
 8025e3a:	4a2d      	ldr	r2, [pc, #180]	; (8025ef0 <SDOS_SdoRes+0x11c>)
 8025e3c:	687b      	ldr	r3, [r7, #4]
 8025e3e:	6013      	str	r3, [r2, #0]
                /* the first segment shall be copied */
/* ECATCHANGE_START(V5.12)*/
                MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 8025e40:	4b24      	ldr	r3, [pc, #144]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025e42:	681b      	ldr	r3, [r3, #0]
 8025e44:	f103 0210 	add.w	r2, r3, #16
 8025e48:	8afb      	ldrh	r3, [r7, #22]
 8025e4a:	4610      	mov	r0, r2
 8025e4c:	6879      	ldr	r1, [r7, #4]
 8025e4e:	461a      	mov	r2, r3
 8025e50:	f003 fffc 	bl	8029e4c <memcpy>
/* ECATCHANGE_END(V5.12)*/
                nSdoSegBytesToHandle = dataSize;
 8025e54:	8afb      	ldrh	r3, [r7, #22]
 8025e56:	4a27      	ldr	r2, [pc, #156]	; (8025ef4 <SDOS_SdoRes+0x120>)
 8025e58:	6013      	str	r3, [r2, #0]
 8025e5a:	e025      	b.n	8025ea8 <SDOS_SdoRes+0xd4>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
 8025e5c:	68bb      	ldr	r3, [r7, #8]
 8025e5e:	2b04      	cmp	r3, #4
 8025e60:	d813      	bhi.n	8025e8a <SDOS_SdoRes+0xb6>
 8025e62:	68bb      	ldr	r3, [r7, #8]
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d010      	beq.n	8025e8a <SDOS_SdoRes+0xb6>
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 8025e68:	4b1a      	ldr	r3, [pc, #104]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025e6a:	681b      	ldr	r3, [r3, #0]
 8025e6c:	f103 020c 	add.w	r2, r3, #12
 8025e70:	687b      	ldr	r3, [r7, #4]
 8025e72:	429a      	cmp	r2, r3
 8025e74:	d008      	beq.n	8025e88 <SDOS_SdoRes+0xb4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
/* ECATCHANGE_START(V5.12)*/
                    MBXMEMCPY((UINT16 *)((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8025e76:	4b17      	ldr	r3, [pc, #92]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025e78:	681b      	ldr	r3, [r3, #0]
 8025e7a:	330c      	adds	r3, #12
 8025e7c:	4618      	mov	r0, r3
 8025e7e:	6879      	ldr	r1, [r7, #4]
 8025e80:	68ba      	ldr	r2, [r7, #8]
 8025e82:	f003 ffe3 	bl	8029e4c <memcpy>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 8025e86:	e00f      	b.n	8025ea8 <SDOS_SdoRes+0xd4>
 8025e88:	e00e      	b.n	8025ea8 <SDOS_SdoRes+0xd4>
                }
            }
            else
            {
                /* Normal response */
                if ( pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data )
 8025e8a:	4b12      	ldr	r3, [pc, #72]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025e8c:	681b      	ldr	r3, [r3, #0]
 8025e8e:	f103 0210 	add.w	r2, r3, #16
 8025e92:	687b      	ldr	r3, [r7, #4]
 8025e94:	429a      	cmp	r2, r3
 8025e96:	d007      	beq.n	8025ea8 <SDOS_SdoRes+0xd4>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
/* ECATCHANGE_START(V5.12)*/
                    MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8025e98:	4b0e      	ldr	r3, [pc, #56]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025e9a:	681b      	ldr	r3, [r3, #0]
 8025e9c:	3310      	adds	r3, #16
 8025e9e:	4618      	mov	r0, r3
 8025ea0:	6879      	ldr	r1, [r7, #4]
 8025ea2:	68ba      	ldr	r2, [r7, #8]
 8025ea4:	f003 ffd2 	bl	8029e4c <memcpy>
                }
            }
        }

        /* SDO access is finished, send the response */
        bSdoInWork = FALSE;
 8025ea8:	4b09      	ldr	r3, [pc, #36]	; (8025ed0 <SDOS_SdoRes+0xfc>)
 8025eaa:	2200      	movs	r2, #0
 8025eac:	701a      	strb	r2, [r3, #0]
        SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 8025eae:	4b09      	ldr	r3, [pc, #36]	; (8025ed4 <SDOS_SdoRes+0x100>)
 8025eb0:	681b      	ldr	r3, [r3, #0]
 8025eb2:	7bf8      	ldrb	r0, [r7, #15]
 8025eb4:	7d79      	ldrb	r1, [r7, #21]
 8025eb6:	7d3d      	ldrb	r5, [r7, #20]
 8025eb8:	8afc      	ldrh	r4, [r7, #22]
 8025eba:	68ba      	ldr	r2, [r7, #8]
 8025ebc:	9200      	str	r2, [sp, #0]
 8025ebe:	9301      	str	r3, [sp, #4]
 8025ec0:	462a      	mov	r2, r5
 8025ec2:	4623      	mov	r3, r4
 8025ec4:	f7ff fbe6 	bl	8025694 <SdoRes>
    }
}
 8025ec8:	3718      	adds	r7, #24
 8025eca:	46bd      	mov	sp, r7
 8025ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8025ece:	bf00      	nop
 8025ed0:	1fff1623 	.word	0x1fff1623
 8025ed4:	1fff28a8 	.word	0x1fff28a8
 8025ed8:	1fff27d8 	.word	0x1fff27d8
 8025edc:	1fff2891 	.word	0x1fff2891
 8025ee0:	1fff289e 	.word	0x1fff289e
 8025ee4:	1fff2890 	.word	0x1fff2890
 8025ee8:	1fff2894 	.word	0x1fff2894
 8025eec:	1fff289f 	.word	0x1fff289f
 8025ef0:	1fff28b0 	.word	0x1fff28b0
 8025ef4:	1fff288c 	.word	0x1fff288c

08025ef8 <SODS_ClearPendingResponse>:
\brief    Clear the variables handling a pending SDO Response
           This function shall be called before the other mailbox data pointer are set to NULL
*////////////////////////////////////////////////////////////////////////////////////////

void  SODS_ClearPendingResponse()
{
 8025ef8:	b580      	push	{r7, lr}
 8025efa:	af00      	add	r7, sp, #0
    if ((bSdoInWork == TRUE) && (pSdoResStored != NULL) && (((TMBX MBXMEM *)pSdoResStored) != psRepeatMbx) && (((TMBX MBXMEM *)pSdoResStored) != psStoreMbx))
 8025efc:	4b23      	ldr	r3, [pc, #140]	; (8025f8c <SODS_ClearPendingResponse+0x94>)
 8025efe:	781b      	ldrb	r3, [r3, #0]
 8025f00:	2b00      	cmp	r3, #0
 8025f02:	d017      	beq.n	8025f34 <SODS_ClearPendingResponse+0x3c>
 8025f04:	4b22      	ldr	r3, [pc, #136]	; (8025f90 <SODS_ClearPendingResponse+0x98>)
 8025f06:	681b      	ldr	r3, [r3, #0]
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	d013      	beq.n	8025f34 <SODS_ClearPendingResponse+0x3c>
 8025f0c:	4b20      	ldr	r3, [pc, #128]	; (8025f90 <SODS_ClearPendingResponse+0x98>)
 8025f0e:	681a      	ldr	r2, [r3, #0]
 8025f10:	4b20      	ldr	r3, [pc, #128]	; (8025f94 <SODS_ClearPendingResponse+0x9c>)
 8025f12:	681b      	ldr	r3, [r3, #0]
 8025f14:	429a      	cmp	r2, r3
 8025f16:	d00d      	beq.n	8025f34 <SODS_ClearPendingResponse+0x3c>
 8025f18:	4b1d      	ldr	r3, [pc, #116]	; (8025f90 <SODS_ClearPendingResponse+0x98>)
 8025f1a:	681a      	ldr	r2, [r3, #0]
 8025f1c:	4b1e      	ldr	r3, [pc, #120]	; (8025f98 <SODS_ClearPendingResponse+0xa0>)
 8025f1e:	681b      	ldr	r3, [r3, #0]
 8025f20:	429a      	cmp	r2, r3
 8025f22:	d007      	beq.n	8025f34 <SODS_ClearPendingResponse+0x3c>
    {
        APPL_FreeMailboxBuffer(pSdoResStored);
 8025f24:	4b1a      	ldr	r3, [pc, #104]	; (8025f90 <SODS_ClearPendingResponse+0x98>)
 8025f26:	681b      	ldr	r3, [r3, #0]
 8025f28:	4618      	mov	r0, r3
 8025f2a:	f003 ff77 	bl	8029e1c <free>
        pSdoResStored = NULL;
 8025f2e:	4b18      	ldr	r3, [pc, #96]	; (8025f90 <SODS_ClearPendingResponse+0x98>)
 8025f30:	2200      	movs	r2, #0
 8025f32:	601a      	str	r2, [r3, #0]
    }

    u8PendingSdo = 0;
 8025f34:	4b19      	ldr	r3, [pc, #100]	; (8025f9c <SODS_ClearPendingResponse+0xa4>)
 8025f36:	2200      	movs	r2, #0
 8025f38:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8025f3a:	4b19      	ldr	r3, [pc, #100]	; (8025fa0 <SODS_ClearPendingResponse+0xa8>)
 8025f3c:	2200      	movs	r2, #0
 8025f3e:	701a      	strb	r2, [r3, #0]
    u16StoreIndex = 0;
 8025f40:	4b18      	ldr	r3, [pc, #96]	; (8025fa4 <SODS_ClearPendingResponse+0xac>)
 8025f42:	2200      	movs	r2, #0
 8025f44:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 8025f46:	4b18      	ldr	r3, [pc, #96]	; (8025fa8 <SODS_ClearPendingResponse+0xb0>)
 8025f48:	2200      	movs	r2, #0
 8025f4a:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8025f4c:	4b17      	ldr	r3, [pc, #92]	; (8025fac <SODS_ClearPendingResponse+0xb4>)
 8025f4e:	2200      	movs	r2, #0
 8025f50:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 8025f52:	4b17      	ldr	r3, [pc, #92]	; (8025fb0 <SODS_ClearPendingResponse+0xb8>)
 8025f54:	2200      	movs	r2, #0
 8025f56:	601a      	str	r2, [r3, #0]
    pSdoPendFunc = NULL;
 8025f58:	4b16      	ldr	r3, [pc, #88]	; (8025fb4 <SODS_ClearPendingResponse+0xbc>)
 8025f5a:	2200      	movs	r2, #0
 8025f5c:	601a      	str	r2, [r3, #0]
    bSdoInWork = FALSE;
 8025f5e:	4b0b      	ldr	r3, [pc, #44]	; (8025f8c <SODS_ClearPendingResponse+0x94>)
 8025f60:	2200      	movs	r2, #0
 8025f62:	701a      	strb	r2, [r3, #0]

    if (pSdoSegData != NULL)
 8025f64:	4b14      	ldr	r3, [pc, #80]	; (8025fb8 <SODS_ClearPendingResponse+0xc0>)
 8025f66:	681b      	ldr	r3, [r3, #0]
 8025f68:	2b00      	cmp	r3, #0
 8025f6a:	d007      	beq.n	8025f7c <SODS_ClearPendingResponse+0x84>
    {
        FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8025f6c:	4b12      	ldr	r3, [pc, #72]	; (8025fb8 <SODS_ClearPendingResponse+0xc0>)
 8025f6e:	681b      	ldr	r3, [r3, #0]
 8025f70:	4618      	mov	r0, r3
 8025f72:	f003 ff53 	bl	8029e1c <free>
        pSdoSegData = NULL;
 8025f76:	4b10      	ldr	r3, [pc, #64]	; (8025fb8 <SODS_ClearPendingResponse+0xc0>)
 8025f78:	2200      	movs	r2, #0
 8025f7a:	601a      	str	r2, [r3, #0]
    }
    
    nSdoSegBytesToHandle = 0;
 8025f7c:	4b0f      	ldr	r3, [pc, #60]	; (8025fbc <SODS_ClearPendingResponse+0xc4>)
 8025f7e:	2200      	movs	r2, #0
 8025f80:	601a      	str	r2, [r3, #0]
    nSdoSegService = 0;
 8025f82:	4b0f      	ldr	r3, [pc, #60]	; (8025fc0 <SODS_ClearPendingResponse+0xc8>)
 8025f84:	2200      	movs	r2, #0
 8025f86:	701a      	strb	r2, [r3, #0]
    
}
 8025f88:	bd80      	pop	{r7, pc}
 8025f8a:	bf00      	nop
 8025f8c:	1fff1623 	.word	0x1fff1623
 8025f90:	1fff28a8 	.word	0x1fff28a8
 8025f94:	1fff27f0 	.word	0x1fff27f0
 8025f98:	1fff27d4 	.word	0x1fff27d4
 8025f9c:	1fff289c 	.word	0x1fff289c
 8025fa0:	1fff289d 	.word	0x1fff289d
 8025fa4:	1fff28ce 	.word	0x1fff28ce
 8025fa8:	1fff28d0 	.word	0x1fff28d0
 8025fac:	1fff28ac 	.word	0x1fff28ac
 8025fb0:	1fff2888 	.word	0x1fff2888
 8025fb4:	1fff2898 	.word	0x1fff2898
 8025fb8:	1fff28b0 	.word	0x1fff28b0
 8025fbc:	1fff288c 	.word	0x1fff288c
 8025fc0:	1fff289f 	.word	0x1fff289f

08025fc4 <SDOS_SdoInfoInd>:
            is received from the master and calls depending from
            the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd( TSDOINFORMATION MBXMEM *pSdoInfoInd )
{
 8025fc4:	b590      	push	{r4, r7, lr}
 8025fc6:	b08f      	sub	sp, #60	; 0x3c
 8025fc8:	af02      	add	r7, sp, #8
 8025fca:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 8025fcc:	2300      	movs	r3, #0
 8025fce:	73fb      	strb	r3, [r7, #15]
    /* the variable opCode contains the requested SDO Information type */
    UINT8 opCode = (UINT8) ((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 8025fd0:	687b      	ldr	r3, [r7, #4]
 8025fd2:	891b      	ldrh	r3, [r3, #8]
 8025fd4:	b2db      	uxtb	r3, r3
 8025fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025fda:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    UINT16 index;
    UINT8 flags = COE_SERVICE;
 8025fde:	2302      	movs	r3, #2
 8025fe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the requested SDO Information type */
    if ( opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q )
 8025fe4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025fe8:	2b05      	cmp	r3, #5
 8025fea:	d105      	bne.n	8025ff8 <SDOS_SdoInfoInd+0x34>
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT )
 8025fec:	687b      	ldr	r3, [r7, #4]
 8025fee:	881b      	ldrh	r3, [r3, #0]
 8025ff0:	2b09      	cmp	r3, #9
 8025ff2:	d807      	bhi.n	8026004 <SDOS_SdoInfoInd+0x40>
        {
            return MBXERR_SIZETOOSHORT;
 8025ff4:	2306      	movs	r3, #6
 8025ff6:	e1d9      	b.n	80263ac <SDOS_SdoInfoInd+0x3e8>
        }
    }
    else
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT )
 8025ff8:	687b      	ldr	r3, [r7, #4]
 8025ffa:	881b      	ldrh	r3, [r3, #0]
 8025ffc:	2b07      	cmp	r3, #7
 8025ffe:	d801      	bhi.n	8026004 <SDOS_SdoInfoInd+0x40>
        {
            return MBXERR_SIZETOOSHORT;
 8026000:	2306      	movs	r3, #6
 8026002:	e1d3      	b.n	80263ac <SDOS_SdoInfoInd+0x3e8>
        }
    }

    switch (opCode)
 8026004:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026008:	2b03      	cmp	r3, #3
 802600a:	f000 80ca 	beq.w	80261a2 <SDOS_SdoInfoInd+0x1de>
 802600e:	2b05      	cmp	r3, #5
 8026010:	f000 80c7 	beq.w	80261a2 <SDOS_SdoInfoInd+0x1de>
 8026014:	2b01      	cmp	r3, #1
 8026016:	f040 8199 	bne.w	802634c <SDOS_SdoInfoInd+0x388>
    {
    case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
        /* an object list is requested, check if the list type is supported */
        if (SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX)
 802601a:	687b      	ldr	r3, [r7, #4]
 802601c:	899b      	ldrh	r3, [r3, #12]
 802601e:	2b05      	cmp	r3, #5
 8026020:	f200 80be 	bhi.w	80261a0 <SDOS_SdoInfoInd+0x1dc>
        {
            UINT16 size = 0;
 8026024:	2300      	movs	r3, #0
 8026026:	85bb      	strh	r3, [r7, #44]	; 0x2c
            /* the variable listType contains the requested listType */
            UINT8 listType = (UINT8)SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 8026028:	687b      	ldr	r3, [r7, #4]
 802602a:	899b      	ldrh	r3, [r3, #12]
 802602c:	f887 3020 	strb.w	r3, [r7, #32]

            /* the SDO Information Header has to be stored because this function will be
               called again if the response could not be sent with one mailbox service, the
               variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
               for the following calls */
            MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 8026030:	48a8      	ldr	r0, [pc, #672]	; (80262d4 <SDOS_SdoInfoInd+0x310>)
 8026032:	6879      	ldr	r1, [r7, #4]
 8026034:	220e      	movs	r2, #14
 8026036:	f003 ff09 	bl	8029e4c <memcpy>
            if (listType-- == 0)
 802603a:	f897 3020 	ldrb.w	r3, [r7, #32]
 802603e:	1e5a      	subs	r2, r3, #1
 8026040:	f887 2020 	strb.w	r2, [r7, #32]
 8026044:	2b00      	cmp	r3, #0
 8026046:	d122      	bne.n	802608e <SDOS_SdoInfoInd+0xca>
                /* List-Type 0: length of the lists */
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
 8026048:	4ba3      	ldr	r3, [pc, #652]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 802604a:	2200      	movs	r2, #0
 802604c:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 802604e:	2300      	movs	r3, #0
 8026050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8026054:	e014      	b.n	8026080 <SDOS_SdoInfoInd+0xbc>
                {
                    UINT16 n = OBJ_GetNoOfObjects(i);
 8026056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802605a:	4618      	mov	r0, r3
 802605c:	f7fd ffcc 	bl	8023ff8 <OBJ_GetNoOfObjects>
 8026060:	4603      	mov	r3, r0
 8026062:	83fb      	strh	r3, [r7, #30]

                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT >> 1) + i] = SWAPWORD(n);
 8026064:	687b      	ldr	r3, [r7, #4]
 8026066:	1d9a      	adds	r2, r3, #6
 8026068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802606c:	3304      	adds	r3, #4
 802606e:	005b      	lsls	r3, r3, #1
 8026070:	4413      	add	r3, r2
 8026072:	8bfa      	ldrh	r2, [r7, #30]
 8026074:	801a      	strh	r2, [r3, #0]
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8026076:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802607a:	3301      	adds	r3, #1
 802607c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8026080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8026084:	2b04      	cmp	r3, #4
 8026086:	d9e6      	bls.n	8026056 <SDOS_SdoInfoInd+0x92>
                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT >> 1) + i] = SWAPWORD(n);
                }

                /* size of the mailbox service response */
                size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 8026088:	2312      	movs	r3, #18
 802608a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 802608c:	e05a      	b.n	8026144 <SDOS_SdoInfoInd+0x180>
            }
            else
            {
                /* object list with indexes is requested */
                UINT16 MBXMEM * pData;
                UINT16 n = 0;
 802608e:	2300      	movs	r3, #0
 8026090:	83bb      	strh	r3, [r7, #28]

                if (nSdoInfoFragmentsLeft)
 8026092:	4b91      	ldr	r3, [pc, #580]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 8026094:	881b      	ldrh	r3, [r3, #0]
 8026096:	2b00      	cmp	r3, #0
 8026098:	d011      	beq.n	80260be <SDOS_SdoInfoInd+0xfa>
                {
                    /* the next fragment of the SDO Information response shall be sent */
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 802609a:	4b90      	ldr	r3, [pc, #576]	; (80262dc <SDOS_SdoInfoInd+0x318>)
 802609c:	881b      	ldrh	r3, [r3, #0]
 802609e:	3b0c      	subs	r3, #12
 80260a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO >> 1];
 80260a2:	687b      	ldr	r3, [r7, #4]
 80260a4:	3306      	adds	r3, #6
 80260a6:	3306      	adds	r3, #6
 80260a8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* initialize index with the next index to be sent */
                    index = nSdoInfoIndex;
 80260aa:	4b8d      	ldr	r3, [pc, #564]	; (80262e0 <SDOS_SdoInfoInd+0x31c>)
 80260ac:	881b      	ldrh	r3, [r3, #0]
 80260ae:	81bb      	strh	r3, [r7, #12]
                    /* decrement the number of fragments to be sent */
                    nSdoInfoFragmentsLeft--;
 80260b0:	4b89      	ldr	r3, [pc, #548]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 80260b2:	881b      	ldrh	r3, [r3, #0]
 80260b4:	3b01      	subs	r3, #1
 80260b6:	b29a      	uxth	r2, r3
 80260b8:	4b87      	ldr	r3, [pc, #540]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 80260ba:	801a      	strh	r2, [r3, #0]
 80260bc:	e02a      	b.n	8026114 <SDOS_SdoInfoInd+0x150>
                }
                else
                {
                    /* the first fragment of the SDO Information response has to be sent */
                    /* get the number of objects of the requested object list */
                    n = OBJ_GetNoOfObjects(listType);
 80260be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80260c2:	4618      	mov	r0, r3
 80260c4:	f7fd ff98 	bl	8023ff8 <OBJ_GetNoOfObjects>
 80260c8:	4603      	mov	r3, r0
 80260ca:	83bb      	strh	r3, [r7, #28]
                    /* we start with index 0x1000 */
                    index = 0x1000;
 80260cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80260d0:	81bb      	strh	r3, [r7, #12]
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 80260d2:	4b82      	ldr	r3, [pc, #520]	; (80262dc <SDOS_SdoInfoInd+0x318>)
 80260d4:	881b      	ldrh	r3, [r3, #0]
 80260d6:	3b0e      	subs	r3, #14
 80260d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT >> 1];
 80260da:	687b      	ldr	r3, [r7, #4]
 80260dc:	3306      	adds	r3, #6
 80260de:	3308      	adds	r3, #8
 80260e0:	627b      	str	r3, [r7, #36]	; 0x24
                    /*Check if List need to be send in fragments*/
                    if ((n << 1) > size)
 80260e2:	8bbb      	ldrh	r3, [r7, #28]
 80260e4:	005a      	lsls	r2, r3, #1
 80260e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80260e8:	429a      	cmp	r2, r3
 80260ea:	dd10      	ble.n	802610e <SDOS_SdoInfoInd+0x14a>
                        /*number of Bytes to transmit don't fit into one mailbox datagram*/

                        /*calculate number of fragments which need to be send
                        total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments
                        */
                        UINT16 Fragsize = size + 2;
 80260ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80260ee:	3302      	adds	r3, #2
 80260f0:	837b      	strh	r3, [r7, #26]
                        
                        nSdoInfoFragmentsLeft = (((n << 1) - size + (Fragsize - 1)) / Fragsize);
 80260f2:	8bbb      	ldrh	r3, [r7, #28]
 80260f4:	005a      	lsls	r2, r3, #1
 80260f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80260f8:	1ad2      	subs	r2, r2, r3
 80260fa:	8b7b      	ldrh	r3, [r7, #26]
 80260fc:	3b01      	subs	r3, #1
 80260fe:	441a      	add	r2, r3
 8026100:	8b7b      	ldrh	r3, [r7, #26]
 8026102:	fb92 f3f3 	sdiv	r3, r2, r3
 8026106:	b29a      	uxth	r2, r3
 8026108:	4b73      	ldr	r3, [pc, #460]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 802610a:	801a      	strh	r2, [r3, #0]
 802610c:	e002      	b.n	8026114 <SDOS_SdoInfoInd+0x150>
                    }
                    else
                    {
                        nSdoInfoFragmentsLeft = 0;
 802610e:	4b72      	ldr	r3, [pc, #456]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 8026110:	2200      	movs	r2, #0
 8026112:	801a      	strh	r2, [r3, #0]
                    }
                }

                /* get the next part of the requested object list */
                size = OBJ_GetObjectList(listType, &index, size, pData, &abort);
 8026114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8026118:	b298      	uxth	r0, r3
 802611a:	f107 010c 	add.w	r1, r7, #12
 802611e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8026120:	f107 030f 	add.w	r3, r7, #15
 8026124:	9300      	str	r3, [sp, #0]
 8026126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026128:	f7fd ffb2 	bl	8024090 <OBJ_GetObjectList>
 802612c:	4603      	mov	r3, r0
 802612e:	85bb      	strh	r3, [r7, #44]	; 0x2c

                /* store index for next fragment */
                nSdoInfoIndex = index;
 8026130:	89ba      	ldrh	r2, [r7, #12]
 8026132:	4b6b      	ldr	r3, [pc, #428]	; (80262e0 <SDOS_SdoInfoInd+0x31c>)
 8026134:	801a      	strh	r2, [r3, #0]
                /* size contains before the instruction the size still available in the mailbox buffer
                    and shall contain the size of the mailbox response data after the next instruction */
                {
                    size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 8026136:	4b69      	ldr	r3, [pc, #420]	; (80262dc <SDOS_SdoInfoInd+0x318>)
 8026138:	881a      	ldrh	r2, [r3, #0]
 802613a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802613c:	1ad3      	subs	r3, r2, r3
 802613e:	b29b      	uxth	r3, r3
 8026140:	3b06      	subs	r3, #6
 8026142:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
            }

            /* size of the mailbox response data */
            pSdoInfoInd->MbxHeader.Length = size;
 8026144:	687b      	ldr	r3, [r7, #4]
 8026146:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8026148:	801a      	strh	r2, [r3, #0]

            if (abort == 0)
 802614a:	7bfb      	ldrb	r3, [r7, #15]
 802614c:	2b00      	cmp	r3, #0
 802614e:	d127      	bne.n	80261a0 <SDOS_SdoInfoInd+0x1dc>
            {
                pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8026150:	687b      	ldr	r3, [r7, #4]
 8026152:	891b      	ldrh	r3, [r3, #8]
 8026154:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026158:	b29a      	uxth	r2, r3
 802615a:	687b      	ldr	r3, [r7, #4]
 802615c:	811a      	strh	r2, [r3, #8]
                pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 802615e:	687b      	ldr	r3, [r7, #4]
 8026160:	891b      	ldrh	r3, [r3, #8]
 8026162:	f043 0302 	orr.w	r3, r3, #2
 8026166:	b29a      	uxth	r2, r3
 8026168:	687b      	ldr	r3, [r7, #4]
 802616a:	811a      	strh	r2, [r3, #8]
                /* number of fragments still has to be sent */
                pSdoInfoInd->SdoHeader.FragmentsLeft = SWAPWORD(nSdoInfoFragmentsLeft);
 802616c:	4b5a      	ldr	r3, [pc, #360]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 802616e:	881a      	ldrh	r2, [r3, #0]
 8026170:	687b      	ldr	r3, [r7, #4]
 8026172:	815a      	strh	r2, [r3, #10]

                if (nSdoInfoFragmentsLeft)
 8026174:	4b58      	ldr	r3, [pc, #352]	; (80262d8 <SDOS_SdoInfoInd+0x314>)
 8026176:	881b      	ldrh	r3, [r3, #0]
 8026178:	2b00      	cmp	r3, #0
 802617a:	d011      	beq.n	80261a0 <SDOS_SdoInfoInd+0x1dc>
                {
                    /* there still are fragments to be sent,
                       the InComplete flag in the SDO Information response has to be sent */
                    pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEADER_INCOMPLETE_MASK;
 802617c:	687b      	ldr	r3, [r7, #4]
 802617e:	891b      	ldrh	r3, [r3, #8]
 8026180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026184:	b29a      	uxth	r2, r3
 8026186:	687b      	ldr	r3, [r7, #4]
 8026188:	811a      	strh	r2, [r3, #8]
                    pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 802618a:	687b      	ldr	r3, [r7, #4]
 802618c:	891b      	ldrh	r3, [r3, #8]
 802618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026192:	b29a      	uxth	r2, r3
 8026194:	687b      	ldr	r3, [r7, #4]
 8026196:	811a      	strh	r2, [r3, #8]
                    /* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
                       indicate the mailbox handler that still fragments has to be sent so that this
                        function shall be called again from COE_ContinueInd when the actual mailbox buffer
                        was sent */
                    flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 8026198:	2382      	movs	r3, #130	; 0x82
 802619a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
            }
        }
        break;
 802619e:	e0d7      	b.n	8026350 <SDOS_SdoInfoInd+0x38c>
 80261a0:	e0d6      	b.n	8026350 <SDOS_SdoInfoInd+0x38c>

    case SDOINFOSERVICE_OBJDESCRIPTION_Q:
    case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
        /* get the requested index */
        index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	899b      	ldrh	r3, [r3, #12]
 80261a6:	81bb      	strh	r3, [r7, #12]



        if(index < 0x1000)
 80261a8:	89bb      	ldrh	r3, [r7, #12]
 80261aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80261ae:	d202      	bcs.n	80261b6 <SDOS_SdoInfoInd+0x1f2>
        {
            /*SDO Info access is only allowed for objects >= 0x1000*/
            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 80261b0:	2305      	movs	r3, #5
 80261b2:	73fb      	strb	r3, [r7, #15]
 80261b4:	e0c9      	b.n	802634a <SDOS_SdoInfoInd+0x386>
        }
        else
        {
            /* get the object handle of the requested index */
            pObjEntry = OBJ_GetObjectHandle( index );
 80261b6:	89bb      	ldrh	r3, [r7, #12]
 80261b8:	4618      	mov	r0, r3
 80261ba:	f7fd fe2b 	bl	8023e14 <OBJ_GetObjectHandle>
 80261be:	6178      	str	r0, [r7, #20]

            if ( pObjEntry )
 80261c0:	697b      	ldr	r3, [r7, #20]
 80261c2:	2b00      	cmp	r3, #0
 80261c4:	f000 80be 	beq.w	8026344 <SDOS_SdoInfoInd+0x380>
            {
                /* object exists */
                UINT16 size = 0;
 80261c8:	2300      	movs	r3, #0
 80261ca:	847b      	strh	r3, [r7, #34]	; 0x22
                
                if ( opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q )
 80261cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80261d0:	2b03      	cmp	r3, #3
 80261d2:	d12b      	bne.n	802622c <SDOS_SdoInfoInd+0x268>
                {
                    /* object description is requested */
                    OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 80261d4:	687b      	ldr	r3, [r7, #4]
 80261d6:	f103 040e 	add.w	r4, r3, #14
 80261da:	6978      	ldr	r0, [r7, #20]
 80261dc:	f7fe f890 	bl	8024300 <OBJ_GetObjDesc>
 80261e0:	4603      	mov	r3, r0
 80261e2:	4620      	mov	r0, r4
 80261e4:	4619      	mov	r1, r3
 80261e6:	2204      	movs	r2, #4
 80261e8:	f003 fe30 	bl	8029e4c <memcpy>


                    /* the mailbox should be big enough that the maximum object description
                    fits in the mailbox (the fragmentation is not done in the sample code),
                    so it will be checked only if the object description fits */
                    size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 80261ec:	89bb      	ldrh	r3, [r7, #12]
 80261ee:	4618      	mov	r0, r3
 80261f0:	2100      	movs	r1, #0
 80261f2:	697a      	ldr	r2, [r7, #20]
 80261f4:	2300      	movs	r3, #0
 80261f6:	f7fd ffc7 	bl	8024188 <OBJ_GetDesc>
 80261fa:	4603      	mov	r3, r0
 80261fc:	330c      	adds	r3, #12
 80261fe:	847b      	strh	r3, [r7, #34]	; 0x22

                    if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 8026200:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8026202:	4b36      	ldr	r3, [pc, #216]	; (80262dc <SDOS_SdoInfoInd+0x318>)
 8026204:	881b      	ldrh	r3, [r3, #0]
 8026206:	3b06      	subs	r3, #6
 8026208:	429a      	cmp	r2, r3
 802620a:	dd02      	ble.n	8026212 <SDOS_SdoInfoInd+0x24e>
                    {
                        /* size of the object description does not fit in the mailbox,
                        the object description will be sent without the name */
                        size = SIZEOF_SDOINFOOBJSTRUCT;
 802620c:	230c      	movs	r3, #12
 802620e:	847b      	strh	r3, [r7, #34]	; 0x22
 8026210:	e07b      	b.n	802630a <SDOS_SdoInfoInd+0x346>
                    }
                    else
                    {
                        /* object description fits in the mailbox, get the name of the object */
                        size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 8026212:	89ba      	ldrh	r2, [r7, #12]
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	330e      	adds	r3, #14
 8026218:	3304      	adds	r3, #4
 802621a:	4610      	mov	r0, r2
 802621c:	2100      	movs	r1, #0
 802621e:	697a      	ldr	r2, [r7, #20]
 8026220:	f7fd ffb2 	bl	8024188 <OBJ_GetDesc>
 8026224:	4603      	mov	r3, r0
 8026226:	330c      	adds	r3, #12
 8026228:	847b      	strh	r3, [r7, #34]	; 0x22
 802622a:	e06e      	b.n	802630a <SDOS_SdoInfoInd+0x346>
                }
                else
                {
                    /* entry description is requested,
                    get the requested subindex */
                    UINT8 subindex = (UINT8) ((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	89db      	ldrh	r3, [r3, #14]
 8026230:	74fb      	strb	r3, [r7, #19]

                    /* get the maximum subindex */
                    UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8026232:	6978      	ldr	r0, [r7, #20]
 8026234:	f7fe f864 	bl	8024300 <OBJ_GetObjDesc>
 8026238:	4603      	mov	r3, r0
 802623a:	885b      	ldrh	r3, [r3, #2]
 802623c:	74bb      	strb	r3, [r7, #18]

                    if ( subindex <= maxSubindex )
 802623e:	7cfa      	ldrb	r2, [r7, #19]
 8026240:	7cbb      	ldrb	r3, [r7, #18]
 8026242:	429a      	cmp	r2, r3
 8026244:	d85f      	bhi.n	8026306 <SDOS_SdoInfoInd+0x342>
                    {
                        UINT16 ObjectFlags;
                        /* requested subindex is not too great */
                        /* get the entry description of the requested entry */
                        OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 8026246:	687b      	ldr	r3, [r7, #4]
 8026248:	f103 0410 	add.w	r4, r3, #16
 802624c:	7cfb      	ldrb	r3, [r7, #19]
 802624e:	6978      	ldr	r0, [r7, #20]
 8026250:	4619      	mov	r1, r3
 8026252:	f7fe f829 	bl	80242a8 <OBJ_GetEntryDesc>
 8026256:	4603      	mov	r3, r0
 8026258:	4620      	mov	r0, r4
 802625a:	4619      	mov	r1, r3
 802625c:	2206      	movs	r2, #6
 802625e:	f003 fdf5 	bl	8029e4c <memcpy>

                        /* the transmission of the value info is not supported yet of the sample code */
                        pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 8026262:	687b      	ldr	r3, [r7, #4]
 8026264:	89db      	ldrh	r3, [r3, #14]
 8026266:	b2db      	uxtb	r3, r3
 8026268:	b29a      	uxth	r2, r3
 802626a:	687b      	ldr	r3, [r7, #4]
 802626c:	81da      	strh	r2, [r3, #14]
                        ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 802626e:	6978      	ldr	r0, [r7, #20]
 8026270:	f7fe f846 	bl	8024300 <OBJ_GetObjDesc>
 8026274:	4603      	mov	r3, r0
 8026276:	885b      	ldrh	r3, [r3, #2]
 8026278:	823b      	strh	r3, [r7, #16]
                        ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 802627a:	8a3b      	ldrh	r3, [r7, #16]
 802627c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8026280:	121b      	asrs	r3, r3, #8
 8026282:	823b      	strh	r3, [r7, #16]

                        if(((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0) )
 8026284:	8a3b      	ldrh	r3, [r7, #16]
 8026286:	2b08      	cmp	r3, #8
 8026288:	d002      	beq.n	8026290 <SDOS_SdoInfoInd+0x2cc>
 802628a:	8a3b      	ldrh	r3, [r7, #16]
 802628c:	2b09      	cmp	r3, #9
 802628e:	d10d      	bne.n	80262ac <SDOS_SdoInfoInd+0x2e8>
 8026290:	7cfb      	ldrb	r3, [r7, #19]
 8026292:	2b00      	cmp	r3, #0
 8026294:	d10a      	bne.n	80262ac <SDOS_SdoInfoInd+0x2e8>
                        {
                            OBJTOMBXSTRCPY( ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc) );
 8026296:	687b      	ldr	r3, [r7, #4]
 8026298:	3310      	adds	r3, #16
 802629a:	3306      	adds	r3, #6
 802629c:	4618      	mov	r0, r3
 802629e:	4911      	ldr	r1, [pc, #68]	; (80262e4 <SDOS_SdoInfoInd+0x320>)
 80262a0:	220d      	movs	r2, #13
 80262a2:	f003 fdd3 	bl	8029e4c <memcpy>
                            size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 80262a6:	231c      	movs	r3, #28
 80262a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80262aa:	e02b      	b.n	8026304 <SDOS_SdoInfoInd+0x340>
                        else
                        {
                            /* the mailbox should be big enough that the maximum entry description
                            fits in the mailbox (the fragmentation is not done in the sample code),
                            so it will be checked only if the entry description fits */
                            size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 80262ac:	89ba      	ldrh	r2, [r7, #12]
 80262ae:	7cfb      	ldrb	r3, [r7, #19]
 80262b0:	4610      	mov	r0, r2
 80262b2:	4619      	mov	r1, r3
 80262b4:	697a      	ldr	r2, [r7, #20]
 80262b6:	2300      	movs	r3, #0
 80262b8:	f7fd ff66 	bl	8024188 <OBJ_GetDesc>
 80262bc:	4603      	mov	r3, r0
 80262be:	3310      	adds	r3, #16
 80262c0:	847b      	strh	r3, [r7, #34]	; 0x22
                            if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 80262c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80262c4:	4b05      	ldr	r3, [pc, #20]	; (80262dc <SDOS_SdoInfoInd+0x318>)
 80262c6:	881b      	ldrh	r3, [r3, #0]
 80262c8:	3b06      	subs	r3, #6
 80262ca:	429a      	cmp	r2, r3
 80262cc:	dd0c      	ble.n	80262e8 <SDOS_SdoInfoInd+0x324>
                            {
                                /* size of the object description does not fit in the mailbox,
                                the object description will be sent without the name */
                                size =  SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 80262ce:	2310      	movs	r3, #16
 80262d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80262d2:	e017      	b.n	8026304 <SDOS_SdoInfoInd+0x340>
 80262d4:	1fff28b8 	.word	0x1fff28b8
 80262d8:	1fff28a4 	.word	0x1fff28a4
 80262dc:	1fff27d8 	.word	0x1fff27d8
 80262e0:	1fff2884 	.word	0x1fff2884
 80262e4:	1fff144c 	.word	0x1fff144c
                            }
                            else
                            {
                                /* object description fits in the mailbox, get the name of the entry */
                                size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 80262e8:	89b9      	ldrh	r1, [r7, #12]
 80262ea:	687b      	ldr	r3, [r7, #4]
 80262ec:	3310      	adds	r3, #16
 80262ee:	3306      	adds	r3, #6
 80262f0:	7cfa      	ldrb	r2, [r7, #19]
 80262f2:	4608      	mov	r0, r1
 80262f4:	4611      	mov	r1, r2
 80262f6:	697a      	ldr	r2, [r7, #20]
 80262f8:	f7fd ff46 	bl	8024188 <OBJ_GetDesc>
 80262fc:	4603      	mov	r3, r0
 80262fe:	3310      	adds	r3, #16
 8026300:	847b      	strh	r3, [r7, #34]	; 0x22
 8026302:	e002      	b.n	802630a <SDOS_SdoInfoInd+0x346>
 8026304:	e001      	b.n	802630a <SDOS_SdoInfoInd+0x346>
                            }
                        }
                    }
                    else
                    {
                        abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 8026306:	2311      	movs	r3, #17
 8026308:	73fb      	strb	r3, [r7, #15]
                    }
                }

                if ( abort == 0 )
 802630a:	7bfb      	ldrb	r3, [r7, #15]
 802630c:	2b00      	cmp	r3, #0
 802630e:	d118      	bne.n	8026342 <SDOS_SdoInfoInd+0x37e>
                {
                    {
                        /* for the object and entry description the sample code does not support the fragmentation,
                        the mailbox has to be big enough */
                        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	2200      	movs	r2, #0
 8026314:	815a      	strh	r2, [r3, #10]
                        /* store the size of the mailbox data in the mailbox buffer */
                        pSdoInfoInd->MbxHeader.Length = size;
 8026316:	687b      	ldr	r3, [r7, #4]
 8026318:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802631a:	801a      	strh	r2, [r3, #0]
                        /* set the opCode of the SDO Information response */
                        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 802631c:	687b      	ldr	r3, [r7, #4]
 802631e:	891b      	ldrh	r3, [r3, #8]
 8026320:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026324:	b29a      	uxth	r2, r3
 8026326:	687b      	ldr	r3, [r7, #4]
 8026328:	811a      	strh	r2, [r3, #8]
                        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 802632a:	687b      	ldr	r3, [r7, #4]
 802632c:	891a      	ldrh	r2, [r3, #8]
 802632e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8026332:	b29b      	uxth	r3, r3
 8026334:	3301      	adds	r3, #1
 8026336:	b29b      	uxth	r3, r3
 8026338:	4313      	orrs	r3, r2
 802633a:	b29a      	uxth	r2, r3
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	811a      	strh	r2, [r3, #8]
 8026340:	e003      	b.n	802634a <SDOS_SdoInfoInd+0x386>
 8026342:	e002      	b.n	802634a <SDOS_SdoInfoInd+0x386>
                    }
                }
            }
            else
            {
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8026344:	2308      	movs	r3, #8
 8026346:	73fb      	strb	r3, [r7, #15]
            }
        }
        break;
 8026348:	e002      	b.n	8026350 <SDOS_SdoInfoInd+0x38c>
 802634a:	e001      	b.n	8026350 <SDOS_SdoInfoInd+0x38c>
    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 802634c:	2303      	movs	r3, #3
 802634e:	73fb      	strb	r3, [r7, #15]
    }

    if ( abort )
 8026350:	7bfb      	ldrb	r3, [r7, #15]
 8026352:	2b00      	cmp	r3, #0
 8026354:	d01d      	beq.n	8026392 <SDOS_SdoInfoInd+0x3ce>
    {
        /* send a SDO Information Error response */
        pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 8026356:	687b      	ldr	r3, [r7, #4]
 8026358:	220a      	movs	r2, #10
 802635a:	801a      	strh	r2, [r3, #0]

        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 802635c:	687b      	ldr	r3, [r7, #4]
 802635e:	891b      	ldrh	r3, [r3, #8]
 8026360:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8026364:	b29a      	uxth	r2, r3
 8026366:	687b      	ldr	r3, [r7, #4]
 8026368:	811a      	strh	r2, [r3, #8]
        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) ((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 802636a:	687b      	ldr	r3, [r7, #4]
 802636c:	891b      	ldrh	r3, [r3, #8]
 802636e:	f043 0307 	orr.w	r3, r3, #7
 8026372:	b29a      	uxth	r2, r3
 8026374:	687b      	ldr	r3, [r7, #4]
 8026376:	811a      	strh	r2, [r3, #8]

        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8026378:	687b      	ldr	r3, [r7, #4]
 802637a:	2200      	movs	r2, #0
 802637c:	815a      	strh	r2, [r3, #10]
        pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 802637e:	7bfb      	ldrb	r3, [r7, #15]
 8026380:	461a      	mov	r2, r3
 8026382:	4b0c      	ldr	r3, [pc, #48]	; (80263b4 <SDOS_SdoInfoInd+0x3f0>)
 8026384:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026388:	687b      	ldr	r3, [r7, #4]
 802638a:	60da      	str	r2, [r3, #12]

        nSdoInfoFragmentsLeft = 0;
 802638c:	4b0a      	ldr	r3, [pc, #40]	; (80263b8 <SDOS_SdoInfoInd+0x3f4>)
 802638e:	2200      	movs	r2, #0
 8026390:	801a      	strh	r2, [r3, #0]
    }

    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 8026392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8026396:	6878      	ldr	r0, [r7, #4]
 8026398:	4619      	mov	r1, r3
 802639a:	f7fd fb87 	bl	8023aac <MBX_MailboxSendReq>
 802639e:	4603      	mov	r3, r0
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	d002      	beq.n	80263aa <SDOS_SdoInfoInd+0x3e6>
    {
        /* if the mailbox response could not be sent (or stored), the response will be
           stored in the variable pCoeSendStored and will be sent automatically
            from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 80263a4:	4a05      	ldr	r2, [pc, #20]	; (80263bc <SDOS_SdoInfoInd+0x3f8>)
 80263a6:	687b      	ldr	r3, [r7, #4]
 80263a8:	6013      	str	r3, [r2, #0]
    }

    return 0;
 80263aa:	2300      	movs	r3, #0
}
 80263ac:	4618      	mov	r0, r3
 80263ae:	3734      	adds	r7, #52	; 0x34
 80263b0:	46bd      	mov	sp, r7
 80263b2:	bd90      	pop	{r4, r7, pc}
 80263b4:	0802a990 	.word	0x0802a990
 80263b8:	1fff28a4 	.word	0x1fff28a4
 80263bc:	1fff2710 	.word	0x1fff2710

080263c0 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80263c0:	b580      	push	{r7, lr}
 80263c2:	b082      	sub	sp, #8
 80263c4:	af00      	add	r7, sp, #0
 80263c6:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80263c8:	687b      	ldr	r3, [r7, #4]
 80263ca:	4a07      	ldr	r2, [pc, #28]	; (80263e8 <XMC_ERU_Enable+0x28>)
 80263cc:	4293      	cmp	r3, r2
 80263ce:	d107      	bne.n	80263e0 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 80263d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80263d4:	f000 fbda 	bl	8026b8c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80263d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80263dc:	f000 fa62 	bl	80268a4 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80263e0:	3708      	adds	r7, #8
 80263e2:	46bd      	mov	sp, r7
 80263e4:	bd80      	pop	{r7, pc}
 80263e6:	bf00      	nop
 80263e8:	40044000 	.word	0x40044000

080263ec <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 80263ec:	b480      	push	{r7}
 80263ee:	b083      	sub	sp, #12
 80263f0:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80263f2:	4b05      	ldr	r3, [pc, #20]	; (8026408 <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 80263f4:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	2250      	movs	r2, #80	; 0x50
 80263fa:	601a      	str	r2, [r3, #0]
}
 80263fc:	370c      	adds	r7, #12
 80263fe:	46bd      	mov	sp, r7
 8026400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026404:	4770      	bx	lr
 8026406:	bf00      	nop
 8026408:	0c005554 	.word	0x0c005554

0802640c <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 802640c:	b480      	push	{r7}
 802640e:	b085      	sub	sp, #20
 8026410:	af00      	add	r7, sp, #0
 8026412:	6078      	str	r0, [r7, #4]
 8026414:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 8026416:	4b07      	ldr	r3, [pc, #28]	; (8026434 <XMC_FLASH_lLoadPageCommand+0x28>)
 8026418:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 802641a:	68fb      	ldr	r3, [r7, #12]
 802641c:	687a      	ldr	r2, [r7, #4]
 802641e:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 8026420:	4b05      	ldr	r3, [pc, #20]	; (8026438 <XMC_FLASH_lLoadPageCommand+0x2c>)
 8026422:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8026424:	68fb      	ldr	r3, [r7, #12]
 8026426:	683a      	ldr	r2, [r7, #0]
 8026428:	601a      	str	r2, [r3, #0]
}
 802642a:	3714      	adds	r7, #20
 802642c:	46bd      	mov	sp, r7
 802642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026432:	4770      	bx	lr
 8026434:	0c0055f0 	.word	0x0c0055f0
 8026438:	0c0055f4 	.word	0x0c0055f4

0802643c <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 802643c:	b480      	push	{r7}
 802643e:	b085      	sub	sp, #20
 8026440:	af00      	add	r7, sp, #0
 8026442:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026444:	4b0c      	ldr	r3, [pc, #48]	; (8026478 <XMC_FLASH_lWritePageCommand+0x3c>)
 8026446:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026448:	68fb      	ldr	r3, [r7, #12]
 802644a:	22aa      	movs	r2, #170	; 0xaa
 802644c:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 802644e:	4b0b      	ldr	r3, [pc, #44]	; (802647c <XMC_FLASH_lWritePageCommand+0x40>)
 8026450:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8026452:	68fb      	ldr	r3, [r7, #12]
 8026454:	2255      	movs	r2, #85	; 0x55
 8026456:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026458:	4b07      	ldr	r3, [pc, #28]	; (8026478 <XMC_FLASH_lWritePageCommand+0x3c>)
 802645a:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 802645c:	68fb      	ldr	r3, [r7, #12]
 802645e:	22a0      	movs	r2, #160	; 0xa0
 8026460:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 8026462:	687b      	ldr	r3, [r7, #4]
 8026464:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 8026466:	68fb      	ldr	r3, [r7, #12]
 8026468:	22aa      	movs	r2, #170	; 0xaa
 802646a:	601a      	str	r2, [r3, #0]
}
 802646c:	3714      	adds	r7, #20
 802646e:	46bd      	mov	sp, r7
 8026470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026474:	4770      	bx	lr
 8026476:	bf00      	nop
 8026478:	0c005554 	.word	0x0c005554
 802647c:	0c00aaa8 	.word	0x0c00aaa8

08026480 <XMC_FLASH_lEraseSectorCommand>:

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 8026480:	b480      	push	{r7}
 8026482:	b085      	sub	sp, #20
 8026484:	af00      	add	r7, sp, #0
 8026486:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8026488:	4b11      	ldr	r3, [pc, #68]	; (80264d0 <XMC_FLASH_lEraseSectorCommand+0x50>)
 802648a:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 802648c:	68fb      	ldr	r3, [r7, #12]
 802648e:	22aa      	movs	r2, #170	; 0xaa
 8026490:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8026492:	4b10      	ldr	r3, [pc, #64]	; (80264d4 <XMC_FLASH_lEraseSectorCommand+0x54>)
 8026494:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8026496:	68fb      	ldr	r3, [r7, #12]
 8026498:	2255      	movs	r2, #85	; 0x55
 802649a:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 802649c:	4b0c      	ldr	r3, [pc, #48]	; (80264d0 <XMC_FLASH_lEraseSectorCommand+0x50>)
 802649e:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 80264a0:	68fb      	ldr	r3, [r7, #12]
 80264a2:	2280      	movs	r2, #128	; 0x80
 80264a4:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80264a6:	4b0a      	ldr	r3, [pc, #40]	; (80264d0 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80264a8:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80264aa:	68fb      	ldr	r3, [r7, #12]
 80264ac:	22aa      	movs	r2, #170	; 0xaa
 80264ae:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80264b0:	4b08      	ldr	r3, [pc, #32]	; (80264d4 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80264b2:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80264b4:	68fb      	ldr	r3, [r7, #12]
 80264b6:	2255      	movs	r2, #85	; 0x55
 80264b8:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 80264ba:	687b      	ldr	r3, [r7, #4]
 80264bc:	60fb      	str	r3, [r7, #12]
  *address = 0x30U;
 80264be:	68fb      	ldr	r3, [r7, #12]
 80264c0:	2230      	movs	r2, #48	; 0x30
 80264c2:	601a      	str	r2, [r3, #0]
}
 80264c4:	3714      	adds	r7, #20
 80264c6:	46bd      	mov	sp, r7
 80264c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264cc:	4770      	bx	lr
 80264ce:	bf00      	nop
 80264d0:	0c005554 	.word	0x0c005554
 80264d4:	0c00aaa8 	.word	0x0c00aaa8

080264d8 <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 80264d8:	b480      	push	{r7}
 80264da:	b083      	sub	sp, #12
 80264dc:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80264de:	4b05      	ldr	r3, [pc, #20]	; (80264f4 <XMC_FLASH_lClearStatusCommand+0x1c>)
 80264e0:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 80264e2:	687b      	ldr	r3, [r7, #4]
 80264e4:	22f5      	movs	r2, #245	; 0xf5
 80264e6:	601a      	str	r2, [r3, #0]
}
 80264e8:	370c      	adds	r7, #12
 80264ea:	46bd      	mov	sp, r7
 80264ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264f0:	4770      	bx	lr
 80264f2:	bf00      	nop
 80264f4:	0c005554 	.word	0x0c005554

080264f8 <XMC_FLASH_ClearStatus>:

 /*
 * This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of FSR register.
 */
void XMC_FLASH_ClearStatus(void)
{
 80264f8:	b580      	push	{r7, lr}
 80264fa:	af00      	add	r7, sp, #0
  XMC_FLASH_lClearStatusCommand();
 80264fc:	f7ff ffec 	bl	80264d8 <XMC_FLASH_lClearStatusCommand>
}
 8026500:	bd80      	pop	{r7, pc}
 8026502:	bf00      	nop

08026504 <XMC_FLASH_GetStatus>:

/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
 8026504:	b480      	push	{r7}
 8026506:	af00      	add	r7, sp, #0
  return FLASH0->FSR;
 8026508:	4b04      	ldr	r3, [pc, #16]	; (802651c <XMC_FLASH_GetStatus+0x18>)
 802650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802650e:	3310      	adds	r3, #16
 8026510:	681b      	ldr	r3, [r3, #0]
}
 8026512:	4618      	mov	r0, r3
 8026514:	46bd      	mov	sp, r7
 8026516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802651a:	4770      	bx	lr
 802651c:	58001000 	.word	0x58001000

08026520 <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 8026520:	b580      	push	{r7, lr}
 8026522:	b084      	sub	sp, #16
 8026524:	af00      	add	r7, sp, #0
 8026526:	6078      	str	r0, [r7, #4]
 8026528:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 802652a:	f7ff ffd5 	bl	80264d8 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 802652e:	f7ff ff5d 	bl	80263ec <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8026532:	2300      	movs	r3, #0
 8026534:	60fb      	str	r3, [r7, #12]
 8026536:	e011      	b.n	802655c <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 8026538:	68fb      	ldr	r3, [r7, #12]
 802653a:	009b      	lsls	r3, r3, #2
 802653c:	683a      	ldr	r2, [r7, #0]
 802653e:	4413      	add	r3, r2
 8026540:	6819      	ldr	r1, [r3, #0]
 8026542:	68fb      	ldr	r3, [r7, #12]
 8026544:	3301      	adds	r3, #1
 8026546:	009b      	lsls	r3, r3, #2
 8026548:	683a      	ldr	r2, [r7, #0]
 802654a:	4413      	add	r3, r2
 802654c:	681b      	ldr	r3, [r3, #0]
 802654e:	4608      	mov	r0, r1
 8026550:	4619      	mov	r1, r3
 8026552:	f7ff ff5b 	bl	802640c <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8026556:	68fb      	ldr	r3, [r7, #12]
 8026558:	3302      	adds	r3, #2
 802655a:	60fb      	str	r3, [r7, #12]
 802655c:	68fb      	ldr	r3, [r7, #12]
 802655e:	2b3f      	cmp	r3, #63	; 0x3f
 8026560:	d9ea      	bls.n	8026538 <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 8026562:	6878      	ldr	r0, [r7, #4]
 8026564:	f7ff ff6a 	bl	802643c <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 8026568:	bf00      	nop
 802656a:	4b06      	ldr	r3, [pc, #24]	; (8026584 <XMC_FLASH_ProgramPage+0x64>)
 802656c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8026570:	3310      	adds	r3, #16
 8026572:	681b      	ldr	r3, [r3, #0]
 8026574:	f003 0301 	and.w	r3, r3, #1
 8026578:	2b00      	cmp	r3, #0
 802657a:	d1f6      	bne.n	802656a <XMC_FLASH_ProgramPage+0x4a>
}
 802657c:	3710      	adds	r7, #16
 802657e:	46bd      	mov	sp, r7
 8026580:	bd80      	pop	{r7, pc}
 8026582:	bf00      	nop
 8026584:	58001000 	.word	0x58001000

08026588 <XMC_FLASH_EraseSector>:

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 8026588:	b580      	push	{r7, lr}
 802658a:	b082      	sub	sp, #8
 802658c:	af00      	add	r7, sp, #0
 802658e:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 8026590:	f7ff ffa2 	bl	80264d8 <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEraseSectorCommand(address);
 8026594:	6878      	ldr	r0, [r7, #4]
 8026596:	f7ff ff73 	bl	8026480 <XMC_FLASH_lEraseSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 802659a:	bf00      	nop
 802659c:	4b05      	ldr	r3, [pc, #20]	; (80265b4 <XMC_FLASH_EraseSector+0x2c>)
 802659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80265a2:	3310      	adds	r3, #16
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	f003 0301 	and.w	r3, r3, #1
 80265aa:	2b00      	cmp	r3, #0
 80265ac:	d1f6      	bne.n	802659c <XMC_FLASH_EraseSector+0x14>
}
 80265ae:	3708      	adds	r7, #8
 80265b0:	46bd      	mov	sp, r7
 80265b2:	bd80      	pop	{r7, pc}
 80265b4:	58001000 	.word	0x58001000

080265b8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80265b8:	b480      	push	{r7}
 80265ba:	b085      	sub	sp, #20
 80265bc:	af00      	add	r7, sp, #0
 80265be:	60f8      	str	r0, [r7, #12]
 80265c0:	460b      	mov	r3, r1
 80265c2:	607a      	str	r2, [r7, #4]
 80265c4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80265c6:	7afb      	ldrb	r3, [r7, #11]
 80265c8:	089b      	lsrs	r3, r3, #2
 80265ca:	b2db      	uxtb	r3, r3
 80265cc:	4618      	mov	r0, r3
 80265ce:	7afb      	ldrb	r3, [r7, #11]
 80265d0:	089b      	lsrs	r3, r3, #2
 80265d2:	b2db      	uxtb	r3, r3
 80265d4:	461a      	mov	r2, r3
 80265d6:	68fb      	ldr	r3, [r7, #12]
 80265d8:	3204      	adds	r2, #4
 80265da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80265de:	7afb      	ldrb	r3, [r7, #11]
 80265e0:	f003 0303 	and.w	r3, r3, #3
 80265e4:	00db      	lsls	r3, r3, #3
 80265e6:	4619      	mov	r1, r3
 80265e8:	23f8      	movs	r3, #248	; 0xf8
 80265ea:	408b      	lsls	r3, r1
 80265ec:	43db      	mvns	r3, r3
 80265ee:	ea02 0103 	and.w	r1, r2, r3
 80265f2:	68fb      	ldr	r3, [r7, #12]
 80265f4:	1d02      	adds	r2, r0, #4
 80265f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80265fa:	68fb      	ldr	r3, [r7, #12]
 80265fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80265fe:	7afb      	ldrb	r3, [r7, #11]
 8026600:	005b      	lsls	r3, r3, #1
 8026602:	4619      	mov	r1, r3
 8026604:	2303      	movs	r3, #3
 8026606:	408b      	lsls	r3, r1
 8026608:	43db      	mvns	r3, r3
 802660a:	401a      	ands	r2, r3
 802660c:	68fb      	ldr	r3, [r7, #12]
 802660e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8026610:	68fb      	ldr	r3, [r7, #12]
 8026612:	4a3a      	ldr	r2, [pc, #232]	; (80266fc <XMC_GPIO_Init+0x144>)
 8026614:	4293      	cmp	r3, r2
 8026616:	d003      	beq.n	8026620 <XMC_GPIO_Init+0x68>
 8026618:	68fb      	ldr	r3, [r7, #12]
 802661a:	4a39      	ldr	r2, [pc, #228]	; (8026700 <XMC_GPIO_Init+0x148>)
 802661c:	4293      	cmp	r3, r2
 802661e:	d10a      	bne.n	8026636 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8026620:	68fb      	ldr	r3, [r7, #12]
 8026622:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8026624:	7afb      	ldrb	r3, [r7, #11]
 8026626:	2101      	movs	r1, #1
 8026628:	fa01 f303 	lsl.w	r3, r1, r3
 802662c:	43db      	mvns	r3, r3
 802662e:	401a      	ands	r2, r3
 8026630:	68fb      	ldr	r3, [r7, #12]
 8026632:	661a      	str	r2, [r3, #96]	; 0x60
 8026634:	e042      	b.n	80266bc <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8026636:	687b      	ldr	r3, [r7, #4]
 8026638:	781b      	ldrb	r3, [r3, #0]
 802663a:	b2db      	uxtb	r3, r3
 802663c:	b25b      	sxtb	r3, r3
 802663e:	2b00      	cmp	r3, #0
 8026640:	da3c      	bge.n	80266bc <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8026642:	687b      	ldr	r3, [r7, #4]
 8026644:	685a      	ldr	r2, [r3, #4]
 8026646:	7afb      	ldrb	r3, [r7, #11]
 8026648:	409a      	lsls	r2, r3
 802664a:	68fb      	ldr	r3, [r7, #12]
 802664c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 802664e:	7afb      	ldrb	r3, [r7, #11]
 8026650:	08db      	lsrs	r3, r3, #3
 8026652:	b2db      	uxtb	r3, r3
 8026654:	4618      	mov	r0, r3
 8026656:	7afb      	ldrb	r3, [r7, #11]
 8026658:	08db      	lsrs	r3, r3, #3
 802665a:	b2db      	uxtb	r3, r3
 802665c:	461a      	mov	r2, r3
 802665e:	68fb      	ldr	r3, [r7, #12]
 8026660:	3210      	adds	r2, #16
 8026662:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026666:	7afb      	ldrb	r3, [r7, #11]
 8026668:	f003 0307 	and.w	r3, r3, #7
 802666c:	009b      	lsls	r3, r3, #2
 802666e:	4619      	mov	r1, r3
 8026670:	2307      	movs	r3, #7
 8026672:	408b      	lsls	r3, r1
 8026674:	43db      	mvns	r3, r3
 8026676:	ea02 0103 	and.w	r1, r2, r3
 802667a:	68fb      	ldr	r3, [r7, #12]
 802667c:	f100 0210 	add.w	r2, r0, #16
 8026680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8026684:	7afb      	ldrb	r3, [r7, #11]
 8026686:	08db      	lsrs	r3, r3, #3
 8026688:	b2db      	uxtb	r3, r3
 802668a:	4618      	mov	r0, r3
 802668c:	7afb      	ldrb	r3, [r7, #11]
 802668e:	08db      	lsrs	r3, r3, #3
 8026690:	b2db      	uxtb	r3, r3
 8026692:	461a      	mov	r2, r3
 8026694:	68fb      	ldr	r3, [r7, #12]
 8026696:	3210      	adds	r2, #16
 8026698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802669c:	687b      	ldr	r3, [r7, #4]
 802669e:	7a1b      	ldrb	r3, [r3, #8]
 80266a0:	4619      	mov	r1, r3
 80266a2:	7afb      	ldrb	r3, [r7, #11]
 80266a4:	f003 0307 	and.w	r3, r3, #7
 80266a8:	009b      	lsls	r3, r3, #2
 80266aa:	fa01 f303 	lsl.w	r3, r1, r3
 80266ae:	ea42 0103 	orr.w	r1, r2, r3
 80266b2:	68fb      	ldr	r3, [r7, #12]
 80266b4:	f100 0210 	add.w	r2, r0, #16
 80266b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80266bc:	7afb      	ldrb	r3, [r7, #11]
 80266be:	089b      	lsrs	r3, r3, #2
 80266c0:	b2db      	uxtb	r3, r3
 80266c2:	4618      	mov	r0, r3
 80266c4:	7afb      	ldrb	r3, [r7, #11]
 80266c6:	089b      	lsrs	r3, r3, #2
 80266c8:	b2db      	uxtb	r3, r3
 80266ca:	461a      	mov	r2, r3
 80266cc:	68fb      	ldr	r3, [r7, #12]
 80266ce:	3204      	adds	r2, #4
 80266d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80266d4:	687b      	ldr	r3, [r7, #4]
 80266d6:	781b      	ldrb	r3, [r3, #0]
 80266d8:	4619      	mov	r1, r3
 80266da:	7afb      	ldrb	r3, [r7, #11]
 80266dc:	f003 0303 	and.w	r3, r3, #3
 80266e0:	00db      	lsls	r3, r3, #3
 80266e2:	fa01 f303 	lsl.w	r3, r1, r3
 80266e6:	ea42 0103 	orr.w	r1, r2, r3
 80266ea:	68fb      	ldr	r3, [r7, #12]
 80266ec:	1d02      	adds	r2, r0, #4
 80266ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80266f2:	3714      	adds	r7, #20
 80266f4:	46bd      	mov	sp, r7
 80266f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266fa:	4770      	bx	lr
 80266fc:	48028e00 	.word	0x48028e00
 8026700:	48028f00 	.word	0x48028f00

08026704 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8026704:	b480      	push	{r7}
 8026706:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8026708:	4b03      	ldr	r3, [pc, #12]	; (8026718 <XMC_SCU_GetMirrorStatus+0x14>)
 802670a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 802670e:	4618      	mov	r0, r3
 8026710:	46bd      	mov	sp, r7
 8026712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026716:	4770      	bx	lr
 8026718:	50004000 	.word	0x50004000

0802671c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 802671c:	b580      	push	{r7, lr}
 802671e:	b084      	sub	sp, #16
 8026720:	af00      	add	r7, sp, #0
 8026722:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8026724:	f7f9 fc7c 	bl	8020020 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8026728:	4b0b      	ldr	r3, [pc, #44]	; (8026758 <XMC_SCU_lDelay+0x3c>)
 802672a:	681b      	ldr	r3, [r3, #0]
 802672c:	4a0b      	ldr	r2, [pc, #44]	; (802675c <XMC_SCU_lDelay+0x40>)
 802672e:	fba2 2303 	umull	r2, r3, r2, r3
 8026732:	0c9a      	lsrs	r2, r3, #18
 8026734:	687b      	ldr	r3, [r7, #4]
 8026736:	fb02 f303 	mul.w	r3, r2, r3
 802673a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 802673c:	2300      	movs	r3, #0
 802673e:	60fb      	str	r3, [r7, #12]
 8026740:	e003      	b.n	802674a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8026742:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8026744:	68fb      	ldr	r3, [r7, #12]
 8026746:	3301      	adds	r3, #1
 8026748:	60fb      	str	r3, [r7, #12]
 802674a:	68fa      	ldr	r2, [r7, #12]
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	429a      	cmp	r2, r3
 8026750:	d3f7      	bcc.n	8026742 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8026752:	3710      	adds	r7, #16
 8026754:	46bd      	mov	sp, r7
 8026756:	bd80      	pop	{r7, pc}
 8026758:	2000ffc0 	.word	0x2000ffc0
 802675c:	431bde83 	.word	0x431bde83

08026760 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8026760:	b480      	push	{r7}
 8026762:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8026764:	4b03      	ldr	r3, [pc, #12]	; (8026774 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8026766:	685b      	ldr	r3, [r3, #4]
}
 8026768:	4618      	mov	r0, r3
 802676a:	46bd      	mov	sp, r7
 802676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026770:	4770      	bx	lr
 8026772:	bf00      	nop
 8026774:	50004074 	.word	0x50004074

08026778 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8026778:	b480      	push	{r7}
 802677a:	b083      	sub	sp, #12
 802677c:	af00      	add	r7, sp, #0
 802677e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8026780:	4a03      	ldr	r2, [pc, #12]	; (8026790 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	60d3      	str	r3, [r2, #12]
}
 8026786:	370c      	adds	r7, #12
 8026788:	46bd      	mov	sp, r7
 802678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802678e:	4770      	bx	lr
 8026790:	50004074 	.word	0x50004074

08026794 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8026794:	b5b0      	push	{r4, r5, r7, lr}
 8026796:	b084      	sub	sp, #16
 8026798:	af02      	add	r7, sp, #8
 802679a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 802679c:	2000      	movs	r0, #0
 802679e:	f000 f8c1 	bl	8026924 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80267a2:	f000 fa6f 	bl	8026c84 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80267a6:	687b      	ldr	r3, [r7, #4]
 80267a8:	79db      	ldrb	r3, [r3, #7]
 80267aa:	2b00      	cmp	r3, #0
 80267ac:	d00a      	beq.n	80267c4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80267ae:	f000 faa7 	bl	8026d00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80267b2:	bf00      	nop
 80267b4:	f000 fa92 	bl	8026cdc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80267b8:	4603      	mov	r3, r0
 80267ba:	f083 0301 	eor.w	r3, r3, #1
 80267be:	b2db      	uxtb	r3, r3
 80267c0:	2b00      	cmp	r3, #0
 80267c2:	d1f7      	bne.n	80267b4 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	7a5b      	ldrb	r3, [r3, #9]
 80267c8:	4618      	mov	r0, r3
 80267ca:	f000 f925 	bl	8026a18 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80267ce:	bf00      	nop
 80267d0:	f7ff ff98 	bl	8026704 <XMC_SCU_GetMirrorStatus>
 80267d4:	4603      	mov	r3, r0
 80267d6:	2b00      	cmp	r3, #0
 80267d8:	d1fa      	bne.n	80267d0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80267da:	687b      	ldr	r3, [r7, #4]
 80267dc:	7a1b      	ldrb	r3, [r3, #8]
 80267de:	4618      	mov	r0, r3
 80267e0:	f000 fa2a 	bl	8026c38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	7c1b      	ldrb	r3, [r3, #16]
 80267e8:	4618      	mov	r0, r3
 80267ea:	f000 f933 	bl	8026a54 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80267ee:	687b      	ldr	r3, [r7, #4]
 80267f0:	7c5b      	ldrb	r3, [r3, #17]
 80267f2:	4618      	mov	r0, r3
 80267f4:	f000 f956 	bl	8026aa4 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80267f8:	687b      	ldr	r3, [r7, #4]
 80267fa:	7c9b      	ldrb	r3, [r3, #18]
 80267fc:	4618      	mov	r0, r3
 80267fe:	f000 f93d 	bl	8026a7c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8026802:	687b      	ldr	r3, [r7, #4]
 8026804:	7cdb      	ldrb	r3, [r3, #19]
 8026806:	4618      	mov	r0, r3
 8026808:	f000 f960 	bl	8026acc <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	799b      	ldrb	r3, [r3, #6]
 8026810:	2b00      	cmp	r3, #0
 8026812:	d00a      	beq.n	802682a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8026814:	f000 faac 	bl	8026d70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8026818:	bf00      	nop
 802681a:	f000 fad1 	bl	8026dc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 802681e:	4603      	mov	r3, r0
 8026820:	f083 0301 	eor.w	r3, r3, #1
 8026824:	b2db      	uxtb	r3, r3
 8026826:	2b00      	cmp	r3, #0
 8026828:	d1f7      	bne.n	802681a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	78db      	ldrb	r3, [r3, #3]
 802682e:	2b00      	cmp	r3, #0
 8026830:	d102      	bne.n	8026838 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8026832:	f000 fae9 	bl	8026e08 <XMC_SCU_CLOCK_DisableSystemPll>
 8026836:	e014      	b.n	8026862 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8026838:	f000 fad6 	bl	8026de8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 802683c:	687b      	ldr	r3, [r7, #4]
 802683e:	8899      	ldrh	r1, [r3, #4]
 8026840:	687b      	ldr	r3, [r7, #4]
 8026842:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026848:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 802684a:	687b      	ldr	r3, [r7, #4]
 802684c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 802684e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8026850:	687b      	ldr	r3, [r7, #4]
 8026852:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8026854:	9300      	str	r3, [sp, #0]
 8026856:	4608      	mov	r0, r1
 8026858:	4611      	mov	r1, r2
 802685a:	462a      	mov	r2, r5
 802685c:	4623      	mov	r3, r4
 802685e:	f000 fae3 	bl	8026e28 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8026862:	687b      	ldr	r3, [r7, #4]
 8026864:	68db      	ldr	r3, [r3, #12]
 8026866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802686a:	d103      	bne.n	8026874 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 802686c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8026870:	f000 f858 	bl	8026924 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8026874:	f7f9 fbd4 	bl	8020020 <SystemCoreClockUpdate>
}
 8026878:	3708      	adds	r7, #8
 802687a:	46bd      	mov	sp, r7
 802687c:	bdb0      	pop	{r4, r5, r7, pc}
 802687e:	bf00      	nop

08026880 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8026880:	b480      	push	{r7}
 8026882:	b083      	sub	sp, #12
 8026884:	af00      	add	r7, sp, #0
 8026886:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8026888:	4905      	ldr	r1, [pc, #20]	; (80268a0 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 802688a:	4b05      	ldr	r3, [pc, #20]	; (80268a0 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 802688c:	695a      	ldr	r2, [r3, #20]
 802688e:	687b      	ldr	r3, [r7, #4]
 8026890:	4313      	orrs	r3, r2
 8026892:	614b      	str	r3, [r1, #20]
}
 8026894:	370c      	adds	r7, #12
 8026896:	46bd      	mov	sp, r7
 8026898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802689c:	4770      	bx	lr
 802689e:	bf00      	nop
 80268a0:	50004074 	.word	0x50004074

080268a4 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80268a4:	b480      	push	{r7}
 80268a6:	b085      	sub	sp, #20
 80268a8:	af00      	add	r7, sp, #0
 80268aa:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80268ac:	687b      	ldr	r3, [r7, #4]
 80268ae:	0f1b      	lsrs	r3, r3, #28
 80268b0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80268b2:	687b      	ldr	r3, [r7, #4]
 80268b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80268b8:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80268ba:	68fa      	ldr	r2, [r7, #12]
 80268bc:	4613      	mov	r3, r2
 80268be:	005b      	lsls	r3, r3, #1
 80268c0:	4413      	add	r3, r2
 80268c2:	009b      	lsls	r3, r3, #2
 80268c4:	461a      	mov	r2, r3
 80268c6:	4b04      	ldr	r3, [pc, #16]	; (80268d8 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80268c8:	4413      	add	r3, r2
 80268ca:	68ba      	ldr	r2, [r7, #8]
 80268cc:	601a      	str	r2, [r3, #0]
}
 80268ce:	3714      	adds	r7, #20
 80268d0:	46bd      	mov	sp, r7
 80268d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268d6:	4770      	bx	lr
 80268d8:	50004414 	.word	0x50004414

080268dc <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80268dc:	b480      	push	{r7}
 80268de:	b085      	sub	sp, #20
 80268e0:	af00      	add	r7, sp, #0
 80268e2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80268e4:	687b      	ldr	r3, [r7, #4]
 80268e6:	0f1b      	lsrs	r3, r3, #28
 80268e8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80268ea:	687b      	ldr	r3, [r7, #4]
 80268ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80268f0:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80268f2:	68fa      	ldr	r2, [r7, #12]
 80268f4:	4613      	mov	r3, r2
 80268f6:	005b      	lsls	r3, r3, #1
 80268f8:	4413      	add	r3, r2
 80268fa:	009b      	lsls	r3, r3, #2
 80268fc:	461a      	mov	r2, r3
 80268fe:	4b08      	ldr	r3, [pc, #32]	; (8026920 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8026900:	4413      	add	r3, r2
 8026902:	681a      	ldr	r2, [r3, #0]
 8026904:	68bb      	ldr	r3, [r7, #8]
 8026906:	4013      	ands	r3, r2
 8026908:	2b00      	cmp	r3, #0
 802690a:	bf14      	ite	ne
 802690c:	2301      	movne	r3, #1
 802690e:	2300      	moveq	r3, #0
 8026910:	b2db      	uxtb	r3, r3
}
 8026912:	4618      	mov	r0, r3
 8026914:	3714      	adds	r7, #20
 8026916:	46bd      	mov	sp, r7
 8026918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802691c:	4770      	bx	lr
 802691e:	bf00      	nop
 8026920:	5000440c 	.word	0x5000440c

08026924 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8026924:	b480      	push	{r7}
 8026926:	b083      	sub	sp, #12
 8026928:	af00      	add	r7, sp, #0
 802692a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 802692c:	4906      	ldr	r1, [pc, #24]	; (8026948 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 802692e:	4b06      	ldr	r3, [pc, #24]	; (8026948 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8026930:	68db      	ldr	r3, [r3, #12]
 8026932:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8026936:	687b      	ldr	r3, [r7, #4]
 8026938:	4313      	orrs	r3, r2
 802693a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 802693c:	370c      	adds	r7, #12
 802693e:	46bd      	mov	sp, r7
 8026940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026944:	4770      	bx	lr
 8026946:	bf00      	nop
 8026948:	50004600 	.word	0x50004600

0802694c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 802694c:	b480      	push	{r7}
 802694e:	b083      	sub	sp, #12
 8026950:	af00      	add	r7, sp, #0
 8026952:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8026954:	4906      	ldr	r1, [pc, #24]	; (8026970 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8026956:	4b06      	ldr	r3, [pc, #24]	; (8026970 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8026958:	699b      	ldr	r3, [r3, #24]
 802695a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	4313      	orrs	r3, r2
 8026962:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8026964:	370c      	adds	r7, #12
 8026966:	46bd      	mov	sp, r7
 8026968:	f85d 7b04 	ldr.w	r7, [sp], #4
 802696c:	4770      	bx	lr
 802696e:	bf00      	nop
 8026970:	50004600 	.word	0x50004600

08026974 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8026974:	b480      	push	{r7}
 8026976:	b083      	sub	sp, #12
 8026978:	af00      	add	r7, sp, #0
 802697a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 802697c:	4906      	ldr	r1, [pc, #24]	; (8026998 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 802697e:	4b06      	ldr	r3, [pc, #24]	; (8026998 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8026980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026982:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026986:	687b      	ldr	r3, [r7, #4]
 8026988:	4313      	orrs	r3, r2
 802698a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 802698c:	370c      	adds	r7, #12
 802698e:	46bd      	mov	sp, r7
 8026990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026994:	4770      	bx	lr
 8026996:	bf00      	nop
 8026998:	50004600 	.word	0x50004600

0802699c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 802699c:	b480      	push	{r7}
 802699e:	b083      	sub	sp, #12
 80269a0:	af00      	add	r7, sp, #0
 80269a2:	4603      	mov	r3, r0
 80269a4:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80269a6:	88fb      	ldrh	r3, [r7, #6]
 80269a8:	2b00      	cmp	r3, #0
 80269aa:	d108      	bne.n	80269be <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80269ac:	4a0a      	ldr	r2, [pc, #40]	; (80269d8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80269ae:	4b0a      	ldr	r3, [pc, #40]	; (80269d8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80269b0:	68db      	ldr	r3, [r3, #12]
 80269b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80269b6:	f023 0301 	bic.w	r3, r3, #1
 80269ba:	60d3      	str	r3, [r2, #12]
 80269bc:	e007      	b.n	80269ce <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80269be:	4a06      	ldr	r2, [pc, #24]	; (80269d8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80269c0:	4b05      	ldr	r3, [pc, #20]	; (80269d8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80269c2:	68db      	ldr	r3, [r3, #12]
 80269c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80269c8:	f043 0301 	orr.w	r3, r3, #1
 80269cc:	60d3      	str	r3, [r2, #12]
  }
}
 80269ce:	370c      	adds	r7, #12
 80269d0:	46bd      	mov	sp, r7
 80269d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269d6:	4770      	bx	lr
 80269d8:	50004710 	.word	0x50004710

080269dc <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80269dc:	b480      	push	{r7}
 80269de:	b083      	sub	sp, #12
 80269e0:	af00      	add	r7, sp, #0
 80269e2:	4603      	mov	r3, r0
 80269e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80269e6:	bf00      	nop
 80269e8:	4b09      	ldr	r3, [pc, #36]	; (8026a10 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80269ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80269ee:	f003 0308 	and.w	r3, r3, #8
 80269f2:	2b00      	cmp	r3, #0
 80269f4:	d1f8      	bne.n	80269e8 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80269f6:	4907      	ldr	r1, [pc, #28]	; (8026a14 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80269f8:	4b06      	ldr	r3, [pc, #24]	; (8026a14 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80269fa:	68db      	ldr	r3, [r3, #12]
 80269fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8026a00:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8026a02:	4313      	orrs	r3, r2
 8026a04:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8026a06:	370c      	adds	r7, #12
 8026a08:	46bd      	mov	sp, r7
 8026a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a0e:	4770      	bx	lr
 8026a10:	50004000 	.word	0x50004000
 8026a14:	50004300 	.word	0x50004300

08026a18 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8026a18:	b480      	push	{r7}
 8026a1a:	b083      	sub	sp, #12
 8026a1c:	af00      	add	r7, sp, #0
 8026a1e:	4603      	mov	r3, r0
 8026a20:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8026a22:	bf00      	nop
 8026a24:	4b09      	ldr	r3, [pc, #36]	; (8026a4c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8026a26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8026a2a:	f003 0308 	and.w	r3, r3, #8
 8026a2e:	2b00      	cmp	r3, #0
 8026a30:	d1f8      	bne.n	8026a24 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8026a32:	4907      	ldr	r1, [pc, #28]	; (8026a50 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8026a34:	4b06      	ldr	r3, [pc, #24]	; (8026a50 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8026a36:	68db      	ldr	r3, [r3, #12]
 8026a38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8026a3c:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8026a3e:	4313      	orrs	r3, r2
 8026a40:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8026a42:	370c      	adds	r7, #12
 8026a44:	46bd      	mov	sp, r7
 8026a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a4a:	4770      	bx	lr
 8026a4c:	50004000 	.word	0x50004000
 8026a50:	50004300 	.word	0x50004300

08026a54 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8026a54:	b480      	push	{r7}
 8026a56:	b083      	sub	sp, #12
 8026a58:	af00      	add	r7, sp, #0
 8026a5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8026a5c:	4906      	ldr	r1, [pc, #24]	; (8026a78 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8026a5e:	4b06      	ldr	r3, [pc, #24]	; (8026a78 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8026a60:	68db      	ldr	r3, [r3, #12]
 8026a62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8026a66:	687b      	ldr	r3, [r7, #4]
 8026a68:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8026a6a:	4313      	orrs	r3, r2
 8026a6c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8026a6e:	370c      	adds	r7, #12
 8026a70:	46bd      	mov	sp, r7
 8026a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a76:	4770      	bx	lr
 8026a78:	50004600 	.word	0x50004600

08026a7c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8026a7c:	b480      	push	{r7}
 8026a7e:	b083      	sub	sp, #12
 8026a80:	af00      	add	r7, sp, #0
 8026a82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8026a84:	4906      	ldr	r1, [pc, #24]	; (8026aa0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8026a86:	4b06      	ldr	r3, [pc, #24]	; (8026aa0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8026a88:	6a1b      	ldr	r3, [r3, #32]
 8026a8a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8026a8e:	687b      	ldr	r3, [r7, #4]
 8026a90:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8026a92:	4313      	orrs	r3, r2
 8026a94:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8026a96:	370c      	adds	r7, #12
 8026a98:	46bd      	mov	sp, r7
 8026a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a9e:	4770      	bx	lr
 8026aa0:	50004600 	.word	0x50004600

08026aa4 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8026aa4:	b480      	push	{r7}
 8026aa6:	b083      	sub	sp, #12
 8026aa8:	af00      	add	r7, sp, #0
 8026aaa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8026aac:	4906      	ldr	r1, [pc, #24]	; (8026ac8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8026aae:	4b06      	ldr	r3, [pc, #24]	; (8026ac8 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8026ab0:	691b      	ldr	r3, [r3, #16]
 8026ab2:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8026ab6:	687b      	ldr	r3, [r7, #4]
 8026ab8:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8026aba:	4313      	orrs	r3, r2
 8026abc:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8026abe:	370c      	adds	r7, #12
 8026ac0:	46bd      	mov	sp, r7
 8026ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ac6:	4770      	bx	lr
 8026ac8:	50004600 	.word	0x50004600

08026acc <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8026acc:	b480      	push	{r7}
 8026ace:	b083      	sub	sp, #12
 8026ad0:	af00      	add	r7, sp, #0
 8026ad2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8026ad4:	4906      	ldr	r1, [pc, #24]	; (8026af0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8026ad6:	4b06      	ldr	r3, [pc, #24]	; (8026af0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8026ad8:	695b      	ldr	r3, [r3, #20]
 8026ada:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8026ae2:	4313      	orrs	r3, r2
 8026ae4:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8026ae6:	370c      	adds	r7, #12
 8026ae8:	46bd      	mov	sp, r7
 8026aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aee:	4770      	bx	lr
 8026af0:	50004600 	.word	0x50004600

08026af4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8026af4:	b480      	push	{r7}
 8026af6:	b083      	sub	sp, #12
 8026af8:	af00      	add	r7, sp, #0
 8026afa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8026afc:	4906      	ldr	r1, [pc, #24]	; (8026b18 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8026afe:	4b06      	ldr	r3, [pc, #24]	; (8026b18 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8026b00:	699b      	ldr	r3, [r3, #24]
 8026b02:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8026b06:	687b      	ldr	r3, [r7, #4]
 8026b08:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8026b0a:	4313      	orrs	r3, r2
 8026b0c:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8026b0e:	370c      	adds	r7, #12
 8026b10:	46bd      	mov	sp, r7
 8026b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b16:	4770      	bx	lr
 8026b18:	50004600 	.word	0x50004600

08026b1c <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8026b1c:	b480      	push	{r7}
 8026b1e:	b083      	sub	sp, #12
 8026b20:	af00      	add	r7, sp, #0
 8026b22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8026b24:	4906      	ldr	r1, [pc, #24]	; (8026b40 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8026b26:	4b06      	ldr	r3, [pc, #24]	; (8026b40 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8026b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026b2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8026b2e:	687b      	ldr	r3, [r7, #4]
 8026b30:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8026b32:	4313      	orrs	r3, r2
 8026b34:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8026b36:	370c      	adds	r7, #12
 8026b38:	46bd      	mov	sp, r7
 8026b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b3e:	4770      	bx	lr
 8026b40:	50004600 	.word	0x50004600

08026b44 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8026b44:	b480      	push	{r7}
 8026b46:	b083      	sub	sp, #12
 8026b48:	af00      	add	r7, sp, #0
 8026b4a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8026b4c:	4906      	ldr	r1, [pc, #24]	; (8026b68 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8026b4e:	4b06      	ldr	r3, [pc, #24]	; (8026b68 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8026b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b52:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 8026b56:	687b      	ldr	r3, [r7, #4]
 8026b58:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 8026b5a:	4313      	orrs	r3, r2
 8026b5c:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 8026b5e:	370c      	adds	r7, #12
 8026b60:	46bd      	mov	sp, r7
 8026b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b66:	4770      	bx	lr
 8026b68:	50004600 	.word	0x50004600

08026b6c <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8026b6c:	b480      	push	{r7}
 8026b6e:	b083      	sub	sp, #12
 8026b70:	af00      	add	r7, sp, #0
 8026b72:	4603      	mov	r3, r0
 8026b74:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8026b76:	4a04      	ldr	r2, [pc, #16]	; (8026b88 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8026b78:	79fb      	ldrb	r3, [r7, #7]
 8026b7a:	6053      	str	r3, [r2, #4]
}
 8026b7c:	370c      	adds	r7, #12
 8026b7e:	46bd      	mov	sp, r7
 8026b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b84:	4770      	bx	lr
 8026b86:	bf00      	nop
 8026b88:	50004600 	.word	0x50004600

08026b8c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8026b8c:	b480      	push	{r7}
 8026b8e:	b085      	sub	sp, #20
 8026b90:	af00      	add	r7, sp, #0
 8026b92:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8026b94:	687b      	ldr	r3, [r7, #4]
 8026b96:	0f1b      	lsrs	r3, r3, #28
 8026b98:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8026b9a:	687b      	ldr	r3, [r7, #4]
 8026b9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8026ba0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8026ba2:	68fa      	ldr	r2, [r7, #12]
 8026ba4:	4613      	mov	r3, r2
 8026ba6:	005b      	lsls	r3, r3, #1
 8026ba8:	4413      	add	r3, r2
 8026baa:	009b      	lsls	r3, r3, #2
 8026bac:	461a      	mov	r2, r3
 8026bae:	4b04      	ldr	r3, [pc, #16]	; (8026bc0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8026bb0:	4413      	add	r3, r2
 8026bb2:	68ba      	ldr	r2, [r7, #8]
 8026bb4:	601a      	str	r2, [r3, #0]
}
 8026bb6:	3714      	adds	r7, #20
 8026bb8:	46bd      	mov	sp, r7
 8026bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bbe:	4770      	bx	lr
 8026bc0:	50004648 	.word	0x50004648

08026bc4 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8026bc4:	b480      	push	{r7}
 8026bc6:	b083      	sub	sp, #12
 8026bc8:	af00      	add	r7, sp, #0
 8026bca:	6078      	str	r0, [r7, #4]
 8026bcc:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8026bce:	4a19      	ldr	r2, [pc, #100]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026bd0:	4b18      	ldr	r3, [pc, #96]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026bd2:	695b      	ldr	r3, [r3, #20]
 8026bd4:	f043 0301 	orr.w	r3, r3, #1
 8026bd8:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8026bda:	4a16      	ldr	r2, [pc, #88]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026bdc:	4b15      	ldr	r3, [pc, #84]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026bde:	695b      	ldr	r3, [r3, #20]
 8026be0:	f043 0310 	orr.w	r3, r3, #16
 8026be4:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8026be6:	4913      	ldr	r1, [pc, #76]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026be8:	683b      	ldr	r3, [r7, #0]
 8026bea:	3b01      	subs	r3, #1
 8026bec:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8026bee:	687b      	ldr	r3, [r7, #4]
 8026bf0:	3b01      	subs	r3, #1
 8026bf2:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8026bf4:	4313      	orrs	r3, r2
 8026bf6:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8026bf8:	4a0e      	ldr	r2, [pc, #56]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026bfa:	4b0e      	ldr	r3, [pc, #56]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026bfc:	695b      	ldr	r3, [r3, #20]
 8026bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026c02:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8026c04:	4a0b      	ldr	r2, [pc, #44]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026c06:	4b0b      	ldr	r3, [pc, #44]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026c08:	695b      	ldr	r3, [r3, #20]
 8026c0a:	f023 0310 	bic.w	r3, r3, #16
 8026c0e:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8026c10:	4a08      	ldr	r2, [pc, #32]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026c12:	4b08      	ldr	r3, [pc, #32]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026c14:	695b      	ldr	r3, [r3, #20]
 8026c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026c1a:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8026c1c:	bf00      	nop
 8026c1e:	4b05      	ldr	r3, [pc, #20]	; (8026c34 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8026c20:	691b      	ldr	r3, [r3, #16]
 8026c22:	f003 0304 	and.w	r3, r3, #4
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d0f9      	beq.n	8026c1e <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8026c2a:	370c      	adds	r7, #12
 8026c2c:	46bd      	mov	sp, r7
 8026c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c32:	4770      	bx	lr
 8026c34:	50004710 	.word	0x50004710

08026c38 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8026c38:	b580      	push	{r7, lr}
 8026c3a:	b082      	sub	sp, #8
 8026c3c:	af00      	add	r7, sp, #0
 8026c3e:	4603      	mov	r3, r0
 8026c40:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8026c42:	4a0f      	ldr	r2, [pc, #60]	; (8026c80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026c44:	4b0e      	ldr	r3, [pc, #56]	; (8026c80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026c46:	685b      	ldr	r3, [r3, #4]
 8026c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026c4c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8026c4e:	79fb      	ldrb	r3, [r7, #7]
 8026c50:	2b01      	cmp	r3, #1
 8026c52:	d10e      	bne.n	8026c72 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8026c54:	4a0a      	ldr	r2, [pc, #40]	; (8026c80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026c56:	4b0a      	ldr	r3, [pc, #40]	; (8026c80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026c58:	685b      	ldr	r3, [r3, #4]
 8026c5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8026c5e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8026c60:	2064      	movs	r0, #100	; 0x64
 8026c62:	f7ff fd5b 	bl	802671c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8026c66:	4a06      	ldr	r2, [pc, #24]	; (8026c80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026c68:	4b05      	ldr	r3, [pc, #20]	; (8026c80 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8026c6a:	685b      	ldr	r3, [r3, #4]
 8026c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8026c70:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8026c72:	2064      	movs	r0, #100	; 0x64
 8026c74:	f7ff fd52 	bl	802671c <XMC_SCU_lDelay>
}
 8026c78:	3708      	adds	r7, #8
 8026c7a:	46bd      	mov	sp, r7
 8026c7c:	bd80      	pop	{r7, pc}
 8026c7e:	bf00      	nop
 8026c80:	50004710 	.word	0x50004710

08026c84 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8026c84:	b480      	push	{r7}
 8026c86:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8026c88:	4b12      	ldr	r3, [pc, #72]	; (8026cd4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	f003 0301 	and.w	r3, r3, #1
 8026c90:	2b00      	cmp	r3, #0
 8026c92:	d109      	bne.n	8026ca8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8026c94:	4b0f      	ldr	r3, [pc, #60]	; (8026cd4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8026c96:	2201      	movs	r2, #1
 8026c98:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8026c9a:	bf00      	nop
 8026c9c:	4b0d      	ldr	r3, [pc, #52]	; (8026cd4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8026c9e:	681b      	ldr	r3, [r3, #0]
 8026ca0:	f003 0301 	and.w	r3, r3, #1
 8026ca4:	2b00      	cmp	r3, #0
 8026ca6:	d0f9      	beq.n	8026c9c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8026ca8:	4b0b      	ldr	r3, [pc, #44]	; (8026cd8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8026caa:	681b      	ldr	r3, [r3, #0]
 8026cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026cb0:	2b00      	cmp	r3, #0
 8026cb2:	d00a      	beq.n	8026cca <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8026cb4:	4b08      	ldr	r3, [pc, #32]	; (8026cd8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8026cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026cba:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8026cbc:	bf00      	nop
 8026cbe:	4b06      	ldr	r3, [pc, #24]	; (8026cd8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8026cc0:	681b      	ldr	r3, [r3, #0]
 8026cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026cc6:	2b00      	cmp	r3, #0
 8026cc8:	d1f9      	bne.n	8026cbe <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8026cca:	46bd      	mov	sp, r7
 8026ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cd0:	4770      	bx	lr
 8026cd2:	bf00      	nop
 8026cd4:	50004200 	.word	0x50004200
 8026cd8:	50004400 	.word	0x50004400

08026cdc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8026cdc:	b480      	push	{r7}
 8026cde:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8026ce0:	4b06      	ldr	r3, [pc, #24]	; (8026cfc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8026ce2:	681b      	ldr	r3, [r3, #0]
 8026ce4:	f003 0308 	and.w	r3, r3, #8
 8026ce8:	2b00      	cmp	r3, #0
 8026cea:	bf0c      	ite	eq
 8026cec:	2301      	moveq	r3, #1
 8026cee:	2300      	movne	r3, #0
 8026cf0:	b2db      	uxtb	r3, r3
}
 8026cf2:	4618      	mov	r0, r3
 8026cf4:	46bd      	mov	sp, r7
 8026cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cfa:	4770      	bx	lr
 8026cfc:	50004300 	.word	0x50004300

08026d00 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8026d00:	b580      	push	{r7, lr}
 8026d02:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8026d04:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8026d08:	f7ff fd36 	bl	8026778 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8026d0c:	4a17      	ldr	r2, [pc, #92]	; (8026d6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8026d0e:	4b17      	ldr	r3, [pc, #92]	; (8026d6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8026d10:	69db      	ldr	r3, [r3, #28]
 8026d12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8026d16:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8026d18:	bf00      	nop
 8026d1a:	f7ff fd21 	bl	8026760 <XMC_SCU_INTERUPT_GetEventStatus>
 8026d1e:	4603      	mov	r3, r0
 8026d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8026d24:	2b00      	cmp	r3, #0
 8026d26:	d0f8      	beq.n	8026d1a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8026d28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8026d2c:	f7ff fd24 	bl	8026778 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8026d30:	4b0e      	ldr	r3, [pc, #56]	; (8026d6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8026d32:	2208      	movs	r2, #8
 8026d34:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8026d36:	bf00      	nop
 8026d38:	f7ff fd12 	bl	8026760 <XMC_SCU_INTERUPT_GetEventStatus>
 8026d3c:	4603      	mov	r3, r0
 8026d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026d42:	2b00      	cmp	r3, #0
 8026d44:	d0f8      	beq.n	8026d38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8026d46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8026d4a:	f7ff fd15 	bl	8026778 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8026d4e:	4a07      	ldr	r2, [pc, #28]	; (8026d6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8026d50:	4b06      	ldr	r3, [pc, #24]	; (8026d6c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8026d52:	68db      	ldr	r3, [r3, #12]
 8026d54:	f043 0308 	orr.w	r3, r3, #8
 8026d58:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8026d5a:	bf00      	nop
 8026d5c:	f7ff fd00 	bl	8026760 <XMC_SCU_INTERUPT_GetEventStatus>
 8026d60:	4603      	mov	r3, r0
 8026d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8026d66:	2b00      	cmp	r3, #0
 8026d68:	d0f8      	beq.n	8026d5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8026d6a:	bd80      	pop	{r7, pc}
 8026d6c:	50004300 	.word	0x50004300

08026d70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8026d70:	b5b0      	push	{r4, r5, r7, lr}
 8026d72:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8026d74:	4a0f      	ldr	r2, [pc, #60]	; (8026db4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8026d76:	4b0f      	ldr	r3, [pc, #60]	; (8026db4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8026d78:	685b      	ldr	r3, [r3, #4]
 8026d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026d7e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8026d80:	4d0d      	ldr	r5, [pc, #52]	; (8026db8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8026d82:	4b0d      	ldr	r3, [pc, #52]	; (8026db8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8026d84:	685b      	ldr	r3, [r3, #4]
 8026d86:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8026d8a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8026d8e:	f002 fad7 	bl	8029340 <OSCHP_GetFrequency>
 8026d92:	4602      	mov	r2, r0
 8026d94:	4b09      	ldr	r3, [pc, #36]	; (8026dbc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8026d96:	fba3 2302 	umull	r2, r3, r3, r2
 8026d9a:	0d1b      	lsrs	r3, r3, #20
 8026d9c:	3b01      	subs	r3, #1
 8026d9e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8026da0:	4323      	orrs	r3, r4
 8026da2:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8026da4:	4a03      	ldr	r2, [pc, #12]	; (8026db4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8026da6:	4b03      	ldr	r3, [pc, #12]	; (8026db4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8026da8:	685b      	ldr	r3, [r3, #4]
 8026daa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8026dae:	6053      	str	r3, [r2, #4]
}
 8026db0:	bdb0      	pop	{r4, r5, r7, pc}
 8026db2:	bf00      	nop
 8026db4:	50004710 	.word	0x50004710
 8026db8:	50004700 	.word	0x50004700
 8026dbc:	6b5fca6b 	.word	0x6b5fca6b

08026dc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8026dc0:	b480      	push	{r7}
 8026dc2:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8026dc4:	4b07      	ldr	r3, [pc, #28]	; (8026de4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8026dcc:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8026dd0:	bf0c      	ite	eq
 8026dd2:	2301      	moveq	r3, #1
 8026dd4:	2300      	movne	r3, #0
 8026dd6:	b2db      	uxtb	r3, r3
}
 8026dd8:	4618      	mov	r0, r3
 8026dda:	46bd      	mov	sp, r7
 8026ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026de0:	4770      	bx	lr
 8026de2:	bf00      	nop
 8026de4:	50004710 	.word	0x50004710

08026de8 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8026de8:	b480      	push	{r7}
 8026dea:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8026dec:	4a05      	ldr	r2, [pc, #20]	; (8026e04 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8026dee:	4b05      	ldr	r3, [pc, #20]	; (8026e04 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8026df0:	685b      	ldr	r3, [r3, #4]
 8026df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026df6:	f023 0302 	bic.w	r3, r3, #2
 8026dfa:	6053      	str	r3, [r2, #4]
}
 8026dfc:	46bd      	mov	sp, r7
 8026dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e02:	4770      	bx	lr
 8026e04:	50004710 	.word	0x50004710

08026e08 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8026e08:	b480      	push	{r7}
 8026e0a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8026e0c:	4a05      	ldr	r2, [pc, #20]	; (8026e24 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8026e0e:	4b05      	ldr	r3, [pc, #20]	; (8026e24 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8026e10:	685b      	ldr	r3, [r3, #4]
 8026e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026e16:	f043 0302 	orr.w	r3, r3, #2
 8026e1a:	6053      	str	r3, [r2, #4]
}
 8026e1c:	46bd      	mov	sp, r7
 8026e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e22:	4770      	bx	lr
 8026e24:	50004710 	.word	0x50004710

08026e28 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8026e28:	b580      	push	{r7, lr}
 8026e2a:	b086      	sub	sp, #24
 8026e2c:	af00      	add	r7, sp, #0
 8026e2e:	60ba      	str	r2, [r7, #8]
 8026e30:	607b      	str	r3, [r7, #4]
 8026e32:	4603      	mov	r3, r0
 8026e34:	81fb      	strh	r3, [r7, #14]
 8026e36:	460b      	mov	r3, r1
 8026e38:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8026e3a:	89fb      	ldrh	r3, [r7, #14]
 8026e3c:	4618      	mov	r0, r3
 8026e3e:	f7ff fdad 	bl	802699c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8026e42:	7b7b      	ldrb	r3, [r7, #13]
 8026e44:	2b01      	cmp	r3, #1
 8026e46:	f040 8084 	bne.w	8026f52 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8026e4a:	89fb      	ldrh	r3, [r7, #14]
 8026e4c:	2b00      	cmp	r3, #0
 8026e4e:	d109      	bne.n	8026e64 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8026e50:	f002 fa76 	bl	8029340 <OSCHP_GetFrequency>
 8026e54:	4602      	mov	r2, r0
 8026e56:	4b4b      	ldr	r3, [pc, #300]	; (8026f84 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8026e58:	fba3 2302 	umull	r2, r3, r3, r2
 8026e5c:	0c9b      	lsrs	r3, r3, #18
 8026e5e:	059b      	lsls	r3, r3, #22
 8026e60:	617b      	str	r3, [r7, #20]
 8026e62:	e002      	b.n	8026e6a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8026e64:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8026e68:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8026e6a:	697b      	ldr	r3, [r7, #20]
 8026e6c:	687a      	ldr	r2, [r7, #4]
 8026e6e:	fb02 f203 	mul.w	r2, r2, r3
 8026e72:	68bb      	ldr	r3, [r7, #8]
 8026e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8026e78:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8026e7a:	697b      	ldr	r3, [r7, #20]
 8026e7c:	4a42      	ldr	r2, [pc, #264]	; (8026f88 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8026e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8026e82:	091b      	lsrs	r3, r3, #4
 8026e84:	0d9b      	lsrs	r3, r3, #22
 8026e86:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8026e88:	4a40      	ldr	r2, [pc, #256]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026e8a:	4b40      	ldr	r3, [pc, #256]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026e8c:	685b      	ldr	r3, [r3, #4]
 8026e8e:	f043 0301 	orr.w	r3, r3, #1
 8026e92:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8026e94:	4a3d      	ldr	r2, [pc, #244]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026e96:	4b3d      	ldr	r3, [pc, #244]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026e98:	685b      	ldr	r3, [r3, #4]
 8026e9a:	f043 0310 	orr.w	r3, r3, #16
 8026e9e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8026ea0:	493a      	ldr	r1, [pc, #232]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ea2:	4b3a      	ldr	r3, [pc, #232]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ea4:	689a      	ldr	r2, [r3, #8]
 8026ea6:	4b3a      	ldr	r3, [pc, #232]	; (8026f90 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8026ea8:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8026eaa:	687a      	ldr	r2, [r7, #4]
 8026eac:	3a01      	subs	r2, #1
 8026eae:	0212      	lsls	r2, r2, #8
 8026eb0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8026eb2:	693b      	ldr	r3, [r7, #16]
 8026eb4:	3b01      	subs	r3, #1
 8026eb6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8026eb8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8026eba:	68bb      	ldr	r3, [r7, #8]
 8026ebc:	3b01      	subs	r3, #1
 8026ebe:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8026ec0:	4313      	orrs	r3, r2
 8026ec2:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8026ec4:	4a31      	ldr	r2, [pc, #196]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ec6:	4b31      	ldr	r3, [pc, #196]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ec8:	685b      	ldr	r3, [r3, #4]
 8026eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026ece:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8026ed0:	4a2e      	ldr	r2, [pc, #184]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ed2:	4b2e      	ldr	r3, [pc, #184]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ed4:	685b      	ldr	r3, [r3, #4]
 8026ed6:	f023 0310 	bic.w	r3, r3, #16
 8026eda:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8026edc:	4a2b      	ldr	r2, [pc, #172]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ede:	4b2b      	ldr	r3, [pc, #172]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ee0:	685b      	ldr	r3, [r3, #4]
 8026ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026ee6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8026ee8:	bf00      	nop
 8026eea:	4b28      	ldr	r3, [pc, #160]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026eec:	681b      	ldr	r3, [r3, #0]
 8026eee:	f003 0304 	and.w	r3, r3, #4
 8026ef2:	2b00      	cmp	r3, #0
 8026ef4:	d0f9      	beq.n	8026eea <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8026ef6:	4a25      	ldr	r2, [pc, #148]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026ef8:	4b24      	ldr	r3, [pc, #144]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026efa:	685b      	ldr	r3, [r3, #4]
 8026efc:	f023 0301 	bic.w	r3, r3, #1
 8026f00:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8026f02:	bf00      	nop
 8026f04:	4b21      	ldr	r3, [pc, #132]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026f06:	681b      	ldr	r3, [r3, #0]
 8026f08:	f003 0301 	and.w	r3, r3, #1
 8026f0c:	2b00      	cmp	r3, #0
 8026f0e:	d1f9      	bne.n	8026f04 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8026f10:	697b      	ldr	r3, [r7, #20]
 8026f12:	4a20      	ldr	r2, [pc, #128]	; (8026f94 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8026f14:	fba2 2303 	umull	r2, r3, r2, r3
 8026f18:	095b      	lsrs	r3, r3, #5
 8026f1a:	0d9b      	lsrs	r3, r3, #22
 8026f1c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8026f1e:	6a3a      	ldr	r2, [r7, #32]
 8026f20:	693b      	ldr	r3, [r7, #16]
 8026f22:	429a      	cmp	r2, r3
 8026f24:	d202      	bcs.n	8026f2c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8026f26:	6938      	ldr	r0, [r7, #16]
 8026f28:	f000 f838 	bl	8026f9c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8026f2c:	697b      	ldr	r3, [r7, #20]
 8026f2e:	085b      	lsrs	r3, r3, #1
 8026f30:	4a19      	ldr	r2, [pc, #100]	; (8026f98 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8026f32:	fba2 2303 	umull	r2, r3, r2, r3
 8026f36:	095b      	lsrs	r3, r3, #5
 8026f38:	0d9b      	lsrs	r3, r3, #22
 8026f3a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8026f3c:	6a3a      	ldr	r2, [r7, #32]
 8026f3e:	693b      	ldr	r3, [r7, #16]
 8026f40:	429a      	cmp	r2, r3
 8026f42:	d202      	bcs.n	8026f4a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8026f44:	6938      	ldr	r0, [r7, #16]
 8026f46:	f000 f829 	bl	8026f9c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8026f4a:	6a38      	ldr	r0, [r7, #32]
 8026f4c:	f000 f826 	bl	8026f9c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8026f50:	e015      	b.n	8026f7e <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8026f52:	490e      	ldr	r1, [pc, #56]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026f54:	4b0d      	ldr	r3, [pc, #52]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026f56:	689b      	ldr	r3, [r3, #8]
 8026f58:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8026f5c:	6a3b      	ldr	r3, [r7, #32]
 8026f5e:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8026f60:	4313      	orrs	r3, r2
 8026f62:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8026f64:	4a09      	ldr	r2, [pc, #36]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026f66:	4b09      	ldr	r3, [pc, #36]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026f68:	685b      	ldr	r3, [r3, #4]
 8026f6a:	f043 0301 	orr.w	r3, r3, #1
 8026f6e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8026f70:	bf00      	nop
 8026f72:	4b06      	ldr	r3, [pc, #24]	; (8026f8c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8026f74:	681b      	ldr	r3, [r3, #0]
 8026f76:	f003 0301 	and.w	r3, r3, #1
 8026f7a:	2b00      	cmp	r3, #0
 8026f7c:	d0f9      	beq.n	8026f72 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8026f7e:	3718      	adds	r7, #24
 8026f80:	46bd      	mov	sp, r7
 8026f82:	bd80      	pop	{r7, pc}
 8026f84:	431bde83 	.word	0x431bde83
 8026f88:	aaaaaaab 	.word	0xaaaaaaab
 8026f8c:	50004710 	.word	0x50004710
 8026f90:	f08080ff 	.word	0xf08080ff
 8026f94:	88888889 	.word	0x88888889
 8026f98:	b60b60b7 	.word	0xb60b60b7

08026f9c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8026f9c:	b580      	push	{r7, lr}
 8026f9e:	b082      	sub	sp, #8
 8026fa0:	af00      	add	r7, sp, #0
 8026fa2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8026fa4:	4907      	ldr	r1, [pc, #28]	; (8026fc4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8026fa6:	4b07      	ldr	r3, [pc, #28]	; (8026fc4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8026fa8:	689b      	ldr	r3, [r3, #8]
 8026faa:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8026fae:	687b      	ldr	r3, [r7, #4]
 8026fb0:	3b01      	subs	r3, #1
 8026fb2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8026fb4:	4313      	orrs	r3, r2
 8026fb6:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8026fb8:	2032      	movs	r0, #50	; 0x32
 8026fba:	f7ff fbaf 	bl	802671c <XMC_SCU_lDelay>
}
 8026fbe:	3708      	adds	r7, #8
 8026fc0:	46bd      	mov	sp, r7
 8026fc2:	bd80      	pop	{r7, pc}
 8026fc4:	50004710 	.word	0x50004710

08026fc8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8026fc8:	b480      	push	{r7}
 8026fca:	b083      	sub	sp, #12
 8026fcc:	af00      	add	r7, sp, #0
 8026fce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8026fd0:	687b      	ldr	r3, [r7, #4]
 8026fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8026fd6:	60da      	str	r2, [r3, #12]
}
 8026fd8:	370c      	adds	r7, #12
 8026fda:	46bd      	mov	sp, r7
 8026fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fe0:	4770      	bx	lr
 8026fe2:	bf00      	nop

08026fe4 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8026fe4:	b580      	push	{r7, lr}
 8026fe6:	b082      	sub	sp, #8
 8026fe8:	af00      	add	r7, sp, #0
 8026fea:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8026fec:	687b      	ldr	r3, [r7, #4]
 8026fee:	4a08      	ldr	r2, [pc, #32]	; (8027010 <XMC_CCU4_lDeassertReset+0x2c>)
 8026ff0:	4293      	cmp	r3, r2
 8026ff2:	d103      	bne.n	8026ffc <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8026ff4:	2004      	movs	r0, #4
 8026ff6:	f7ff fc55 	bl	80268a4 <XMC_SCU_RESET_DeassertPeripheralReset>
 8026ffa:	e006      	b.n	802700a <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8026ffc:	687b      	ldr	r3, [r7, #4]
 8026ffe:	4a05      	ldr	r2, [pc, #20]	; (8027014 <XMC_CCU4_lDeassertReset+0x30>)
 8027000:	4293      	cmp	r3, r2
 8027002:	d102      	bne.n	802700a <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8027004:	2008      	movs	r0, #8
 8027006:	f7ff fc4d 	bl	80268a4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 802700a:	3708      	adds	r7, #8
 802700c:	46bd      	mov	sp, r7
 802700e:	bd80      	pop	{r7, pc}
 8027010:	4000c000 	.word	0x4000c000
 8027014:	40010000 	.word	0x40010000

08027018 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8027018:	b580      	push	{r7, lr}
 802701a:	b082      	sub	sp, #8
 802701c:	af00      	add	r7, sp, #0
 802701e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8027020:	687b      	ldr	r3, [r7, #4]
 8027022:	4a08      	ldr	r2, [pc, #32]	; (8027044 <XMC_CCU4_lUngateClock+0x2c>)
 8027024:	4293      	cmp	r3, r2
 8027026:	d103      	bne.n	8027030 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8027028:	2004      	movs	r0, #4
 802702a:	f7ff fdaf 	bl	8026b8c <XMC_SCU_CLOCK_UngatePeripheralClock>
 802702e:	e006      	b.n	802703e <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8027030:	687b      	ldr	r3, [r7, #4]
 8027032:	4a05      	ldr	r2, [pc, #20]	; (8027048 <XMC_CCU4_lUngateClock+0x30>)
 8027034:	4293      	cmp	r3, r2
 8027036:	d102      	bne.n	802703e <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8027038:	2008      	movs	r0, #8
 802703a:	f7ff fda7 	bl	8026b8c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 802703e:	3708      	adds	r7, #8
 8027040:	46bd      	mov	sp, r7
 8027042:	bd80      	pop	{r7, pc}
 8027044:	4000c000 	.word	0x4000c000
 8027048:	40010000 	.word	0x40010000

0802704c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 802704c:	b580      	push	{r7, lr}
 802704e:	b082      	sub	sp, #8
 8027050:	af00      	add	r7, sp, #0
 8027052:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8027054:	2010      	movs	r0, #16
 8027056:	f7ff fd89 	bl	8026b6c <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 802705a:	6878      	ldr	r0, [r7, #4]
 802705c:	f7ff ffdc 	bl	8027018 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8027060:	6878      	ldr	r0, [r7, #4]
 8027062:	f7ff ffbf 	bl	8026fe4 <XMC_CCU4_lDeassertReset>
#endif
}
 8027066:	3708      	adds	r7, #8
 8027068:	46bd      	mov	sp, r7
 802706a:	bd80      	pop	{r7, pc}

0802706c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 802706c:	b580      	push	{r7, lr}
 802706e:	b084      	sub	sp, #16
 8027070:	af00      	add	r7, sp, #0
 8027072:	6078      	str	r0, [r7, #4]
 8027074:	460b      	mov	r3, r1
 8027076:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8027078:	6878      	ldr	r0, [r7, #4]
 802707a:	f7ff ffe7 	bl	802704c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 802707e:	6878      	ldr	r0, [r7, #4]
 8027080:	f7ff ffa2 	bl	8026fc8 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8027084:	687b      	ldr	r3, [r7, #4]
 8027086:	681b      	ldr	r3, [r3, #0]
 8027088:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 802708a:	68fb      	ldr	r3, [r7, #12]
 802708c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8027090:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8027092:	78fb      	ldrb	r3, [r7, #3]
 8027094:	039b      	lsls	r3, r3, #14
 8027096:	68fa      	ldr	r2, [r7, #12]
 8027098:	4313      	orrs	r3, r2
 802709a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	68fa      	ldr	r2, [r7, #12]
 80270a0:	601a      	str	r2, [r3, #0]
}
 80270a2:	3710      	adds	r7, #16
 80270a4:	46bd      	mov	sp, r7
 80270a6:	bd80      	pop	{r7, pc}

080270a8 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 80270a8:	b480      	push	{r7}
 80270aa:	b085      	sub	sp, #20
 80270ac:	af00      	add	r7, sp, #0
 80270ae:	6078      	str	r0, [r7, #4]
 80270b0:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 80270b2:	687b      	ldr	r3, [r7, #4]
 80270b4:	681b      	ldr	r3, [r3, #0]
 80270b6:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 80270b8:	683b      	ldr	r3, [r7, #0]
 80270ba:	0c1b      	lsrs	r3, r3, #16
 80270bc:	43db      	mvns	r3, r3
 80270be:	68fa      	ldr	r2, [r7, #12]
 80270c0:	4013      	ands	r3, r2
 80270c2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 80270c4:	683b      	ldr	r3, [r7, #0]
 80270c6:	b29b      	uxth	r3, r3
 80270c8:	68fa      	ldr	r2, [r7, #12]
 80270ca:	4313      	orrs	r3, r2
 80270cc:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 80270ce:	687b      	ldr	r3, [r7, #4]
 80270d0:	68fa      	ldr	r2, [r7, #12]
 80270d2:	601a      	str	r2, [r3, #0]
}
 80270d4:	3714      	adds	r7, #20
 80270d6:	46bd      	mov	sp, r7
 80270d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270dc:	4770      	bx	lr
 80270de:	bf00      	nop

080270e0 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80270e0:	b480      	push	{r7}
 80270e2:	b083      	sub	sp, #12
 80270e4:	af00      	add	r7, sp, #0
 80270e6:	6078      	str	r0, [r7, #4]
 80270e8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80270ea:	683b      	ldr	r3, [r7, #0]
 80270ec:	681a      	ldr	r2, [r3, #0]
 80270ee:	687b      	ldr	r3, [r7, #4]
 80270f0:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80270f2:	683b      	ldr	r3, [r7, #0]
 80270f4:	795b      	ldrb	r3, [r3, #5]
 80270f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80270fa:	b2db      	uxtb	r3, r3
 80270fc:	051a      	lsls	r2, r3, #20
 80270fe:	687b      	ldr	r3, [r7, #4]
 8027100:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8027102:	683b      	ldr	r3, [r7, #0]
 8027104:	791b      	ldrb	r3, [r3, #4]
 8027106:	f3c3 0303 	ubfx	r3, r3, #0, #4
 802710a:	b2db      	uxtb	r3, r3
 802710c:	461a      	mov	r2, r3
 802710e:	687b      	ldr	r3, [r7, #4]
 8027110:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8027112:	683b      	ldr	r3, [r7, #0]
 8027114:	795b      	ldrb	r3, [r3, #5]
 8027116:	f3c3 0303 	ubfx	r3, r3, #0, #4
 802711a:	b2db      	uxtb	r3, r3
 802711c:	461a      	mov	r2, r3
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8027122:	683b      	ldr	r3, [r7, #0]
 8027124:	795b      	ldrb	r3, [r3, #5]
 8027126:	f3c3 1300 	ubfx	r3, r3, #4, #1
 802712a:	b2db      	uxtb	r3, r3
 802712c:	461a      	mov	r2, r3
 802712e:	687b      	ldr	r3, [r7, #4]
 8027130:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8027132:	683b      	ldr	r3, [r7, #0]
 8027134:	791b      	ldrb	r3, [r3, #4]
 8027136:	f3c3 1303 	ubfx	r3, r3, #4, #4
 802713a:	b2db      	uxtb	r3, r3
 802713c:	461a      	mov	r2, r3
 802713e:	687b      	ldr	r3, [r7, #4]
 8027140:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8027142:	370c      	adds	r7, #12
 8027144:	46bd      	mov	sp, r7
 8027146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802714a:	4770      	bx	lr

0802714c <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 802714c:	b480      	push	{r7}
 802714e:	b085      	sub	sp, #20
 8027150:	af00      	add	r7, sp, #0
 8027152:	6078      	str	r0, [r7, #4]
 8027154:	460b      	mov	r3, r1
 8027156:	70fb      	strb	r3, [r7, #3]
 8027158:	4613      	mov	r3, r2
 802715a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 802715c:	687b      	ldr	r3, [r7, #4]
 802715e:	685b      	ldr	r3, [r3, #4]
 8027160:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8027162:	68bb      	ldr	r3, [r7, #8]
 8027164:	f023 0303 	bic.w	r3, r3, #3
 8027168:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 802716a:	78fb      	ldrb	r3, [r7, #3]
 802716c:	68ba      	ldr	r2, [r7, #8]
 802716e:	4313      	orrs	r3, r2
 8027170:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8027172:	687b      	ldr	r3, [r7, #4]
 8027174:	68ba      	ldr	r2, [r7, #8]
 8027176:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8027178:	687b      	ldr	r3, [r7, #4]
 802717a:	695b      	ldr	r3, [r3, #20]
 802717c:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 802717e:	78bb      	ldrb	r3, [r7, #2]
 8027180:	2b01      	cmp	r3, #1
 8027182:	d104      	bne.n	802718e <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8027184:	68fb      	ldr	r3, [r7, #12]
 8027186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802718a:	60fb      	str	r3, [r7, #12]
 802718c:	e003      	b.n	8027196 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 802718e:	68fb      	ldr	r3, [r7, #12]
 8027190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027194:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8027196:	687b      	ldr	r3, [r7, #4]
 8027198:	68fa      	ldr	r2, [r7, #12]
 802719a:	615a      	str	r2, [r3, #20]
}
 802719c:	3714      	adds	r7, #20
 802719e:	46bd      	mov	sp, r7
 80271a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271a4:	4770      	bx	lr
 80271a6:	bf00      	nop

080271a8 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 80271a8:	b480      	push	{r7}
 80271aa:	b085      	sub	sp, #20
 80271ac:	af00      	add	r7, sp, #0
 80271ae:	6078      	str	r0, [r7, #4]
 80271b0:	460b      	mov	r3, r1
 80271b2:	70fb      	strb	r3, [r7, #3]
 80271b4:	4613      	mov	r3, r2
 80271b6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 80271b8:	687b      	ldr	r3, [r7, #4]
 80271ba:	685b      	ldr	r3, [r3, #4]
 80271bc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 80271be:	68fb      	ldr	r3, [r7, #12]
 80271c0:	f023 030c 	bic.w	r3, r3, #12
 80271c4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 80271c6:	78fb      	ldrb	r3, [r7, #3]
 80271c8:	009b      	lsls	r3, r3, #2
 80271ca:	68fa      	ldr	r2, [r7, #12]
 80271cc:	4313      	orrs	r3, r2
 80271ce:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80271d0:	687b      	ldr	r3, [r7, #4]
 80271d2:	68fa      	ldr	r2, [r7, #12]
 80271d4:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 80271d6:	687b      	ldr	r3, [r7, #4]
 80271d8:	695b      	ldr	r3, [r3, #20]
 80271da:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 80271dc:	68bb      	ldr	r3, [r7, #8]
 80271de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80271e2:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 80271e4:	78bb      	ldrb	r3, [r7, #2]
 80271e6:	021b      	lsls	r3, r3, #8
 80271e8:	68ba      	ldr	r2, [r7, #8]
 80271ea:	4313      	orrs	r3, r2
 80271ec:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	68ba      	ldr	r2, [r7, #8]
 80271f2:	615a      	str	r2, [r3, #20]
}
 80271f4:	3714      	adds	r7, #20
 80271f6:	46bd      	mov	sp, r7
 80271f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271fc:	4770      	bx	lr
 80271fe:	bf00      	nop

08027200 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8027200:	b480      	push	{r7}
 8027202:	b085      	sub	sp, #20
 8027204:	af00      	add	r7, sp, #0
 8027206:	6078      	str	r0, [r7, #4]
 8027208:	460b      	mov	r3, r1
 802720a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 802720c:	687b      	ldr	r3, [r7, #4]
 802720e:	685b      	ldr	r3, [r3, #4]
 8027210:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8027212:	68fb      	ldr	r3, [r7, #12]
 8027214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8027218:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 802721a:	78fb      	ldrb	r3, [r7, #3]
 802721c:	031b      	lsls	r3, r3, #12
 802721e:	68fa      	ldr	r2, [r7, #12]
 8027220:	4313      	orrs	r3, r2
 8027222:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	68fa      	ldr	r2, [r7, #12]
 8027228:	605a      	str	r2, [r3, #4]
}
 802722a:	3714      	adds	r7, #20
 802722c:	46bd      	mov	sp, r7
 802722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027232:	4770      	bx	lr

08027234 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8027234:	b480      	push	{r7}
 8027236:	b085      	sub	sp, #20
 8027238:	af00      	add	r7, sp, #0
 802723a:	6078      	str	r0, [r7, #4]
 802723c:	4608      	mov	r0, r1
 802723e:	4611      	mov	r1, r2
 8027240:	461a      	mov	r2, r3
 8027242:	4603      	mov	r3, r0
 8027244:	70fb      	strb	r3, [r7, #3]
 8027246:	460b      	mov	r3, r1
 8027248:	70bb      	strb	r3, [r7, #2]
 802724a:	4613      	mov	r3, r2
 802724c:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 802724e:	687b      	ldr	r3, [r7, #4]
 8027250:	695b      	ldr	r3, [r3, #20]
 8027252:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 8027254:	687b      	ldr	r3, [r7, #4]
 8027256:	685b      	ldr	r3, [r3, #4]
 8027258:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 802725a:	68bb      	ldr	r3, [r7, #8]
 802725c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8027260:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8027262:	78fb      	ldrb	r3, [r7, #3]
 8027264:	049b      	lsls	r3, r3, #18
 8027266:	68ba      	ldr	r2, [r7, #8]
 8027268:	4313      	orrs	r3, r2
 802726a:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 802726c:	687b      	ldr	r3, [r7, #4]
 802726e:	68ba      	ldr	r2, [r7, #8]
 8027270:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 8027272:	78bb      	ldrb	r3, [r7, #2]
 8027274:	2b01      	cmp	r3, #1
 8027276:	d104      	bne.n	8027282 <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8027278:	68fb      	ldr	r3, [r7, #12]
 802727a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802727e:	60fb      	str	r3, [r7, #12]
 8027280:	e003      	b.n	802728a <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8027282:	68fb      	ldr	r3, [r7, #12]
 8027284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027288:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 802728a:	787b      	ldrb	r3, [r7, #1]
 802728c:	2b00      	cmp	r3, #0
 802728e:	d004      	beq.n	802729a <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8027290:	68fb      	ldr	r3, [r7, #12]
 8027292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8027296:	60fb      	str	r3, [r7, #12]
 8027298:	e003      	b.n	80272a2 <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 802729a:	68fb      	ldr	r3, [r7, #12]
 802729c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80272a0:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 80272a2:	687b      	ldr	r3, [r7, #4]
 80272a4:	68fa      	ldr	r2, [r7, #12]
 80272a6:	615a      	str	r2, [r3, #20]
}
 80272a8:	3714      	adds	r7, #20
 80272aa:	46bd      	mov	sp, r7
 80272ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272b0:	4770      	bx	lr
 80272b2:	bf00      	nop

080272b4 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80272b4:	b480      	push	{r7}
 80272b6:	b085      	sub	sp, #20
 80272b8:	af00      	add	r7, sp, #0
 80272ba:	6078      	str	r0, [r7, #4]
 80272bc:	460b      	mov	r3, r1
 80272be:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 80272c0:	687b      	ldr	r3, [r7, #4]
 80272c2:	685b      	ldr	r3, [r3, #4]
 80272c4:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 80272c6:	68fb      	ldr	r3, [r7, #12]
 80272c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80272cc:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 80272ce:	78fb      	ldrb	r3, [r7, #3]
 80272d0:	039b      	lsls	r3, r3, #14
 80272d2:	68fa      	ldr	r2, [r7, #12]
 80272d4:	4313      	orrs	r3, r2
 80272d6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	68fa      	ldr	r2, [r7, #12]
 80272dc:	605a      	str	r2, [r3, #4]
}
 80272de:	3714      	adds	r7, #20
 80272e0:	46bd      	mov	sp, r7
 80272e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272e6:	4770      	bx	lr

080272e8 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80272e8:	b480      	push	{r7}
 80272ea:	b085      	sub	sp, #20
 80272ec:	af00      	add	r7, sp, #0
 80272ee:	6078      	str	r0, [r7, #4]
 80272f0:	460b      	mov	r3, r1
 80272f2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80272f4:	687b      	ldr	r3, [r7, #4]
 80272f6:	685b      	ldr	r3, [r3, #4]
 80272f8:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 80272fa:	68fb      	ldr	r3, [r7, #12]
 80272fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027300:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8027302:	78fb      	ldrb	r3, [r7, #3]
 8027304:	021b      	lsls	r3, r3, #8
 8027306:	68fa      	ldr	r2, [r7, #12]
 8027308:	4313      	orrs	r3, r2
 802730a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 802730c:	687b      	ldr	r3, [r7, #4]
 802730e:	68fa      	ldr	r2, [r7, #12]
 8027310:	605a      	str	r2, [r3, #4]
}
 8027312:	3714      	adds	r7, #20
 8027314:	46bd      	mov	sp, r7
 8027316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802731a:	4770      	bx	lr

0802731c <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 802731c:	b480      	push	{r7}
 802731e:	b085      	sub	sp, #20
 8027320:	af00      	add	r7, sp, #0
 8027322:	6078      	str	r0, [r7, #4]
 8027324:	460b      	mov	r3, r1
 8027326:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 8027328:	687b      	ldr	r3, [r7, #4]
 802732a:	685b      	ldr	r3, [r3, #4]
 802732c:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 802732e:	68fb      	ldr	r3, [r7, #12]
 8027330:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8027334:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8027336:	78fb      	ldrb	r3, [r7, #3]
 8027338:	029b      	lsls	r3, r3, #10
 802733a:	68fa      	ldr	r2, [r7, #12]
 802733c:	4313      	orrs	r3, r2
 802733e:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8027340:	687b      	ldr	r3, [r7, #4]
 8027342:	68fa      	ldr	r2, [r7, #12]
 8027344:	605a      	str	r2, [r3, #4]
}
 8027346:	3714      	adds	r7, #20
 8027348:	46bd      	mov	sp, r7
 802734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802734e:	4770      	bx	lr

08027350 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 8027350:	b480      	push	{r7}
 8027352:	b085      	sub	sp, #20
 8027354:	af00      	add	r7, sp, #0
 8027356:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 8027358:	687b      	ldr	r3, [r7, #4]
 802735a:	685b      	ldr	r3, [r3, #4]
 802735c:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 802735e:	68fb      	ldr	r3, [r7, #12]
 8027360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027364:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8027366:	68fb      	ldr	r3, [r7, #12]
 8027368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802736c:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 802736e:	687b      	ldr	r3, [r7, #4]
 8027370:	68fa      	ldr	r2, [r7, #12]
 8027372:	605a      	str	r2, [r3, #4]
}
 8027374:	3714      	adds	r7, #20
 8027376:	46bd      	mov	sp, r7
 8027378:	f85d 7b04 	ldr.w	r7, [sp], #4
 802737c:	4770      	bx	lr
 802737e:	bf00      	nop

08027380 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8027380:	b480      	push	{r7}
 8027382:	b085      	sub	sp, #20
 8027384:	af00      	add	r7, sp, #0
 8027386:	6078      	str	r0, [r7, #4]
 8027388:	460b      	mov	r3, r1
 802738a:	70fb      	strb	r3, [r7, #3]
 802738c:	4613      	mov	r3, r2
 802738e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8027390:	687b      	ldr	r3, [r7, #4]
 8027392:	685b      	ldr	r3, [r3, #4]
 8027394:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8027396:	68bb      	ldr	r3, [r7, #8]
 8027398:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 802739c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 802739e:	68bb      	ldr	r3, [r7, #8]
 80273a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80273a4:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 80273a6:	687b      	ldr	r3, [r7, #4]
 80273a8:	68ba      	ldr	r2, [r7, #8]
 80273aa:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 80273ac:	687b      	ldr	r3, [r7, #4]
 80273ae:	695b      	ldr	r3, [r3, #20]
 80273b0:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 80273b2:	78bb      	ldrb	r3, [r7, #2]
 80273b4:	2b00      	cmp	r3, #0
 80273b6:	d004      	beq.n	80273c2 <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 80273b8:	68fb      	ldr	r3, [r7, #12]
 80273ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80273be:	60fb      	str	r3, [r7, #12]
 80273c0:	e003      	b.n	80273ca <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 80273c2:	68fb      	ldr	r3, [r7, #12]
 80273c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80273c8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 80273ca:	78fb      	ldrb	r3, [r7, #3]
 80273cc:	2b01      	cmp	r3, #1
 80273ce:	d104      	bne.n	80273da <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 80273d0:	68fb      	ldr	r3, [r7, #12]
 80273d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80273d6:	60fb      	str	r3, [r7, #12]
 80273d8:	e003      	b.n	80273e2 <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 80273da:	68fb      	ldr	r3, [r7, #12]
 80273dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80273e0:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 80273e2:	687b      	ldr	r3, [r7, #4]
 80273e4:	68fa      	ldr	r2, [r7, #12]
 80273e6:	615a      	str	r2, [r3, #20]
}
 80273e8:	3714      	adds	r7, #20
 80273ea:	46bd      	mov	sp, r7
 80273ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273f0:	4770      	bx	lr
 80273f2:	bf00      	nop

080273f4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 80273f4:	b480      	push	{r7}
 80273f6:	b087      	sub	sp, #28
 80273f8:	af00      	add	r7, sp, #0
 80273fa:	60f8      	str	r0, [r7, #12]
 80273fc:	60b9      	str	r1, [r7, #8]
 80273fe:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 8027400:	68fb      	ldr	r3, [r7, #12]
 8027402:	681b      	ldr	r3, [r3, #0]
 8027404:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 8027406:	697b      	ldr	r3, [r7, #20]
 8027408:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 802740c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 802740e:	68bb      	ldr	r3, [r7, #8]
 8027410:	785b      	ldrb	r3, [r3, #1]
 8027412:	049b      	lsls	r3, r3, #18
 8027414:	697a      	ldr	r2, [r7, #20]
 8027416:	4313      	orrs	r3, r2
 8027418:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 802741a:	697b      	ldr	r3, [r7, #20]
 802741c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8027420:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	785b      	ldrb	r3, [r3, #1]
 8027426:	051b      	lsls	r3, r3, #20
 8027428:	697a      	ldr	r2, [r7, #20]
 802742a:	4313      	orrs	r3, r2
 802742c:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 802742e:	697b      	ldr	r3, [r7, #20]
 8027430:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8027434:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 8027436:	68bb      	ldr	r3, [r7, #8]
 8027438:	789b      	ldrb	r3, [r3, #2]
 802743a:	05db      	lsls	r3, r3, #23
 802743c:	697a      	ldr	r2, [r7, #20]
 802743e:	4313      	orrs	r3, r2
 8027440:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 8027442:	697b      	ldr	r3, [r7, #20]
 8027444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027448:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 802744a:	687b      	ldr	r3, [r7, #4]
 802744c:	789b      	ldrb	r3, [r3, #2]
 802744e:	061b      	lsls	r3, r3, #24
 8027450:	697a      	ldr	r2, [r7, #20]
 8027452:	4313      	orrs	r3, r2
 8027454:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 8027456:	697b      	ldr	r3, [r7, #20]
 8027458:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 802745c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 802745e:	68bb      	ldr	r3, [r7, #8]
 8027460:	78db      	ldrb	r3, [r3, #3]
 8027462:	06db      	lsls	r3, r3, #27
 8027464:	697a      	ldr	r2, [r7, #20]
 8027466:	4313      	orrs	r3, r2
 8027468:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 802746a:	697b      	ldr	r3, [r7, #20]
 802746c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8027470:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 8027472:	687b      	ldr	r3, [r7, #4]
 8027474:	78db      	ldrb	r3, [r3, #3]
 8027476:	075b      	lsls	r3, r3, #29
 8027478:	697a      	ldr	r2, [r7, #20]
 802747a:	4313      	orrs	r3, r2
 802747c:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 802747e:	697b      	ldr	r3, [r7, #20]
 8027480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8027484:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8027486:	68bb      	ldr	r3, [r7, #8]
 8027488:	781b      	ldrb	r3, [r3, #0]
 802748a:	011b      	lsls	r3, r3, #4
 802748c:	697a      	ldr	r2, [r7, #20]
 802748e:	4313      	orrs	r3, r2
 8027490:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 8027492:	697b      	ldr	r3, [r7, #20]
 8027494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8027498:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 802749a:	687b      	ldr	r3, [r7, #4]
 802749c:	781b      	ldrb	r3, [r3, #0]
 802749e:	021b      	lsls	r3, r3, #8
 80274a0:	697a      	ldr	r2, [r7, #20]
 80274a2:	4313      	orrs	r3, r2
 80274a4:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 80274a6:	68fb      	ldr	r3, [r7, #12]
 80274a8:	697a      	ldr	r2, [r7, #20]
 80274aa:	601a      	str	r2, [r3, #0]
#endif
}
 80274ac:	371c      	adds	r7, #28
 80274ae:	46bd      	mov	sp, r7
 80274b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274b4:	4770      	bx	lr
 80274b6:	bf00      	nop

080274b8 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 80274b8:	b480      	push	{r7}
 80274ba:	b089      	sub	sp, #36	; 0x24
 80274bc:	af00      	add	r7, sp, #0
 80274be:	60f8      	str	r0, [r7, #12]
 80274c0:	460b      	mov	r3, r1
 80274c2:	607a      	str	r2, [r7, #4]
 80274c4:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80274c6:	7afb      	ldrb	r3, [r7, #11]
 80274c8:	3b01      	subs	r3, #1
 80274ca:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80274cc:	68fb      	ldr	r3, [r7, #12]
 80274ce:	681b      	ldr	r3, [r3, #0]
 80274d0:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80274d2:	7ffb      	ldrb	r3, [r7, #31]
 80274d4:	005b      	lsls	r3, r3, #1
 80274d6:	b2db      	uxtb	r3, r3
 80274d8:	3310      	adds	r3, #16
 80274da:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80274dc:	7dfb      	ldrb	r3, [r7, #23]
 80274de:	2203      	movs	r2, #3
 80274e0:	fa02 f303 	lsl.w	r3, r2, r3
 80274e4:	43db      	mvns	r3, r3
 80274e6:	69ba      	ldr	r2, [r7, #24]
 80274e8:	4013      	ands	r3, r2
 80274ea:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80274ec:	687b      	ldr	r3, [r7, #4]
 80274ee:	785b      	ldrb	r3, [r3, #1]
 80274f0:	461a      	mov	r2, r3
 80274f2:	7dfb      	ldrb	r3, [r7, #23]
 80274f4:	fa02 f303 	lsl.w	r3, r2, r3
 80274f8:	69ba      	ldr	r2, [r7, #24]
 80274fa:	4313      	orrs	r3, r2
 80274fc:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 80274fe:	7ffb      	ldrb	r3, [r7, #31]
 8027500:	3316      	adds	r3, #22
 8027502:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8027504:	7dfb      	ldrb	r3, [r7, #23]
 8027506:	2201      	movs	r2, #1
 8027508:	fa02 f303 	lsl.w	r3, r2, r3
 802750c:	43db      	mvns	r3, r3
 802750e:	69ba      	ldr	r2, [r7, #24]
 8027510:	4013      	ands	r3, r2
 8027512:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8027514:	687b      	ldr	r3, [r7, #4]
 8027516:	789b      	ldrb	r3, [r3, #2]
 8027518:	461a      	mov	r2, r3
 802751a:	7dfb      	ldrb	r3, [r7, #23]
 802751c:	fa02 f303 	lsl.w	r3, r2, r3
 8027520:	69ba      	ldr	r2, [r7, #24]
 8027522:	4313      	orrs	r3, r2
 8027524:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8027526:	7ffb      	ldrb	r3, [r7, #31]
 8027528:	005b      	lsls	r3, r3, #1
 802752a:	b2db      	uxtb	r3, r3
 802752c:	3319      	adds	r3, #25
 802752e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8027530:	7dfb      	ldrb	r3, [r7, #23]
 8027532:	2203      	movs	r2, #3
 8027534:	fa02 f303 	lsl.w	r3, r2, r3
 8027538:	43db      	mvns	r3, r3
 802753a:	69ba      	ldr	r2, [r7, #24]
 802753c:	4013      	ands	r3, r2
 802753e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8027540:	687b      	ldr	r3, [r7, #4]
 8027542:	78db      	ldrb	r3, [r3, #3]
 8027544:	461a      	mov	r2, r3
 8027546:	7dfb      	ldrb	r3, [r7, #23]
 8027548:	fa02 f303 	lsl.w	r3, r2, r3
 802754c:	69ba      	ldr	r2, [r7, #24]
 802754e:	4313      	orrs	r3, r2
 8027550:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8027552:	7ffb      	ldrb	r3, [r7, #31]
 8027554:	009b      	lsls	r3, r3, #2
 8027556:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8027558:	7dfb      	ldrb	r3, [r7, #23]
 802755a:	220f      	movs	r2, #15
 802755c:	fa02 f303 	lsl.w	r3, r2, r3
 8027560:	43db      	mvns	r3, r3
 8027562:	69ba      	ldr	r2, [r7, #24]
 8027564:	4013      	ands	r3, r2
 8027566:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8027568:	687b      	ldr	r3, [r7, #4]
 802756a:	781b      	ldrb	r3, [r3, #0]
 802756c:	461a      	mov	r2, r3
 802756e:	7dfb      	ldrb	r3, [r7, #23]
 8027570:	fa02 f303 	lsl.w	r3, r2, r3
 8027574:	69ba      	ldr	r2, [r7, #24]
 8027576:	4313      	orrs	r3, r2
 8027578:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 802757a:	68fb      	ldr	r3, [r7, #12]
 802757c:	69ba      	ldr	r2, [r7, #24]
 802757e:	601a      	str	r2, [r3, #0]
#endif
}
 8027580:	3724      	adds	r7, #36	; 0x24
 8027582:	46bd      	mov	sp, r7
 8027584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027588:	4770      	bx	lr
 802758a:	bf00      	nop

0802758c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 802758c:	b480      	push	{r7}
 802758e:	b087      	sub	sp, #28
 8027590:	af00      	add	r7, sp, #0
 8027592:	6078      	str	r0, [r7, #4]
 8027594:	460b      	mov	r3, r1
 8027596:	70fb      	strb	r3, [r7, #3]
 8027598:	4613      	mov	r3, r2
 802759a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 802759c:	687b      	ldr	r3, [r7, #4]
 802759e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80275a2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80275a4:	78fb      	ldrb	r3, [r7, #3]
 80275a6:	2b09      	cmp	r3, #9
 80275a8:	d82c      	bhi.n	8027604 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80275aa:	a201      	add	r2, pc, #4	; (adr r2, 80275b0 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80275ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80275b0:	080275d9 	.word	0x080275d9
 80275b4:	080275d9 	.word	0x080275d9
 80275b8:	080275e3 	.word	0x080275e3
 80275bc:	080275e3 	.word	0x080275e3
 80275c0:	08027605 	.word	0x08027605
 80275c4:	08027605 	.word	0x08027605
 80275c8:	08027605 	.word	0x08027605
 80275cc:	08027605 	.word	0x08027605
 80275d0:	080275ed 	.word	0x080275ed
 80275d4:	080275f9 	.word	0x080275f9
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80275d8:	2303      	movs	r3, #3
 80275da:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80275dc:	2300      	movs	r3, #0
 80275de:	617b      	str	r3, [r7, #20]
      break;
 80275e0:	e016      	b.n	8027610 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80275e2:	230c      	movs	r3, #12
 80275e4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80275e6:	2302      	movs	r3, #2
 80275e8:	617b      	str	r3, [r7, #20]
      break;
 80275ea:	e011      	b.n	8027610 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80275ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80275f0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80275f2:	2308      	movs	r3, #8
 80275f4:	617b      	str	r3, [r7, #20]
      break;
 80275f6:	e00b      	b.n	8027610 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80275f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80275fc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80275fe:	230a      	movs	r3, #10
 8027600:	617b      	str	r3, [r7, #20]
      break;
 8027602:	e005      	b.n	8027610 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8027604:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8027608:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 802760a:	230c      	movs	r3, #12
 802760c:	617b      	str	r3, [r7, #20]
      break;
 802760e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8027610:	693b      	ldr	r3, [r7, #16]
 8027612:	43db      	mvns	r3, r3
 8027614:	68fa      	ldr	r2, [r7, #12]
 8027616:	4013      	ands	r3, r2
 8027618:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 802761a:	78ba      	ldrb	r2, [r7, #2]
 802761c:	697b      	ldr	r3, [r7, #20]
 802761e:	fa02 f303 	lsl.w	r3, r2, r3
 8027622:	68fa      	ldr	r2, [r7, #12]
 8027624:	4313      	orrs	r3, r2
 8027626:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8027628:	687b      	ldr	r3, [r7, #4]
 802762a:	68fa      	ldr	r2, [r7, #12]
 802762c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8027630:	371c      	adds	r7, #28
 8027632:	46bd      	mov	sp, r7
 8027634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027638:	4770      	bx	lr
 802763a:	bf00      	nop

0802763c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 802763c:	b480      	push	{r7}
 802763e:	b083      	sub	sp, #12
 8027640:	af00      	add	r7, sp, #0
 8027642:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8027644:	687b      	ldr	r3, [r7, #4]
 8027646:	f44f 7280 	mov.w	r2, #256	; 0x100
 802764a:	60da      	str	r2, [r3, #12]
}
 802764c:	370c      	adds	r7, #12
 802764e:	46bd      	mov	sp, r7
 8027650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027654:	4770      	bx	lr
 8027656:	bf00      	nop

08027658 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8027658:	b580      	push	{r7, lr}
 802765a:	b082      	sub	sp, #8
 802765c:	af00      	add	r7, sp, #0
 802765e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8027660:	687b      	ldr	r3, [r7, #4]
 8027662:	4a04      	ldr	r2, [pc, #16]	; (8027674 <XMC_CCU8_lDeassertReset+0x1c>)
 8027664:	4293      	cmp	r3, r2
 8027666:	d102      	bne.n	802766e <XMC_CCU8_lDeassertReset+0x16>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8027668:	2080      	movs	r0, #128	; 0x80
 802766a:	f7ff f91b 	bl	80268a4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 802766e:	3708      	adds	r7, #8
 8027670:	46bd      	mov	sp, r7
 8027672:	bd80      	pop	{r7, pc}
 8027674:	40020000 	.word	0x40020000

08027678 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8027678:	b580      	push	{r7, lr}
 802767a:	b082      	sub	sp, #8
 802767c:	af00      	add	r7, sp, #0
 802767e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8027680:	687b      	ldr	r3, [r7, #4]
 8027682:	4a04      	ldr	r2, [pc, #16]	; (8027694 <XMC_CCU8_lUngateClock+0x1c>)
 8027684:	4293      	cmp	r3, r2
 8027686:	d102      	bne.n	802768e <XMC_CCU8_lUngateClock+0x16>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8027688:	2080      	movs	r0, #128	; 0x80
 802768a:	f7ff fa7f 	bl	8026b8c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 802768e:	3708      	adds	r7, #8
 8027690:	46bd      	mov	sp, r7
 8027692:	bd80      	pop	{r7, pc}
 8027694:	40020000 	.word	0x40020000

08027698 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8027698:	b580      	push	{r7, lr}
 802769a:	b082      	sub	sp, #8
 802769c:	af00      	add	r7, sp, #0
 802769e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80276a0:	2010      	movs	r0, #16
 80276a2:	f7ff fa63 	bl	8026b6c <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 80276a6:	6878      	ldr	r0, [r7, #4]
 80276a8:	f7ff ffe6 	bl	8027678 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 80276ac:	6878      	ldr	r0, [r7, #4]
 80276ae:	f7ff ffd3 	bl	8027658 <XMC_CCU8_lDeassertReset>
#endif
}
 80276b2:	3708      	adds	r7, #8
 80276b4:	46bd      	mov	sp, r7
 80276b6:	bd80      	pop	{r7, pc}

080276b8 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80276b8:	b580      	push	{r7, lr}
 80276ba:	b084      	sub	sp, #16
 80276bc:	af00      	add	r7, sp, #0
 80276be:	6078      	str	r0, [r7, #4]
 80276c0:	460b      	mov	r3, r1
 80276c2:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80276c4:	6878      	ldr	r0, [r7, #4]
 80276c6:	f7ff ffe7 	bl	8027698 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80276ca:	6878      	ldr	r0, [r7, #4]
 80276cc:	f7ff ffb6 	bl	802763c <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 80276d0:	687b      	ldr	r3, [r7, #4]
 80276d2:	681b      	ldr	r3, [r3, #0]
 80276d4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80276d6:	68fb      	ldr	r3, [r7, #12]
 80276d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80276dc:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80276de:	78fb      	ldrb	r3, [r7, #3]
 80276e0:	039b      	lsls	r3, r3, #14
 80276e2:	68fa      	ldr	r2, [r7, #12]
 80276e4:	4313      	orrs	r3, r2
 80276e6:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80276e8:	687b      	ldr	r3, [r7, #4]
 80276ea:	68fa      	ldr	r2, [r7, #12]
 80276ec:	601a      	str	r2, [r3, #0]
}
 80276ee:	3710      	adds	r7, #16
 80276f0:	46bd      	mov	sp, r7
 80276f2:	bd80      	pop	{r7, pc}

080276f4 <XMC_ECAT_Enable>:
  ECAT0->MII_PDI_ACS_STATE = 0x0;
}

/* EtherCAT module clock ungating and deassert reset API (Enables ECAT) */
void XMC_ECAT_Enable(void)
{
 80276f4:	b580      	push	{r7, lr}
 80276f6:	af00      	add	r7, sp, #0
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
 80276f8:	4806      	ldr	r0, [pc, #24]	; (8027714 <XMC_ECAT_Enable+0x20>)
 80276fa:	f7ff fa47 	bl	8026b8c <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ECAT0);
 80276fe:	4805      	ldr	r0, [pc, #20]	; (8027714 <XMC_ECAT_Enable+0x20>)
 8027700:	f7ff f8d0 	bl	80268a4 <XMC_SCU_RESET_DeassertPeripheralReset>

  while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_ECAT0) == true){}
 8027704:	bf00      	nop
 8027706:	4803      	ldr	r0, [pc, #12]	; (8027714 <XMC_ECAT_Enable+0x20>)
 8027708:	f7ff f8e8 	bl	80268dc <XMC_SCU_RESET_IsPeripheralResetAsserted>
 802770c:	4603      	mov	r3, r0
 802770e:	2b00      	cmp	r3, #0
 8027710:	d1f9      	bne.n	8027706 <XMC_ECAT_Enable+0x12>
}
 8027712:	bd80      	pop	{r7, pc}
 8027714:	20000400 	.word	0x20000400

08027718 <XMC_ECAT_Init>:
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ECAT0);
}

/* EtherCAT initialization function */
void XMC_ECAT_Init(XMC_ECAT_CONFIG_t *const config)
{
 8027718:	b580      	push	{r7, lr}
 802771a:	b082      	sub	sp, #8
 802771c:	af00      	add	r7, sp, #0
 802771e:	6078      	str	r0, [r7, #4]
  XMC_ECAT_Enable();
 8027720:	f7ff ffe8 	bl	80276f4 <XMC_ECAT_Enable>

  /* The process memory is not accessible until the ESC Configuration Area is loaded successfully. */
  
  /* words 0x0-0x3 */
  ECAT0->EEP_DATA[0U] = config->dword[0U];
 8027724:	4a19      	ldr	r2, [pc, #100]	; (802778c <XMC_ECAT_Init+0x74>)
 8027726:	687b      	ldr	r3, [r7, #4]
 8027728:	681b      	ldr	r3, [r3, #0]
 802772a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[1U];
 802772e:	4a17      	ldr	r2, [pc, #92]	; (802778c <XMC_ECAT_Init+0x74>)
 8027730:	687b      	ldr	r3, [r7, #4]
 8027732:	685b      	ldr	r3, [r3, #4]
 8027734:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8027738:	4a14      	ldr	r2, [pc, #80]	; (802778c <XMC_ECAT_Init+0x74>)
 802773a:	4b14      	ldr	r3, [pc, #80]	; (802778c <XMC_ECAT_Init+0x74>)
 802773c:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8027740:	b29b      	uxth	r3, r3
 8027742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027746:	b29b      	uxth	r3, r3
 8027748:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  /* words 0x4-0x7 */
  ECAT0->EEP_DATA[0U] = config->dword[2U];
 802774c:	4a0f      	ldr	r2, [pc, #60]	; (802778c <XMC_ECAT_Init+0x74>)
 802774e:	687b      	ldr	r3, [r7, #4]
 8027750:	689b      	ldr	r3, [r3, #8]
 8027752:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  ECAT0->EEP_DATA[1U] = config->dword[3U];
 8027756:	4a0d      	ldr	r2, [pc, #52]	; (802778c <XMC_ECAT_Init+0x74>)
 8027758:	687b      	ldr	r3, [r7, #4]
 802775a:	68db      	ldr	r3, [r3, #12]
 802775c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
  ECAT0->EEP_CONT_STAT |= (uint16_t)((uint16_t)0x4U << (uint16_t)ECAT_EEP_CONT_STAT_CMD_REG_Pos);
 8027760:	4a0a      	ldr	r2, [pc, #40]	; (802778c <XMC_ECAT_Init+0x74>)
 8027762:	4b0a      	ldr	r3, [pc, #40]	; (802778c <XMC_ECAT_Init+0x74>)
 8027764:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 8027768:	b29b      	uxth	r3, r3
 802776a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802776e:	b29b      	uxth	r3, r3
 8027770:	f8a2 3502 	strh.w	r3, [r2, #1282]	; 0x502

  while (ECAT0->EEP_CONT_STAT & ECAT_EEP_CONT_STAT_L_STAT_Msk)
 8027774:	bf00      	nop
 8027776:	4b05      	ldr	r3, [pc, #20]	; (802778c <XMC_ECAT_Init+0x74>)
 8027778:	f8b3 3502 	ldrh.w	r3, [r3, #1282]	; 0x502
 802777c:	b29b      	uxth	r3, r3
 802777e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027782:	2b00      	cmp	r3, #0
 8027784:	d1f7      	bne.n	8027776 <XMC_ECAT_Init+0x5e>
  {
    /* Wait until the EEPROM_Loaded signal is active */
  }

}
 8027786:	3708      	adds	r7, #8
 8027788:	46bd      	mov	sp, r7
 802778a:	bd80      	pop	{r7, pc}
 802778c:	54010000 	.word	0x54010000

08027790 <XMC_ECAT_DisableEvent>:
{
  ECAT0->AL_EVENT_MASK |= event;
}
/* EtherCAT application event disable API */
void XMC_ECAT_DisableEvent(uint32_t event)
{
 8027790:	b480      	push	{r7}
 8027792:	b083      	sub	sp, #12
 8027794:	af00      	add	r7, sp, #0
 8027796:	6078      	str	r0, [r7, #4]
  ECAT0->AL_EVENT_MASK &= ~event;
 8027798:	4906      	ldr	r1, [pc, #24]	; (80277b4 <XMC_ECAT_DisableEvent+0x24>)
 802779a:	4b06      	ldr	r3, [pc, #24]	; (80277b4 <XMC_ECAT_DisableEvent+0x24>)
 802779c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80277a0:	687b      	ldr	r3, [r7, #4]
 80277a2:	43db      	mvns	r3, r3
 80277a4:	4013      	ands	r3, r2
 80277a6:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
}
 80277aa:	370c      	adds	r7, #12
 80277ac:	46bd      	mov	sp, r7
 80277ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277b2:	4770      	bx	lr
 80277b4:	54010000 	.word	0x54010000

080277b8 <XMC_ECAT_DisableSyncManChannel>:
  return (ECAT0->AL_EVENT_REQ);
}

/* EtherCAT SyncManager channel disable function*/
void XMC_ECAT_DisableSyncManChannel(const uint8_t channel)
{
 80277b8:	b480      	push	{r7}
 80277ba:	b083      	sub	sp, #12
 80277bc:	af00      	add	r7, sp, #0
 80277be:	4603      	mov	r3, r0
 80277c0:	71fb      	strb	r3, [r7, #7]
  ((ECAT0_SM_Type *)(void*)((uint8_t *)(void*)ECAT0_SM0 + (channel * 8U)))->SM_PDI_CTR |= 0x1U;
 80277c2:	79fb      	ldrb	r3, [r7, #7]
 80277c4:	00db      	lsls	r3, r3, #3
 80277c6:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 80277ca:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80277ce:	79fa      	ldrb	r2, [r7, #7]
 80277d0:	00d2      	lsls	r2, r2, #3
 80277d2:	f102 42a8 	add.w	r2, r2, #1409286144	; 0x54000000
 80277d6:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 80277da:	79d2      	ldrb	r2, [r2, #7]
 80277dc:	b2d2      	uxtb	r2, r2
 80277de:	f042 0201 	orr.w	r2, r2, #1
 80277e2:	b2d2      	uxtb	r2, r2
 80277e4:	71da      	strb	r2, [r3, #7]
}
 80277e6:	370c      	adds	r7, #12
 80277e8:	46bd      	mov	sp, r7
 80277ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277ee:	4770      	bx	lr

080277f0 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 80277f0:	b580      	push	{r7, lr}
 80277f2:	b084      	sub	sp, #16
 80277f4:	af00      	add	r7, sp, #0
 80277f6:	60f8      	str	r0, [r7, #12]
 80277f8:	460b      	mov	r3, r1
 80277fa:	607a      	str	r2, [r7, #4]
 80277fc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80277fe:	68f8      	ldr	r0, [r7, #12]
 8027800:	f7fe fdde 	bl	80263c0 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8027804:	68fb      	ldr	r3, [r7, #12]
 8027806:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8027808:	7afb      	ldrb	r3, [r7, #11]
 802780a:	009b      	lsls	r3, r3, #2
 802780c:	4619      	mov	r1, r3
 802780e:	230f      	movs	r3, #15
 8027810:	408b      	lsls	r3, r1
 8027812:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8027814:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8027816:	687b      	ldr	r3, [r7, #4]
 8027818:	681b      	ldr	r3, [r3, #0]
 802781a:	7af9      	ldrb	r1, [r7, #11]
 802781c:	0089      	lsls	r1, r1, #2
 802781e:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8027820:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8027822:	68fb      	ldr	r3, [r7, #12]
 8027824:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8027826:	7afa      	ldrb	r2, [r7, #11]
 8027828:	687b      	ldr	r3, [r7, #4]
 802782a:	6859      	ldr	r1, [r3, #4]
 802782c:	68fb      	ldr	r3, [r7, #12]
 802782e:	3204      	adds	r2, #4
 8027830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8027834:	3710      	adds	r7, #16
 8027836:	46bd      	mov	sp, r7
 8027838:	bd80      	pop	{r7, pc}
 802783a:	bf00      	nop

0802783c <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 802783c:	b580      	push	{r7, lr}
 802783e:	b084      	sub	sp, #16
 8027840:	af00      	add	r7, sp, #0
 8027842:	60f8      	str	r0, [r7, #12]
 8027844:	460b      	mov	r3, r1
 8027846:	607a      	str	r2, [r7, #4]
 8027848:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 802784a:	68f8      	ldr	r0, [r7, #12]
 802784c:	f7fe fdb8 	bl	80263c0 <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8027850:	7afa      	ldrb	r2, [r7, #11]
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	6819      	ldr	r1, [r3, #0]
 8027856:	68fb      	ldr	r3, [r7, #12]
 8027858:	3208      	adds	r2, #8
 802785a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 802785e:	3710      	adds	r7, #16
 8027860:	46bd      	mov	sp, r7
 8027862:	bd80      	pop	{r7, pc}

08027864 <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 8027864:	b480      	push	{r7}
 8027866:	b083      	sub	sp, #12
 8027868:	af00      	add	r7, sp, #0
 802786a:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 802786c:	687b      	ldr	r3, [r7, #4]
 802786e:	681b      	ldr	r3, [r3, #0]
 8027870:	687a      	ldr	r2, [r7, #4]
 8027872:	6852      	ldr	r2, [r2, #4]
 8027874:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 8027876:	687b      	ldr	r3, [r7, #4]
 8027878:	681b      	ldr	r3, [r3, #0]
 802787a:	687a      	ldr	r2, [r7, #4]
 802787c:	6892      	ldr	r2, [r2, #8]
 802787e:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
 8027880:	2300      	movs	r3, #0
}
 8027882:	4618      	mov	r0, r3
 8027884:	370c      	adds	r7, #12
 8027886:	46bd      	mov	sp, r7
 8027888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802788c:	4770      	bx	lr
 802788e:	bf00      	nop

08027890 <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 8027890:	b580      	push	{r7, lr}
 8027892:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 8027894:	4806      	ldr	r0, [pc, #24]	; (80278b0 <XMC_FCE_Enable+0x20>)
 8027896:	f7ff f979 	bl	8026b8c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 802789a:	4805      	ldr	r0, [pc, #20]	; (80278b0 <XMC_FCE_Enable+0x20>)
 802789c:	f7ff f802 	bl	80268a4 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 80278a0:	4a04      	ldr	r2, [pc, #16]	; (80278b4 <XMC_FCE_Enable+0x24>)
 80278a2:	4b04      	ldr	r3, [pc, #16]	; (80278b4 <XMC_FCE_Enable+0x24>)
 80278a4:	681b      	ldr	r3, [r3, #0]
 80278a6:	f023 0301 	bic.w	r3, r3, #1
 80278aa:	6013      	str	r3, [r2, #0]
}
 80278ac:	bd80      	pop	{r7, pc}
 80278ae:	bf00      	nop
 80278b0:	20000040 	.word	0x20000040
 80278b4:	50020000 	.word	0x50020000

080278b8 <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 80278b8:	b480      	push	{r7}
 80278ba:	b087      	sub	sp, #28
 80278bc:	af00      	add	r7, sp, #0
 80278be:	60f8      	str	r0, [r7, #12]
 80278c0:	60b9      	str	r1, [r7, #8]
 80278c2:	607a      	str	r2, [r7, #4]
 80278c4:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 80278c6:	2300      	movs	r3, #0
 80278c8:	75fb      	strb	r3, [r7, #23]
                                                               (engine->kernel_ptr == XMC_FCE_CRC32_1)));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x3U) == 0));

  /* Check length is a multiple of 4 */
  if ((length == 0) || ((length & 0x3U) != 0U))
 80278ca:	687b      	ldr	r3, [r7, #4]
 80278cc:	2b00      	cmp	r3, #0
 80278ce:	d004      	beq.n	80278da <XMC_FCE_CalculateCRC32+0x22>
 80278d0:	687b      	ldr	r3, [r7, #4]
 80278d2:	f003 0303 	and.w	r3, r3, #3
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	d002      	beq.n	80278e0 <XMC_FCE_CalculateCRC32+0x28>
  {
    status = XMC_FCE_STATUS_ERROR;
 80278da:	2302      	movs	r3, #2
 80278dc:	75fb      	strb	r3, [r7, #23]
 80278de:	e013      	b.n	8027908 <XMC_FCE_CalculateCRC32+0x50>
  }
  else
  {
    while (0UL != length)
 80278e0:	e00a      	b.n	80278f8 <XMC_FCE_CalculateCRC32+0x40>
    {
      engine->kernel_ptr->IR = *data;
 80278e2:	68fb      	ldr	r3, [r7, #12]
 80278e4:	681b      	ldr	r3, [r3, #0]
 80278e6:	68ba      	ldr	r2, [r7, #8]
 80278e8:	6812      	ldr	r2, [r2, #0]
 80278ea:	601a      	str	r2, [r3, #0]
      data++;
 80278ec:	68bb      	ldr	r3, [r7, #8]
 80278ee:	3304      	adds	r3, #4
 80278f0:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	3b04      	subs	r3, #4
 80278f6:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 80278f8:	687b      	ldr	r3, [r7, #4]
 80278fa:	2b00      	cmp	r3, #0
 80278fc:	d1f1      	bne.n	80278e2 <XMC_FCE_CalculateCRC32+0x2a>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 80278fe:	68fb      	ldr	r3, [r7, #12]
 8027900:	681b      	ldr	r3, [r3, #0]
 8027902:	699a      	ldr	r2, [r3, #24]
 8027904:	683b      	ldr	r3, [r7, #0]
 8027906:	601a      	str	r2, [r3, #0]
  }
  
  return status;
 8027908:	7dfb      	ldrb	r3, [r7, #23]
}
 802790a:	4618      	mov	r0, r3
 802790c:	371c      	adds	r7, #28
 802790e:	46bd      	mov	sp, r7
 8027910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027914:	4770      	bx	lr
 8027916:	bf00      	nop

08027918 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8027918:	b480      	push	{r7}
 802791a:	b083      	sub	sp, #12
 802791c:	af00      	add	r7, sp, #0
 802791e:	6078      	str	r0, [r7, #4]
 8027920:	460b      	mov	r3, r1
 8027922:	70fb      	strb	r3, [r7, #3]
 8027924:	4613      	mov	r3, r2
 8027926:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8027928:	687b      	ldr	r3, [r7, #4]
 802792a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 802792c:	78fb      	ldrb	r3, [r7, #3]
 802792e:	005b      	lsls	r3, r3, #1
 8027930:	4619      	mov	r1, r3
 8027932:	2303      	movs	r3, #3
 8027934:	408b      	lsls	r3, r1
 8027936:	43db      	mvns	r3, r3
 8027938:	401a      	ands	r2, r3
 802793a:	687b      	ldr	r3, [r7, #4]
 802793c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 802793e:	687b      	ldr	r3, [r7, #4]
 8027940:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8027942:	78bb      	ldrb	r3, [r7, #2]
 8027944:	78f9      	ldrb	r1, [r7, #3]
 8027946:	0049      	lsls	r1, r1, #1
 8027948:	408b      	lsls	r3, r1
 802794a:	431a      	orrs	r2, r3
 802794c:	687b      	ldr	r3, [r7, #4]
 802794e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8027950:	370c      	adds	r7, #12
 8027952:	46bd      	mov	sp, r7
 8027954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027958:	4770      	bx	lr
 802795a:	bf00      	nop

0802795c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 802795c:	b580      	push	{r7, lr}
 802795e:	b084      	sub	sp, #16
 8027960:	af00      	add	r7, sp, #0
 8027962:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8027964:	4b14      	ldr	r3, [pc, #80]	; (80279b8 <_sbrk+0x5c>)
 8027966:	681b      	ldr	r3, [r3, #0]
 8027968:	2b00      	cmp	r3, #0
 802796a:	d102      	bne.n	8027972 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 802796c:	4b12      	ldr	r3, [pc, #72]	; (80279b8 <_sbrk+0x5c>)
 802796e:	4a13      	ldr	r2, [pc, #76]	; (80279bc <_sbrk+0x60>)
 8027970:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8027972:	4b11      	ldr	r3, [pc, #68]	; (80279b8 <_sbrk+0x5c>)
 8027974:	681b      	ldr	r3, [r3, #0]
 8027976:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8027978:	687b      	ldr	r3, [r7, #4]
 802797a:	3303      	adds	r3, #3
 802797c:	f023 0303 	bic.w	r3, r3, #3
 8027980:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8027982:	4b0d      	ldr	r3, [pc, #52]	; (80279b8 <_sbrk+0x5c>)
 8027984:	681a      	ldr	r2, [r3, #0]
 8027986:	687b      	ldr	r3, [r7, #4]
 8027988:	4413      	add	r3, r2
 802798a:	4a0d      	ldr	r2, [pc, #52]	; (80279c0 <_sbrk+0x64>)
 802798c:	4293      	cmp	r3, r2
 802798e:	d207      	bcs.n	80279a0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8027990:	4b09      	ldr	r3, [pc, #36]	; (80279b8 <_sbrk+0x5c>)
 8027992:	681a      	ldr	r2, [r3, #0]
 8027994:	687b      	ldr	r3, [r7, #4]
 8027996:	4413      	add	r3, r2
 8027998:	4a07      	ldr	r2, [pc, #28]	; (80279b8 <_sbrk+0x5c>)
 802799a:	6013      	str	r3, [r2, #0]
    return (base);
 802799c:	68fb      	ldr	r3, [r7, #12]
 802799e:	e006      	b.n	80279ae <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80279a0:	f002 fa08 	bl	8029db4 <__errno>
 80279a4:	4602      	mov	r2, r0
 80279a6:	230c      	movs	r3, #12
 80279a8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80279aa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80279ae:	4618      	mov	r0, r3
 80279b0:	3710      	adds	r7, #16
 80279b2:	46bd      	mov	sp, r7
 80279b4:	bd80      	pop	{r7, pc}
 80279b6:	bf00      	nop
 80279b8:	1fff1624 	.word	0x1fff1624
 80279bc:	20000000 	.word	0x20000000
 80279c0:	2000ffc0 	.word	0x2000ffc0

080279c4 <_init>:

/* Init */
void _init(void)
{}
 80279c4:	b480      	push	{r7}
 80279c6:	af00      	add	r7, sp, #0
 80279c8:	46bd      	mov	sp, r7
 80279ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ce:	4770      	bx	lr

080279d0 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80279d0:	b480      	push	{r7}
 80279d2:	b083      	sub	sp, #12
 80279d4:	af00      	add	r7, sp, #0
 80279d6:	6078      	str	r0, [r7, #4]
 80279d8:	460b      	mov	r3, r1
 80279da:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80279dc:	78fb      	ldrb	r3, [r7, #3]
 80279de:	2201      	movs	r2, #1
 80279e0:	409a      	lsls	r2, r3
 80279e2:	687b      	ldr	r3, [r7, #4]
 80279e4:	60da      	str	r2, [r3, #12]
}
 80279e6:	370c      	adds	r7, #12
 80279e8:	46bd      	mov	sp, r7
 80279ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ee:	4770      	bx	lr

080279f0 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80279f0:	b480      	push	{r7}
 80279f2:	b083      	sub	sp, #12
 80279f4:	af00      	add	r7, sp, #0
 80279f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80279f8:	687b      	ldr	r3, [r7, #4]
 80279fa:	2201      	movs	r2, #1
 80279fc:	60da      	str	r2, [r3, #12]
}
 80279fe:	370c      	adds	r7, #12
 8027a00:	46bd      	mov	sp, r7
 8027a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a06:	4770      	bx	lr

08027a08 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8027a08:	b480      	push	{r7}
 8027a0a:	b083      	sub	sp, #12
 8027a0c:	af00      	add	r7, sp, #0
 8027a0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8027a10:	687b      	ldr	r3, [r7, #4]
 8027a12:	2202      	movs	r2, #2
 8027a14:	611a      	str	r2, [r3, #16]
}
 8027a16:	370c      	adds	r7, #12
 8027a18:	46bd      	mov	sp, r7
 8027a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a1e:	4770      	bx	lr

08027a20 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8027a20:	b480      	push	{r7}
 8027a22:	b083      	sub	sp, #12
 8027a24:	af00      	add	r7, sp, #0
 8027a26:	6078      	str	r0, [r7, #4]
 8027a28:	460b      	mov	r3, r1
 8027a2a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8027a2c:	887a      	ldrh	r2, [r7, #2]
 8027a2e:	687b      	ldr	r3, [r7, #4]
 8027a30:	635a      	str	r2, [r3, #52]	; 0x34
}
 8027a32:	370c      	adds	r7, #12
 8027a34:	46bd      	mov	sp, r7
 8027a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a3a:	4770      	bx	lr

08027a3c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8027a3c:	b480      	push	{r7}
 8027a3e:	b083      	sub	sp, #12
 8027a40:	af00      	add	r7, sp, #0
 8027a42:	6078      	str	r0, [r7, #4]
 8027a44:	460b      	mov	r3, r1
 8027a46:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8027a48:	887a      	ldrh	r2, [r7, #2]
 8027a4a:	687b      	ldr	r3, [r7, #4]
 8027a4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8027a4e:	370c      	adds	r7, #12
 8027a50:	46bd      	mov	sp, r7
 8027a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a56:	4770      	bx	lr

08027a58 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8027a58:	b480      	push	{r7}
 8027a5a:	b083      	sub	sp, #12
 8027a5c:	af00      	add	r7, sp, #0
 8027a5e:	6078      	str	r0, [r7, #4]
 8027a60:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8027a62:	687b      	ldr	r3, [r7, #4]
 8027a64:	683a      	ldr	r2, [r7, #0]
 8027a66:	611a      	str	r2, [r3, #16]
}
 8027a68:	370c      	adds	r7, #12
 8027a6a:	46bd      	mov	sp, r7
 8027a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a70:	4770      	bx	lr
 8027a72:	bf00      	nop

08027a74 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8027a74:	b480      	push	{r7}
 8027a76:	b083      	sub	sp, #12
 8027a78:	af00      	add	r7, sp, #0
 8027a7a:	6078      	str	r0, [r7, #4]
 8027a7c:	460b      	mov	r3, r1
 8027a7e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8027a80:	687b      	ldr	r3, [r7, #4]
 8027a82:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8027a86:	78fb      	ldrb	r3, [r7, #3]
 8027a88:	2101      	movs	r1, #1
 8027a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8027a8e:	431a      	orrs	r2, r3
 8027a90:	687b      	ldr	r3, [r7, #4]
 8027a92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8027a96:	370c      	adds	r7, #12
 8027a98:	46bd      	mov	sp, r7
 8027a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a9e:	4770      	bx	lr

08027aa0 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8027aa0:	b580      	push	{r7, lr}
 8027aa2:	b084      	sub	sp, #16
 8027aa4:	af00      	add	r7, sp, #0
 8027aa6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8027aa8:	2300      	movs	r3, #0
 8027aaa:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8027aac:	687b      	ldr	r3, [r7, #4]
 8027aae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8027ab2:	f083 0301 	eor.w	r3, r3, #1
 8027ab6:	b2db      	uxtb	r3, r3
 8027ab8:	2b00      	cmp	r3, #0
 8027aba:	d009      	beq.n	8027ad0 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8027abc:	687b      	ldr	r3, [r7, #4]
 8027abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8027ac2:	2b00      	cmp	r3, #0
 8027ac4:	d104      	bne.n	8027ad0 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8027ac6:	6878      	ldr	r0, [r7, #4]
 8027ac8:	f000 f826 	bl	8027b18 <TIMER_CCU4_lInit>
 8027acc:	4603      	mov	r3, r0
 8027ace:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8027ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8027ad2:	4618      	mov	r0, r3
 8027ad4:	3710      	adds	r7, #16
 8027ad6:	46bd      	mov	sp, r7
 8027ad8:	bd80      	pop	{r7, pc}
 8027ada:	bf00      	nop

08027adc <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8027adc:	b580      	push	{r7, lr}
 8027ade:	b084      	sub	sp, #16
 8027ae0:	af00      	add	r7, sp, #0
 8027ae2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8027ae4:	687b      	ldr	r3, [r7, #4]
 8027ae6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8027aea:	2b00      	cmp	r3, #0
 8027aec:	d00c      	beq.n	8027b08 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8027aee:	687b      	ldr	r3, [r7, #4]
 8027af0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8027af4:	2b00      	cmp	r3, #0
 8027af6:	d104      	bne.n	8027b02 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8027af8:	687b      	ldr	r3, [r7, #4]
 8027afa:	695b      	ldr	r3, [r3, #20]
 8027afc:	4618      	mov	r0, r3
 8027afe:	f7ff ff77 	bl	80279f0 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8027b02:	2300      	movs	r3, #0
 8027b04:	73fb      	strb	r3, [r7, #15]
 8027b06:	e001      	b.n	8027b0c <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8027b08:	2301      	movs	r3, #1
 8027b0a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8027b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8027b0e:	4618      	mov	r0, r3
 8027b10:	3710      	adds	r7, #16
 8027b12:	46bd      	mov	sp, r7
 8027b14:	bd80      	pop	{r7, pc}
 8027b16:	bf00      	nop

08027b18 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8027b18:	b580      	push	{r7, lr}
 8027b1a:	b084      	sub	sp, #16
 8027b1c:	af00      	add	r7, sp, #0
 8027b1e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8027b20:	687b      	ldr	r3, [r7, #4]
 8027b22:	691b      	ldr	r3, [r3, #16]
 8027b24:	4618      	mov	r0, r3
 8027b26:	f000 fca5 	bl	8028474 <GLOBAL_CCU4_Init>
 8027b2a:	4603      	mov	r3, r0
 8027b2c:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8027b2e:	687b      	ldr	r3, [r7, #4]
 8027b30:	691b      	ldr	r3, [r3, #16]
 8027b32:	689a      	ldr	r2, [r3, #8]
 8027b34:	687b      	ldr	r3, [r7, #4]
 8027b36:	7e1b      	ldrb	r3, [r3, #24]
 8027b38:	4610      	mov	r0, r2
 8027b3a:	4619      	mov	r1, r3
 8027b3c:	f7ff ff48 	bl	80279d0 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8027b40:	687b      	ldr	r3, [r7, #4]
 8027b42:	695a      	ldr	r2, [r3, #20]
 8027b44:	687b      	ldr	r3, [r7, #4]
 8027b46:	69db      	ldr	r3, [r3, #28]
 8027b48:	4610      	mov	r0, r2
 8027b4a:	4619      	mov	r1, r3
 8027b4c:	f7ff fac8 	bl	80270e0 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8027b50:	6878      	ldr	r0, [r7, #4]
 8027b52:	f000 f82d 	bl	8027bb0 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8027b56:	687b      	ldr	r3, [r7, #4]
 8027b58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8027b5c:	2b00      	cmp	r3, #0
 8027b5e:	d00f      	beq.n	8027b80 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8027b60:	687b      	ldr	r3, [r7, #4]
 8027b62:	695a      	ldr	r2, [r3, #20]
 8027b64:	687b      	ldr	r3, [r7, #4]
 8027b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8027b6a:	4610      	mov	r0, r2
 8027b6c:	2100      	movs	r1, #0
 8027b6e:	461a      	mov	r2, r3
 8027b70:	f7ff fd0c 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8027b74:	687b      	ldr	r3, [r7, #4]
 8027b76:	695b      	ldr	r3, [r3, #20]
 8027b78:	4618      	mov	r0, r3
 8027b7a:	2100      	movs	r1, #0
 8027b7c:	f7ff ff7a 	bl	8027a74 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8027b80:	687b      	ldr	r3, [r7, #4]
 8027b82:	695b      	ldr	r3, [r3, #20]
 8027b84:	4618      	mov	r0, r3
 8027b86:	f7ff ff3f 	bl	8027a08 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8027b8a:	687b      	ldr	r3, [r7, #4]
 8027b8c:	2201      	movs	r2, #1
 8027b8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8027b92:	687b      	ldr	r3, [r7, #4]
 8027b94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8027b98:	2b00      	cmp	r3, #0
 8027b9a:	d004      	beq.n	8027ba6 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8027b9c:	687b      	ldr	r3, [r7, #4]
 8027b9e:	695b      	ldr	r3, [r3, #20]
 8027ba0:	4618      	mov	r0, r3
 8027ba2:	f7ff ff25 	bl	80279f0 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8027ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8027ba8:	4618      	mov	r0, r3
 8027baa:	3710      	adds	r7, #16
 8027bac:	46bd      	mov	sp, r7
 8027bae:	bd80      	pop	{r7, pc}

08027bb0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8027bb0:	b580      	push	{r7, lr}
 8027bb2:	b082      	sub	sp, #8
 8027bb4:	af00      	add	r7, sp, #0
 8027bb6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8027bb8:	687b      	ldr	r3, [r7, #4]
 8027bba:	695a      	ldr	r2, [r3, #20]
 8027bbc:	687b      	ldr	r3, [r7, #4]
 8027bbe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8027bc0:	4610      	mov	r0, r2
 8027bc2:	4619      	mov	r1, r3
 8027bc4:	f7ff ff2c 	bl	8027a20 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8027bc8:	687b      	ldr	r3, [r7, #4]
 8027bca:	695b      	ldr	r3, [r3, #20]
 8027bcc:	4618      	mov	r0, r3
 8027bce:	2100      	movs	r1, #0
 8027bd0:	f7ff ff34 	bl	8027a3c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8027bd4:	687b      	ldr	r3, [r7, #4]
 8027bd6:	691b      	ldr	r3, [r3, #16]
 8027bd8:	689a      	ldr	r2, [r3, #8]
 8027bda:	687b      	ldr	r3, [r7, #4]
 8027bdc:	68db      	ldr	r3, [r3, #12]
 8027bde:	4610      	mov	r0, r2
 8027be0:	4619      	mov	r1, r3
 8027be2:	f7ff ff39 	bl	8027a58 <XMC_CCU4_EnableShadowTransfer>
}
 8027be6:	3708      	adds	r7, #8
 8027be8:	46bd      	mov	sp, r7
 8027bea:	bd80      	pop	{r7, pc}

08027bec <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8027bec:	b480      	push	{r7}
 8027bee:	b083      	sub	sp, #12
 8027bf0:	af00      	add	r7, sp, #0
 8027bf2:	6078      	str	r0, [r7, #4]
 8027bf4:	460b      	mov	r3, r1
 8027bf6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8027bf8:	78fb      	ldrb	r3, [r7, #3]
 8027bfa:	2201      	movs	r2, #1
 8027bfc:	409a      	lsls	r2, r3
 8027bfe:	687b      	ldr	r3, [r7, #4]
 8027c00:	60da      	str	r2, [r3, #12]
}
 8027c02:	370c      	adds	r7, #12
 8027c04:	46bd      	mov	sp, r7
 8027c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c0a:	4770      	bx	lr

08027c0c <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
 8027c0c:	b480      	push	{r7}
 8027c0e:	b083      	sub	sp, #12
 8027c10:	af00      	add	r7, sp, #0
 8027c12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
 8027c14:	687b      	ldr	r3, [r7, #4]
 8027c16:	695b      	ldr	r3, [r3, #20]
 8027c18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8027c1c:	687b      	ldr	r3, [r7, #4]
 8027c1e:	615a      	str	r2, [r3, #20]
}
 8027c20:	370c      	adds	r7, #12
 8027c22:	46bd      	mov	sp, r7
 8027c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c28:	4770      	bx	lr
 8027c2a:	bf00      	nop

08027c2c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8027c2c:	b480      	push	{r7}
 8027c2e:	b083      	sub	sp, #12
 8027c30:	af00      	add	r7, sp, #0
 8027c32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8027c34:	687b      	ldr	r3, [r7, #4]
 8027c36:	2201      	movs	r2, #1
 8027c38:	60da      	str	r2, [r3, #12]
}
 8027c3a:	370c      	adds	r7, #12
 8027c3c:	46bd      	mov	sp, r7
 8027c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c42:	4770      	bx	lr

08027c44 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8027c44:	b480      	push	{r7}
 8027c46:	b083      	sub	sp, #12
 8027c48:	af00      	add	r7, sp, #0
 8027c4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8027c4c:	687b      	ldr	r3, [r7, #4]
 8027c4e:	2201      	movs	r2, #1
 8027c50:	611a      	str	r2, [r3, #16]
}
 8027c52:	370c      	adds	r7, #12
 8027c54:	46bd      	mov	sp, r7
 8027c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c5a:	4770      	bx	lr

08027c5c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8027c5c:	b480      	push	{r7}
 8027c5e:	b083      	sub	sp, #12
 8027c60:	af00      	add	r7, sp, #0
 8027c62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8027c64:	687b      	ldr	r3, [r7, #4]
 8027c66:	2202      	movs	r2, #2
 8027c68:	611a      	str	r2, [r3, #16]
}
 8027c6a:	370c      	adds	r7, #12
 8027c6c:	46bd      	mov	sp, r7
 8027c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c72:	4770      	bx	lr

08027c74 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8027c74:	b480      	push	{r7}
 8027c76:	b083      	sub	sp, #12
 8027c78:	af00      	add	r7, sp, #0
 8027c7a:	6078      	str	r0, [r7, #4]
 8027c7c:	460b      	mov	r3, r1
 8027c7e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8027c80:	887a      	ldrh	r2, [r7, #2]
 8027c82:	687b      	ldr	r3, [r7, #4]
 8027c84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8027c86:	370c      	adds	r7, #12
 8027c88:	46bd      	mov	sp, r7
 8027c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c8e:	4770      	bx	lr

08027c90 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8027c90:	b480      	push	{r7}
 8027c92:	b083      	sub	sp, #12
 8027c94:	af00      	add	r7, sp, #0
 8027c96:	6078      	str	r0, [r7, #4]
 8027c98:	460b      	mov	r3, r1
 8027c9a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8027c9c:	887a      	ldrh	r2, [r7, #2]
 8027c9e:	687b      	ldr	r3, [r7, #4]
 8027ca0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8027ca2:	370c      	adds	r7, #12
 8027ca4:	46bd      	mov	sp, r7
 8027ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027caa:	4770      	bx	lr

08027cac <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8027cac:	b480      	push	{r7}
 8027cae:	b083      	sub	sp, #12
 8027cb0:	af00      	add	r7, sp, #0
 8027cb2:	6078      	str	r0, [r7, #4]
 8027cb4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8027cb6:	687b      	ldr	r3, [r7, #4]
 8027cb8:	683a      	ldr	r2, [r7, #0]
 8027cba:	611a      	str	r2, [r3, #16]
}
 8027cbc:	370c      	adds	r7, #12
 8027cbe:	46bd      	mov	sp, r7
 8027cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cc4:	4770      	bx	lr
 8027cc6:	bf00      	nop

08027cc8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8027cc8:	b480      	push	{r7}
 8027cca:	b083      	sub	sp, #12
 8027ccc:	af00      	add	r7, sp, #0
 8027cce:	6078      	str	r0, [r7, #4]
 8027cd0:	460b      	mov	r3, r1
 8027cd2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8027cd4:	687b      	ldr	r3, [r7, #4]
 8027cd6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8027cda:	78fb      	ldrb	r3, [r7, #3]
 8027cdc:	2101      	movs	r1, #1
 8027cde:	fa01 f303 	lsl.w	r3, r1, r3
 8027ce2:	431a      	orrs	r2, r3
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8027cea:	370c      	adds	r7, #12
 8027cec:	46bd      	mov	sp, r7
 8027cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cf2:	4770      	bx	lr

08027cf4 <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
 8027cf4:	b580      	push	{r7, lr}
 8027cf6:	b086      	sub	sp, #24
 8027cf8:	af00      	add	r7, sp, #0
 8027cfa:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
 8027cfc:	2301      	movs	r3, #1
 8027cfe:	75fb      	strb	r3, [r7, #23]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
 8027d00:	2301      	movs	r3, #1
 8027d02:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	7f1b      	ldrb	r3, [r3, #28]
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	f040 808c 	bne.w	8027e26 <PWM_CCU4_Init+0x132>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
 8027d0e:	687b      	ldr	r3, [r7, #4]
 8027d10:	681b      	ldr	r3, [r3, #0]
 8027d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027d14:	4618      	mov	r0, r3
 8027d16:	f000 fbad 	bl	8028474 <GLOBAL_CCU4_Init>
 8027d1a:	4603      	mov	r3, r0
 8027d1c:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
 8027d1e:	7dbb      	ldrb	r3, [r7, #22]
 8027d20:	2b00      	cmp	r3, #0
 8027d22:	d17c      	bne.n	8027e1e <PWM_CCU4_Init+0x12a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
 8027d24:	687b      	ldr	r3, [r7, #4]
 8027d26:	689a      	ldr	r2, [r3, #8]
 8027d28:	687b      	ldr	r3, [r7, #4]
 8027d2a:	681b      	ldr	r3, [r3, #0]
 8027d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d2e:	4610      	mov	r0, r2
 8027d30:	4619      	mov	r1, r3
 8027d32:	f7ff f9d5 	bl	80270e0 <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
 8027d36:	687b      	ldr	r3, [r7, #4]
 8027d38:	689a      	ldr	r2, [r3, #8]
 8027d3a:	687b      	ldr	r3, [r7, #4]
 8027d3c:	681b      	ldr	r3, [r3, #0]
 8027d3e:	885b      	ldrh	r3, [r3, #2]
 8027d40:	4610      	mov	r0, r2
 8027d42:	4619      	mov	r1, r3
 8027d44:	f7ff ff96 	bl	8027c74 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
 8027d48:	687b      	ldr	r3, [r7, #4]
 8027d4a:	689a      	ldr	r2, [r3, #8]
 8027d4c:	687b      	ldr	r3, [r7, #4]
 8027d4e:	681b      	ldr	r3, [r3, #0]
 8027d50:	889b      	ldrh	r3, [r3, #4]
 8027d52:	4610      	mov	r0, r2
 8027d54:	4619      	mov	r1, r3
 8027d56:	f7ff ff9b 	bl	8027c90 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
 8027d5a:	687b      	ldr	r3, [r7, #4]
 8027d5c:	681b      	ldr	r3, [r3, #0]
 8027d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d60:	78db      	ldrb	r3, [r3, #3]
 8027d62:	f003 0302 	and.w	r3, r3, #2
 8027d66:	b2db      	uxtb	r3, r3
 8027d68:	2b00      	cmp	r3, #0
 8027d6a:	d008      	beq.n	8027d7e <PWM_CCU4_Init+0x8a>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 8027d6c:	687b      	ldr	r3, [r7, #4]
 8027d6e:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 8027d70:	687b      	ldr	r3, [r7, #4]
 8027d72:	681b      	ldr	r3, [r3, #0]
 8027d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 8027d76:	4610      	mov	r0, r2
 8027d78:	4619      	mov	r1, r3
 8027d7a:	f7ff f995 	bl	80270a8 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 8027d7e:	687b      	ldr	r3, [r7, #4]
 8027d80:	685a      	ldr	r2, [r3, #4]
 8027d82:	687b      	ldr	r3, [r7, #4]
 8027d84:	691b      	ldr	r3, [r3, #16]
 8027d86:	4610      	mov	r0, r2
 8027d88:	4619      	mov	r1, r3
 8027d8a:	f7ff ff8f 	bl	8027cac <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 8027d8e:	687b      	ldr	r3, [r7, #4]
 8027d90:	685a      	ldr	r2, [r3, #4]
 8027d92:	687b      	ldr	r3, [r7, #4]
 8027d94:	695b      	ldr	r3, [r3, #20]
 8027d96:	4610      	mov	r0, r2
 8027d98:	4619      	mov	r1, r3
 8027d9a:	f7ff ff87 	bl	8027cac <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
 8027d9e:	6878      	ldr	r0, [r7, #4]
 8027da0:	f000 f8e2 	bl	8027f68 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
 8027da4:	6878      	ldr	r0, [r7, #4]
 8027da6:	f000 f845 	bl	8027e34 <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	681b      	ldr	r3, [r3, #0]
 8027dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8027db2:	2b00      	cmp	r3, #0
 8027db4:	d00e      	beq.n	8027dd4 <PWM_CCU4_Init+0xe0>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 8027db6:	687b      	ldr	r3, [r7, #4]
 8027db8:	681b      	ldr	r3, [r3, #0]
 8027dba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8027dbc:	687b      	ldr	r3, [r7, #4]
 8027dbe:	681b      	ldr	r3, [r3, #0]
 8027dc0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 8027dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027dca:	4608      	mov	r0, r1
 8027dcc:	4611      	mov	r1, r2
 8027dce:	461a      	mov	r2, r3
 8027dd0:	f7fe fbf2 	bl	80265b8 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	681b      	ldr	r3, [r3, #0]
 8027dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027dda:	681b      	ldr	r3, [r3, #0]
 8027ddc:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
 8027dde:	687b      	ldr	r3, [r7, #4]
 8027de0:	681b      	ldr	r3, [r3, #0]
 8027de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027de4:	791b      	ldrb	r3, [r3, #4]
 8027de6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8027dea:	b2db      	uxtb	r3, r3
 8027dec:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 8027dee:	68fb      	ldr	r3, [r7, #12]
 8027df0:	693a      	ldr	r2, [r7, #16]
 8027df2:	fa22 f303 	lsr.w	r3, r2, r3
 8027df6:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 8027df8:	687b      	ldr	r3, [r7, #4]
 8027dfa:	693a      	ldr	r2, [r7, #16]
 8027dfc:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
 8027dfe:	687b      	ldr	r3, [r7, #4]
 8027e00:	2201      	movs	r2, #1
 8027e02:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
 8027e04:	2300      	movs	r3, #0
 8027e06:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8027e08:	687b      	ldr	r3, [r7, #4]
 8027e0a:	681b      	ldr	r3, [r3, #0]
 8027e0c:	781b      	ldrb	r3, [r3, #0]
 8027e0e:	2b00      	cmp	r3, #0
 8027e10:	d00b      	beq.n	8027e2a <PWM_CCU4_Init+0x136>
      {
        status = PWM_CCU4_Start(handle_ptr);
 8027e12:	6878      	ldr	r0, [r7, #4]
 8027e14:	f000 f98c 	bl	8028130 <PWM_CCU4_Start>
 8027e18:	4603      	mov	r3, r0
 8027e1a:	75fb      	strb	r3, [r7, #23]
 8027e1c:	e005      	b.n	8027e2a <PWM_CCU4_Init+0x136>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
 8027e1e:	687b      	ldr	r3, [r7, #4]
 8027e20:	2200      	movs	r2, #0
 8027e22:	771a      	strb	r2, [r3, #28]
 8027e24:	e001      	b.n	8027e2a <PWM_CCU4_Init+0x136>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
 8027e26:	2302      	movs	r3, #2
 8027e28:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8027e2a:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU4_Init() api */
 8027e2c:	4618      	mov	r0, r3
 8027e2e:	3718      	adds	r7, #24
 8027e30:	46bd      	mov	sp, r7
 8027e32:	bd80      	pop	{r7, pc}

08027e34 <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
 8027e34:	b580      	push	{r7, lr}
 8027e36:	b082      	sub	sp, #8
 8027e38:	af00      	add	r7, sp, #0
 8027e3a:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 8027e3c:	687b      	ldr	r3, [r7, #4]
 8027e3e:	681b      	ldr	r3, [r3, #0]
 8027e40:	799b      	ldrb	r3, [r3, #6]
 8027e42:	2b00      	cmp	r3, #0
 8027e44:	d00f      	beq.n	8027e66 <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8027e46:	687b      	ldr	r3, [r7, #4]
 8027e48:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
 8027e4a:	687b      	ldr	r3, [r7, #4]
 8027e4c:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8027e4e:	7b5b      	ldrb	r3, [r3, #13]
 8027e50:	4610      	mov	r0, r2
 8027e52:	2100      	movs	r1, #0
 8027e54:	461a      	mov	r2, r3
 8027e56:	f7ff fb99 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8027e5a:	687b      	ldr	r3, [r7, #4]
 8027e5c:	689b      	ldr	r3, [r3, #8]
 8027e5e:	4618      	mov	r0, r3
 8027e60:	2100      	movs	r1, #0
 8027e62:	f7ff ff31 	bl	8027cc8 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
 8027e66:	687b      	ldr	r3, [r7, #4]
 8027e68:	681b      	ldr	r3, [r3, #0]
 8027e6a:	79db      	ldrb	r3, [r3, #7]
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	d00f      	beq.n	8027e90 <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8027e70:	687b      	ldr	r3, [r7, #4]
 8027e72:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
 8027e74:	687b      	ldr	r3, [r7, #4]
 8027e76:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8027e78:	7b9b      	ldrb	r3, [r3, #14]
 8027e7a:	4610      	mov	r0, r2
 8027e7c:	2102      	movs	r1, #2
 8027e7e:	461a      	mov	r2, r3
 8027e80:	f7ff fb84 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	689b      	ldr	r3, [r3, #8]
 8027e88:	4618      	mov	r0, r3
 8027e8a:	2102      	movs	r1, #2
 8027e8c:	f7ff ff1c 	bl	8027cc8 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
 8027e90:	687b      	ldr	r3, [r7, #4]
 8027e92:	681b      	ldr	r3, [r3, #0]
 8027e94:	7a1b      	ldrb	r3, [r3, #8]
 8027e96:	2b00      	cmp	r3, #0
 8027e98:	d00f      	beq.n	8027eba <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 8027e9a:	687b      	ldr	r3, [r7, #4]
 8027e9c:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
 8027e9e:	687b      	ldr	r3, [r7, #4]
 8027ea0:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 8027ea2:	7bdb      	ldrb	r3, [r3, #15]
 8027ea4:	4610      	mov	r0, r2
 8027ea6:	2103      	movs	r1, #3
 8027ea8:	461a      	mov	r2, r3
 8027eaa:	f7ff fb6f 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
 8027eae:	687b      	ldr	r3, [r7, #4]
 8027eb0:	689b      	ldr	r3, [r3, #8]
 8027eb2:	4618      	mov	r0, r3
 8027eb4:	2103      	movs	r1, #3
 8027eb6:	f7ff ff07 	bl	8027cc8 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 8027eba:	687b      	ldr	r3, [r7, #4]
 8027ebc:	681b      	ldr	r3, [r3, #0]
 8027ebe:	7a5b      	ldrb	r3, [r3, #9]
 8027ec0:	2b00      	cmp	r3, #0
 8027ec2:	d00f      	beq.n	8027ee4 <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 8027ec4:	687b      	ldr	r3, [r7, #4]
 8027ec6:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
 8027ec8:	687b      	ldr	r3, [r7, #4]
 8027eca:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 8027ecc:	7c1b      	ldrb	r3, [r3, #16]
 8027ece:	4610      	mov	r0, r2
 8027ed0:	2101      	movs	r1, #1
 8027ed2:	461a      	mov	r2, r3
 8027ed4:	f7ff fb5a 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
 8027ed8:	687b      	ldr	r3, [r7, #4]
 8027eda:	689b      	ldr	r3, [r3, #8]
 8027edc:	4618      	mov	r0, r3
 8027ede:	2101      	movs	r1, #1
 8027ee0:	f7ff fef2 	bl	8027cc8 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 8027ee4:	687b      	ldr	r3, [r7, #4]
 8027ee6:	681b      	ldr	r3, [r3, #0]
 8027ee8:	7a9b      	ldrb	r3, [r3, #10]
 8027eea:	2b00      	cmp	r3, #0
 8027eec:	d00f      	beq.n	8027f0e <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 8027eee:	687b      	ldr	r3, [r7, #4]
 8027ef0:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
 8027ef2:	687b      	ldr	r3, [r7, #4]
 8027ef4:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 8027ef6:	7c5b      	ldrb	r3, [r3, #17]
 8027ef8:	4610      	mov	r0, r2
 8027efa:	2108      	movs	r1, #8
 8027efc:	461a      	mov	r2, r3
 8027efe:	f7ff fb45 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
 8027f02:	687b      	ldr	r3, [r7, #4]
 8027f04:	689b      	ldr	r3, [r3, #8]
 8027f06:	4618      	mov	r0, r3
 8027f08:	2108      	movs	r1, #8
 8027f0a:	f7ff fedd 	bl	8027cc8 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8027f0e:	687b      	ldr	r3, [r7, #4]
 8027f10:	681b      	ldr	r3, [r3, #0]
 8027f12:	7adb      	ldrb	r3, [r3, #11]
 8027f14:	2b00      	cmp	r3, #0
 8027f16:	d00f      	beq.n	8027f38 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8027f18:	687b      	ldr	r3, [r7, #4]
 8027f1a:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
 8027f1c:	687b      	ldr	r3, [r7, #4]
 8027f1e:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8027f20:	7c9b      	ldrb	r3, [r3, #18]
 8027f22:	4610      	mov	r0, r2
 8027f24:	2109      	movs	r1, #9
 8027f26:	461a      	mov	r2, r3
 8027f28:	f7ff fb30 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
 8027f2c:	687b      	ldr	r3, [r7, #4]
 8027f2e:	689b      	ldr	r3, [r3, #8]
 8027f30:	4618      	mov	r0, r3
 8027f32:	2109      	movs	r1, #9
 8027f34:	f7ff fec8 	bl	8027cc8 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 8027f38:	687b      	ldr	r3, [r7, #4]
 8027f3a:	681b      	ldr	r3, [r3, #0]
 8027f3c:	7b1b      	ldrb	r3, [r3, #12]
 8027f3e:	2b00      	cmp	r3, #0
 8027f40:	d00f      	beq.n	8027f62 <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
 8027f46:	687b      	ldr	r3, [r7, #4]
 8027f48:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 8027f4a:	7cdb      	ldrb	r3, [r3, #19]
 8027f4c:	4610      	mov	r0, r2
 8027f4e:	210a      	movs	r1, #10
 8027f50:	461a      	mov	r2, r3
 8027f52:	f7ff fb1b 	bl	802758c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 8027f56:	687b      	ldr	r3, [r7, #4]
 8027f58:	689b      	ldr	r3, [r3, #8]
 8027f5a:	4618      	mov	r0, r3
 8027f5c:	210a      	movs	r1, #10
 8027f5e:	f7ff feb3 	bl	8027cc8 <XMC_CCU4_SLICE_EnableEvent>
  }
}
 8027f62:	3708      	adds	r7, #8
 8027f64:	46bd      	mov	sp, r7
 8027f66:	bd80      	pop	{r7, pc}

08027f68 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
 8027f68:	b580      	push	{r7, lr}
 8027f6a:	b082      	sub	sp, #8
 8027f6c:	af00      	add	r7, sp, #0
 8027f6e:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 8027f70:	687b      	ldr	r3, [r7, #4]
 8027f72:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 8027f74:	687b      	ldr	r3, [r7, #4]
 8027f76:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 8027f78:	695b      	ldr	r3, [r3, #20]
 8027f7a:	4610      	mov	r0, r2
 8027f7c:	2101      	movs	r1, #1
 8027f7e:	461a      	mov	r2, r3
 8027f80:	f7ff fa9a 	bl	80274b8 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8027f88:	687b      	ldr	r3, [r7, #4]
 8027f8a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 8027f8c:	699b      	ldr	r3, [r3, #24]
 8027f8e:	4610      	mov	r0, r2
 8027f90:	2102      	movs	r1, #2
 8027f92:	461a      	mov	r2, r3
 8027f94:	f7ff fa90 	bl	80274b8 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8027f98:	687b      	ldr	r3, [r7, #4]
 8027f9a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8027f9c:	687b      	ldr	r3, [r7, #4]
 8027f9e:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8027fa0:	69db      	ldr	r3, [r3, #28]
 8027fa2:	4610      	mov	r0, r2
 8027fa4:	2103      	movs	r1, #3
 8027fa6:	461a      	mov	r2, r3
 8027fa8:	f7ff fa86 	bl	80274b8 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8027fac:	687b      	ldr	r3, [r7, #4]
 8027fae:	681b      	ldr	r3, [r3, #0]
 8027fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8027fb4:	2b00      	cmp	r3, #0
 8027fb6:	d00e      	beq.n	8027fd6 <PWM_CCU4_lConfigure_Events+0x6e>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8027fb8:	687b      	ldr	r3, [r7, #4]
 8027fba:	6899      	ldr	r1, [r3, #8]
 8027fbc:	687b      	ldr	r3, [r7, #4]
 8027fbe:	681b      	ldr	r3, [r3, #0]
 8027fc0:	f893 2020 	ldrb.w	r2, [r3, #32]
                               handle_ptr->config_ptr->ext_start_mode);
 8027fc4:	687b      	ldr	r3, [r7, #4]
 8027fc6:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8027fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8027fcc:	4608      	mov	r0, r1
 8027fce:	4611      	mov	r1, r2
 8027fd0:	461a      	mov	r2, r3
 8027fd2:	f7ff f8bb 	bl	802714c <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 8027fd6:	687b      	ldr	r3, [r7, #4]
 8027fd8:	681b      	ldr	r3, [r3, #0]
 8027fda:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8027fde:	2b00      	cmp	r3, #0
 8027fe0:	d00e      	beq.n	8028000 <PWM_CCU4_lConfigure_Events+0x98>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8027fe2:	687b      	ldr	r3, [r7, #4]
 8027fe4:	6899      	ldr	r1, [r3, #8]
 8027fe6:	687b      	ldr	r3, [r7, #4]
 8027fe8:	681b      	ldr	r3, [r3, #0]
 8027fea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                              handle_ptr->config_ptr->ext_stop_mode);
 8027fee:	687b      	ldr	r3, [r7, #4]
 8027ff0:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8027ff2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8027ff6:	4608      	mov	r0, r1
 8027ff8:	4611      	mov	r1, r2
 8027ffa:	461a      	mov	r2, r3
 8027ffc:	f7ff f8d4 	bl	80271a8 <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 8028000:	687b      	ldr	r3, [r7, #4]
 8028002:	681b      	ldr	r3, [r3, #0]
 8028004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8028008:	2b00      	cmp	r3, #0
 802800a:	d009      	beq.n	8028020 <PWM_CCU4_lConfigure_Events+0xb8>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 802800c:	687b      	ldr	r3, [r7, #4]
 802800e:	689a      	ldr	r2, [r3, #8]
 8028010:	687b      	ldr	r3, [r7, #4]
 8028012:	681b      	ldr	r3, [r3, #0]
 8028014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8028018:	4610      	mov	r0, r2
 802801a:	4619      	mov	r1, r3
 802801c:	f7ff f97e 	bl	802731c <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8028020:	687b      	ldr	r3, [r7, #4]
 8028022:	681b      	ldr	r3, [r3, #0]
 8028024:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8028028:	2b00      	cmp	r3, #0
 802802a:	d009      	beq.n	8028040 <PWM_CCU4_lConfigure_Events+0xd8>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 802802c:	687b      	ldr	r3, [r7, #4]
 802802e:	689a      	ldr	r2, [r3, #8]
 8028030:	687b      	ldr	r3, [r7, #4]
 8028032:	681b      	ldr	r3, [r3, #0]
 8028034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8028038:	4610      	mov	r0, r2
 802803a:	4619      	mov	r1, r3
 802803c:	f7ff f954 	bl	80272e8 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8028040:	687b      	ldr	r3, [r7, #4]
 8028042:	681b      	ldr	r3, [r3, #0]
 8028044:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8028048:	2b00      	cmp	r3, #0
 802804a:	d009      	beq.n	8028060 <PWM_CCU4_lConfigure_Events+0xf8>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	689a      	ldr	r2, [r3, #8]
 8028050:	687b      	ldr	r3, [r7, #4]
 8028052:	681b      	ldr	r3, [r3, #0]
 8028054:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8028058:	4610      	mov	r0, r2
 802805a:	4619      	mov	r1, r3
 802805c:	f7ff f92a 	bl	80272b4 <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8028060:	687b      	ldr	r3, [r7, #4]
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8028068:	2b00      	cmp	r3, #0
 802806a:	d009      	beq.n	8028080 <PWM_CCU4_lConfigure_Events+0x118>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 802806c:	687b      	ldr	r3, [r7, #4]
 802806e:	689a      	ldr	r2, [r3, #8]
 8028070:	687b      	ldr	r3, [r7, #4]
 8028072:	681b      	ldr	r3, [r3, #0]
 8028074:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8028078:	4610      	mov	r0, r2
 802807a:	4619      	mov	r1, r3
 802807c:	f7ff f8c0 	bl	8027200 <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8028080:	687b      	ldr	r3, [r7, #4]
 8028082:	681b      	ldr	r3, [r3, #0]
 8028084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8028088:	2b00      	cmp	r3, #0
 802808a:	d00f      	beq.n	80280ac <PWM_CCU4_lConfigure_Events+0x144>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 802808c:	687b      	ldr	r3, [r7, #4]
 802808e:	6898      	ldr	r0, [r3, #8]
 8028090:	687b      	ldr	r3, [r7, #4]
 8028092:	681b      	ldr	r3, [r3, #0]
 8028094:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8028098:	687b      	ldr	r3, [r7, #4]
 802809a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 802809c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 80280a0:	687b      	ldr	r3, [r7, #4]
 80280a2:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 80280a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80280a8:	f7ff f8c4 	bl	8027234 <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 80280ac:	687b      	ldr	r3, [r7, #4]
 80280ae:	681b      	ldr	r3, [r3, #0]
 80280b0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80280b4:	2b03      	cmp	r3, #3
 80280b6:	d119      	bne.n	80280ec <PWM_CCU4_lConfigure_Events+0x184>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80280b8:	687b      	ldr	r3, [r7, #4]
 80280ba:	6899      	ldr	r1, [r3, #8]
 80280bc:	687b      	ldr	r3, [r7, #4]
 80280be:	681b      	ldr	r3, [r3, #0]
 80280c0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
                              handle_ptr->config_ptr->ext_trap_sync);
 80280c4:	687b      	ldr	r3, [r7, #4]
 80280c6:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80280c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80280cc:	4608      	mov	r0, r1
 80280ce:	4611      	mov	r1, r2
 80280d0:	461a      	mov	r2, r3
 80280d2:	f7ff f955 	bl	8027380 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 80280d6:	687b      	ldr	r3, [r7, #4]
 80280d8:	681b      	ldr	r3, [r3, #0]
 80280da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80280de:	2b00      	cmp	r3, #0
 80280e0:	d004      	beq.n	80280ec <PWM_CCU4_lConfigure_Events+0x184>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
 80280e2:	687b      	ldr	r3, [r7, #4]
 80280e4:	689b      	ldr	r3, [r3, #8]
 80280e6:	4618      	mov	r0, r3
 80280e8:	f7ff fd90 	bl	8027c0c <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 80280ec:	687b      	ldr	r3, [r7, #4]
 80280ee:	681b      	ldr	r3, [r3, #0]
 80280f0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80280f4:	2b02      	cmp	r3, #2
 80280f6:	d117      	bne.n	8028128 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	681b      	ldr	r3, [r3, #0]
 80280fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 8028100:	2b03      	cmp	r3, #3
 8028102:	d111      	bne.n	8028128 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8028104:	687b      	ldr	r3, [r7, #4]
 8028106:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8028108:	687b      	ldr	r3, [r7, #4]
 802810a:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 802810c:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 802810e:	687b      	ldr	r3, [r7, #4]
 8028110:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8028112:	69db      	ldr	r3, [r3, #28]
 8028114:	4608      	mov	r0, r1
 8028116:	4611      	mov	r1, r2
 8028118:	461a      	mov	r2, r3
 802811a:	f7ff f96b 	bl	80273f4 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
 802811e:	687b      	ldr	r3, [r7, #4]
 8028120:	689b      	ldr	r3, [r3, #8]
 8028122:	4618      	mov	r0, r3
 8028124:	f7ff f914 	bl	8027350 <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
 8028128:	3708      	adds	r7, #8
 802812a:	46bd      	mov	sp, r7
 802812c:	bd80      	pop	{r7, pc}
 802812e:	bf00      	nop

08028130 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
 8028130:	b580      	push	{r7, lr}
 8028132:	b084      	sub	sp, #16
 8028134:	af00      	add	r7, sp, #0
 8028136:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
 8028138:	2301      	movs	r3, #1
 802813a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
 802813c:	687b      	ldr	r3, [r7, #4]
 802813e:	7f1b      	ldrb	r3, [r3, #28]
 8028140:	2b01      	cmp	r3, #1
 8028142:	d003      	beq.n	802814c <PWM_CCU4_Start+0x1c>
 8028144:	687b      	ldr	r3, [r7, #4]
 8028146:	7f1b      	ldrb	r3, [r3, #28]
 8028148:	2b03      	cmp	r3, #3
 802814a:	d117      	bne.n	802817c <PWM_CCU4_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
 802814c:	687b      	ldr	r3, [r7, #4]
 802814e:	685a      	ldr	r2, [r3, #4]
 8028150:	687b      	ldr	r3, [r7, #4]
 8028152:	7b5b      	ldrb	r3, [r3, #13]
 8028154:	4610      	mov	r0, r2
 8028156:	4619      	mov	r1, r3
 8028158:	f7ff fd48 	bl	8027bec <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028164:	2b00      	cmp	r3, #0
 8028166:	d104      	bne.n	8028172 <PWM_CCU4_Start+0x42>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8028168:	687b      	ldr	r3, [r7, #4]
 802816a:	689b      	ldr	r3, [r3, #8]
 802816c:	4618      	mov	r0, r3
 802816e:	f7ff fd5d 	bl	8027c2c <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
 8028172:	687b      	ldr	r3, [r7, #4]
 8028174:	2202      	movs	r2, #2
 8028176:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
 8028178:	2300      	movs	r3, #0
 802817a:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
 802817c:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU4_Start() api */
 802817e:	4618      	mov	r0, r3
 8028180:	3710      	adds	r7, #16
 8028182:	46bd      	mov	sp, r7
 8028184:	bd80      	pop	{r7, pc}
 8028186:	bf00      	nop

08028188 <PWM_CCU4_Stop>:
/**********************************************************************************************************/
/*Stops the CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_Stop(PWM_CCU4_t* handle_ptr)
{
 8028188:	b580      	push	{r7, lr}
 802818a:	b084      	sub	sp, #16
 802818c:	af00      	add	r7, sp, #0
 802818e:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
 8028190:	2301      	movs	r3, #1
 8028192:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU4_Stop:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 8028194:	687b      	ldr	r3, [r7, #4]
 8028196:	7f1b      	ldrb	r3, [r3, #28]
 8028198:	2b00      	cmp	r3, #0
 802819a:	d00e      	beq.n	80281ba <PWM_CCU4_Stop+0x32>
  {
    XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 802819c:	687b      	ldr	r3, [r7, #4]
 802819e:	689b      	ldr	r3, [r3, #8]
 80281a0:	4618      	mov	r0, r3
 80281a2:	f7ff fd4f 	bl	8027c44 <XMC_CCU4_SLICE_StopTimer>
    XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80281a6:	687b      	ldr	r3, [r7, #4]
 80281a8:	689b      	ldr	r3, [r3, #8]
 80281aa:	4618      	mov	r0, r3
 80281ac:	f7ff fd56 	bl	8027c5c <XMC_CCU4_SLICE_ClearTimer>

    handle_ptr->state = PWM_CCU4_STATE_STOPPED;
 80281b0:	687b      	ldr	r3, [r7, #4]
 80281b2:	2203      	movs	r2, #3
 80281b4:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
 80281b6:	2300      	movs	r3, #0
 80281b8:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU4_Stop:stop PWM");
  }
  return (status);
 80281ba:	7bfb      	ldrb	r3, [r7, #15]

} /* end of PWM_CCU4_Stop() api */
 80281bc:	4618      	mov	r0, r3
 80281be:	3710      	adds	r7, #16
 80281c0:	46bd      	mov	sp, r7
 80281c2:	bd80      	pop	{r7, pc}

080281c4 <PWM_CCU4_SetFreq>:

/**********************************************************************************************************/

/*Sets the frequency for CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_SetFreq(PWM_CCU4_t* handle_ptr, uint32_t pwm_freq_hz)
{
 80281c4:	b580      	push	{r7, lr}
 80281c6:	b088      	sub	sp, #32
 80281c8:	af00      	add	r7, sp, #0
 80281ca:	6078      	str	r0, [r7, #4]
 80281cc:	6039      	str	r1, [r7, #0]
  uint32_t frequency_tclk;
  uint32_t period;
  uint32_t duty;
  uint16_t compare;

  status = PWM_CCU4_STATUS_FAILURE;
 80281ce:	2301      	movs	r3, #1
 80281d0:	77fb      	strb	r3, [r7, #31]
  frequency_tclk = 0U;
 80281d2:	2300      	movs	r3, #0
 80281d4:	617b      	str	r3, [r7, #20]
  XMC_ASSERT("PWM_CCU4_SetFreq:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 80281d6:	687b      	ldr	r3, [r7, #4]
 80281d8:	7f1b      	ldrb	r3, [r3, #28]
 80281da:	2b00      	cmp	r3, #0
 80281dc:	d04d      	beq.n	802827a <PWM_CCU4_SetFreq+0xb6>
  {
    if (0U == pwm_freq_hz)
 80281de:	683b      	ldr	r3, [r7, #0]
 80281e0:	2b00      	cmp	r3, #0
 80281e2:	d04a      	beq.n	802827a <PWM_CCU4_SetFreq+0xb6>
    {
      XMC_DEBUG("PWM_CCU4_SetFreq:cannot set frequency 0Hz");
    }
    else
    {
      frequency_tclk = handle_ptr->frequency_tclk;
 80281e4:	687b      	ldr	r3, [r7, #4]
 80281e6:	6a1b      	ldr	r3, [r3, #32]
 80281e8:	617b      	str	r3, [r7, #20]
      period = frequency_tclk / pwm_freq_hz;
 80281ea:	697a      	ldr	r2, [r7, #20]
 80281ec:	683b      	ldr	r3, [r7, #0]
 80281ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80281f2:	61bb      	str	r3, [r7, #24]

      if ((uint32_t) XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->timer_mode)
 80281f4:	687b      	ldr	r3, [r7, #4]
 80281f6:	681b      	ldr	r3, [r3, #0]
 80281f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80281fa:	781b      	ldrb	r3, [r3, #0]
 80281fc:	f003 0301 	and.w	r3, r3, #1
 8028200:	b2db      	uxtb	r3, r3
 8028202:	2b00      	cmp	r3, #0
 8028204:	d002      	beq.n	802820c <PWM_CCU4_SetFreq+0x48>
      {
        period = period >> 1U;/*divide by 2*/
 8028206:	69bb      	ldr	r3, [r7, #24]
 8028208:	085b      	lsrs	r3, r3, #1
 802820a:	61bb      	str	r3, [r7, #24]
      }

      if ((period != 0U) && (period <= PWM_CCU4_MAX_TIMER_COUNT))
 802820c:	69bb      	ldr	r3, [r7, #24]
 802820e:	2b00      	cmp	r3, #0
 8028210:	d033      	beq.n	802827a <PWM_CCU4_SetFreq+0xb6>
 8028212:	69bb      	ldr	r3, [r7, #24]
 8028214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028218:	d22f      	bcs.n	802827a <PWM_CCU4_SetFreq+0xb6>
      {
        /*Calculate the current duty cycle in no-timer concatenation mode*/
        duty = handle_ptr->sym_duty;
 802821a:	687b      	ldr	r3, [r7, #4]
 802821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802821e:	613b      	str	r3, [r7, #16]

        duty = (PWM_CCU4_DUTY_FULL_SCALE - duty);
 8028220:	693b      	ldr	r3, [r7, #16]
 8028222:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8028226:	3310      	adds	r3, #16
 8028228:	613b      	str	r3, [r7, #16]
        duty = duty * period;
 802822a:	693b      	ldr	r3, [r7, #16]
 802822c:	69ba      	ldr	r2, [r7, #24]
 802822e:	fb02 f303 	mul.w	r3, r2, r3
 8028232:	613b      	str	r3, [r7, #16]
        duty = duty / PWM_CCU4_DUTY_FULL_SCALE;
 8028234:	693b      	ldr	r3, [r7, #16]
 8028236:	4a13      	ldr	r2, [pc, #76]	; (8028284 <PWM_CCU4_SetFreq+0xc0>)
 8028238:	fba2 2303 	umull	r2, r3, r2, r3
 802823c:	0b5b      	lsrs	r3, r3, #13
 802823e:	613b      	str	r3, [r7, #16]

        compare = (uint16_t) duty;
 8028240:	693b      	ldr	r3, [r7, #16]
 8028242:	81fb      	strh	r3, [r7, #14]

        XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)(period - 1U));
 8028244:	687b      	ldr	r3, [r7, #4]
 8028246:	689a      	ldr	r2, [r3, #8]
 8028248:	69bb      	ldr	r3, [r7, #24]
 802824a:	b29b      	uxth	r3, r3
 802824c:	3b01      	subs	r3, #1
 802824e:	b29b      	uxth	r3, r3
 8028250:	4610      	mov	r0, r2
 8028252:	4619      	mov	r1, r3
 8028254:	f7ff fd0e 	bl	8027c74 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
        XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, compare);
 8028258:	687b      	ldr	r3, [r7, #4]
 802825a:	689a      	ldr	r2, [r3, #8]
 802825c:	89fb      	ldrh	r3, [r7, #14]
 802825e:	4610      	mov	r0, r2
 8028260:	4619      	mov	r1, r3
 8028262:	f7ff fd15 	bl	8027c90 <XMC_CCU4_SLICE_SetTimerCompareMatch>
        XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 8028266:	687b      	ldr	r3, [r7, #4]
 8028268:	685a      	ldr	r2, [r3, #4]
 802826a:	687b      	ldr	r3, [r7, #4]
 802826c:	691b      	ldr	r3, [r3, #16]
 802826e:	4610      	mov	r0, r2
 8028270:	4619      	mov	r1, r3
 8028272:	f7ff fd1b 	bl	8027cac <XMC_CCU4_EnableShadowTransfer>
        XMC_DEBUG("PWM_CCU4_SetFreq:frequency set");
        status = PWM_CCU4_STATUS_SUCCESS;
 8028276:	2300      	movs	r3, #0
 8028278:	77fb      	strb	r3, [r7, #31]
      }
    }
  }
  return (status);
 802827a:	7ffb      	ldrb	r3, [r7, #31]

} /* end of PWM_CCU4_SetFreqSymmetric() api */
 802827c:	4618      	mov	r0, r3
 802827e:	3720      	adds	r7, #32
 8028280:	46bd      	mov	sp, r7
 8028282:	bd80      	pop	{r7, pc}
 8028284:	d1b71759 	.word	0xd1b71759

08028288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8028288:	b480      	push	{r7}
 802828a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802828c:	4b04      	ldr	r3, [pc, #16]	; (80282a0 <__NVIC_GetPriorityGrouping+0x18>)
 802828e:	68db      	ldr	r3, [r3, #12]
 8028290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8028294:	0a1b      	lsrs	r3, r3, #8
}
 8028296:	4618      	mov	r0, r3
 8028298:	46bd      	mov	sp, r7
 802829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802829e:	4770      	bx	lr
 80282a0:	e000ed00 	.word	0xe000ed00

080282a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80282a4:	b480      	push	{r7}
 80282a6:	b083      	sub	sp, #12
 80282a8:	af00      	add	r7, sp, #0
 80282aa:	4603      	mov	r3, r0
 80282ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80282ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80282b2:	2b00      	cmp	r3, #0
 80282b4:	db0b      	blt.n	80282ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80282b6:	4908      	ldr	r1, [pc, #32]	; (80282d8 <__NVIC_EnableIRQ+0x34>)
 80282b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80282bc:	095b      	lsrs	r3, r3, #5
 80282be:	79fa      	ldrb	r2, [r7, #7]
 80282c0:	f002 021f 	and.w	r2, r2, #31
 80282c4:	2001      	movs	r0, #1
 80282c6:	fa00 f202 	lsl.w	r2, r0, r2
 80282ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80282ce:	370c      	adds	r7, #12
 80282d0:	46bd      	mov	sp, r7
 80282d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282d6:	4770      	bx	lr
 80282d8:	e000e100 	.word	0xe000e100

080282dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80282dc:	b480      	push	{r7}
 80282de:	b083      	sub	sp, #12
 80282e0:	af00      	add	r7, sp, #0
 80282e2:	4603      	mov	r3, r0
 80282e4:	6039      	str	r1, [r7, #0]
 80282e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80282e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80282ec:	2b00      	cmp	r3, #0
 80282ee:	db0a      	blt.n	8028306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80282f0:	490d      	ldr	r1, [pc, #52]	; (8028328 <__NVIC_SetPriority+0x4c>)
 80282f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80282f6:	683a      	ldr	r2, [r7, #0]
 80282f8:	b2d2      	uxtb	r2, r2
 80282fa:	0092      	lsls	r2, r2, #2
 80282fc:	b2d2      	uxtb	r2, r2
 80282fe:	440b      	add	r3, r1
 8028300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8028304:	e00a      	b.n	802831c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8028306:	4909      	ldr	r1, [pc, #36]	; (802832c <__NVIC_SetPriority+0x50>)
 8028308:	79fb      	ldrb	r3, [r7, #7]
 802830a:	f003 030f 	and.w	r3, r3, #15
 802830e:	3b04      	subs	r3, #4
 8028310:	683a      	ldr	r2, [r7, #0]
 8028312:	b2d2      	uxtb	r2, r2
 8028314:	0092      	lsls	r2, r2, #2
 8028316:	b2d2      	uxtb	r2, r2
 8028318:	440b      	add	r3, r1
 802831a:	761a      	strb	r2, [r3, #24]
  }
}
 802831c:	370c      	adds	r7, #12
 802831e:	46bd      	mov	sp, r7
 8028320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028324:	4770      	bx	lr
 8028326:	bf00      	nop
 8028328:	e000e100 	.word	0xe000e100
 802832c:	e000ed00 	.word	0xe000ed00

08028330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8028330:	b480      	push	{r7}
 8028332:	b089      	sub	sp, #36	; 0x24
 8028334:	af00      	add	r7, sp, #0
 8028336:	60f8      	str	r0, [r7, #12]
 8028338:	60b9      	str	r1, [r7, #8]
 802833a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802833c:	68fb      	ldr	r3, [r7, #12]
 802833e:	f003 0307 	and.w	r3, r3, #7
 8028342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8028344:	69fb      	ldr	r3, [r7, #28]
 8028346:	f1c3 0307 	rsb	r3, r3, #7
 802834a:	2b06      	cmp	r3, #6
 802834c:	bf28      	it	cs
 802834e:	2306      	movcs	r3, #6
 8028350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8028352:	69fb      	ldr	r3, [r7, #28]
 8028354:	3306      	adds	r3, #6
 8028356:	2b06      	cmp	r3, #6
 8028358:	d902      	bls.n	8028360 <NVIC_EncodePriority+0x30>
 802835a:	69fb      	ldr	r3, [r7, #28]
 802835c:	3b01      	subs	r3, #1
 802835e:	e000      	b.n	8028362 <NVIC_EncodePriority+0x32>
 8028360:	2300      	movs	r3, #0
 8028362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8028364:	69bb      	ldr	r3, [r7, #24]
 8028366:	2201      	movs	r2, #1
 8028368:	fa02 f303 	lsl.w	r3, r2, r3
 802836c:	1e5a      	subs	r2, r3, #1
 802836e:	68bb      	ldr	r3, [r7, #8]
 8028370:	401a      	ands	r2, r3
 8028372:	697b      	ldr	r3, [r7, #20]
 8028374:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8028376:	697b      	ldr	r3, [r7, #20]
 8028378:	2101      	movs	r1, #1
 802837a:	fa01 f303 	lsl.w	r3, r1, r3
 802837e:	1e59      	subs	r1, r3, #1
 8028380:	687b      	ldr	r3, [r7, #4]
 8028382:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8028384:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8028386:	4618      	mov	r0, r3
 8028388:	3724      	adds	r7, #36	; 0x24
 802838a:	46bd      	mov	sp, r7
 802838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028390:	4770      	bx	lr
 8028392:	bf00      	nop

08028394 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8028394:	b580      	push	{r7, lr}
 8028396:	b082      	sub	sp, #8
 8028398:	af00      	add	r7, sp, #0
 802839a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 802839c:	687b      	ldr	r3, [r7, #4]
 802839e:	781b      	ldrb	r3, [r3, #0]
 80283a0:	b25b      	sxtb	r3, r3
 80283a2:	4618      	mov	r0, r3
 80283a4:	f7ff ff7e 	bl	80282a4 <__NVIC_EnableIRQ>
}
 80283a8:	3708      	adds	r7, #8
 80283aa:	46bd      	mov	sp, r7
 80283ac:	bd80      	pop	{r7, pc}
 80283ae:	bf00      	nop

080283b0 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80283b0:	b590      	push	{r4, r7, lr}
 80283b2:	b083      	sub	sp, #12
 80283b4:	af00      	add	r7, sp, #0
 80283b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80283b8:	687b      	ldr	r3, [r7, #4]
 80283ba:	781c      	ldrb	r4, [r3, #0]
 80283bc:	f7ff ff64 	bl	8028288 <__NVIC_GetPriorityGrouping>
 80283c0:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80283c2:	687b      	ldr	r3, [r7, #4]
 80283c4:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80283c6:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80283c8:	687b      	ldr	r3, [r7, #4]
 80283ca:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80283cc:	4608      	mov	r0, r1
 80283ce:	4611      	mov	r1, r2
 80283d0:	461a      	mov	r2, r3
 80283d2:	f7ff ffad 	bl	8028330 <NVIC_EncodePriority>
 80283d6:	4602      	mov	r2, r0
 80283d8:	b263      	sxtb	r3, r4
 80283da:	4618      	mov	r0, r3
 80283dc:	4611      	mov	r1, r2
 80283de:	f7ff ff7d 	bl	80282dc <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80283e2:	687b      	ldr	r3, [r7, #4]
 80283e4:	78db      	ldrb	r3, [r3, #3]
 80283e6:	2b00      	cmp	r3, #0
 80283e8:	d002      	beq.n	80283f0 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 80283ea:	6878      	ldr	r0, [r7, #4]
 80283ec:	f7ff ffd2 	bl	8028394 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 80283f0:	2300      	movs	r3, #0
}
 80283f2:	4618      	mov	r0, r3
 80283f4:	370c      	adds	r7, #12
 80283f6:	46bd      	mov	sp, r7
 80283f8:	bd90      	pop	{r4, r7, pc}
 80283fa:	bf00      	nop

080283fc <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80283fc:	b480      	push	{r7}
 80283fe:	b083      	sub	sp, #12
 8028400:	af00      	add	r7, sp, #0
 8028402:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	f44f 7280 	mov.w	r2, #256	; 0x100
 802840a:	60da      	str	r2, [r3, #12]
}
 802840c:	370c      	adds	r7, #12
 802840e:	46bd      	mov	sp, r7
 8028410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028414:	4770      	bx	lr
 8028416:	bf00      	nop

08028418 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8028418:	b580      	push	{r7, lr}
 802841a:	b082      	sub	sp, #8
 802841c:	af00      	add	r7, sp, #0
 802841e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8028420:	687b      	ldr	r3, [r7, #4]
 8028422:	7b5b      	ldrb	r3, [r3, #13]
 8028424:	f083 0301 	eor.w	r3, r3, #1
 8028428:	b2db      	uxtb	r3, r3
 802842a:	2b00      	cmp	r3, #0
 802842c:	d00f      	beq.n	802844e <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 802842e:	687b      	ldr	r3, [r7, #4]
 8028430:	689a      	ldr	r2, [r3, #8]
 8028432:	687b      	ldr	r3, [r7, #4]
 8028434:	7b1b      	ldrb	r3, [r3, #12]
 8028436:	4610      	mov	r0, r2
 8028438:	4619      	mov	r1, r3
 802843a:	f7ff f93d 	bl	80276b8 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 802843e:	687b      	ldr	r3, [r7, #4]
 8028440:	689b      	ldr	r3, [r3, #8]
 8028442:	4618      	mov	r0, r3
 8028444:	f7ff ffda 	bl	80283fc <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	2201      	movs	r2, #1
 802844c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 802844e:	2300      	movs	r3, #0
}
 8028450:	4618      	mov	r0, r3
 8028452:	3708      	adds	r7, #8
 8028454:	46bd      	mov	sp, r7
 8028456:	bd80      	pop	{r7, pc}

08028458 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8028458:	b480      	push	{r7}
 802845a:	b083      	sub	sp, #12
 802845c:	af00      	add	r7, sp, #0
 802845e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8028460:	687b      	ldr	r3, [r7, #4]
 8028462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8028466:	60da      	str	r2, [r3, #12]
}
 8028468:	370c      	adds	r7, #12
 802846a:	46bd      	mov	sp, r7
 802846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028470:	4770      	bx	lr
 8028472:	bf00      	nop

08028474 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8028474:	b580      	push	{r7, lr}
 8028476:	b082      	sub	sp, #8
 8028478:	af00      	add	r7, sp, #0
 802847a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 802847c:	687b      	ldr	r3, [r7, #4]
 802847e:	7b5b      	ldrb	r3, [r3, #13]
 8028480:	f083 0301 	eor.w	r3, r3, #1
 8028484:	b2db      	uxtb	r3, r3
 8028486:	2b00      	cmp	r3, #0
 8028488:	d00f      	beq.n	80284aa <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 802848a:	687b      	ldr	r3, [r7, #4]
 802848c:	689a      	ldr	r2, [r3, #8]
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	7b1b      	ldrb	r3, [r3, #12]
 8028492:	4610      	mov	r0, r2
 8028494:	4619      	mov	r1, r3
 8028496:	f7fe fde9 	bl	802706c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	689b      	ldr	r3, [r3, #8]
 802849e:	4618      	mov	r0, r3
 80284a0:	f7ff ffda 	bl	8028458 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80284a4:	687b      	ldr	r3, [r7, #4]
 80284a6:	2201      	movs	r2, #1
 80284a8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80284aa:	2300      	movs	r3, #0
}
 80284ac:	4618      	mov	r0, r3
 80284ae:	3708      	adds	r7, #8
 80284b0:	46bd      	mov	sp, r7
 80284b2:	bd80      	pop	{r7, pc}

080284b4 <XMC_FLASH_SetMargin>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
 80284b4:	b480      	push	{r7}
 80284b6:	b083      	sub	sp, #12
 80284b8:	af00      	add	r7, sp, #0
 80284ba:	4603      	mov	r3, r0
 80284bc:	71fb      	strb	r3, [r7, #7]
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 80284be:	4909      	ldr	r1, [pc, #36]	; (80284e4 <XMC_FLASH_SetMargin+0x30>)
 80284c0:	4b08      	ldr	r3, [pc, #32]	; (80284e4 <XMC_FLASH_SetMargin+0x30>)
 80284c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80284c6:	3318      	adds	r3, #24
 80284c8:	681b      	ldr	r3, [r3, #0]
 80284ca:	f023 020f 	bic.w	r2, r3, #15
 80284ce:	79fb      	ldrb	r3, [r7, #7]
 80284d0:	431a      	orrs	r2, r3
 80284d2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80284d6:	3318      	adds	r3, #24
 80284d8:	601a      	str	r2, [r3, #0]
}
 80284da:	370c      	adds	r7, #12
 80284dc:	46bd      	mov	sp, r7
 80284de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284e2:	4770      	bx	lr
 80284e4:	58001000 	.word	0x58001000

080284e8 <XMC_FLASH_EnableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
{
 80284e8:	b480      	push	{r7}
 80284ea:	af00      	add	r7, sp, #0
  FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
 80284ec:	4907      	ldr	r1, [pc, #28]	; (802850c <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 80284ee:	4b07      	ldr	r3, [pc, #28]	; (802850c <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 80284f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80284f4:	3318      	adds	r3, #24
 80284f6:	681b      	ldr	r3, [r3, #0]
 80284f8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80284fc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8028500:	3318      	adds	r3, #24
 8028502:	601a      	str	r2, [r3, #0]
}
 8028504:	46bd      	mov	sp, r7
 8028506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802850a:	4770      	bx	lr
 802850c:	58001000 	.word	0x58001000

08028510 <XMC_FLASH_DisableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
{
 8028510:	b480      	push	{r7}
 8028512:	af00      	add	r7, sp, #0
  FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 8028514:	4907      	ldr	r1, [pc, #28]	; (8028534 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8028516:	4b07      	ldr	r3, [pc, #28]	; (8028534 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8028518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802851c:	3318      	adds	r3, #24
 802851e:	681b      	ldr	r3, [r3, #0]
 8028520:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8028524:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8028528:	3318      	adds	r3, #24
 802852a:	601a      	str	r2, [r3, #0]
}
 802852c:	46bd      	mov	sp, r7
 802852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028532:	4770      	bx	lr
 8028534:	58001000 	.word	0x58001000

08028538 <XMC_FCE_InitializeSeedValue>:
 *
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
 8028538:	b480      	push	{r7}
 802853a:	b083      	sub	sp, #12
 802853c:	af00      	add	r7, sp, #0
 802853e:	6078      	str	r0, [r7, #4]
 8028540:	6039      	str	r1, [r7, #0]
  engine->kernel_ptr->CRC = seedvalue;
 8028542:	687b      	ldr	r3, [r7, #4]
 8028544:	681b      	ldr	r3, [r3, #0]
 8028546:	683a      	ldr	r2, [r7, #0]
 8028548:	619a      	str	r2, [r3, #24]
}
 802854a:	370c      	adds	r7, #12
 802854c:	46bd      	mov	sp, r7
 802854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028552:	4770      	bx	lr

08028554 <E_EEPROM_XMC4_Init>:

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 8028554:	b580      	push	{r7, lr}
 8028556:	b084      	sub	sp, #16
 8028558:	af00      	add	r7, sp, #0
 802855a:	6078      	str	r0, [r7, #4]
  uint32_t sector_count;
  E_EEPROM_XMC4_STATUS_t status ;

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL))

  status = E_EEPROM_XMC4_STATUS_OK;
 802855c:	2300      	movs	r3, #0
 802855e:	72fb      	strb	r3, [r7, #11]
  
  if (handle->initialized == (bool)false)
 8028560:	687b      	ldr	r3, [r7, #4]
 8028562:	781b      	ldrb	r3, [r3, #0]
 8028564:	f083 0301 	eor.w	r3, r3, #1
 8028568:	b2db      	uxtb	r3, r3
 802856a:	2b00      	cmp	r3, #0
 802856c:	d04c      	beq.n	8028608 <E_EEPROM_XMC4_Init+0xb4>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 802856e:	4b29      	ldr	r3, [pc, #164]	; (8028614 <E_EEPROM_XMC4_Init+0xc0>)
 8028570:	2200      	movs	r2, #0
 8028572:	605a      	str	r2, [r3, #4]
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 8028574:	4b28      	ldr	r3, [pc, #160]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 8028576:	2200      	movs	r2, #0
 8028578:	605a      	str	r2, [r3, #4]
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 802857a:	2001      	movs	r0, #1
 802857c:	f7ff ff9a 	bl	80284b4 <XMC_FLASH_SetMargin>
    XMC_FLASH_DisableDoubleBitErrorTrap();
 8028580:	f7ff ffc6 	bl	8028510 <XMC_FLASH_DisableDoubleBitErrorTrap>
  
    XMC_FCE_Enable();
 8028584:	f7ff f984 	bl	8027890 <XMC_FCE_Enable>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 8028588:	4824      	ldr	r0, [pc, #144]	; (802861c <E_EEPROM_XMC4_Init+0xc8>)
 802858a:	f7ff f96b 	bl	8027864 <XMC_FCE_Init>
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 802858e:	2300      	movs	r3, #0
 8028590:	60fb      	str	r3, [r7, #12]
 8028592:	e005      	b.n	80285a0 <E_EEPROM_XMC4_Init+0x4c>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 8028594:	68f8      	ldr	r0, [r7, #12]
 8028596:	f000 f941 	bl	802881c <E_EEPROM_XMC4_lInitReadSectorInfo>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 802859a:	68fb      	ldr	r3, [r7, #12]
 802859c:	3301      	adds	r3, #1
 802859e:	60fb      	str	r3, [r7, #12]
 80285a0:	68fb      	ldr	r3, [r7, #12]
 80285a2:	2b03      	cmp	r3, #3
 80285a4:	d9f6      	bls.n	8028594 <E_EEPROM_XMC4_Init+0x40>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
    }  
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 80285a6:	2000      	movs	r0, #0
 80285a8:	f7ff ff84 	bl	80284b4 <XMC_FLASH_SetMargin>
  
    /* Implement the OVER ERASE CHECK code here and return the status*/
  
    /* If Read was successful*/
    if (status == E_EEPROM_XMC4_STATUS_OK)
 80285ac:	7afb      	ldrb	r3, [r7, #11]
 80285ae:	2b00      	cmp	r3, #0
 80285b0:	d125      	bne.n	80285fe <E_EEPROM_XMC4_Init+0xaa>
    {
      /* Execute erase state machine to free up the unwanted sectors and keep
       * only the sector which has latest valid block. If no valid block found then all sectors are emptied.
       */
      status = E_EEPROM_XMC4_lInitEraseStateMachine();
 80285b2:	f000 f989 	bl	80288c8 <E_EEPROM_XMC4_lInitEraseStateMachine>
 80285b6:	4603      	mov	r3, r0
 80285b8:	72fb      	strb	r3, [r7, #11]
  
      /* If erase operations were successful, continue block data updates to RAM buffer */
      if (status == E_EEPROM_XMC4_STATUS_OK)
 80285ba:	7afb      	ldrb	r3, [r7, #11]
 80285bc:	2b00      	cmp	r3, #0
 80285be:	d11e      	bne.n	80285fe <E_EEPROM_XMC4_Init+0xaa>
      {
  
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 80285c0:	4b15      	ldr	r3, [pc, #84]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 80285c2:	685b      	ldr	r3, [r3, #4]
 80285c4:	2b00      	cmp	r3, #0
 80285c6:	d106      	bne.n	80285d6 <E_EEPROM_XMC4_Init+0x82>
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 80285c8:	4b13      	ldr	r3, [pc, #76]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 80285ca:	2200      	movs	r2, #0
 80285cc:	609a      	str	r2, [r3, #8]
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 80285ce:	4b12      	ldr	r3, [pc, #72]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 80285d0:	4a13      	ldr	r2, [pc, #76]	; (8028620 <E_EEPROM_XMC4_Init+0xcc>)
 80285d2:	601a      	str	r2, [r3, #0]
 80285d4:	e013      	b.n	80285fe <E_EEPROM_XMC4_Init+0xaa>
        }
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
 80285d6:	f000 f9cf 	bl	8028978 <E_EEPROM_XMC4_lCopyFlashToRam>
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 80285da:	4b0f      	ldr	r3, [pc, #60]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 80285dc:	681a      	ldr	r2, [r3, #0]
 80285de:	4b0e      	ldr	r3, [pc, #56]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 80285e0:	685b      	ldr	r3, [r3, #4]
 80285e2:	1ad3      	subs	r3, r2, r3
 80285e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80285e8:	d001      	beq.n	80285ee <E_EEPROM_XMC4_Init+0x9a>
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 80285ea:	2301      	movs	r3, #1
 80285ec:	72fb      	strb	r3, [r7, #11]
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 80285ee:	4b0a      	ldr	r3, [pc, #40]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 80285f0:	681b      	ldr	r3, [r3, #0]
 80285f2:	4a0c      	ldr	r2, [pc, #48]	; (8028624 <E_EEPROM_XMC4_Init+0xd0>)
 80285f4:	4293      	cmp	r3, r2
 80285f6:	d902      	bls.n	80285fe <E_EEPROM_XMC4_Init+0xaa>
          {
            e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 80285f8:	4b07      	ldr	r3, [pc, #28]	; (8028618 <E_EEPROM_XMC4_Init+0xc4>)
 80285fa:	4a09      	ldr	r2, [pc, #36]	; (8028620 <E_EEPROM_XMC4_Init+0xcc>)
 80285fc:	601a      	str	r2, [r3, #0]
  
        }
      }
    }

    XMC_FLASH_EnableDoubleBitErrorTrap();
 80285fe:	f7ff ff73 	bl	80284e8 <XMC_FLASH_EnableDoubleBitErrorTrap>

    handle->initialized = (bool)true;
 8028602:	687b      	ldr	r3, [r7, #4]
 8028604:	2201      	movs	r2, #1
 8028606:	701a      	strb	r2, [r3, #0]
  }

  return (status);
 8028608:	7afb      	ldrb	r3, [r7, #11]
}
 802860a:	4618      	mov	r0, r3
 802860c:	3710      	adds	r7, #16
 802860e:	46bd      	mov	sp, r7
 8028610:	bd80      	pop	{r7, pc}
 8028612:	bf00      	nop
 8028614:	1fff1628 	.word	0x1fff1628
 8028618:	1fff155c 	.word	0x1fff155c
 802861c:	0802abd8 	.word	0x0802abd8
 8028620:	0c010000 	.word	0x0c010000
 8028624:	0c01ffff 	.word	0x0c01ffff

08028628 <E_EEPROM_XMC4_WriteArray>:



/* Update a set of bytes to RAM buffer*/
bool E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint16_t length)
{
 8028628:	b580      	push	{r7, lr}
 802862a:	b086      	sub	sp, #24
 802862c:	af00      	add	r7, sp, #0
 802862e:	4603      	mov	r3, r0
 8028630:	6039      	str	r1, [r7, #0]
 8028632:	80fb      	strh	r3, [r7, #6]
 8028634:	4613      	mov	r3, r2
 8028636:	80bb      	strh	r3, [r7, #4]

  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8028638:	88fb      	ldrh	r3, [r7, #6]
 802863a:	3308      	adds	r3, #8
 802863c:	4a12      	ldr	r2, [pc, #72]	; (8028688 <E_EEPROM_XMC4_WriteArray+0x60>)
 802863e:	4413      	add	r3, r2
 8028640:	613b      	str	r3, [r7, #16]
  status = (memcmp(address_ptr, data, length) != 0);
 8028642:	88bb      	ldrh	r3, [r7, #4]
 8028644:	6938      	ldr	r0, [r7, #16]
 8028646:	6839      	ldr	r1, [r7, #0]
 8028648:	461a      	mov	r2, r3
 802864a:	f001 fbef 	bl	8029e2c <memcmp>
 802864e:	4603      	mov	r3, r0
 8028650:	2b00      	cmp	r3, #0
 8028652:	bf14      	ite	ne
 8028654:	2301      	movne	r3, #1
 8028656:	2300      	moveq	r3, #0
 8028658:	73fb      	strb	r3, [r7, #15]

  for (i = 0U; i < length; i++)
 802865a:	2300      	movs	r3, #0
 802865c:	82fb      	strh	r3, [r7, #22]
 802865e:	e00a      	b.n	8028676 <E_EEPROM_XMC4_WriteArray+0x4e>
  {
      *(address_ptr + i) = *(data + i);
 8028660:	8afb      	ldrh	r3, [r7, #22]
 8028662:	693a      	ldr	r2, [r7, #16]
 8028664:	4413      	add	r3, r2
 8028666:	8afa      	ldrh	r2, [r7, #22]
 8028668:	6839      	ldr	r1, [r7, #0]
 802866a:	440a      	add	r2, r1
 802866c:	7812      	ldrb	r2, [r2, #0]
 802866e:	701a      	strb	r2, [r3, #0]
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
  status = (memcmp(address_ptr, data, length) != 0);

  for (i = 0U; i < length; i++)
 8028670:	8afb      	ldrh	r3, [r7, #22]
 8028672:	3301      	adds	r3, #1
 8028674:	82fb      	strh	r3, [r7, #22]
 8028676:	8afa      	ldrh	r2, [r7, #22]
 8028678:	88bb      	ldrh	r3, [r7, #4]
 802867a:	429a      	cmp	r2, r3
 802867c:	d3f0      	bcc.n	8028660 <E_EEPROM_XMC4_WriteArray+0x38>
  {
      *(address_ptr + i) = *(data + i);
  }

  return status;
 802867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8028680:	4618      	mov	r0, r3
 8028682:	3718      	adds	r7, #24
 8028684:	46bd      	mov	sp, r7
 8028686:	bd80      	pop	{r7, pc}
 8028688:	1fff1628 	.word	0x1fff1628

0802868c <E_EEPROM_XMC4_ReadArray>:



/* Read a set of bytes from RAM Buffer */
void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t length)
{
 802868c:	b480      	push	{r7}
 802868e:	b085      	sub	sp, #20
 8028690:	af00      	add	r7, sp, #0
 8028692:	4603      	mov	r3, r0
 8028694:	6039      	str	r1, [r7, #0]
 8028696:	80fb      	strh	r3, [r7, #6]
 8028698:	4613      	mov	r3, r2
 802869a:	80bb      	strh	r3, [r7, #4]
  uint16_t i;
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 802869c:	88fb      	ldrh	r3, [r7, #6]
 802869e:	3308      	adds	r3, #8
 80286a0:	4a0c      	ldr	r2, [pc, #48]	; (80286d4 <E_EEPROM_XMC4_ReadArray+0x48>)
 80286a2:	4413      	add	r3, r2
 80286a4:	60bb      	str	r3, [r7, #8]

  for (i=0U; i<length; i++)
 80286a6:	2300      	movs	r3, #0
 80286a8:	81fb      	strh	r3, [r7, #14]
 80286aa:	e00a      	b.n	80286c2 <E_EEPROM_XMC4_ReadArray+0x36>
  {
    *(data + i) = *(address_ptr + i);
 80286ac:	89fb      	ldrh	r3, [r7, #14]
 80286ae:	683a      	ldr	r2, [r7, #0]
 80286b0:	4413      	add	r3, r2
 80286b2:	89fa      	ldrh	r2, [r7, #14]
 80286b4:	68b9      	ldr	r1, [r7, #8]
 80286b6:	440a      	add	r2, r1
 80286b8:	7812      	ldrb	r2, [r2, #0]
 80286ba:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length",
                                                    ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE))
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 80286bc:	89fb      	ldrh	r3, [r7, #14]
 80286be:	3301      	adds	r3, #1
 80286c0:	81fb      	strh	r3, [r7, #14]
 80286c2:	89fa      	ldrh	r2, [r7, #14]
 80286c4:	88bb      	ldrh	r3, [r7, #4]
 80286c6:	429a      	cmp	r2, r3
 80286c8:	d3f0      	bcc.n	80286ac <E_EEPROM_XMC4_ReadArray+0x20>
  {
    *(data + i) = *(address_ptr + i);
  }
}
 80286ca:	3714      	adds	r7, #20
 80286cc:	46bd      	mov	sp, r7
 80286ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286d2:	4770      	bx	lr
 80286d4:	1fff1628 	.word	0x1fff1628

080286d8 <E_EEPROM_XMC4_UpdateFlashContents>:



/* Copy data blocks from RAM to FLASH */
E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
{
 80286d8:	b580      	push	{r7, lr}
 80286da:	b082      	sub	sp, #8
 80286dc:	af00      	add	r7, sp, #0
  E_EEPROM_XMC4_STATUS_t status;
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;
 80286de:	2300      	movs	r3, #0
 80286e0:	71fb      	strb	r3, [r7, #7]

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 80286e2:	4b22      	ldr	r3, [pc, #136]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80286e4:	689b      	ldr	r3, [r3, #8]
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 80286e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80286ea:	3304      	adds	r3, #4
 80286ec:	039b      	lsls	r3, r3, #14
 80286ee:	603b      	str	r3, [r7, #0]
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 80286f0:	4b1e      	ldr	r3, [pc, #120]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80286f2:	681a      	ldr	r2, [r3, #0]
 80286f4:	683b      	ldr	r3, [r7, #0]
 80286f6:	429a      	cmp	r2, r3
 80286f8:	d111      	bne.n	802871e <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 80286fa:	4b1d      	ldr	r3, [pc, #116]	; (8028770 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 80286fc:	685b      	ldr	r3, [r3, #4]
  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 80286fe:	2b00      	cmp	r3, #0
 8028700:	d00d      	beq.n	802871e <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8028702:	4b1a      	ldr	r3, [pc, #104]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028704:	685b      	ldr	r3, [r3, #4]
 8028706:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 802870a:	0b9b      	lsrs	r3, r3, #14
  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 802870c:	4a17      	ldr	r2, [pc, #92]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802870e:	6093      	str	r3, [r2, #8]
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
                                                E_EEPROM_XMC4_SECTOR_POSITION);

    /* Mark all the sectors as filled with data */
    e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 8028710:	4b16      	ldr	r3, [pc, #88]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028712:	220f      	movs	r2, #15
 8028714:	60da      	str	r2, [r3, #12]

    /* Execute erase state machine to free up the unwanted sectors and keep only the sector which has latest block*/
    status = E_EEPROM_XMC4_lInitEraseStateMachine();
 8028716:	f000 f8d7 	bl	80288c8 <E_EEPROM_XMC4_lInitEraseStateMachine>
 802871a:	4603      	mov	r3, r0
 802871c:	71fb      	strb	r3, [r7, #7]
  }

  if (status ==  E_EEPROM_XMC4_STATUS_OK)
 802871e:	79fb      	ldrb	r3, [r7, #7]
 8028720:	2b00      	cmp	r3, #0
 8028722:	d11d      	bne.n	8028760 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count++;
 8028724:	4b12      	ldr	r3, [pc, #72]	; (8028770 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8028726:	685b      	ldr	r3, [r3, #4]
 8028728:	3301      	adds	r3, #1
 802872a:	4a11      	ldr	r2, [pc, #68]	; (8028770 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 802872c:	6053      	str	r3, [r2, #4]

    status = E_EEPROM_XMC4_lWriteToFlash();
 802872e:	f000 f839 	bl	80287a4 <E_EEPROM_XMC4_lWriteToFlash>
 8028732:	4603      	mov	r3, r0
 8028734:	71fb      	strb	r3, [r7, #7]

    /* If the flash write succeeds, update the latest flash data location in RAM for reference */
    if (status == E_EEPROM_XMC4_STATUS_OK)
 8028736:	79fb      	ldrb	r3, [r7, #7]
 8028738:	2b00      	cmp	r3, #0
 802873a:	d103      	bne.n	8028744 <E_EEPROM_XMC4_UpdateFlashContents+0x6c>
    {
      e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 802873c:	4b0b      	ldr	r3, [pc, #44]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802873e:	681b      	ldr	r3, [r3, #0]
 8028740:	4a0a      	ldr	r2, [pc, #40]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028742:	6053      	str	r3, [r2, #4]
    }

    /* Update the next free address to write the new data block*/
    e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8028744:	4b09      	ldr	r3, [pc, #36]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028746:	681b      	ldr	r3, [r3, #0]
 8028748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802874c:	4a07      	ldr	r2, [pc, #28]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802874e:	6013      	str	r3, [r2, #0]

    /* If the next free address crosses 3rd sector end address relocate the address to 0th sector starting address*/
    if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8028750:	4b06      	ldr	r3, [pc, #24]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8028752:	681b      	ldr	r3, [r3, #0]
 8028754:	4a07      	ldr	r2, [pc, #28]	; (8028774 <E_EEPROM_XMC4_UpdateFlashContents+0x9c>)
 8028756:	4293      	cmp	r3, r2
 8028758:	d902      	bls.n	8028760 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
    {
      e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 802875a:	4b04      	ldr	r3, [pc, #16]	; (802876c <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 802875c:	4a06      	ldr	r2, [pc, #24]	; (8028778 <E_EEPROM_XMC4_UpdateFlashContents+0xa0>)
 802875e:	601a      	str	r2, [r3, #0]
    }
  }

  return (status);
 8028760:	79fb      	ldrb	r3, [r7, #7]
}
 8028762:	4618      	mov	r0, r3
 8028764:	3708      	adds	r7, #8
 8028766:	46bd      	mov	sp, r7
 8028768:	bd80      	pop	{r7, pc}
 802876a:	bf00      	nop
 802876c:	1fff155c 	.word	0x1fff155c
 8028770:	1fff1628 	.word	0x1fff1628
 8028774:	0c01ffff 	.word	0x0c01ffff
 8028778:	0c010000 	.word	0x0c010000

0802877c <E_EEPROM_XMC4_IsFlashEmpty>:


/* Check the availability data in the flash emulated EEPROM area */
bool E_EEPROM_XMC4_IsFlashEmpty(void)
{
 802877c:	b480      	push	{r7}
 802877e:	b083      	sub	sp, #12
 8028780:	af00      	add	r7, sp, #0
  bool status = false;
 8028782:	2300      	movs	r3, #0
 8028784:	71fb      	strb	r3, [r7, #7]

  /* If data available flash_data_addr will have a valid address*/
  if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 8028786:	4b06      	ldr	r3, [pc, #24]	; (80287a0 <E_EEPROM_XMC4_IsFlashEmpty+0x24>)
 8028788:	685b      	ldr	r3, [r3, #4]
 802878a:	2b00      	cmp	r3, #0
 802878c:	d101      	bne.n	8028792 <E_EEPROM_XMC4_IsFlashEmpty+0x16>
  {
    status = true;
 802878e:	2301      	movs	r3, #1
 8028790:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8028792:	79fb      	ldrb	r3, [r7, #7]
}
 8028794:	4618      	mov	r0, r3
 8028796:	370c      	adds	r7, #12
 8028798:	46bd      	mov	sp, r7
 802879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802879e:	4770      	bx	lr
 80287a0:	1fff155c 	.word	0x1fff155c

080287a4 <E_EEPROM_XMC4_lWriteToFlash>:
 * LOCAL ROUTINES
 ********************************************************************************************************************/

/* Local function to program data blocks from RAM into FLASH */
static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
{
 80287a4:	b580      	push	{r7, lr}
 80287a6:	b084      	sub	sp, #16
 80287a8:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t  page_index;
  E_EEPROM_XMC4_STATUS_t status;

  status = E_EEPROM_XMC4_STATUS_OK;
 80287aa:	2300      	movs	r3, #0
 80287ac:	70fb      	strb	r3, [r7, #3]
  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 80287ae:	4b18      	ldr	r3, [pc, #96]	; (8028810 <E_EEPROM_XMC4_lWriteToFlash+0x6c>)
 80287b0:	681b      	ldr	r3, [r3, #0]
 80287b2:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 80287b4:	4b17      	ldr	r3, [pc, #92]	; (8028814 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 80287b6:	60bb      	str	r3, [r7, #8]

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 80287b8:	4817      	ldr	r0, [pc, #92]	; (8028818 <E_EEPROM_XMC4_lWriteToFlash+0x74>)
 80287ba:	f000 f8c5 	bl	8028948 <E_EEPROM_XMC4_lCalculateCRC>
 80287be:	4602      	mov	r2, r0
 80287c0:	4b14      	ldr	r3, [pc, #80]	; (8028814 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 80287c2:	601a      	str	r2, [r3, #0]
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 80287c4:	2300      	movs	r3, #0
 80287c6:	607b      	str	r3, [r7, #4]
 80287c8:	e019      	b.n	80287fe <E_EEPROM_XMC4_lWriteToFlash+0x5a>
  {
    XMC_FLASH_ClearStatus();
 80287ca:	f7fd fe95 	bl	80264f8 <XMC_FLASH_ClearStatus>

    XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 80287ce:	68f8      	ldr	r0, [r7, #12]
 80287d0:	68b9      	ldr	r1, [r7, #8]
 80287d2:	f7fd fea5 	bl	8026520 <XMC_FLASH_ProgramPage>

    if (XMC_FLASH_GetStatus() == (uint32_t)XMC_FLASH_STATUS_VERIFY_ERROR)
 80287d6:	f7fd fe95 	bl	8026504 <XMC_FLASH_GetStatus>
 80287da:	4603      	mov	r3, r0
 80287dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80287e0:	d102      	bne.n	80287e8 <E_EEPROM_XMC4_lWriteToFlash+0x44>
    {
      status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 80287e2:	2303      	movs	r3, #3
 80287e4:	70fb      	strb	r3, [r7, #3]
      break;
 80287e6:	e00d      	b.n	8028804 <E_EEPROM_XMC4_lWriteToFlash+0x60>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 80287e8:	68bb      	ldr	r3, [r7, #8]
 80287ea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80287ee:	60bb      	str	r3, [r7, #8]
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 80287f0:	68fb      	ldr	r3, [r7, #12]
 80287f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80287f6:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 80287f8:	687b      	ldr	r3, [r7, #4]
 80287fa:	3301      	adds	r3, #1
 80287fc:	607b      	str	r3, [r7, #4]
 80287fe:	687b      	ldr	r3, [r7, #4]
 8028800:	2b0f      	cmp	r3, #15
 8028802:	d9e2      	bls.n	80287ca <E_EEPROM_XMC4_lWriteToFlash+0x26>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
  }

  return (status);
 8028804:	78fb      	ldrb	r3, [r7, #3]
}
 8028806:	4618      	mov	r0, r3
 8028808:	3710      	adds	r7, #16
 802880a:	46bd      	mov	sp, r7
 802880c:	bd80      	pop	{r7, pc}
 802880e:	bf00      	nop
 8028810:	1fff155c 	.word	0x1fff155c
 8028814:	1fff1628 	.word	0x1fff1628
 8028818:	1fff162c 	.word	0x1fff162c

0802881c <E_EEPROM_XMC4_lInitReadSectorInfo>:



static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
{
 802881c:	b580      	push	{r7, lr}
 802881e:	b08a      	sub	sp, #40	; 0x28
 8028820:	af00      	add	r7, sp, #0
 8028822:	6078      	str	r0, [r7, #4]
  uint32_t block_cycle_count;
  uint32_t written_crc;
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802882a:	3304      	adds	r3, #4
 802882c:	039b      	lsls	r3, r3, #14
 802882e:	61fb      	str	r3, [r7, #28]
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8028830:	69fb      	ldr	r3, [r7, #28]
 8028832:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8028836:	627b      	str	r3, [r7, #36]	; 0x24
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 8028838:	2300      	movs	r3, #0
 802883a:	623b      	str	r3, [r7, #32]

  do
  {
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
 802883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802883e:	61bb      	str	r3, [r7, #24]
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8028840:	69bb      	ldr	r3, [r7, #24]
 8028842:	685b      	ldr	r3, [r3, #4]
 8028844:	617b      	str	r3, [r7, #20]

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 8028846:	697b      	ldr	r3, [r7, #20]
 8028848:	2b00      	cmp	r3, #0
 802884a:	d02e      	beq.n	80288aa <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 802884c:	4b1c      	ldr	r3, [pc, #112]	; (80288c0 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 802884e:	68da      	ldr	r2, [r3, #12]
 8028850:	687b      	ldr	r3, [r7, #4]
 8028852:	2101      	movs	r1, #1
 8028854:	fa01 f303 	lsl.w	r3, r1, r3
 8028858:	4313      	orrs	r3, r2
 802885a:	4a19      	ldr	r2, [pc, #100]	; (80288c0 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 802885c:	60d3      	str	r3, [r2, #12]

      /* If this is the first non empty block identified, then store the address as next free address */
      if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 802885e:	6a3b      	ldr	r3, [r7, #32]
 8028860:	2b00      	cmp	r3, #0
 8028862:	d103      	bne.n	802886c <E_EEPROM_XMC4_lInitReadSectorInfo+0x50>
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8028864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802886a:	623b      	str	r3, [r7, #32]
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 802886c:	69bb      	ldr	r3, [r7, #24]
 802886e:	681b      	ldr	r3, [r3, #0]
 8028870:	613b      	str	r3, [r7, #16]
      /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
      calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8028872:	69bb      	ldr	r3, [r7, #24]
 8028874:	3304      	adds	r3, #4
 8028876:	4618      	mov	r0, r3
 8028878:	f000 f866 	bl	8028948 <E_EEPROM_XMC4_lCalculateCRC>
 802887c:	60f8      	str	r0, [r7, #12]

      if (calculated_crc == written_crc)
 802887e:	68fa      	ldr	r2, [r7, #12]
 8028880:	693b      	ldr	r3, [r7, #16]
 8028882:	429a      	cmp	r2, r3
 8028884:	d111      	bne.n	80288aa <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
      {
        /* If both CRC matches and the current block cycle counter is greater than the previous recorded value,
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 8028886:	4b0f      	ldr	r3, [pc, #60]	; (80288c4 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8028888:	685a      	ldr	r2, [r3, #4]
 802888a:	697b      	ldr	r3, [r7, #20]
 802888c:	429a      	cmp	r2, r3
 802888e:	d20c      	bcs.n	80288aa <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 8028890:	4a0c      	ldr	r2, [pc, #48]	; (80288c4 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8028892:	697b      	ldr	r3, [r7, #20]
 8028894:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.current_sector = sector;
 8028896:	4a0a      	ldr	r2, [pc, #40]	; (80288c0 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8028898:	687b      	ldr	r3, [r7, #4]
 802889a:	6093      	str	r3, [r2, #8]
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 802889c:	4a08      	ldr	r2, [pc, #32]	; (80288c0 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 802889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288a0:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 80288a2:	4a07      	ldr	r2, [pc, #28]	; (80288c0 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 80288a4:	6a3b      	ldr	r3, [r7, #32]
 80288a6:	6013      	str	r3, [r2, #0]
          break;
 80288a8:	e007      	b.n	80288ba <E_EEPROM_XMC4_lInitReadSectorInfo+0x9e>
        }
      }
    }
    /* Move the block read address to one block size up starting from the bottom of sector */
    block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 80288aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288ac:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80288b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Iterate the read process until the block read address crosses sector start address or a
   * latest valid block is identified.
   */
  } while ( block_read_addr >= sector_start_addr );
 80288b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80288b4:	69fb      	ldr	r3, [r7, #28]
 80288b6:	429a      	cmp	r2, r3
 80288b8:	d2c0      	bcs.n	802883c <E_EEPROM_XMC4_lInitReadSectorInfo+0x20>

}
 80288ba:	3728      	adds	r7, #40	; 0x28
 80288bc:	46bd      	mov	sp, r7
 80288be:	bd80      	pop	{r7, pc}
 80288c0:	1fff155c 	.word	0x1fff155c
 80288c4:	1fff1628 	.word	0x1fff1628

080288c8 <E_EEPROM_XMC4_lInitEraseStateMachine>:



static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
{
 80288c8:	b580      	push	{r7, lr}
 80288ca:	b084      	sub	sp, #16
 80288cc:	af00      	add	r7, sp, #0
  uint32_t sector_count;
  uint32_t sector_start_addr;
  E_EEPROM_XMC4_STATUS_t status ;

  status = E_EEPROM_XMC4_STATUS_OK;
 80288ce:	2300      	movs	r3, #0
 80288d0:	72fb      	strb	r3, [r7, #11]
  sector_count = 0U;
 80288d2:	2300      	movs	r3, #0
 80288d4:	60fb      	str	r3, [r7, #12]

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 80288d6:	4b1b      	ldr	r3, [pc, #108]	; (8028944 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 80288d8:	689a      	ldr	r2, [r3, #8]
 80288da:	68fb      	ldr	r3, [r7, #12]
 80288dc:	429a      	cmp	r2, r3
 80288de:	d026      	beq.n	802892e <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 80288e0:	4b18      	ldr	r3, [pc, #96]	; (8028944 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 80288e2:	68da      	ldr	r2, [r3, #12]
 80288e4:	68fb      	ldr	r3, [r7, #12]
 80288e6:	fa22 f303 	lsr.w	r3, r2, r3
 80288ea:	f003 0301 	and.w	r3, r3, #1
 80288ee:	2b00      	cmp	r3, #0
 80288f0:	d01d      	beq.n	802892e <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80288f8:	3304      	adds	r3, #4
 80288fa:	039b      	lsls	r3, r3, #14
 80288fc:	607b      	str	r3, [r7, #4]

        XMC_FLASH_ClearStatus();
 80288fe:	f7fd fdfb 	bl	80264f8 <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8028902:	687b      	ldr	r3, [r7, #4]
 8028904:	4618      	mov	r0, r3
 8028906:	f7fd fe3f 	bl	8026588 <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 802890a:	f7fd fdfb 	bl	8026504 <XMC_FLASH_GetStatus>
 802890e:	4603      	mov	r3, r0
 8028910:	2b20      	cmp	r3, #32
 8028912:	d002      	beq.n	802891a <E_EEPROM_XMC4_lInitEraseStateMachine+0x52>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 8028914:	2304      	movs	r3, #4
 8028916:	72fb      	strb	r3, [r7, #11]
          break;
 8028918:	e00f      	b.n	802893a <E_EEPROM_XMC4_lInitEraseStateMachine+0x72>
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 802891a:	4b0a      	ldr	r3, [pc, #40]	; (8028944 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 802891c:	68da      	ldr	r2, [r3, #12]
 802891e:	68fb      	ldr	r3, [r7, #12]
 8028920:	2101      	movs	r1, #1
 8028922:	fa01 f303 	lsl.w	r3, r1, r3
 8028926:	43db      	mvns	r3, r3
 8028928:	4013      	ands	r3, r2
 802892a:	4a06      	ldr	r2, [pc, #24]	; (8028944 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 802892c:	60d3      	str	r3, [r2, #12]
      }
    }
    sector_count++;
 802892e:	68fb      	ldr	r3, [r7, #12]
 8028930:	3301      	adds	r3, #1
 8028932:	60fb      	str	r3, [r7, #12]
    /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sector erase errors.*/
  } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 8028934:	68fb      	ldr	r3, [r7, #12]
 8028936:	2b03      	cmp	r3, #3
 8028938:	d9cd      	bls.n	80288d6 <E_EEPROM_XMC4_lInitEraseStateMachine+0xe>

  return (status);
 802893a:	7afb      	ldrb	r3, [r7, #11]
}
 802893c:	4618      	mov	r0, r3
 802893e:	3710      	adds	r7, #16
 8028940:	46bd      	mov	sp, r7
 8028942:	bd80      	pop	{r7, pc}
 8028944:	1fff155c 	.word	0x1fff155c

08028948 <E_EEPROM_XMC4_lCalculateCRC>:

/* Local function to CRC */
static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
{
 8028948:	b580      	push	{r7, lr}
 802894a:	b084      	sub	sp, #16
 802894c:	af00      	add	r7, sp, #0
 802894e:	6078      	str	r0, [r7, #4]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 8028950:	4808      	ldr	r0, [pc, #32]	; (8028974 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8028952:	2100      	movs	r1, #0
 8028954:	f7ff fdf0 	bl	8028538 <XMC_FCE_InitializeSeedValue>

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 8028958:	f107 030c 	add.w	r3, r7, #12
 802895c:	4805      	ldr	r0, [pc, #20]	; (8028974 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 802895e:	6879      	ldr	r1, [r7, #4]
 8028960:	f640 72fc 	movw	r2, #4092	; 0xffc
 8028964:	f7fe ffa8 	bl	80278b8 <XMC_FCE_CalculateCRC32>

  return (result);
 8028968:	68fb      	ldr	r3, [r7, #12]
}
 802896a:	4618      	mov	r0, r3
 802896c:	3710      	adds	r7, #16
 802896e:	46bd      	mov	sp, r7
 8028970:	bd80      	pop	{r7, pc}
 8028972:	bf00      	nop
 8028974:	0802abd8 	.word	0x0802abd8

08028978 <E_EEPROM_XMC4_lCopyFlashToRam>:



/* Local function to copy data blocks from FLASH to RAM */
static void E_EEPROM_XMC4_lCopyFlashToRam(void)
{
 8028978:	b480      	push	{r7}
 802897a:	b085      	sub	sp, #20
 802897c:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 802897e:	4b0f      	ldr	r3, [pc, #60]	; (80289bc <E_EEPROM_XMC4_lCopyFlashToRam+0x44>)
 8028980:	685b      	ldr	r3, [r3, #4]
 8028982:	60bb      	str	r3, [r7, #8]
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 8028984:	4b0e      	ldr	r3, [pc, #56]	; (80289c0 <E_EEPROM_XMC4_lCopyFlashToRam+0x48>)
 8028986:	607b      	str	r3, [r7, #4]

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 8028988:	2300      	movs	r3, #0
 802898a:	60fb      	str	r3, [r7, #12]
 802898c:	e00c      	b.n	80289a8 <E_EEPROM_XMC4_lCopyFlashToRam+0x30>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 802898e:	68fb      	ldr	r3, [r7, #12]
 8028990:	009b      	lsls	r3, r3, #2
 8028992:	687a      	ldr	r2, [r7, #4]
 8028994:	4413      	add	r3, r2
 8028996:	68fa      	ldr	r2, [r7, #12]
 8028998:	0092      	lsls	r2, r2, #2
 802899a:	68b9      	ldr	r1, [r7, #8]
 802899c:	440a      	add	r2, r1
 802899e:	6812      	ldr	r2, [r2, #0]
 80289a0:	601a      	str	r2, [r3, #0]
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 80289a2:	68fb      	ldr	r3, [r7, #12]
 80289a4:	3301      	adds	r3, #1
 80289a6:	60fb      	str	r3, [r7, #12]
 80289a8:	68fb      	ldr	r3, [r7, #12]
 80289aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80289ae:	d3ee      	bcc.n	802898e <E_EEPROM_XMC4_lCopyFlashToRam+0x16>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
  }
}
 80289b0:	3714      	adds	r7, #20
 80289b2:	46bd      	mov	sp, r7
 80289b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289b8:	4770      	bx	lr
 80289ba:	bf00      	nop
 80289bc:	1fff155c 	.word	0x1fff155c
 80289c0:	1fff1628 	.word	0x1fff1628

080289c4 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 80289c4:	b580      	push	{r7, lr}
 80289c6:	b082      	sub	sp, #8
 80289c8:	af00      	add	r7, sp, #0
 80289ca:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 80289cc:	687b      	ldr	r3, [r7, #4]
 80289ce:	7b5b      	ldrb	r3, [r3, #13]
 80289d0:	f083 0301 	eor.w	r3, r3, #1
 80289d4:	b2db      	uxtb	r3, r3
 80289d6:	2b00      	cmp	r3, #0
 80289d8:	d012      	beq.n	8028a00 <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 80289da:	687b      	ldr	r3, [r7, #4]
 80289dc:	6819      	ldr	r1, [r3, #0]
 80289de:	687b      	ldr	r3, [r7, #4]
 80289e0:	7b1a      	ldrb	r2, [r3, #12]
 80289e2:	687b      	ldr	r3, [r7, #4]
 80289e4:	685b      	ldr	r3, [r3, #4]
 80289e6:	4608      	mov	r0, r1
 80289e8:	4611      	mov	r1, r2
 80289ea:	461a      	mov	r2, r3
 80289ec:	f7fe ff26 	bl	802783c <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 80289f0:	687b      	ldr	r3, [r7, #4]
 80289f2:	689b      	ldr	r3, [r3, #8]
 80289f4:	4618      	mov	r0, r3
 80289f6:	f7fd ff43 	bl	8026880 <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 80289fa:	687b      	ldr	r3, [r7, #4]
 80289fc:	2201      	movs	r2, #1
 80289fe:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 8028a00:	2300      	movs	r3, #0
}
 8028a02:	4618      	mov	r0, r3
 8028a04:	3708      	adds	r7, #8
 8028a06:	46bd      	mov	sp, r7
 8028a08:	bd80      	pop	{r7, pc}
 8028a0a:	bf00      	nop

08028a0c <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 8028a0c:	b580      	push	{r7, lr}
 8028a0e:	b082      	sub	sp, #8
 8028a10:	af00      	add	r7, sp, #0
 8028a12:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8028a14:	687b      	ldr	r3, [r7, #4]
 8028a16:	7b1b      	ldrb	r3, [r3, #12]
 8028a18:	f083 0301 	eor.w	r3, r3, #1
 8028a1c:	b2db      	uxtb	r3, r3
 8028a1e:	2b00      	cmp	r3, #0
 8028a20:	d00d      	beq.n	8028a3e <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 8028a22:	687b      	ldr	r3, [r7, #4]
 8028a24:	6819      	ldr	r1, [r3, #0]
 8028a26:	687b      	ldr	r3, [r7, #4]
 8028a28:	791a      	ldrb	r2, [r3, #4]
 8028a2a:	687b      	ldr	r3, [r7, #4]
 8028a2c:	689b      	ldr	r3, [r3, #8]
 8028a2e:	4608      	mov	r0, r1
 8028a30:	4611      	mov	r1, r2
 8028a32:	461a      	mov	r2, r3
 8028a34:	f7fe fedc 	bl	80277f0 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 8028a38:	687b      	ldr	r3, [r7, #4]
 8028a3a:	2201      	movs	r2, #1
 8028a3c:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 8028a3e:	2300      	movs	r3, #0
}
 8028a40:	4618      	mov	r0, r3
 8028a42:	3708      	adds	r7, #8
 8028a44:	46bd      	mov	sp, r7
 8028a46:	bd80      	pop	{r7, pc}

08028a48 <ECAT_SSC_Init>:

/*
 * This function intialize's the EtherCAT slave controller.
 */
ECAT_SSC_STATUS_t ECAT_SSC_Init(ECAT_SSC_t *handle)
{
 8028a48:	b580      	push	{r7, lr}
 8028a4a:	b084      	sub	sp, #16
 8028a4c:	af00      	add	r7, sp, #0
 8028a4e:	6078      	str	r0, [r7, #4]
  uint32_t status;

  status = (uint32_t)ECAT_SSC_STATUS_FAILURE;
 8028a50:	2301      	movs	r3, #1
 8028a52:	60fb      	str	r3, [r7, #12]

  /* Initialize the Flash Emulated EEPROM and copy the latest content to the internal working RAM buffer*/
  status = (uint32_t)E_EEPROM_XMC4_Init(handle->eeprom);
 8028a54:	687b      	ldr	r3, [r7, #4]
 8028a56:	681b      	ldr	r3, [r3, #0]
 8028a58:	4618      	mov	r0, r3
 8028a5a:	f7ff fd7b 	bl	8028554 <E_EEPROM_XMC4_Init>
 8028a5e:	4603      	mov	r3, r0
 8028a60:	60fb      	str	r3, [r7, #12]

  if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8028a62:	68fb      	ldr	r3, [r7, #12]
 8028a64:	2b00      	cmp	r3, #0
 8028a66:	d147      	bne.n	8028af8 <ECAT_SSC_Init+0xb0>
  {
    /* Check if the slave configuration data is available in the Flash Emulated EEPROM*/
    if (E_EEPROM_XMC4_IsFlashEmpty())
 8028a68:	f7ff fe88 	bl	802877c <E_EEPROM_XMC4_IsFlashEmpty>
 8028a6c:	4603      	mov	r3, r0
 8028a6e:	2b00      	cmp	r3, #0
 8028a70:	d00a      	beq.n	8028a88 <ECAT_SSC_Init+0x40>
    {
      /* Prepare the default configuration out of the SSC for EEPROM */
      E_EEPROM_XMC4_WriteArray(0U, aEepromData, (uint16_t)ESC_EEPROM_SIZE);
 8028a72:	2000      	movs	r0, #0
 8028a74:	4923      	ldr	r1, [pc, #140]	; (8028b04 <ECAT_SSC_Init+0xbc>)
 8028a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8028a7a:	f7ff fdd5 	bl	8028628 <E_EEPROM_XMC4_WriteArray>

      /* Program the RAM contents to Emulated EEPROM*/
      status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 8028a7e:	f7ff fe2b 	bl	80286d8 <E_EEPROM_XMC4_UpdateFlashContents>
 8028a82:	4603      	mov	r3, r0
 8028a84:	60fb      	str	r3, [r7, #12]
 8028a86:	e005      	b.n	8028a94 <ECAT_SSC_Init+0x4c>
    }
    else
    {
      /* Read the latest contents from RAM buffer which has the latest contents of EEPROM */
      E_EEPROM_XMC4_ReadArray(0U,aEepromData,(uint16_t)ESC_EEPROM_SIZE);
 8028a88:	2000      	movs	r0, #0
 8028a8a:	491e      	ldr	r1, [pc, #120]	; (8028b04 <ECAT_SSC_Init+0xbc>)
 8028a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8028a90:	f7ff fdfc 	bl	802868c <E_EEPROM_XMC4_ReadArray>
    }

    /* Initialize the 1 millisecond timer module*/
    if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8028a94:	68fb      	ldr	r3, [r7, #12]
 8028a96:	2b00      	cmp	r3, #0
 8028a98:	d12e      	bne.n	8028af8 <ECAT_SSC_Init+0xb0>
    {
      status = (uint32_t)TIMER_Init(handle->timer);
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	685b      	ldr	r3, [r3, #4]
 8028a9e:	4618      	mov	r0, r3
 8028aa0:	f7fe fffe 	bl	8027aa0 <TIMER_Init>
 8028aa4:	4603      	mov	r3, r0
 8028aa6:	60fb      	str	r3, [r7, #12]
      /* Initialize the timer interrupt handler*/
      if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8028aa8:	68fb      	ldr	r3, [r7, #12]
 8028aaa:	2b00      	cmp	r3, #0
 8028aac:	d124      	bne.n	8028af8 <ECAT_SSC_Init+0xb0>
      {
        status = (uint32_t)INTERRUPT_Init(handle->timer_irqhandler);
 8028aae:	687b      	ldr	r3, [r7, #4]
 8028ab0:	689b      	ldr	r3, [r3, #8]
 8028ab2:	4618      	mov	r0, r3
 8028ab4:	f7ff fc7c 	bl	80283b0 <INTERRUPT_Init>
 8028ab8:	4603      	mov	r3, r0
 8028aba:	60fb      	str	r3, [r7, #12]
        /* Call Beckhoff HW abstraction layer API to initialize the XMC4800 ESC and supporting functions*/
        if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8028abc:	68fb      	ldr	r3, [r7, #12]
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d11a      	bne.n	8028af8 <ECAT_SSC_Init+0xb0>
        {
          status = HW_Init();
 8028ac2:	f000 f92f 	bl	8028d24 <HW_Init>
 8028ac6:	4603      	mov	r3, r0
 8028ac8:	60fb      	str	r3, [r7, #12]
          /* Call Beckhoff HW abstraction layer API to start the stack interface initialization*/
          if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8028aca:	68fb      	ldr	r3, [r7, #12]
 8028acc:	2b00      	cmp	r3, #0
 8028ace:	d113      	bne.n	8028af8 <ECAT_SSC_Init+0xb0>
          {
            status = MainInit();
 8028ad0:	f7f8 fab0 	bl	8021034 <MainInit>
 8028ad4:	4603      	mov	r3, r0
 8028ad6:	60fb      	str	r3, [r7, #12]
            if (status == (uint32_t)ECAT_SSC_STATUS_SUCCESS)
 8028ad8:	68fb      	ldr	r3, [r7, #12]
 8028ada:	2b00      	cmp	r3, #0
 8028adc:	d10c      	bne.n	8028af8 <ECAT_SSC_Init+0xb0>
            {
           	  pAPPL_EEPROM_Reload = HW_EepromReload;
 8028ade:	4b0a      	ldr	r3, [pc, #40]	; (8028b08 <ECAT_SSC_Init+0xc0>)
 8028ae0:	4a0a      	ldr	r2, [pc, #40]	; (8028b0c <ECAT_SSC_Init+0xc4>)
 8028ae2:	601a      	str	r2, [r3, #0]
              pAPPL_EEPROM_Write  = HW_EepromWrite;
 8028ae4:	4b0a      	ldr	r3, [pc, #40]	; (8028b10 <ECAT_SSC_Init+0xc8>)
 8028ae6:	4a0b      	ldr	r2, [pc, #44]	; (8028b14 <ECAT_SSC_Init+0xcc>)
 8028ae8:	601a      	str	r2, [r3, #0]

              /*Start the 1 millisec timer*/
              status = (uint32_t)TIMER_Start(handle->timer);
 8028aea:	687b      	ldr	r3, [r7, #4]
 8028aec:	685b      	ldr	r3, [r3, #4]
 8028aee:	4618      	mov	r0, r3
 8028af0:	f7fe fff4 	bl	8027adc <TIMER_Start>
 8028af4:	4603      	mov	r3, r0
 8028af6:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ((ECAT_SSC_STATUS_t)status);
 8028af8:	68fb      	ldr	r3, [r7, #12]
 8028afa:	b2db      	uxtb	r3, r3
}
 8028afc:	4618      	mov	r0, r3
 8028afe:	3710      	adds	r7, #16
 8028b00:	46bd      	mov	sp, r7
 8028b02:	bd80      	pop	{r7, pc}
 8028b04:	1fff0c40 	.word	0x1fff0c40
 8028b08:	1fff2708 	.word	0x1fff2708
 8028b0c:	0802912d 	.word	0x0802912d
 8028b10:	1fff2654 	.word	0x1fff2654
 8028b14:	08029099 	.word	0x08029099

08028b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8028b18:	b480      	push	{r7}
 8028b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8028b1c:	4b04      	ldr	r3, [pc, #16]	; (8028b30 <__NVIC_GetPriorityGrouping+0x18>)
 8028b1e:	68db      	ldr	r3, [r3, #12]
 8028b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8028b24:	0a1b      	lsrs	r3, r3, #8
}
 8028b26:	4618      	mov	r0, r3
 8028b28:	46bd      	mov	sp, r7
 8028b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b2e:	4770      	bx	lr
 8028b30:	e000ed00 	.word	0xe000ed00

08028b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8028b34:	b480      	push	{r7}
 8028b36:	b083      	sub	sp, #12
 8028b38:	af00      	add	r7, sp, #0
 8028b3a:	4603      	mov	r3, r0
 8028b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8028b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028b42:	2b00      	cmp	r3, #0
 8028b44:	db0b      	blt.n	8028b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8028b46:	4908      	ldr	r1, [pc, #32]	; (8028b68 <__NVIC_EnableIRQ+0x34>)
 8028b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028b4c:	095b      	lsrs	r3, r3, #5
 8028b4e:	79fa      	ldrb	r2, [r7, #7]
 8028b50:	f002 021f 	and.w	r2, r2, #31
 8028b54:	2001      	movs	r0, #1
 8028b56:	fa00 f202 	lsl.w	r2, r0, r2
 8028b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8028b5e:	370c      	adds	r7, #12
 8028b60:	46bd      	mov	sp, r7
 8028b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b66:	4770      	bx	lr
 8028b68:	e000e100 	.word	0xe000e100

08028b6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8028b6c:	b480      	push	{r7}
 8028b6e:	b083      	sub	sp, #12
 8028b70:	af00      	add	r7, sp, #0
 8028b72:	4603      	mov	r3, r0
 8028b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8028b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028b7a:	2b00      	cmp	r3, #0
 8028b7c:	db10      	blt.n	8028ba0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8028b7e:	490b      	ldr	r1, [pc, #44]	; (8028bac <__NVIC_DisableIRQ+0x40>)
 8028b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028b84:	095b      	lsrs	r3, r3, #5
 8028b86:	79fa      	ldrb	r2, [r7, #7]
 8028b88:	f002 021f 	and.w	r2, r2, #31
 8028b8c:	2001      	movs	r0, #1
 8028b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8028b92:	3320      	adds	r3, #32
 8028b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8028b98:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8028b9c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8028ba0:	370c      	adds	r7, #12
 8028ba2:	46bd      	mov	sp, r7
 8028ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ba8:	4770      	bx	lr
 8028baa:	bf00      	nop
 8028bac:	e000e100 	.word	0xe000e100

08028bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8028bb0:	b480      	push	{r7}
 8028bb2:	b083      	sub	sp, #12
 8028bb4:	af00      	add	r7, sp, #0
 8028bb6:	4603      	mov	r3, r0
 8028bb8:	6039      	str	r1, [r7, #0]
 8028bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8028bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028bc0:	2b00      	cmp	r3, #0
 8028bc2:	db0a      	blt.n	8028bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8028bc4:	490d      	ldr	r1, [pc, #52]	; (8028bfc <__NVIC_SetPriority+0x4c>)
 8028bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028bca:	683a      	ldr	r2, [r7, #0]
 8028bcc:	b2d2      	uxtb	r2, r2
 8028bce:	0092      	lsls	r2, r2, #2
 8028bd0:	b2d2      	uxtb	r2, r2
 8028bd2:	440b      	add	r3, r1
 8028bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8028bd8:	e00a      	b.n	8028bf0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8028bda:	4909      	ldr	r1, [pc, #36]	; (8028c00 <__NVIC_SetPriority+0x50>)
 8028bdc:	79fb      	ldrb	r3, [r7, #7]
 8028bde:	f003 030f 	and.w	r3, r3, #15
 8028be2:	3b04      	subs	r3, #4
 8028be4:	683a      	ldr	r2, [r7, #0]
 8028be6:	b2d2      	uxtb	r2, r2
 8028be8:	0092      	lsls	r2, r2, #2
 8028bea:	b2d2      	uxtb	r2, r2
 8028bec:	440b      	add	r3, r1
 8028bee:	761a      	strb	r2, [r3, #24]
  }
}
 8028bf0:	370c      	adds	r7, #12
 8028bf2:	46bd      	mov	sp, r7
 8028bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bf8:	4770      	bx	lr
 8028bfa:	bf00      	nop
 8028bfc:	e000e100 	.word	0xe000e100
 8028c00:	e000ed00 	.word	0xe000ed00

08028c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8028c04:	b480      	push	{r7}
 8028c06:	b089      	sub	sp, #36	; 0x24
 8028c08:	af00      	add	r7, sp, #0
 8028c0a:	60f8      	str	r0, [r7, #12]
 8028c0c:	60b9      	str	r1, [r7, #8]
 8028c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8028c10:	68fb      	ldr	r3, [r7, #12]
 8028c12:	f003 0307 	and.w	r3, r3, #7
 8028c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8028c18:	69fb      	ldr	r3, [r7, #28]
 8028c1a:	f1c3 0307 	rsb	r3, r3, #7
 8028c1e:	2b06      	cmp	r3, #6
 8028c20:	bf28      	it	cs
 8028c22:	2306      	movcs	r3, #6
 8028c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8028c26:	69fb      	ldr	r3, [r7, #28]
 8028c28:	3306      	adds	r3, #6
 8028c2a:	2b06      	cmp	r3, #6
 8028c2c:	d902      	bls.n	8028c34 <NVIC_EncodePriority+0x30>
 8028c2e:	69fb      	ldr	r3, [r7, #28]
 8028c30:	3b01      	subs	r3, #1
 8028c32:	e000      	b.n	8028c36 <NVIC_EncodePriority+0x32>
 8028c34:	2300      	movs	r3, #0
 8028c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8028c38:	69bb      	ldr	r3, [r7, #24]
 8028c3a:	2201      	movs	r2, #1
 8028c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8028c40:	1e5a      	subs	r2, r3, #1
 8028c42:	68bb      	ldr	r3, [r7, #8]
 8028c44:	401a      	ands	r2, r3
 8028c46:	697b      	ldr	r3, [r7, #20]
 8028c48:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8028c4a:	697b      	ldr	r3, [r7, #20]
 8028c4c:	2101      	movs	r1, #1
 8028c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8028c52:	1e59      	subs	r1, r3, #1
 8028c54:	687b      	ldr	r3, [r7, #4]
 8028c56:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8028c58:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8028c5a:	4618      	mov	r0, r3
 8028c5c:	3724      	adds	r7, #36	; 0x24
 8028c5e:	46bd      	mov	sp, r7
 8028c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c64:	4770      	bx	lr
 8028c66:	bf00      	nop

08028c68 <XMC_ECAT_SetPortControl>:
 * \par
 * The function sets the port control by writing the configuration into the ECAT CON register.
 *
 */
__STATIC_INLINE void XMC_ECAT_SetPortControl(const XMC_ECAT_PORT_CTRL_t port_ctrl)
{
 8028c68:	b480      	push	{r7}
 8028c6a:	b085      	sub	sp, #20
 8028c6c:	af00      	add	r7, sp, #0
 8028c6e:	1d3b      	adds	r3, r7, #4
 8028c70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ECAT0_CON->CON = (uint32_t)port_ctrl.common.raw;
 8028c74:	4a06      	ldr	r2, [pc, #24]	; (8028c90 <XMC_ECAT_SetPortControl+0x28>)
 8028c76:	687b      	ldr	r3, [r7, #4]
 8028c78:	6013      	str	r3, [r2, #0]
  ECAT0_CON->CONP0 = (uint32_t)port_ctrl.port0.raw;
 8028c7a:	4a05      	ldr	r2, [pc, #20]	; (8028c90 <XMC_ECAT_SetPortControl+0x28>)
 8028c7c:	68bb      	ldr	r3, [r7, #8]
 8028c7e:	6053      	str	r3, [r2, #4]
  ECAT0_CON->CONP1 = (uint32_t)port_ctrl.port1.raw;
 8028c80:	4a03      	ldr	r2, [pc, #12]	; (8028c90 <XMC_ECAT_SetPortControl+0x28>)
 8028c82:	68fb      	ldr	r3, [r7, #12]
 8028c84:	6093      	str	r3, [r2, #8]
}
 8028c86:	3714      	adds	r7, #20
 8028c88:	46bd      	mov	sp, r7
 8028c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c8e:	4770      	bx	lr
 8028c90:	500041b0 	.word	0x500041b0

08028c94 <HW_EscRead>:
 * \par<b>Description:</b><br>
 * Reads from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscRead(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8028c94:	b580      	push	{r7, lr}
 8028c96:	b082      	sub	sp, #8
 8028c98:	af00      	add	r7, sp, #0
 8028c9a:	6078      	str	r0, [r7, #4]
 8028c9c:	460b      	mov	r3, r1
 8028c9e:	807b      	strh	r3, [r7, #2]
 8028ca0:	4613      	mov	r3, r2
 8028ca2:	803b      	strh	r3, [r7, #0]
  memcpy(pData, &pEsc[Address], Len);
 8028ca4:	887b      	ldrh	r3, [r7, #2]
 8028ca6:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8028caa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8028cae:	883a      	ldrh	r2, [r7, #0]
 8028cb0:	6878      	ldr	r0, [r7, #4]
 8028cb2:	4619      	mov	r1, r3
 8028cb4:	f001 f8ca 	bl	8029e4c <memcpy>
}
 8028cb8:	3708      	adds	r7, #8
 8028cba:	46bd      	mov	sp, r7
 8028cbc:	bd80      	pop	{r7, pc}
 8028cbe:	bf00      	nop

08028cc0 <HW_EscWrite>:
 * \par<b>Description:</b><br>
 * Writes from the EtherCAT Slave Controller. This function is used to access ESC registers and the DPRAM area.
 *
 */
__STATIC_INLINE void HW_EscWrite(MEM_ADDR *pData, UINT16 Address, UINT16 Len)
{
 8028cc0:	b580      	push	{r7, lr}
 8028cc2:	b082      	sub	sp, #8
 8028cc4:	af00      	add	r7, sp, #0
 8028cc6:	6078      	str	r0, [r7, #4]
 8028cc8:	460b      	mov	r3, r1
 8028cca:	807b      	strh	r3, [r7, #2]
 8028ccc:	4613      	mov	r3, r2
 8028cce:	803b      	strh	r3, [r7, #0]
  memcpy(&pEsc[Address], pData, Len);
 8028cd0:	887b      	ldrh	r3, [r7, #2]
 8028cd2:	f103 43a8 	add.w	r3, r3, #1409286144	; 0x54000000
 8028cd6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8028cda:	883a      	ldrh	r2, [r7, #0]
 8028cdc:	4618      	mov	r0, r3
 8028cde:	6879      	ldr	r1, [r7, #4]
 8028ce0:	f001 f8b4 	bl	8029e4c <memcpy>
}
 8028ce4:	3708      	adds	r7, #8
 8028ce6:	46bd      	mov	sp, r7
 8028ce8:	bd80      	pop	{r7, pc}
 8028cea:	bf00      	nop

08028cec <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8028cec:	b580      	push	{r7, lr}
 8028cee:	b082      	sub	sp, #8
 8028cf0:	af00      	add	r7, sp, #0
 8028cf2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8028cf4:	687b      	ldr	r3, [r7, #4]
 8028cf6:	781b      	ldrb	r3, [r3, #0]
 8028cf8:	b25b      	sxtb	r3, r3
 8028cfa:	4618      	mov	r0, r3
 8028cfc:	f7ff ff1a 	bl	8028b34 <__NVIC_EnableIRQ>
}
 8028d00:	3708      	adds	r7, #8
 8028d02:	46bd      	mov	sp, r7
 8028d04:	bd80      	pop	{r7, pc}
 8028d06:	bf00      	nop

08028d08 <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 8028d08:	b580      	push	{r7, lr}
 8028d0a:	b082      	sub	sp, #8
 8028d0c:	af00      	add	r7, sp, #0
 8028d0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 8028d10:	687b      	ldr	r3, [r7, #4]
 8028d12:	781b      	ldrb	r3, [r3, #0]
 8028d14:	b25b      	sxtb	r3, r3
 8028d16:	4618      	mov	r0, r3
 8028d18:	f7ff ff28 	bl	8028b6c <__NVIC_DisableIRQ>
}
 8028d1c:	3708      	adds	r7, #8
 8028d1e:	46bd      	mov	sp, r7
 8028d20:	bd80      	pop	{r7, pc}
 8028d22:	bf00      	nop

08028d24 <HW_Init>:
  __set_PRIMASK(status);
}

/* EtherCAT Beckhoff HW abstraction layer interface API to initialize XMC ESC */
UINT16 HW_Init(void)
{
 8028d24:	b580      	push	{r7, lr}
 8028d26:	b088      	sub	sp, #32
 8028d28:	af00      	add	r7, sp, #0
  uint8_t i;
  XMC_ECAT_PORT_CTRL_t port_control;
  port_control.common.raw = 0;
 8028d2a:	2300      	movs	r3, #0
 8028d2c:	613b      	str	r3, [r7, #16]
  port_control.port0.raw = 0;
 8028d2e:	2300      	movs	r3, #0
 8028d30:	617b      	str	r3, [r7, #20]
  port_control.port1.raw = 0;
 8028d32:	2300      	movs	r3, #0
 8028d34:	61bb      	str	r3, [r7, #24]

  XMC_GPIO_CONFIG_t gpio_config;

  /* EEPROM interface API registration */
  pEEPROM = &aEepromData[0U];
 8028d36:	4bcf      	ldr	r3, [pc, #828]	; (8029074 <HW_Init+0x350>)
 8028d38:	4acf      	ldr	r2, [pc, #828]	; (8029078 <HW_Init+0x354>)
 8028d3a:	601a      	str	r2, [r3, #0]

  /* EtherCAT slave physical layer pin settings */
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8028d3c:	2300      	movs	r3, #0
 8028d3e:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LINK_STATUS, &gpio_config);
 8028d40:	1d3b      	adds	r3, r7, #4
 8028d42:	48ce      	ldr	r0, [pc, #824]	; (802907c <HW_Init+0x358>)
 8028d44:	210f      	movs	r1, #15
 8028d46:	461a      	mov	r2, r3
 8028d48:	f7fd fc36 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD3, &gpio_config);
 8028d4c:	1d3b      	adds	r3, r7, #4
 8028d4e:	48cc      	ldr	r0, [pc, #816]	; (8029080 <HW_Init+0x35c>)
 8028d50:	2107      	movs	r1, #7
 8028d52:	461a      	mov	r2, r3
 8028d54:	f7fd fc30 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD2, &gpio_config);
 8028d58:	1d3b      	adds	r3, r7, #4
 8028d5a:	48c9      	ldr	r0, [pc, #804]	; (8029080 <HW_Init+0x35c>)
 8028d5c:	2102      	movs	r1, #2
 8028d5e:	461a      	mov	r2, r3
 8028d60:	f7fd fc2a 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD1, &gpio_config);
 8028d64:	1d3b      	adds	r3, r7, #4
 8028d66:	48c6      	ldr	r0, [pc, #792]	; (8029080 <HW_Init+0x35c>)
 8028d68:	2101      	movs	r1, #1
 8028d6a:	461a      	mov	r2, r3
 8028d6c:	f7fd fc24 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RXD0, &gpio_config);
 8028d70:	1d3b      	adds	r3, r7, #4
 8028d72:	48c2      	ldr	r0, [pc, #776]	; (802907c <HW_Init+0x358>)
 8028d74:	2104      	movs	r1, #4
 8028d76:	461a      	mov	r2, r3
 8028d78:	f7fd fc1e 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_DV, &gpio_config);
 8028d7c:	1d3b      	adds	r3, r7, #4
 8028d7e:	48bf      	ldr	r0, [pc, #764]	; (802907c <HW_Init+0x358>)
 8028d80:	2109      	movs	r1, #9
 8028d82:	461a      	mov	r2, r3
 8028d84:	f7fd fc18 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_CLK, &gpio_config);
 8028d88:	1d3b      	adds	r3, r7, #4
 8028d8a:	48bc      	ldr	r0, [pc, #752]	; (802907c <HW_Init+0x358>)
 8028d8c:	2101      	movs	r1, #1
 8028d8e:	461a      	mov	r2, r3
 8028d90:	f7fd fc12 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_RX_ERR, &gpio_config);
 8028d94:	1d3b      	adds	r3, r7, #4
 8028d96:	48bb      	ldr	r0, [pc, #748]	; (8029084 <HW_Init+0x360>)
 8028d98:	2106      	movs	r1, #6
 8028d9a:	461a      	mov	r2, r3
 8028d9c:	f7fd fc0c 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P0_TX_CLK, &gpio_config);
 8028da0:	1d3b      	adds	r3, r7, #4
 8028da2:	48b6      	ldr	r0, [pc, #728]	; (802907c <HW_Init+0x358>)
 8028da4:	2100      	movs	r1, #0
 8028da6:	461a      	mov	r2, r3
 8028da8:	f7fd fc06 	bl	80265b8 <XMC_GPIO_Init>

  XMC_GPIO_Init(ECAT_P1_LINK_STATUS, &gpio_config);
 8028dac:	1d3b      	adds	r3, r7, #4
 8028dae:	48b6      	ldr	r0, [pc, #728]	; (8029088 <HW_Init+0x364>)
 8028db0:	2103      	movs	r1, #3
 8028db2:	461a      	mov	r2, r3
 8028db4:	f7fd fc00 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD3, &gpio_config);
 8028db8:	1d3b      	adds	r3, r7, #4
 8028dba:	48b4      	ldr	r0, [pc, #720]	; (802908c <HW_Init+0x368>)
 8028dbc:	210e      	movs	r1, #14
 8028dbe:	461a      	mov	r2, r3
 8028dc0:	f7fd fbfa 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD2, &gpio_config);
 8028dc4:	1d3b      	adds	r3, r7, #4
 8028dc6:	48b1      	ldr	r0, [pc, #708]	; (802908c <HW_Init+0x368>)
 8028dc8:	210d      	movs	r1, #13
 8028dca:	461a      	mov	r2, r3
 8028dcc:	f7fd fbf4 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD1, &gpio_config);
 8028dd0:	1d3b      	adds	r3, r7, #4
 8028dd2:	48ae      	ldr	r0, [pc, #696]	; (802908c <HW_Init+0x368>)
 8028dd4:	210c      	movs	r1, #12
 8028dd6:	461a      	mov	r2, r3
 8028dd8:	f7fd fbee 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RXD0, &gpio_config);
 8028ddc:	1d3b      	adds	r3, r7, #4
 8028dde:	48ab      	ldr	r0, [pc, #684]	; (802908c <HW_Init+0x368>)
 8028de0:	2107      	movs	r1, #7
 8028de2:	461a      	mov	r2, r3
 8028de4:	f7fd fbe8 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_DV, &gpio_config);
 8028de8:	1d3b      	adds	r3, r7, #4
 8028dea:	48a8      	ldr	r0, [pc, #672]	; (802908c <HW_Init+0x368>)
 8028dec:	210f      	movs	r1, #15
 8028dee:	461a      	mov	r2, r3
 8028df0:	f7fd fbe2 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_CLK, &gpio_config);
 8028df4:	1d3b      	adds	r3, r7, #4
 8028df6:	48a5      	ldr	r0, [pc, #660]	; (802908c <HW_Init+0x368>)
 8028df8:	2106      	movs	r1, #6
 8028dfa:	461a      	mov	r2, r3
 8028dfc:	f7fd fbdc 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_RX_ERR, &gpio_config);
 8028e00:	1d3b      	adds	r3, r7, #4
 8028e02:	48a1      	ldr	r0, [pc, #644]	; (8029088 <HW_Init+0x364>)
 8028e04:	2102      	movs	r1, #2
 8028e06:	461a      	mov	r2, r3
 8028e08:	f7fd fbd6 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_Init(ECAT_P1_TX_CLK, &gpio_config);
 8028e0c:	1d3b      	adds	r3, r7, #4
 8028e0e:	48a0      	ldr	r0, [pc, #640]	; (8029090 <HW_Init+0x36c>)
 8028e10:	210a      	movs	r1, #10
 8028e12:	461a      	mov	r2, r3
 8028e14:	f7fd fbd0 	bl	80265b8 <XMC_GPIO_Init>

  port_control.common.enable_rstreq = false;
 8028e18:	7c3b      	ldrb	r3, [r7, #16]
 8028e1a:	f36f 0300 	bfc	r3, #0, #1
 8028e1e:	743b      	strb	r3, [r7, #16]
  port_control.common.mdio = XMC_ECAT_PORT_CTRL_MDIO_P0_12;
 8028e20:	7cbb      	ldrb	r3, [r7, #18]
 8028e22:	f36f 1387 	bfc	r3, #6, #2
 8028e26:	74bb      	strb	r3, [r7, #18]
  port_control.common.phyaddr_offset = 0;
 8028e28:	7cbb      	ldrb	r3, [r7, #18]
 8028e2a:	f36f 0304 	bfc	r3, #0, #5
 8028e2e:	74bb      	strb	r3, [r7, #18]
  port_control.common.latch_input0 = XMC_ECAT_PORT_CTRL_LATCHIN0_P14_5;
 8028e30:	7c7b      	ldrb	r3, [r7, #17]
 8028e32:	f36f 0301 	bfc	r3, #0, #2
 8028e36:	747b      	strb	r3, [r7, #17]
  port_control.common.latch_input1 = XMC_ECAT_PORT_CTRL_LATCHIN1_P14_4;
 8028e38:	7c7b      	ldrb	r3, [r7, #17]
 8028e3a:	f36f 1305 	bfc	r3, #4, #2
 8028e3e:	747b      	strb	r3, [r7, #17]
  port_control.port0.rxd0 = XMC_ECAT_PORT0_CTRL_RXD0_P1_4;
 8028e40:	7d3b      	ldrb	r3, [r7, #20]
 8028e42:	f36f 0301 	bfc	r3, #0, #2
 8028e46:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd1 = XMC_ECAT_PORT0_CTRL_RXD1_P5_1;
 8028e48:	7d3b      	ldrb	r3, [r7, #20]
 8028e4a:	2201      	movs	r2, #1
 8028e4c:	f362 0383 	bfi	r3, r2, #2, #2
 8028e50:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd2 = XMC_ECAT_PORT0_CTRL_RXD2_P5_2;
 8028e52:	7d3b      	ldrb	r3, [r7, #20]
 8028e54:	2201      	movs	r2, #1
 8028e56:	f362 1305 	bfi	r3, r2, #4, #2
 8028e5a:	753b      	strb	r3, [r7, #20]
  port_control.port0.rxd3 = XMC_ECAT_PORT0_CTRL_RXD3_P5_7;
 8028e5c:	7d3b      	ldrb	r3, [r7, #20]
 8028e5e:	2201      	movs	r2, #1
 8028e60:	f362 1387 	bfi	r3, r2, #6, #2
 8028e64:	753b      	strb	r3, [r7, #20]
  port_control.port0.rx_clk = XMC_ECAT_PORT0_CTRL_RX_CLK_P1_1;
 8028e66:	7d7b      	ldrb	r3, [r7, #21]
 8028e68:	f36f 1305 	bfc	r3, #4, #2
 8028e6c:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_dv = XMC_ECAT_PORT0_CTRL_RX_DV_P1_9;
 8028e6e:	7d7b      	ldrb	r3, [r7, #21]
 8028e70:	f36f 0383 	bfc	r3, #2, #2
 8028e74:	757b      	strb	r3, [r7, #21]
  port_control.port0.rx_err = XMC_ECAT_PORT0_CTRL_RX_ERR_P2_6;
 8028e76:	7d7b      	ldrb	r3, [r7, #21]
 8028e78:	2201      	movs	r2, #1
 8028e7a:	f362 0301 	bfi	r3, r2, #0, #2
 8028e7e:	757b      	strb	r3, [r7, #21]
  port_control.port0.link = XMC_ECAT_PORT0_CTRL_LINK_P1_15;
 8028e80:	7dbb      	ldrb	r3, [r7, #22]
 8028e82:	2201      	movs	r2, #1
 8028e84:	f362 0301 	bfi	r3, r2, #0, #2
 8028e88:	75bb      	strb	r3, [r7, #22]
  port_control.port0.tx_clk = XMC_ECAT_PORT0_CTRL_TX_CLK_P1_0;
 8028e8a:	7dfb      	ldrb	r3, [r7, #23]
 8028e8c:	f36f 1305 	bfc	r3, #4, #2
 8028e90:	75fb      	strb	r3, [r7, #23]
  port_control.port0.tx_shift = XMC_ECAT_PORT0_CTRL_TX_SHIFT_0NS; 
 8028e92:	7dfb      	ldrb	r3, [r7, #23]
 8028e94:	f36f 1387 	bfc	r3, #6, #2
 8028e98:	75fb      	strb	r3, [r7, #23]
  port_control.port1.rxd0 = XMC_ECAT_PORT1_CTRL_RXD0_P14_7;
 8028e9a:	7e3b      	ldrb	r3, [r7, #24]
 8028e9c:	2201      	movs	r2, #1
 8028e9e:	f362 0301 	bfi	r3, r2, #0, #2
 8028ea2:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd1 = XMC_ECAT_PORT1_CTRL_RXD1_P14_12;
 8028ea4:	7e3b      	ldrb	r3, [r7, #24]
 8028ea6:	2201      	movs	r2, #1
 8028ea8:	f362 0383 	bfi	r3, r2, #2, #2
 8028eac:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd2 = XMC_ECAT_PORT1_CTRL_RXD2_P14_13;
 8028eae:	7e3b      	ldrb	r3, [r7, #24]
 8028eb0:	2201      	movs	r2, #1
 8028eb2:	f362 1305 	bfi	r3, r2, #4, #2
 8028eb6:	763b      	strb	r3, [r7, #24]
  port_control.port1.rxd3 = XMC_ECAT_PORT1_CTRL_RXD3_P14_14;
 8028eb8:	7e3b      	ldrb	r3, [r7, #24]
 8028eba:	2201      	movs	r2, #1
 8028ebc:	f362 1387 	bfi	r3, r2, #6, #2
 8028ec0:	763b      	strb	r3, [r7, #24]
  port_control.port1.rx_clk = XMC_ECAT_PORT1_CTRL_RX_CLK_P14_6;
 8028ec2:	7e7b      	ldrb	r3, [r7, #25]
 8028ec4:	2201      	movs	r2, #1
 8028ec6:	f362 1305 	bfi	r3, r2, #4, #2
 8028eca:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_dv = XMC_ECAT_PORT1_CTRL_RX_DV_P14_15;
 8028ecc:	7e7b      	ldrb	r3, [r7, #25]
 8028ece:	2201      	movs	r2, #1
 8028ed0:	f362 0383 	bfi	r3, r2, #2, #2
 8028ed4:	767b      	strb	r3, [r7, #25]
  port_control.port1.rx_err = XMC_ECAT_PORT1_CTRL_RX_ERR_P15_2;
 8028ed6:	7e7b      	ldrb	r3, [r7, #25]
 8028ed8:	2201      	movs	r2, #1
 8028eda:	f362 0301 	bfi	r3, r2, #0, #2
 8028ede:	767b      	strb	r3, [r7, #25]
  port_control.port1.link = XMC_ECAT_PORT1_CTRL_LINK_P15_3;
 8028ee0:	7ebb      	ldrb	r3, [r7, #26]
 8028ee2:	2201      	movs	r2, #1
 8028ee4:	f362 0301 	bfi	r3, r2, #0, #2
 8028ee8:	76bb      	strb	r3, [r7, #26]
  port_control.port1.tx_clk = XMC_ECAT_PORT1_CTRL_TX_CLK_P0_10;
 8028eea:	7efb      	ldrb	r3, [r7, #27]
 8028eec:	f36f 1305 	bfc	r3, #4, #2
 8028ef0:	76fb      	strb	r3, [r7, #27]
  port_control.port1.tx_shift = XMC_ECAT_PORT1_CTRL_TX_SHIFT_0NS;
 8028ef2:	7efb      	ldrb	r3, [r7, #27]
 8028ef4:	f36f 1387 	bfc	r3, #6, #2
 8028ef8:	76fb      	strb	r3, [r7, #27]
  XMC_ECAT_SetPortControl(port_control);
 8028efa:	f107 0310 	add.w	r3, r7, #16
 8028efe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028f02:	f7ff feb1 	bl	8028c68 <XMC_ECAT_SetPortControl>

  /* EtherCAT slave enable and intialization using LLD function */
  XMC_ECAT_Init((XMC_ECAT_CONFIG_t *)(void*)aEepromData);
 8028f06:	485c      	ldr	r0, [pc, #368]	; (8029078 <HW_Init+0x354>)
 8028f08:	f7fe fc06 	bl	8027718 <XMC_ECAT_Init>

  /* EtherCAT slave physical layer pin configurations */
  gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8028f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8028f10:	60bb      	str	r3, [r7, #8]
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SOFT_EDGE;
 8028f12:	2302      	movs	r3, #2
 8028f14:	733b      	strb	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028f16:	2388      	movs	r3, #136	; 0x88
 8028f18:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD3, &gpio_config);
 8028f1a:	1d3b      	adds	r3, r7, #4
 8028f1c:	4857      	ldr	r0, [pc, #348]	; (802907c <HW_Init+0x358>)
 8028f1e:	2102      	movs	r1, #2
 8028f20:	461a      	mov	r2, r3
 8028f22:	f7fd fb49 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028f26:	2388      	movs	r3, #136	; 0x88
 8028f28:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD2, &gpio_config);
 8028f2a:	1d3b      	adds	r3, r7, #4
 8028f2c:	4853      	ldr	r0, [pc, #332]	; (802907c <HW_Init+0x358>)
 8028f2e:	2108      	movs	r1, #8
 8028f30:	461a      	mov	r2, r3
 8028f32:	f7fd fb41 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028f36:	2388      	movs	r3, #136	; 0x88
 8028f38:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD1, &gpio_config);
 8028f3a:	1d3b      	adds	r3, r7, #4
 8028f3c:	484f      	ldr	r0, [pc, #316]	; (802907c <HW_Init+0x358>)
 8028f3e:	2107      	movs	r1, #7
 8028f40:	461a      	mov	r2, r3
 8028f42:	f7fd fb39 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028f46:	2388      	movs	r3, #136	; 0x88
 8028f48:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TXD0, &gpio_config);
 8028f4a:	1d3b      	adds	r3, r7, #4
 8028f4c:	484b      	ldr	r0, [pc, #300]	; (802907c <HW_Init+0x358>)
 8028f4e:	2106      	movs	r1, #6
 8028f50:	461a      	mov	r2, r3
 8028f52:	f7fd fb31 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028f56:	2388      	movs	r3, #136	; 0x88
 8028f58:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_TX_EN, &gpio_config);
 8028f5a:	1d3b      	adds	r3, r7, #4
 8028f5c:	4847      	ldr	r0, [pc, #284]	; (802907c <HW_Init+0x358>)
 8028f5e:	2103      	movs	r1, #3
 8028f60:	461a      	mov	r2, r3
 8028f62:	f7fd fb29 	bl	80265b8 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028f66:	2388      	movs	r3, #136	; 0x88
 8028f68:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD3, &gpio_config);
 8028f6a:	1d3b      	adds	r3, r7, #4
 8028f6c:	4848      	ldr	r0, [pc, #288]	; (8029090 <HW_Init+0x36c>)
 8028f6e:	2103      	movs	r1, #3
 8028f70:	461a      	mov	r2, r3
 8028f72:	f7fd fb21 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028f76:	2388      	movs	r3, #136	; 0x88
 8028f78:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD2, &gpio_config);
 8028f7a:	1d3b      	adds	r3, r7, #4
 8028f7c:	4844      	ldr	r0, [pc, #272]	; (8029090 <HW_Init+0x36c>)
 8028f7e:	2102      	movs	r1, #2
 8028f80:	461a      	mov	r2, r3
 8028f82:	f7fd fb19 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8028f86:	2398      	movs	r3, #152	; 0x98
 8028f88:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD1, &gpio_config);
 8028f8a:	1d3b      	adds	r3, r7, #4
 8028f8c:	4841      	ldr	r0, [pc, #260]	; (8029094 <HW_Init+0x370>)
 8028f8e:	2102      	movs	r1, #2
 8028f90:	461a      	mov	r2, r3
 8028f92:	f7fd fb11 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 8028f96:	2398      	movs	r3, #152	; 0x98
 8028f98:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TXD0, &gpio_config);
 8028f9a:	1d3b      	adds	r3, r7, #4
 8028f9c:	483d      	ldr	r0, [pc, #244]	; (8029094 <HW_Init+0x370>)
 8028f9e:	2101      	movs	r1, #1
 8028fa0:	461a      	mov	r2, r3
 8028fa2:	f7fd fb09 	bl	80265b8 <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8028fa6:	23a0      	movs	r3, #160	; 0xa0
 8028fa8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_TX_EN, &gpio_config);
 8028faa:	1d3b      	adds	r3, r7, #4
 8028fac:	4839      	ldr	r0, [pc, #228]	; (8029094 <HW_Init+0x370>)
 8028fae:	2100      	movs	r1, #0
 8028fb0:	461a      	mov	r2, r3
 8028fb2:	f7fd fb01 	bl	80265b8 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8028fb6:	23a0      	movs	r3, #160	; 0xa0
 8028fb8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_CLK25, &gpio_config);
 8028fba:	1d3b      	adds	r3, r7, #4
 8028fbc:	482f      	ldr	r0, [pc, #188]	; (802907c <HW_Init+0x358>)
 8028fbe:	210d      	movs	r1, #13
 8028fc0:	461a      	mov	r2, r3
 8028fc2:	f7fd faf9 	bl	80265b8 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8028fc6:	23a0      	movs	r3, #160	; 0xa0
 8028fc8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P0_LED_LINK_ACT, &gpio_config);
 8028fca:	1d3b      	adds	r3, r7, #4
 8028fcc:	482b      	ldr	r0, [pc, #172]	; (802907c <HW_Init+0x358>)
 8028fce:	210c      	movs	r1, #12
 8028fd0:	461a      	mov	r2, r3
 8028fd2:	f7fd faf1 	bl	80265b8 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8028fd6:	2388      	movs	r3, #136	; 0x88
 8028fd8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_P1_LED_LINK_ACT, &gpio_config);
 8028fda:	1d3b      	adds	r3, r7, #4
 8028fdc:	482c      	ldr	r0, [pc, #176]	; (8029090 <HW_Init+0x36c>)
 8028fde:	210b      	movs	r1, #11
 8028fe0:	461a      	mov	r2, r3
 8028fe2:	f7fd fae9 	bl	80265b8 <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8028fe6:	23a0      	movs	r3, #160	; 0xa0
 8028fe8:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_RUN, &gpio_config);
 8028fea:	1d3b      	adds	r3, r7, #4
 8028fec:	4823      	ldr	r0, [pc, #140]	; (802907c <HW_Init+0x358>)
 8028fee:	210b      	movs	r1, #11
 8028ff0:	461a      	mov	r2, r3
 8028ff2:	f7fd fae1 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_RUN, XMC_GPIO_HWCTRL_DISABLED);
 8028ff6:	4821      	ldr	r0, [pc, #132]	; (802907c <HW_Init+0x358>)
 8028ff8:	210b      	movs	r1, #11
 8028ffa:	2200      	movs	r2, #0
 8028ffc:	f7fe fc8c 	bl	8027918 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT4;
 8029000:	23a0      	movs	r3, #160	; 0xa0
 8029002:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_LED_ERR, &gpio_config);
 8029004:	1d3b      	adds	r3, r7, #4
 8029006:	481d      	ldr	r0, [pc, #116]	; (802907c <HW_Init+0x358>)
 8029008:	210a      	movs	r1, #10
 802900a:	461a      	mov	r2, r3
 802900c:	f7fd fad4 	bl	80265b8 <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ECAT_LED_ERR, XMC_GPIO_HWCTRL_DISABLED);
 8029010:	481a      	ldr	r0, [pc, #104]	; (802907c <HW_Init+0x358>)
 8029012:	210a      	movs	r1, #10
 8029014:	2200      	movs	r2, #0
 8029016:	f7fe fc7f 	bl	8027918 <XMC_GPIO_SetHardwareControl>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
 802901a:	2398      	movs	r3, #152	; 0x98
 802901c:	713b      	strb	r3, [r7, #4]
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);
 802901e:	1d3b      	adds	r3, r7, #4
 8029020:	4818      	ldr	r0, [pc, #96]	; (8029084 <HW_Init+0x360>)
 8029022:	210a      	movs	r1, #10
 8029024:	461a      	mov	r2, r3
 8029026:	f7fd fac7 	bl	80265b8 <XMC_GPIO_Init>

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 802902a:	2300      	movs	r3, #0
 802902c:	77fb      	strb	r3, [r7, #31]
 802902e:	e006      	b.n	802903e <HW_Init+0x31a>
  {
    XMC_ECAT_DisableSyncManChannel(i);
 8029030:	7ffb      	ldrb	r3, [r7, #31]
 8029032:	4618      	mov	r0, r3
 8029034:	f7fe fbc0 	bl	80277b8 <XMC_ECAT_DisableSyncManChannel>

  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT3;
  XMC_GPIO_Init(ECAT_PHY_RESET, &gpio_config);

  /* Disable all supported sync manager channels */
  for (i = 0U; i < MAX_SYNC_MAN; i++)
 8029038:	7ffb      	ldrb	r3, [r7, #31]
 802903a:	3301      	adds	r3, #1
 802903c:	77fb      	strb	r3, [r7, #31]
 802903e:	7ffb      	ldrb	r3, [r7, #31]
 8029040:	2b07      	cmp	r3, #7
 8029042:	d9f5      	bls.n	8029030 <HW_Init+0x30c>
  {
    XMC_ECAT_DisableSyncManChannel(i);
  }

  /* EtherCAT slave event disable */
  XMC_ECAT_DisableEvent(0xffffffffU);
 8029044:	f04f 30ff 	mov.w	r0, #4294967295
 8029048:	f7fe fba2 	bl	8027790 <XMC_ECAT_DisableEvent>

  /* ECAT interrupt priority settings */
  NVIC_SetPriority(ECAT0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 802904c:	f7ff fd64 	bl	8028b18 <__NVIC_GetPriorityGrouping>
 8029050:	4603      	mov	r3, r0
 8029052:	4618      	mov	r0, r3
 8029054:	213f      	movs	r1, #63	; 0x3f
 8029056:	2200      	movs	r2, #0
 8029058:	f7ff fdd4 	bl	8028c04 <NVIC_EncodePriority>
 802905c:	4603      	mov	r3, r0
 802905e:	206d      	movs	r0, #109	; 0x6d
 8029060:	4619      	mov	r1, r3
 8029062:	f7ff fda5 	bl	8028bb0 <__NVIC_SetPriority>
                                                     63U,
                                                     0U));

  /* EtherCAT slave interrupt enable */
  ENABLE_ESC_INT();
 8029066:	f000 f8b9 	bl	80291dc <ENABLE_ESC_INT>

  return ((uint16_t)0U);
 802906a:	2300      	movs	r3, #0
}
 802906c:	4618      	mov	r0, r3
 802906e:	3720      	adds	r7, #32
 8029070:	46bd      	mov	sp, r7
 8029072:	bd80      	pop	{r7, pc}
 8029074:	1fff2700 	.word	0x1fff2700
 8029078:	1fff0c40 	.word	0x1fff0c40
 802907c:	48028100 	.word	0x48028100
 8029080:	48028500 	.word	0x48028500
 8029084:	48028200 	.word	0x48028200
 8029088:	48028f00 	.word	0x48028f00
 802908c:	48028e00 	.word	0x48028e00
 8029090:	48028000 	.word	0x48028000
 8029094:	48028300 	.word	0x48028300

08029098 <HW_EepromWrite>:
}


/* Beckhoff Hw abstraction layer interface API to write new configuration parameters to slave EEPROM area */
UINT16 HW_EepromWrite(UINT32 wordaddr)
{
 8029098:	b580      	push	{r7, lr}
 802909a:	b086      	sub	sp, #24
 802909c:	af00      	add	r7, sp, #0
 802909e:	6078      	str	r0, [r7, #4]
  UINT32 status;
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 80290a0:	2300      	movs	r3, #0
 80290a2:	827b      	strh	r3, [r7, #18]
  status = 0U;
 80290a4:	2300      	movs	r3, #0
 80290a6:	617b      	str	r3, [r7, #20]
  if ((wordaddr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 80290a8:	687b      	ldr	r3, [r7, #4]
 80290aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80290ae:	d830      	bhi.n	8029112 <HW_EepromWrite+0x7a>
 80290b0:	4b1b      	ldr	r3, [pc, #108]	; (8029120 <HW_EepromWrite+0x88>)
 80290b2:	681b      	ldr	r3, [r3, #0]
 80290b4:	2b00      	cmp	r3, #0
 80290b6:	d02c      	beq.n	8029112 <HW_EepromWrite+0x7a>
  {
     UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 80290b8:	4b19      	ldr	r3, [pc, #100]	; (8029120 <HW_EepromWrite+0x88>)
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	60fb      	str	r3, [r7, #12]
     HW_EscRead((MEM_ADDR *)(void*)&pData[(wordaddr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_WRITE_SIZE);
 80290be:	687b      	ldr	r3, [r7, #4]
 80290c0:	005b      	lsls	r3, r3, #1
 80290c2:	68fa      	ldr	r2, [r7, #12]
 80290c4:	4413      	add	r3, r2
 80290c6:	4618      	mov	r0, r3
 80290c8:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 80290cc:	2202      	movs	r2, #2
 80290ce:	f7ff fde1 	bl	8028c94 <HW_EscRead>
     if ( (wordaddr == (uint32_t)7U) || (wordaddr ==  (((uint32_t)ESC_EEPROM_SIZE >> (uint32_t)1U) - (uint32_t)1U)) )
 80290d2:	687b      	ldr	r3, [r7, #4]
 80290d4:	2b07      	cmp	r3, #7
 80290d6:	d004      	beq.n	80290e2 <HW_EepromWrite+0x4a>
 80290d8:	687b      	ldr	r3, [r7, #4]
 80290da:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80290de:	4293      	cmp	r3, r2
 80290e0:	d117      	bne.n	8029112 <HW_EepromWrite+0x7a>
     {
       /*lets program the complete EEPROM new prepare Data for EEPROM */
       if (E_EEPROM_XMC4_WriteArray((uint16_t)0U,aEepromData,(uint16_t)ESC_EEPROM_SIZE) == true)
 80290e2:	2000      	movs	r0, #0
 80290e4:	490f      	ldr	r1, [pc, #60]	; (8029124 <HW_EepromWrite+0x8c>)
 80290e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80290ea:	f7ff fa9d 	bl	8028628 <E_EEPROM_XMC4_WriteArray>
 80290ee:	4603      	mov	r3, r0
 80290f0:	2b00      	cmp	r3, #0
 80290f2:	d00e      	beq.n	8029112 <HW_EepromWrite+0x7a>
       {
         HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 80290f4:	4b0c      	ldr	r3, [pc, #48]	; (8029128 <HW_EepromWrite+0x90>)
 80290f6:	881b      	ldrh	r3, [r3, #0]
 80290f8:	827b      	strh	r3, [r7, #18]
         HW_EscWriteWord(EEPROMReg & (~ESC_EEPROM_BUSY_MASK),ESC_EEPROM_CONTROL_OFFSET);
 80290fa:	4a0b      	ldr	r2, [pc, #44]	; (8029128 <HW_EepromWrite+0x90>)
 80290fc:	8a7b      	ldrh	r3, [r7, #18]
 80290fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8029102:	b29b      	uxth	r3, r3
 8029104:	8013      	strh	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8029106:	b672      	cpsid	i

         __disable_irq();
         /* Program the RAM contents to Emulated EEPROM*/
         status = (uint32_t)E_EEPROM_XMC4_UpdateFlashContents();
 8029108:	f7ff fae6 	bl	80286d8 <E_EEPROM_XMC4_UpdateFlashContents>
 802910c:	4603      	mov	r3, r0
 802910e:	617b      	str	r3, [r7, #20]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8029110:	b662      	cpsie	i
         __enable_irq();
       }
     }
   }

   return (uint16_t)status;
 8029112:	697b      	ldr	r3, [r7, #20]
 8029114:	b29b      	uxth	r3, r3
}
 8029116:	4618      	mov	r0, r3
 8029118:	3718      	adds	r7, #24
 802911a:	46bd      	mov	sp, r7
 802911c:	bd80      	pop	{r7, pc}
 802911e:	bf00      	nop
 8029120:	1fff2700 	.word	0x1fff2700
 8029124:	1fff0c40 	.word	0x1fff0c40
 8029128:	54010502 	.word	0x54010502

0802912c <HW_EepromReload>:

/* Beckhoff Hw abstraction layer interface API to reload slave EEPROM area */
UINT16 HW_EepromReload(void)
{
 802912c:	b580      	push	{r7, lr}
 802912e:	b084      	sub	sp, #16
 8029130:	af00      	add	r7, sp, #0
  UINT16 EEPROMReg = 0U; /* Regvalue 0x502 - 0x5003 */
 8029132:	2300      	movs	r3, #0
 8029134:	81fb      	strh	r3, [r7, #14]
  UINT32 cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 8029136:	89fb      	ldrh	r3, [r7, #14]
 8029138:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802913c:	607b      	str	r3, [r7, #4]
  UINT32 addr;
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 802913e:	4b1b      	ldr	r3, [pc, #108]	; (80291ac <HW_EepromReload+0x80>)
 8029140:	681b      	ldr	r3, [r3, #0]
 8029142:	60bb      	str	r3, [r7, #8]
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
 8029144:	68bb      	ldr	r3, [r7, #8]
 8029146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802914a:	d826      	bhi.n	802919a <HW_EepromReload+0x6e>
 802914c:	4b18      	ldr	r3, [pc, #96]	; (80291b0 <HW_EepromReload+0x84>)
 802914e:	681b      	ldr	r3, [r3, #0]
 8029150:	2b00      	cmp	r3, #0
 8029152:	d022      	beq.n	802919a <HW_EepromReload+0x6e>
  {
    UINT16 *pData = (UINT16 *)(void*)pEEPROM;
 8029154:	4b16      	ldr	r3, [pc, #88]	; (80291b0 <HW_EepromReload+0x84>)
 8029156:	681b      	ldr	r3, [r3, #0]
 8029158:	603b      	str	r3, [r7, #0]
    do
    {
    HW_EscWrite((MEM_ADDR *)(void*)&pData[(addr)], (uint16_t)ESC_EEPROM_DATA_OFFSET, (uint16_t)EEPROM_READ_SIZE);
 802915a:	68bb      	ldr	r3, [r7, #8]
 802915c:	005b      	lsls	r3, r3, #1
 802915e:	683a      	ldr	r2, [r7, #0]
 8029160:	4413      	add	r3, r2
 8029162:	4618      	mov	r0, r3
 8029164:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8029168:	2208      	movs	r2, #8
 802916a:	f7ff fda9 	bl	8028cc0 <HW_EscWrite>

     /*Clear error bits */
     EEPROMReg &= (uint16_t)(~(uint16_t)(ESC_EEPROM_ERROR_MASK));
 802916e:	89fb      	ldrh	r3, [r7, #14]
 8029170:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8029174:	81fb      	strh	r3, [r7, #14]

     /*ack current reload segment */
     HW_EscWriteWord(EEPROMReg,(uint32_t)ESC_EEPROM_CONTROL_OFFSET);
 8029176:	4a0f      	ldr	r2, [pc, #60]	; (80291b4 <HW_EepromReload+0x88>)
 8029178:	89fb      	ldrh	r3, [r7, #14]
 802917a:	8013      	strh	r3, [r2, #0]

     /* read EEPROM control (to check if the reload is still pending) */
     HW_EscReadWord(EEPROMReg,ESC_EEPROM_CONTROL_OFFSET);
 802917c:	4b0d      	ldr	r3, [pc, #52]	; (80291b4 <HW_EepromReload+0x88>)
 802917e:	881b      	ldrh	r3, [r3, #0]
 8029180:	81fb      	strh	r3, [r7, #14]
     cmd = (uint32_t)EEPROMReg  & (uint32_t)ESC_EEPROM_CMD_MASK;
 8029182:	89fb      	ldrh	r3, [r7, #14]
 8029184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8029188:	607b      	str	r3, [r7, #4]

     HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
 802918a:	4b08      	ldr	r3, [pc, #32]	; (80291ac <HW_EepromReload+0x80>)
 802918c:	681b      	ldr	r3, [r3, #0]
 802918e:	60bb      	str	r3, [r7, #8]

    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
 8029190:	687b      	ldr	r3, [r7, #4]
 8029192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029196:	d0e0      	beq.n	802915a <HW_EepromReload+0x2e>
  HW_EscReadDWord(addr,(uint32_t)ESC_EEPROM_ADDRESS_OFFSET);
  addr = SWAPDWORD(addr);

  /* EEPROM emulation ( 8Bytes EEPROM data) */
  if ((addr <= (uint32_t)ESC_EEPROM_SIZE) && (pEEPROM != NULL))
  {
 8029198:	e003      	b.n	80291a2 <HW_EepromReload+0x76>
    } while(cmd == (uint32_t)ESC_EEPROM_CMD_RELOAD_MASK);
  }
  else
  {
    /* Set Error  */
    EEPROMReg |= (uint16_t)ESC_EEPROM_ERROR_CMD_ACK;
 802919a:	89fb      	ldrh	r3, [r7, #14]
 802919c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80291a0:	81fb      	strh	r3, [r7, #14]
  }
  return 0U;
 80291a2:	2300      	movs	r3, #0
}
 80291a4:	4618      	mov	r0, r3
 80291a6:	3710      	adds	r7, #16
 80291a8:	46bd      	mov	sp, r7
 80291aa:	bd80      	pop	{r7, pc}
 80291ac:	54010504 	.word	0x54010504
 80291b0:	1fff2700 	.word	0x1fff2700
 80291b4:	54010502 	.word	0x54010502

080291b8 <ECAT0_0_IRQHandler>:

/* ECAT slave interrupt handler function */
void ECAT0_0_IRQHandler(void)
{
 80291b8:	b580      	push	{r7, lr}
 80291ba:	af00      	add	r7, sp, #0
  PDI_Isr();
 80291bc:	f7f7 fdc4 	bl	8020d48 <PDI_Isr>
}
 80291c0:	bd80      	pop	{r7, pc}
 80291c2:	bf00      	nop

080291c4 <CCU41_2_IRQHandler>:

/* ECAT slave timer interrupt handler function */
void ecat_ssc_timer_handler(void)
{
 80291c4:	b580      	push	{r7, lr}
 80291c6:	af00      	add	r7, sp, #0
  ticks++;
 80291c8:	4b03      	ldr	r3, [pc, #12]	; (80291d8 <CCU41_2_IRQHandler+0x14>)
 80291ca:	681b      	ldr	r3, [r3, #0]
 80291cc:	3301      	adds	r3, #1
 80291ce:	4a02      	ldr	r2, [pc, #8]	; (80291d8 <CCU41_2_IRQHandler+0x14>)
 80291d0:	6013      	str	r3, [r2, #0]
#if ECAT_TIMER_INT == 1
  ECAT_CheckTimer();
 80291d2:	f7f7 fcc5 	bl	8020b60 <ECAT_CheckTimer>
#endif
}
 80291d6:	bd80      	pop	{r7, pc}
 80291d8:	1fff262c 	.word	0x1fff262c

080291dc <ENABLE_ESC_INT>:
{
  ticks = 0;
}

void ENABLE_ESC_INT(void)
{
 80291dc:	b580      	push	{r7, lr}
 80291de:	af00      	add	r7, sp, #0
  ENABLE_ESC_INT_USER();
 80291e0:	f000 fdcc 	bl	8029d7c <ENABLE_ESC_INT_USER>

  NVIC_EnableIRQ(ECAT0_0_IRQn);
 80291e4:	206d      	movs	r0, #109	; 0x6d
 80291e6:	f7ff fca5 	bl	8028b34 <__NVIC_EnableIRQ>
  INTERRUPT_Enable(&INTERRUPT_0);
 80291ea:	4802      	ldr	r0, [pc, #8]	; (80291f4 <ENABLE_ESC_INT+0x18>)
 80291ec:	f7ff fd7e 	bl	8028cec <INTERRUPT_Enable>
}
 80291f0:	bd80      	pop	{r7, pc}
 80291f2:	bf00      	nop
 80291f4:	0802abbc 	.word	0x0802abbc

080291f8 <DISABLE_ESC_INT>:

void DISABLE_ESC_INT(void)
{
 80291f8:	b580      	push	{r7, lr}
 80291fa:	b086      	sub	sp, #24
 80291fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80291fe:	f3ef 8310 	mrs	r3, PRIMASK
 8029202:	613b      	str	r3, [r7, #16]
  return(result);
 8029204:	693b      	ldr	r3, [r7, #16]
extern void DISABLE_ESC_INT_USER(void);

__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
 8029206:	60fb      	str	r3, [r7, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8029208:	b672      	cpsid	i
  __disable_irq ();
  return status;
 802920a:	68fb      	ldr	r3, [r7, #12]
}

void DISABLE_ESC_INT(void)
{
  uint32_t ics;
  ics = critical_section_enter();
 802920c:	617b      	str	r3, [r7, #20]

  DISABLE_ESC_INT_USER();
 802920e:	f000 fdc3 	bl	8029d98 <DISABLE_ESC_INT_USER>

  NVIC_DisableIRQ(ECAT0_0_IRQn);
 8029212:	206d      	movs	r0, #109	; 0x6d
 8029214:	f7ff fcaa 	bl	8028b6c <__NVIC_DisableIRQ>
  INTERRUPT_Disable(&INTERRUPT_0);
 8029218:	4806      	ldr	r0, [pc, #24]	; (8029234 <DISABLE_ESC_INT+0x3c>)
 802921a:	f7ff fd75 	bl	8028d08 <INTERRUPT_Disable>
 802921e:	697b      	ldr	r3, [r7, #20]
 8029220:	60bb      	str	r3, [r7, #8]
 8029222:	68bb      	ldr	r3, [r7, #8]
 8029224:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8029226:	687b      	ldr	r3, [r7, #4]
 8029228:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);
}
 802922c:	3718      	adds	r7, #24
 802922e:	46bd      	mov	sp, r7
 8029230:	bd80      	pop	{r7, pc}
 8029232:	bf00      	nop
 8029234:	0802abbc 	.word	0x0802abbc

08029238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8029238:	b480      	push	{r7}
 802923a:	b085      	sub	sp, #20
 802923c:	af00      	add	r7, sp, #0
 802923e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8029240:	687b      	ldr	r3, [r7, #4]
 8029242:	f003 0307 	and.w	r3, r3, #7
 8029246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8029248:	4b0c      	ldr	r3, [pc, #48]	; (802927c <__NVIC_SetPriorityGrouping+0x44>)
 802924a:	68db      	ldr	r3, [r3, #12]
 802924c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802924e:	68ba      	ldr	r2, [r7, #8]
 8029250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8029254:	4013      	ands	r3, r2
 8029256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8029258:	68fb      	ldr	r3, [r7, #12]
 802925a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802925c:	68bb      	ldr	r3, [r7, #8]
 802925e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8029260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8029264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8029268:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 802926a:	4a04      	ldr	r2, [pc, #16]	; (802927c <__NVIC_SetPriorityGrouping+0x44>)
 802926c:	68bb      	ldr	r3, [r7, #8]
 802926e:	60d3      	str	r3, [r2, #12]
}
 8029270:	3714      	adds	r7, #20
 8029272:	46bd      	mov	sp, r7
 8029274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029278:	4770      	bx	lr
 802927a:	bf00      	nop
 802927c:	e000ed00 	.word	0xe000ed00

08029280 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8029280:	b580      	push	{r7, lr}
 8029282:	b082      	sub	sp, #8
 8029284:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8029286:	2001      	movs	r0, #1
 8029288:	f7ff ffd6 	bl	8029238 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802928c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 802928e:	4b21      	ldr	r3, [pc, #132]	; (8029314 <SystemCoreSetup+0x94>)
 8029290:	4a21      	ldr	r2, [pc, #132]	; (8029318 <SystemCoreSetup+0x98>)
 8029292:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8029294:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8029298:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 802929a:	4a1e      	ldr	r2, [pc, #120]	; (8029314 <SystemCoreSetup+0x94>)
 802929c:	4b1d      	ldr	r3, [pc, #116]	; (8029314 <SystemCoreSetup+0x94>)
 802929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80292a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80292a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80292aa:	4b1c      	ldr	r3, [pc, #112]	; (802931c <SystemCoreSetup+0x9c>)
 80292ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80292b0:	3314      	adds	r3, #20
 80292b2:	681b      	ldr	r3, [r3, #0]
 80292b4:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80292b6:	687b      	ldr	r3, [r7, #4]
 80292b8:	f023 030f 	bic.w	r3, r3, #15
 80292bc:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80292be:	687b      	ldr	r3, [r7, #4]
 80292c0:	f043 0304 	orr.w	r3, r3, #4
 80292c4:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80292c6:	4b15      	ldr	r3, [pc, #84]	; (802931c <SystemCoreSetup+0x9c>)
 80292c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80292cc:	3314      	adds	r3, #20
 80292ce:	687a      	ldr	r2, [r7, #4]
 80292d0:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80292d2:	4a10      	ldr	r2, [pc, #64]	; (8029314 <SystemCoreSetup+0x94>)
 80292d4:	4b0f      	ldr	r3, [pc, #60]	; (8029314 <SystemCoreSetup+0x94>)
 80292d6:	695b      	ldr	r3, [r3, #20]
 80292d8:	f023 0310 	bic.w	r3, r3, #16
 80292dc:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80292de:	4a0d      	ldr	r2, [pc, #52]	; (8029314 <SystemCoreSetup+0x94>)
 80292e0:	4b0c      	ldr	r3, [pc, #48]	; (8029314 <SystemCoreSetup+0x94>)
 80292e2:	695b      	ldr	r3, [r3, #20]
 80292e4:	f023 0308 	bic.w	r3, r3, #8
 80292e8:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80292ea:	4a0a      	ldr	r2, [pc, #40]	; (8029314 <SystemCoreSetup+0x94>)
 80292ec:	4b09      	ldr	r3, [pc, #36]	; (8029314 <SystemCoreSetup+0x94>)
 80292ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80292f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80292f4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80292f6:	4a07      	ldr	r2, [pc, #28]	; (8029314 <SystemCoreSetup+0x94>)
 80292f8:	4b06      	ldr	r3, [pc, #24]	; (8029314 <SystemCoreSetup+0x94>)
 80292fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80292fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8029300:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8029302:	4a04      	ldr	r2, [pc, #16]	; (8029314 <SystemCoreSetup+0x94>)
 8029304:	4b03      	ldr	r3, [pc, #12]	; (8029314 <SystemCoreSetup+0x94>)
 8029306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802930c:	6253      	str	r3, [r2, #36]	; 0x24
}
 802930e:	3708      	adds	r7, #8
 8029310:	46bd      	mov	sp, r7
 8029312:	bd80      	pop	{r7, pc}
 8029314:	e000ed00 	.word	0xe000ed00
 8029318:	08000000 	.word	0x08000000
 802931c:	58001000 	.word	0x58001000

08029320 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8029320:	b480      	push	{r7}
 8029322:	b085      	sub	sp, #20
 8029324:	af00      	add	r7, sp, #0
 8029326:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8029328:	2300      	movs	r3, #0
 802932a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 802932c:	687b      	ldr	r3, [r7, #4]
 802932e:	2201      	movs	r2, #1
 8029330:	701a      	strb	r2, [r3, #0]

  return (status);
 8029332:	7bfb      	ldrb	r3, [r7, #15]
}
 8029334:	4618      	mov	r0, r3
 8029336:	3714      	adds	r7, #20
 8029338:	46bd      	mov	sp, r7
 802933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802933e:	4770      	bx	lr

08029340 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8029340:	b480      	push	{r7}
 8029342:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8029344:	4b02      	ldr	r3, [pc, #8]	; (8029350 <OSCHP_GetFrequency+0x10>)
}
 8029346:	4618      	mov	r0, r3
 8029348:	46bd      	mov	sp, r7
 802934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802934e:	4770      	bx	lr
 8029350:	00b71b00 	.word	0x00b71b00

08029354 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8029354:	b480      	push	{r7}
 8029356:	b083      	sub	sp, #12
 8029358:	af00      	add	r7, sp, #0
 802935a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 802935c:	4906      	ldr	r1, [pc, #24]	; (8029378 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 802935e:	4b06      	ldr	r3, [pc, #24]	; (8029378 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8029360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029362:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029366:	687b      	ldr	r3, [r7, #4]
 8029368:	4313      	orrs	r3, r2
 802936a:	638b      	str	r3, [r1, #56]	; 0x38
                      ((uint32_t)source);
}
 802936c:	370c      	adds	r7, #12
 802936e:	46bd      	mov	sp, r7
 8029370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029374:	4770      	bx	lr
 8029376:	bf00      	nop
 8029378:	50004600 	.word	0x50004600

0802937c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 802937c:	b5b0      	push	{r4, r5, r7, lr}
 802937e:	b086      	sub	sp, #24
 8029380:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8029382:	4b14      	ldr	r3, [pc, #80]	; (80293d4 <SystemCoreClockSetup+0x58>)
 8029384:	1d3c      	adds	r4, r7, #4
 8029386:	461d      	mov	r5, r3
 8029388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802938a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802938c:	682b      	ldr	r3, [r5, #0]
 802938e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8029390:	1d3b      	adds	r3, r7, #4
 8029392:	4618      	mov	r0, r3
 8029394:	f7fd f9fe 	bl	8026794 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8029398:	2000      	movs	r0, #0
 802939a:	f7fd fb1f 	bl	80269dc <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 802939e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80293a2:	f7fd fad3 	bl	802694c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 80293a6:	2006      	movs	r0, #6
 80293a8:	f7fd fba4 	bl	8026af4 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 80293ac:	2003      	movs	r0, #3
 80293ae:	2164      	movs	r1, #100	; 0x64
 80293b0:	f7fd fc08 	bl	8026bc4 <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 80293b4:	2000      	movs	r0, #0
 80293b6:	f7ff ffcd 	bl	8029354 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 80293ba:	2002      	movs	r0, #2
 80293bc:	f7fd fbc2 	bl	8026b44 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80293c0:	2000      	movs	r0, #0
 80293c2:	f7fd fad7 	bl	8026974 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80293c6:	2001      	movs	r0, #1
 80293c8:	f7fd fba8 	bl	8026b1c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 80293cc:	3718      	adds	r7, #24
 80293ce:	46bd      	mov	sp, r7
 80293d0:	bdb0      	pop	{r4, r5, r7, pc}
 80293d2:	bf00      	nop
 80293d4:	0802ac08 	.word	0x0802ac08

080293d8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80293d8:	b580      	push	{r7, lr}
 80293da:	b082      	sub	sp, #8
 80293dc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80293de:	2300      	movs	r3, #0
 80293e0:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80293e2:	4845      	ldr	r0, [pc, #276]	; (80294f8 <DAVE_Init+0x120>)
 80293e4:	f7ff ff9c 	bl	8029320 <CLOCK_XMC4_Init>
 80293e8:	4603      	mov	r3, r0
 80293ea:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80293ec:	79fb      	ldrb	r3, [r7, #7]
 80293ee:	2b00      	cmp	r3, #0
 80293f0:	d104      	bne.n	80293fc <DAVE_Init+0x24>
  {
	 /**  Initialization of ECAT_SSC APP instance ECAT_SSC_0 */
	 init_status = (DAVE_STATUS_t)ECAT_SSC_Init(&ECAT_SSC_0); 
 80293f2:	4842      	ldr	r0, [pc, #264]	; (80294fc <DAVE_Init+0x124>)
 80293f4:	f7ff fb28 	bl	8028a48 <ECAT_SSC_Init>
 80293f8:	4603      	mov	r3, r0
 80293fa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80293fc:	79fb      	ldrb	r3, [r7, #7]
 80293fe:	2b00      	cmp	r3, #0
 8029400:	d104      	bne.n	802940c <DAVE_Init+0x34>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC_0 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC_0); 
 8029402:	483f      	ldr	r0, [pc, #252]	; (8029500 <DAVE_Init+0x128>)
 8029404:	f7ff fb02 	bl	8028a0c <EVENT_DETECTOR_Init>
 8029408:	4603      	mov	r3, r0
 802940a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802940c:	79fb      	ldrb	r3, [r7, #7]
 802940e:	2b00      	cmp	r3, #0
 8029410:	d104      	bne.n	802941c <DAVE_Init+0x44>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC_0 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC_0); 
 8029412:	483c      	ldr	r0, [pc, #240]	; (8029504 <DAVE_Init+0x12c>)
 8029414:	f7ff fad6 	bl	80289c4 <EVENT_GENERATOR_Init>
 8029418:	4603      	mov	r3, r0
 802941a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802941c:	79fb      	ldrb	r3, [r7, #7]
 802941e:	2b00      	cmp	r3, #0
 8029420:	d104      	bne.n	802942c <DAVE_Init+0x54>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance ED_SYNC_1 */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&ED_SYNC_1); 
 8029422:	4839      	ldr	r0, [pc, #228]	; (8029508 <DAVE_Init+0x130>)
 8029424:	f7ff faf2 	bl	8028a0c <EVENT_DETECTOR_Init>
 8029428:	4603      	mov	r3, r0
 802942a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802942c:	79fb      	ldrb	r3, [r7, #7]
 802942e:	2b00      	cmp	r3, #0
 8029430:	d104      	bne.n	802943c <DAVE_Init+0x64>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance EG_SYNC_1 */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&EG_SYNC_1); 
 8029432:	4836      	ldr	r0, [pc, #216]	; (802950c <DAVE_Init+0x134>)
 8029434:	f7ff fac6 	bl	80289c4 <EVENT_GENERATOR_Init>
 8029438:	4603      	mov	r3, r0
 802943a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802943c:	79fb      	ldrb	r3, [r7, #7]
 802943e:	2b00      	cmp	r3, #0
 8029440:	d104      	bne.n	802944c <DAVE_Init+0x74>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC1); 
 8029442:	4833      	ldr	r0, [pc, #204]	; (8029510 <DAVE_Init+0x138>)
 8029444:	f7fe ffb4 	bl	80283b0 <INTERRUPT_Init>
 8029448:	4603      	mov	r3, r0
 802944a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802944c:	79fb      	ldrb	r3, [r7, #7]
 802944e:	2b00      	cmp	r3, #0
 8029450:	d104      	bne.n	802945c <DAVE_Init+0x84>
  {
	 /**  Initialization of INTERRUPT APP instance INT_SYNC0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_SYNC0); 
 8029452:	4830      	ldr	r0, [pc, #192]	; (8029514 <DAVE_Init+0x13c>)
 8029454:	f7fe ffac 	bl	80283b0 <INTERRUPT_Init>
 8029458:	4603      	mov	r3, r0
 802945a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802945c:	79fb      	ldrb	r3, [r7, #7]
 802945e:	2b00      	cmp	r3, #0
 8029460:	d104      	bne.n	802946c <DAVE_Init+0x94>
  {
	 /**  Initialization of GLOBAL_CCU8 APP instance GLOBAL_CCU8_0 */
	 init_status = (DAVE_STATUS_t)GLOBAL_CCU8_Init(&GLOBAL_CCU8_0); 
 8029462:	482d      	ldr	r0, [pc, #180]	; (8029518 <DAVE_Init+0x140>)
 8029464:	f7fe ffd8 	bl	8028418 <GLOBAL_CCU8_Init>
 8029468:	4603      	mov	r3, r0
 802946a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802946c:	79fb      	ldrb	r3, [r7, #7]
 802946e:	2b00      	cmp	r3, #0
 8029470:	d104      	bne.n	802947c <DAVE_Init+0xa4>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_0); 
 8029472:	482a      	ldr	r0, [pc, #168]	; (802951c <DAVE_Init+0x144>)
 8029474:	f7fe fc3e 	bl	8027cf4 <PWM_CCU4_Init>
 8029478:	4603      	mov	r3, r0
 802947a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802947c:	79fb      	ldrb	r3, [r7, #7]
 802947e:	2b00      	cmp	r3, #0
 8029480:	d104      	bne.n	802948c <DAVE_Init+0xb4>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_1 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_1); 
 8029482:	4827      	ldr	r0, [pc, #156]	; (8029520 <DAVE_Init+0x148>)
 8029484:	f7fe fc36 	bl	8027cf4 <PWM_CCU4_Init>
 8029488:	4603      	mov	r3, r0
 802948a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802948c:	79fb      	ldrb	r3, [r7, #7]
 802948e:	2b00      	cmp	r3, #0
 8029490:	d104      	bne.n	802949c <DAVE_Init+0xc4>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_2 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_2); 
 8029492:	4824      	ldr	r0, [pc, #144]	; (8029524 <DAVE_Init+0x14c>)
 8029494:	f7fe fc2e 	bl	8027cf4 <PWM_CCU4_Init>
 8029498:	4603      	mov	r3, r0
 802949a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 802949c:	79fb      	ldrb	r3, [r7, #7]
 802949e:	2b00      	cmp	r3, #0
 80294a0:	d104      	bne.n	80294ac <DAVE_Init+0xd4>
  {
	 /**  Initialization of INTERRUPT APP instance INT_PWM_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_PWM_0); 
 80294a2:	4821      	ldr	r0, [pc, #132]	; (8029528 <DAVE_Init+0x150>)
 80294a4:	f7fe ff84 	bl	80283b0 <INTERRUPT_Init>
 80294a8:	4603      	mov	r3, r0
 80294aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80294ac:	79fb      	ldrb	r3, [r7, #7]
 80294ae:	2b00      	cmp	r3, #0
 80294b0:	d104      	bne.n	80294bc <DAVE_Init+0xe4>
  {
	 /**  Initialization of INTERRUPT APP instance INT_PWM_1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_PWM_1); 
 80294b2:	481e      	ldr	r0, [pc, #120]	; (802952c <DAVE_Init+0x154>)
 80294b4:	f7fe ff7c 	bl	80283b0 <INTERRUPT_Init>
 80294b8:	4603      	mov	r3, r0
 80294ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80294bc:	79fb      	ldrb	r3, [r7, #7]
 80294be:	2b00      	cmp	r3, #0
 80294c0:	d104      	bne.n	80294cc <DAVE_Init+0xf4>
  {
	 /**  Initialization of INTERRUPT APP instance INT_PWM_2 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_PWM_2); 
 80294c2:	481b      	ldr	r0, [pc, #108]	; (8029530 <DAVE_Init+0x158>)
 80294c4:	f7fe ff74 	bl	80283b0 <INTERRUPT_Init>
 80294c8:	4603      	mov	r3, r0
 80294ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80294cc:	79fb      	ldrb	r3, [r7, #7]
 80294ce:	2b00      	cmp	r3, #0
 80294d0:	d104      	bne.n	80294dc <DAVE_Init+0x104>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_Tick */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_Tick); 
 80294d2:	4818      	ldr	r0, [pc, #96]	; (8029534 <DAVE_Init+0x15c>)
 80294d4:	f7fe fc0e 	bl	8027cf4 <PWM_CCU4_Init>
 80294d8:	4603      	mov	r3, r0
 80294da:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80294dc:	79fb      	ldrb	r3, [r7, #7]
 80294de:	2b00      	cmp	r3, #0
 80294e0:	d104      	bne.n	80294ec <DAVE_Init+0x114>
  {
	 /**  Initialization of INTERRUPT APP instance INT_Tick */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INT_Tick); 
 80294e2:	4815      	ldr	r0, [pc, #84]	; (8029538 <DAVE_Init+0x160>)
 80294e4:	f7fe ff64 	bl	80283b0 <INTERRUPT_Init>
 80294e8:	4603      	mov	r3, r0
 80294ea:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80294ec:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80294ee:	4618      	mov	r0, r3
 80294f0:	3708      	adds	r7, #8
 80294f2:	46bd      	mov	sp, r7
 80294f4:	bd80      	pop	{r7, pc}
 80294f6:	bf00      	nop
 80294f8:	1fff2630 	.word	0x1fff2630
 80294fc:	0802abfc 	.word	0x0802abfc
 8029500:	1fff158c 	.word	0x1fff158c
 8029504:	1fff156c 	.word	0x1fff156c
 8029508:	1fff159c 	.word	0x1fff159c
 802950c:	1fff157c 	.word	0x1fff157c
 8029510:	0802abc0 	.word	0x0802abc0
 8029514:	0802abc4 	.word	0x0802abc4
 8029518:	1fff152c 	.word	0x1fff152c
 802951c:	1fff148c 	.word	0x1fff148c
 8029520:	1fff14b4 	.word	0x1fff14b4
 8029524:	1fff14dc 	.word	0x1fff14dc
 8029528:	0802abc8 	.word	0x0802abc8
 802952c:	0802abcc 	.word	0x0802abcc
 8029530:	0802abd0 	.word	0x0802abd0
 8029534:	1fff1504 	.word	0x1fff1504
 8029538:	0802abd4 	.word	0x0802abd4

0802953c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802953c:	b480      	push	{r7}
 802953e:	b083      	sub	sp, #12
 8029540:	af00      	add	r7, sp, #0
 8029542:	4603      	mov	r3, r0
 8029544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8029546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802954a:	2b00      	cmp	r3, #0
 802954c:	db0b      	blt.n	8029566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802954e:	4908      	ldr	r1, [pc, #32]	; (8029570 <__NVIC_EnableIRQ+0x34>)
 8029550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029554:	095b      	lsrs	r3, r3, #5
 8029556:	79fa      	ldrb	r2, [r7, #7]
 8029558:	f002 021f 	and.w	r2, r2, #31
 802955c:	2001      	movs	r0, #1
 802955e:	fa00 f202 	lsl.w	r2, r0, r2
 8029562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8029566:	370c      	adds	r7, #12
 8029568:	46bd      	mov	sp, r7
 802956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802956e:	4770      	bx	lr
 8029570:	e000e100 	.word	0xe000e100

08029574 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8029574:	b480      	push	{r7}
 8029576:	b083      	sub	sp, #12
 8029578:	af00      	add	r7, sp, #0
 802957a:	4603      	mov	r3, r0
 802957c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802957e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029582:	2b00      	cmp	r3, #0
 8029584:	db10      	blt.n	80295a8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8029586:	490b      	ldr	r1, [pc, #44]	; (80295b4 <__NVIC_DisableIRQ+0x40>)
 8029588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802958c:	095b      	lsrs	r3, r3, #5
 802958e:	79fa      	ldrb	r2, [r7, #7]
 8029590:	f002 021f 	and.w	r2, r2, #31
 8029594:	2001      	movs	r0, #1
 8029596:	fa00 f202 	lsl.w	r2, r0, r2
 802959a:	3320      	adds	r3, #32
 802959c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80295a0:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80295a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80295a8:	370c      	adds	r7, #12
 80295aa:	46bd      	mov	sp, r7
 80295ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295b0:	4770      	bx	lr
 80295b2:	bf00      	nop
 80295b4:	e000e100 	.word	0xe000e100

080295b8 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 80295b8:	b480      	push	{r7}
 80295ba:	b085      	sub	sp, #20
 80295bc:	af00      	add	r7, sp, #0
 80295be:	60f8      	str	r0, [r7, #12]
 80295c0:	460b      	mov	r3, r1
 80295c2:	607a      	str	r2, [r7, #4]
 80295c4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 80295c6:	7afb      	ldrb	r3, [r7, #11]
 80295c8:	687a      	ldr	r2, [r7, #4]
 80295ca:	409a      	lsls	r2, r3
 80295cc:	68fb      	ldr	r3, [r7, #12]
 80295ce:	605a      	str	r2, [r3, #4]
}
 80295d0:	3714      	adds	r7, #20
 80295d2:	46bd      	mov	sp, r7
 80295d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295d8:	4770      	bx	lr
 80295da:	bf00      	nop

080295dc <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80295dc:	b580      	push	{r7, lr}
 80295de:	b082      	sub	sp, #8
 80295e0:	af00      	add	r7, sp, #0
 80295e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80295e4:	687b      	ldr	r3, [r7, #4]
 80295e6:	781b      	ldrb	r3, [r3, #0]
 80295e8:	b25b      	sxtb	r3, r3
 80295ea:	4618      	mov	r0, r3
 80295ec:	f7ff ffa6 	bl	802953c <__NVIC_EnableIRQ>
}
 80295f0:	3708      	adds	r7, #8
 80295f2:	46bd      	mov	sp, r7
 80295f4:	bd80      	pop	{r7, pc}
 80295f6:	bf00      	nop

080295f8 <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 80295f8:	b580      	push	{r7, lr}
 80295fa:	b082      	sub	sp, #8
 80295fc:	af00      	add	r7, sp, #0
 80295fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	781b      	ldrb	r3, [r3, #0]
 8029604:	b25b      	sxtb	r3, r3
 8029606:	4618      	mov	r0, r3
 8029608:	f7ff ffb4 	bl	8029574 <__NVIC_DisableIRQ>
}
 802960c:	3708      	adds	r7, #8
 802960e:	46bd      	mov	sp, r7
 8029610:	bd80      	pop	{r7, pc}
 8029612:	bf00      	nop

08029614 <process_stopoutput>:
int32_t ProcessPos[3];
int32_t Config;

//Output Enable
	uint8_t outenable;
	void process_stopoutput(){outenable=false;}
 8029614:	b480      	push	{r7}
 8029616:	af00      	add	r7, sp, #0
 8029618:	4b03      	ldr	r3, [pc, #12]	; (8029628 <process_stopoutput+0x14>)
 802961a:	2200      	movs	r2, #0
 802961c:	701a      	strb	r2, [r3, #0]
 802961e:	46bd      	mov	sp, r7
 8029620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029624:	4770      	bx	lr
 8029626:	bf00      	nop
 8029628:	1fff2904 	.word	0x1fff2904

0802962c <process_startoutput>:
	void process_startoutput(){outenable=true;}
 802962c:	b480      	push	{r7}
 802962e:	af00      	add	r7, sp, #0
 8029630:	4b03      	ldr	r3, [pc, #12]	; (8029640 <process_startoutput+0x14>)
 8029632:	2201      	movs	r2, #1
 8029634:	701a      	strb	r2, [r3, #0]
 8029636:	46bd      	mov	sp, r7
 8029638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802963c:	4770      	bx	lr
 802963e:	bf00      	nop
 8029640:	1fff2904 	.word	0x1fff2904

08029644 <digitalWrite>:

//I Love ARDUINO
	void digitalWrite(XMC_GPIO_PORT_t *const port, const uint8_t pin,uint8_t value)
	{
 8029644:	b580      	push	{r7, lr}
 8029646:	b082      	sub	sp, #8
 8029648:	af00      	add	r7, sp, #0
 802964a:	6078      	str	r0, [r7, #4]
 802964c:	460b      	mov	r3, r1
 802964e:	70fb      	strb	r3, [r7, #3]
 8029650:	4613      	mov	r3, r2
 8029652:	70bb      	strb	r3, [r7, #2]
		XMC_GPIO_SetOutputLevel(port,pin,(value==0||value==false)?XMC_GPIO_OUTPUT_LEVEL_LOW:XMC_GPIO_OUTPUT_LEVEL_HIGH);
 8029654:	78bb      	ldrb	r3, [r7, #2]
 8029656:	2b00      	cmp	r3, #0
 8029658:	d002      	beq.n	8029660 <digitalWrite+0x1c>
 802965a:	78bb      	ldrb	r3, [r7, #2]
 802965c:	2b00      	cmp	r3, #0
 802965e:	d102      	bne.n	8029666 <digitalWrite+0x22>
 8029660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8029664:	e000      	b.n	8029668 <digitalWrite+0x24>
 8029666:	2301      	movs	r3, #1
 8029668:	78fa      	ldrb	r2, [r7, #3]
 802966a:	6878      	ldr	r0, [r7, #4]
 802966c:	4611      	mov	r1, r2
 802966e:	461a      	mov	r2, r3
 8029670:	f7ff ffa2 	bl	80295b8 <XMC_GPIO_SetOutputLevel>
	}
 8029674:	3708      	adds	r7, #8
 8029676:	46bd      	mov	sp, r7
 8029678:	bd80      	pop	{r7, pc}
 802967a:	bf00      	nop

0802967c <CCU41_3_IRQHandler>:

//PWM Interrupt
	void PWM_Counter_0()
	{
 802967c:	b580      	push	{r7, lr}
 802967e:	b082      	sub	sp, #8
 8029680:	af00      	add	r7, sp, #0
		uint8_t n = 0;
 8029682:	2300      	movs	r3, #0
 8029684:	71fb      	strb	r3, [r7, #7]
		ActPos[n] = (Dir[n]==0)?ActPos[n]+1:ActPos[n]-1;
 8029686:	79fa      	ldrb	r2, [r7, #7]
 8029688:	79fb      	ldrb	r3, [r7, #7]
 802968a:	491a      	ldr	r1, [pc, #104]	; (80296f4 <CCU41_3_IRQHandler+0x78>)
 802968c:	5ccb      	ldrb	r3, [r1, r3]
 802968e:	2b00      	cmp	r3, #0
 8029690:	d105      	bne.n	802969e <CCU41_3_IRQHandler+0x22>
 8029692:	79fb      	ldrb	r3, [r7, #7]
 8029694:	4918      	ldr	r1, [pc, #96]	; (80296f8 <CCU41_3_IRQHandler+0x7c>)
 8029696:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802969a:	3301      	adds	r3, #1
 802969c:	e004      	b.n	80296a8 <CCU41_3_IRQHandler+0x2c>
 802969e:	79fb      	ldrb	r3, [r7, #7]
 80296a0:	4915      	ldr	r1, [pc, #84]	; (80296f8 <CCU41_3_IRQHandler+0x7c>)
 80296a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80296a6:	3b01      	subs	r3, #1
 80296a8:	4913      	ldr	r1, [pc, #76]	; (80296f8 <CCU41_3_IRQHandler+0x7c>)
 80296aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		if ((Mode[n] == 1) && (ActPos[0] == TarPos[n])){
 80296ae:	79fb      	ldrb	r3, [r7, #7]
 80296b0:	4a12      	ldr	r2, [pc, #72]	; (80296fc <CCU41_3_IRQHandler+0x80>)
 80296b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80296b6:	2b01      	cmp	r3, #1
 80296b8:	d119      	bne.n	80296ee <CCU41_3_IRQHandler+0x72>
 80296ba:	4b0f      	ldr	r3, [pc, #60]	; (80296f8 <CCU41_3_IRQHandler+0x7c>)
 80296bc:	681a      	ldr	r2, [r3, #0]
 80296be:	79fb      	ldrb	r3, [r7, #7]
 80296c0:	490f      	ldr	r1, [pc, #60]	; (8029700 <CCU41_3_IRQHandler+0x84>)
 80296c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80296c6:	429a      	cmp	r2, r3
 80296c8:	d111      	bne.n	80296ee <CCU41_3_IRQHandler+0x72>
			ActVel[n] = 0;
 80296ca:	79fb      	ldrb	r3, [r7, #7]
 80296cc:	4a0d      	ldr	r2, [pc, #52]	; (8029704 <CCU41_3_IRQHandler+0x88>)
 80296ce:	2100      	movs	r1, #0
 80296d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			CtrlVel[n] = 0;
 80296d4:	79fb      	ldrb	r3, [r7, #7]
 80296d6:	4a0c      	ldr	r2, [pc, #48]	; (8029708 <CCU41_3_IRQHandler+0x8c>)
 80296d8:	2100      	movs	r1, #0
 80296da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			TarVel[n] = 0;
 80296de:	79fb      	ldrb	r3, [r7, #7]
 80296e0:	4a0a      	ldr	r2, [pc, #40]	; (802970c <CCU41_3_IRQHandler+0x90>)
 80296e2:	2100      	movs	r1, #0
 80296e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			PWM_CCU4_Stop(&PWM_0);
 80296e8:	4809      	ldr	r0, [pc, #36]	; (8029710 <CCU41_3_IRQHandler+0x94>)
 80296ea:	f7fe fd4d 	bl	8028188 <PWM_CCU4_Stop>
		}
	}
 80296ee:	3708      	adds	r7, #8
 80296f0:	46bd      	mov	sp, r7
 80296f2:	bd80      	pop	{r7, pc}
 80296f4:	1fff2924 	.word	0x1fff2924
 80296f8:	1fff2928 	.word	0x1fff2928
 80296fc:	1fff2908 	.word	0x1fff2908
 8029700:	1fff2914 	.word	0x1fff2914
 8029704:	1fff28ec 	.word	0x1fff28ec
 8029708:	1fff28e0 	.word	0x1fff28e0
 802970c:	1fff28d4 	.word	0x1fff28d4
 8029710:	1fff148c 	.word	0x1fff148c

08029714 <CCU41_1_IRQHandler>:

	void PWM_Counter_1()
	{
 8029714:	b580      	push	{r7, lr}
 8029716:	b082      	sub	sp, #8
 8029718:	af00      	add	r7, sp, #0
		uint8_t n = 1;
 802971a:	2301      	movs	r3, #1
 802971c:	71fb      	strb	r3, [r7, #7]
		ActPos[n] = (Dir[n]==0)?ActPos[n]+1:ActPos[n]-1;
 802971e:	79fa      	ldrb	r2, [r7, #7]
 8029720:	79fb      	ldrb	r3, [r7, #7]
 8029722:	491a      	ldr	r1, [pc, #104]	; (802978c <CCU41_1_IRQHandler+0x78>)
 8029724:	5ccb      	ldrb	r3, [r1, r3]
 8029726:	2b00      	cmp	r3, #0
 8029728:	d105      	bne.n	8029736 <CCU41_1_IRQHandler+0x22>
 802972a:	79fb      	ldrb	r3, [r7, #7]
 802972c:	4918      	ldr	r1, [pc, #96]	; (8029790 <CCU41_1_IRQHandler+0x7c>)
 802972e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8029732:	3301      	adds	r3, #1
 8029734:	e004      	b.n	8029740 <CCU41_1_IRQHandler+0x2c>
 8029736:	79fb      	ldrb	r3, [r7, #7]
 8029738:	4915      	ldr	r1, [pc, #84]	; (8029790 <CCU41_1_IRQHandler+0x7c>)
 802973a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802973e:	3b01      	subs	r3, #1
 8029740:	4913      	ldr	r1, [pc, #76]	; (8029790 <CCU41_1_IRQHandler+0x7c>)
 8029742:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		if ((Mode[n] == 1) && (ActPos[0] == TarPos[n])){
 8029746:	79fb      	ldrb	r3, [r7, #7]
 8029748:	4a12      	ldr	r2, [pc, #72]	; (8029794 <CCU41_1_IRQHandler+0x80>)
 802974a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802974e:	2b01      	cmp	r3, #1
 8029750:	d119      	bne.n	8029786 <CCU41_1_IRQHandler+0x72>
 8029752:	4b0f      	ldr	r3, [pc, #60]	; (8029790 <CCU41_1_IRQHandler+0x7c>)
 8029754:	681a      	ldr	r2, [r3, #0]
 8029756:	79fb      	ldrb	r3, [r7, #7]
 8029758:	490f      	ldr	r1, [pc, #60]	; (8029798 <CCU41_1_IRQHandler+0x84>)
 802975a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802975e:	429a      	cmp	r2, r3
 8029760:	d111      	bne.n	8029786 <CCU41_1_IRQHandler+0x72>
			ActVel[n] = 0;
 8029762:	79fb      	ldrb	r3, [r7, #7]
 8029764:	4a0d      	ldr	r2, [pc, #52]	; (802979c <CCU41_1_IRQHandler+0x88>)
 8029766:	2100      	movs	r1, #0
 8029768:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			CtrlVel[n] = 0;
 802976c:	79fb      	ldrb	r3, [r7, #7]
 802976e:	4a0c      	ldr	r2, [pc, #48]	; (80297a0 <CCU41_1_IRQHandler+0x8c>)
 8029770:	2100      	movs	r1, #0
 8029772:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			TarVel[n] = 0;
 8029776:	79fb      	ldrb	r3, [r7, #7]
 8029778:	4a0a      	ldr	r2, [pc, #40]	; (80297a4 <CCU41_1_IRQHandler+0x90>)
 802977a:	2100      	movs	r1, #0
 802977c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			PWM_CCU4_Stop(&PWM_1);
 8029780:	4809      	ldr	r0, [pc, #36]	; (80297a8 <CCU41_1_IRQHandler+0x94>)
 8029782:	f7fe fd01 	bl	8028188 <PWM_CCU4_Stop>
		}
	}
 8029786:	3708      	adds	r7, #8
 8029788:	46bd      	mov	sp, r7
 802978a:	bd80      	pop	{r7, pc}
 802978c:	1fff2924 	.word	0x1fff2924
 8029790:	1fff2928 	.word	0x1fff2928
 8029794:	1fff2908 	.word	0x1fff2908
 8029798:	1fff2914 	.word	0x1fff2914
 802979c:	1fff28ec 	.word	0x1fff28ec
 80297a0:	1fff28e0 	.word	0x1fff28e0
 80297a4:	1fff28d4 	.word	0x1fff28d4
 80297a8:	1fff14b4 	.word	0x1fff14b4

080297ac <CCU41_0_IRQHandler>:

	void PWM_Counter_2()
	{
 80297ac:	b580      	push	{r7, lr}
 80297ae:	b082      	sub	sp, #8
 80297b0:	af00      	add	r7, sp, #0
		uint8_t n = 2;
 80297b2:	2302      	movs	r3, #2
 80297b4:	71fb      	strb	r3, [r7, #7]
		ActPos[n] = (Dir[n]==0)?ActPos[n]+1:ActPos[n]-1;
 80297b6:	79fa      	ldrb	r2, [r7, #7]
 80297b8:	79fb      	ldrb	r3, [r7, #7]
 80297ba:	491a      	ldr	r1, [pc, #104]	; (8029824 <CCU41_0_IRQHandler+0x78>)
 80297bc:	5ccb      	ldrb	r3, [r1, r3]
 80297be:	2b00      	cmp	r3, #0
 80297c0:	d105      	bne.n	80297ce <CCU41_0_IRQHandler+0x22>
 80297c2:	79fb      	ldrb	r3, [r7, #7]
 80297c4:	4918      	ldr	r1, [pc, #96]	; (8029828 <CCU41_0_IRQHandler+0x7c>)
 80297c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80297ca:	3301      	adds	r3, #1
 80297cc:	e004      	b.n	80297d8 <CCU41_0_IRQHandler+0x2c>
 80297ce:	79fb      	ldrb	r3, [r7, #7]
 80297d0:	4915      	ldr	r1, [pc, #84]	; (8029828 <CCU41_0_IRQHandler+0x7c>)
 80297d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80297d6:	3b01      	subs	r3, #1
 80297d8:	4913      	ldr	r1, [pc, #76]	; (8029828 <CCU41_0_IRQHandler+0x7c>)
 80297da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		if ((Mode[n] == 1) && (ActPos[0] == TarPos[n])){
 80297de:	79fb      	ldrb	r3, [r7, #7]
 80297e0:	4a12      	ldr	r2, [pc, #72]	; (802982c <CCU41_0_IRQHandler+0x80>)
 80297e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80297e6:	2b01      	cmp	r3, #1
 80297e8:	d119      	bne.n	802981e <CCU41_0_IRQHandler+0x72>
 80297ea:	4b0f      	ldr	r3, [pc, #60]	; (8029828 <CCU41_0_IRQHandler+0x7c>)
 80297ec:	681a      	ldr	r2, [r3, #0]
 80297ee:	79fb      	ldrb	r3, [r7, #7]
 80297f0:	490f      	ldr	r1, [pc, #60]	; (8029830 <CCU41_0_IRQHandler+0x84>)
 80297f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80297f6:	429a      	cmp	r2, r3
 80297f8:	d111      	bne.n	802981e <CCU41_0_IRQHandler+0x72>
			ActVel[n] = 0;
 80297fa:	79fb      	ldrb	r3, [r7, #7]
 80297fc:	4a0d      	ldr	r2, [pc, #52]	; (8029834 <CCU41_0_IRQHandler+0x88>)
 80297fe:	2100      	movs	r1, #0
 8029800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			CtrlVel[n] = 0;
 8029804:	79fb      	ldrb	r3, [r7, #7]
 8029806:	4a0c      	ldr	r2, [pc, #48]	; (8029838 <CCU41_0_IRQHandler+0x8c>)
 8029808:	2100      	movs	r1, #0
 802980a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			TarVel[n] = 0;
 802980e:	79fb      	ldrb	r3, [r7, #7]
 8029810:	4a0a      	ldr	r2, [pc, #40]	; (802983c <CCU41_0_IRQHandler+0x90>)
 8029812:	2100      	movs	r1, #0
 8029814:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			PWM_CCU4_Stop(&PWM_2);
 8029818:	4809      	ldr	r0, [pc, #36]	; (8029840 <CCU41_0_IRQHandler+0x94>)
 802981a:	f7fe fcb5 	bl	8028188 <PWM_CCU4_Stop>
		}
	}
 802981e:	3708      	adds	r7, #8
 8029820:	46bd      	mov	sp, r7
 8029822:	bd80      	pop	{r7, pc}
 8029824:	1fff2924 	.word	0x1fff2924
 8029828:	1fff2928 	.word	0x1fff2928
 802982c:	1fff2908 	.word	0x1fff2908
 8029830:	1fff2914 	.word	0x1fff2914
 8029834:	1fff28ec 	.word	0x1fff28ec
 8029838:	1fff28e0 	.word	0x1fff28e0
 802983c:	1fff28d4 	.word	0x1fff28d4
 8029840:	1fff14dc 	.word	0x1fff14dc

08029844 <ramp>:

//RAMP
	int32_t ramp(int32_t targetvel, int32_t actualvel, int32_t acc){
 8029844:	b480      	push	{r7}
 8029846:	b085      	sub	sp, #20
 8029848:	af00      	add	r7, sp, #0
 802984a:	60f8      	str	r0, [r7, #12]
 802984c:	60b9      	str	r1, [r7, #8]
 802984e:	607a      	str	r2, [r7, #4]
		if (targetvel > (actualvel + acc)){
 8029850:	68ba      	ldr	r2, [r7, #8]
 8029852:	687b      	ldr	r3, [r7, #4]
 8029854:	441a      	add	r2, r3
 8029856:	68fb      	ldr	r3, [r7, #12]
 8029858:	429a      	cmp	r2, r3
 802985a:	da03      	bge.n	8029864 <ramp+0x20>
			return (actualvel + acc);
 802985c:	68ba      	ldr	r2, [r7, #8]
 802985e:	687b      	ldr	r3, [r7, #4]
 8029860:	4413      	add	r3, r2
 8029862:	e00a      	b.n	802987a <ramp+0x36>
		}else if (targetvel < (actualvel - acc)){
 8029864:	68ba      	ldr	r2, [r7, #8]
 8029866:	687b      	ldr	r3, [r7, #4]
 8029868:	1ad2      	subs	r2, r2, r3
 802986a:	68fb      	ldr	r3, [r7, #12]
 802986c:	429a      	cmp	r2, r3
 802986e:	dd03      	ble.n	8029878 <ramp+0x34>
			return (actualvel - acc);
 8029870:	68ba      	ldr	r2, [r7, #8]
 8029872:	687b      	ldr	r3, [r7, #4]
 8029874:	1ad3      	subs	r3, r2, r3
 8029876:	e000      	b.n	802987a <ramp+0x36>
		}else{
			return (targetvel);
 8029878:	68fb      	ldr	r3, [r7, #12]
		}
	}
 802987a:	4618      	mov	r0, r3
 802987c:	3714      	adds	r7, #20
 802987e:	46bd      	mov	sp, r7
 8029880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029884:	4770      	bx	lr
 8029886:	bf00      	nop

08029888 <PosCtrl>:

//Position Control
	int32_t PosCtrl(int32_t targetpos, int32_t actualpos, int32_t targetvel, int32_t actualvel, int32_t acc, uint8_t Channel)
	{
 8029888:	b480      	push	{r7}
 802988a:	b087      	sub	sp, #28
 802988c:	af00      	add	r7, sp, #0
 802988e:	60f8      	str	r0, [r7, #12]
 8029890:	60b9      	str	r1, [r7, #8]
 8029892:	607a      	str	r2, [r7, #4]
 8029894:	603b      	str	r3, [r7, #0]
		int32_t time = abs(actualvel) / acc;
 8029896:	683b      	ldr	r3, [r7, #0]
 8029898:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 802989c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80298a0:	6a3b      	ldr	r3, [r7, #32]
 80298a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80298a6:	617b      	str	r3, [r7, #20]
		int32_t accpos = ((time+ 20)* abs(actualvel) ) / 2000;
 80298a8:	697b      	ldr	r3, [r7, #20]
 80298aa:	3314      	adds	r3, #20
 80298ac:	683a      	ldr	r2, [r7, #0]
 80298ae:	2a00      	cmp	r2, #0
 80298b0:	bfb8      	it	lt
 80298b2:	4252      	neglt	r2, r2
 80298b4:	fb02 f303 	mul.w	r3, r2, r3
 80298b8:	4a15      	ldr	r2, [pc, #84]	; (8029910 <PosCtrl+0x88>)
 80298ba:	fb82 1203 	smull	r1, r2, r2, r3
 80298be:	11d2      	asrs	r2, r2, #7
 80298c0:	17db      	asrs	r3, r3, #31
 80298c2:	1ad3      	subs	r3, r2, r3
 80298c4:	613b      	str	r3, [r7, #16]

		if (targetpos > actualpos){//Position Movement
 80298c6:	68fa      	ldr	r2, [r7, #12]
 80298c8:	68bb      	ldr	r3, [r7, #8]
 80298ca:	429a      	cmp	r2, r3
 80298cc:	dd09      	ble.n	80298e2 <PosCtrl+0x5a>
			if (targetpos < (actualpos + accpos)){
 80298ce:	68ba      	ldr	r2, [r7, #8]
 80298d0:	693b      	ldr	r3, [r7, #16]
 80298d2:	441a      	add	r2, r3
 80298d4:	68fb      	ldr	r3, [r7, #12]
 80298d6:	429a      	cmp	r2, r3
 80298d8:	dd01      	ble.n	80298de <PosCtrl+0x56>
				return 30;
 80298da:	231e      	movs	r3, #30
 80298dc:	e012      	b.n	8029904 <PosCtrl+0x7c>
			}else{
				return targetvel;
 80298de:	687b      	ldr	r3, [r7, #4]
 80298e0:	e010      	b.n	8029904 <PosCtrl+0x7c>
			}
		}else if (targetpos < actualpos){//Negative Movement
 80298e2:	68fa      	ldr	r2, [r7, #12]
 80298e4:	68bb      	ldr	r3, [r7, #8]
 80298e6:	429a      	cmp	r2, r3
 80298e8:	da0b      	bge.n	8029902 <PosCtrl+0x7a>
			if (targetpos > (actualpos - accpos)){
 80298ea:	68ba      	ldr	r2, [r7, #8]
 80298ec:	693b      	ldr	r3, [r7, #16]
 80298ee:	1ad2      	subs	r2, r2, r3
 80298f0:	68fb      	ldr	r3, [r7, #12]
 80298f2:	429a      	cmp	r2, r3
 80298f4:	da02      	bge.n	80298fc <PosCtrl+0x74>
				return -30;
 80298f6:	f06f 031d 	mvn.w	r3, #29
 80298fa:	e003      	b.n	8029904 <PosCtrl+0x7c>
			}else{
				return (-targetvel);
 80298fc:	687b      	ldr	r3, [r7, #4]
 80298fe:	425b      	negs	r3, r3
 8029900:	e000      	b.n	8029904 <PosCtrl+0x7c>
			}
		}
		//StandStill
		return 0;
 8029902:	2300      	movs	r3, #0
	}
 8029904:	4618      	mov	r0, r3
 8029906:	371c      	adds	r7, #28
 8029908:	46bd      	mov	sp, r7
 802990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802990e:	4770      	bx	lr
 8029910:	10624dd3 	.word	0x10624dd3

08029914 <CCU40_2_IRQHandler>:

//Tick
	void Tick()
	{
 8029914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029916:	b085      	sub	sp, #20
 8029918:	af02      	add	r7, sp, #8
		//Motor Position Control
		for (uint8_t i=0; i<4; i++){
 802991a:	2300      	movs	r3, #0
 802991c:	71fb      	strb	r3, [r7, #7]
 802991e:	e028      	b.n	8029972 <CCU40_2_IRQHandler+0x5e>
			if (Mode[i] == 1){
 8029920:	79fb      	ldrb	r3, [r7, #7]
 8029922:	4a82      	ldr	r2, [pc, #520]	; (8029b2c <CCU40_2_IRQHandler+0x218>)
 8029924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8029928:	2b01      	cmp	r3, #1
 802992a:	d11f      	bne.n	802996c <CCU40_2_IRQHandler+0x58>
				CtrlVel[i] = PosCtrl(TarPos[i], ActPos[i], TarVel[i], ActVel[i], Acc[i], i);
 802992c:	79fc      	ldrb	r4, [r7, #7]
 802992e:	79fb      	ldrb	r3, [r7, #7]
 8029930:	4a7f      	ldr	r2, [pc, #508]	; (8029b30 <CCU40_2_IRQHandler+0x21c>)
 8029932:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8029936:	79fb      	ldrb	r3, [r7, #7]
 8029938:	4a7e      	ldr	r2, [pc, #504]	; (8029b34 <CCU40_2_IRQHandler+0x220>)
 802993a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802993e:	79fb      	ldrb	r3, [r7, #7]
 8029940:	4a7d      	ldr	r2, [pc, #500]	; (8029b38 <CCU40_2_IRQHandler+0x224>)
 8029942:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8029946:	79fb      	ldrb	r3, [r7, #7]
 8029948:	4a7c      	ldr	r2, [pc, #496]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 802994a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 802994e:	79fb      	ldrb	r3, [r7, #7]
 8029950:	4a7b      	ldr	r2, [pc, #492]	; (8029b40 <CCU40_2_IRQHandler+0x22c>)
 8029952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8029956:	9300      	str	r3, [sp, #0]
 8029958:	79fb      	ldrb	r3, [r7, #7]
 802995a:	9301      	str	r3, [sp, #4]
 802995c:	4632      	mov	r2, r6
 802995e:	462b      	mov	r3, r5
 8029960:	f7ff ff92 	bl	8029888 <PosCtrl>
 8029964:	4602      	mov	r2, r0
 8029966:	4b77      	ldr	r3, [pc, #476]	; (8029b44 <CCU40_2_IRQHandler+0x230>)
 8029968:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

//Tick
	void Tick()
	{
		//Motor Position Control
		for (uint8_t i=0; i<4; i++){
 802996c:	79fb      	ldrb	r3, [r7, #7]
 802996e:	3301      	adds	r3, #1
 8029970:	71fb      	strb	r3, [r7, #7]
 8029972:	79fb      	ldrb	r3, [r7, #7]
 8029974:	2b03      	cmp	r3, #3
 8029976:	d9d3      	bls.n	8029920 <CCU40_2_IRQHandler+0xc>
				CtrlVel[i] = PosCtrl(TarPos[i], ActPos[i], TarVel[i], ActVel[i], Acc[i], i);
			}
		}

		//Run every millisecond;
		for (uint8_t i=0; i<4; i++){
 8029978:	2300      	movs	r3, #0
 802997a:	71bb      	strb	r3, [r7, #6]
 802997c:	e03d      	b.n	80299fa <CCU40_2_IRQHandler+0xe6>
			if (Mode[i] == 1){
 802997e:	79bb      	ldrb	r3, [r7, #6]
 8029980:	4a6a      	ldr	r2, [pc, #424]	; (8029b2c <CCU40_2_IRQHandler+0x218>)
 8029982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8029986:	2b01      	cmp	r3, #1
 8029988:	d114      	bne.n	80299b4 <CCU40_2_IRQHandler+0xa0>
				ActVel[i] = ramp(CtrlVel[i], ActVel[i], Acc[i]);//Profile Position
 802998a:	79bc      	ldrb	r4, [r7, #6]
 802998c:	79bb      	ldrb	r3, [r7, #6]
 802998e:	4a6d      	ldr	r2, [pc, #436]	; (8029b44 <CCU40_2_IRQHandler+0x230>)
 8029990:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8029994:	79bb      	ldrb	r3, [r7, #6]
 8029996:	4a69      	ldr	r2, [pc, #420]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029998:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802999c:	79bb      	ldrb	r3, [r7, #6]
 802999e:	4a68      	ldr	r2, [pc, #416]	; (8029b40 <CCU40_2_IRQHandler+0x22c>)
 80299a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80299a4:	461a      	mov	r2, r3
 80299a6:	f7ff ff4d 	bl	8029844 <ramp>
 80299aa:	4602      	mov	r2, r0
 80299ac:	4b63      	ldr	r3, [pc, #396]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 80299ae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80299b2:	e01f      	b.n	80299f4 <CCU40_2_IRQHandler+0xe0>
			}else if (Mode[i] == 3){
 80299b4:	79bb      	ldrb	r3, [r7, #6]
 80299b6:	4a5d      	ldr	r2, [pc, #372]	; (8029b2c <CCU40_2_IRQHandler+0x218>)
 80299b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80299bc:	2b03      	cmp	r3, #3
 80299be:	d114      	bne.n	80299ea <CCU40_2_IRQHandler+0xd6>
				ActVel[i] = ramp(TarVel[i], ActVel[i], Acc[i]);//Profile Velocity
 80299c0:	79bc      	ldrb	r4, [r7, #6]
 80299c2:	79bb      	ldrb	r3, [r7, #6]
 80299c4:	4a5c      	ldr	r2, [pc, #368]	; (8029b38 <CCU40_2_IRQHandler+0x224>)
 80299c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80299ca:	79bb      	ldrb	r3, [r7, #6]
 80299cc:	4a5b      	ldr	r2, [pc, #364]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 80299ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80299d2:	79bb      	ldrb	r3, [r7, #6]
 80299d4:	4a5a      	ldr	r2, [pc, #360]	; (8029b40 <CCU40_2_IRQHandler+0x22c>)
 80299d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80299da:	461a      	mov	r2, r3
 80299dc:	f7ff ff32 	bl	8029844 <ramp>
 80299e0:	4602      	mov	r2, r0
 80299e2:	4b56      	ldr	r3, [pc, #344]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 80299e4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80299e8:	e004      	b.n	80299f4 <CCU40_2_IRQHandler+0xe0>
			}else{
				ActVel[i] = 0;
 80299ea:	79bb      	ldrb	r3, [r7, #6]
 80299ec:	4a53      	ldr	r2, [pc, #332]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 80299ee:	2100      	movs	r1, #0
 80299f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				CtrlVel[i] = PosCtrl(TarPos[i], ActPos[i], TarVel[i], ActVel[i], Acc[i], i);
			}
		}

		//Run every millisecond;
		for (uint8_t i=0; i<4; i++){
 80299f4:	79bb      	ldrb	r3, [r7, #6]
 80299f6:	3301      	adds	r3, #1
 80299f8:	71bb      	strb	r3, [r7, #6]
 80299fa:	79bb      	ldrb	r3, [r7, #6]
 80299fc:	2b03      	cmp	r3, #3
 80299fe:	d9be      	bls.n	802997e <CCU40_2_IRQHandler+0x6a>
				ActVel[i] = 0;
			}
		}

		//Channel 0
		PWM_CCU4_SetFreq(&PWM_0, abs(ActVel[0]));
 8029a00:	4b4e      	ldr	r3, [pc, #312]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029a02:	681b      	ldr	r3, [r3, #0]
 8029a04:	2b00      	cmp	r3, #0
 8029a06:	bfb8      	it	lt
 8029a08:	425b      	neglt	r3, r3
 8029a0a:	484f      	ldr	r0, [pc, #316]	; (8029b48 <CCU40_2_IRQHandler+0x234>)
 8029a0c:	4619      	mov	r1, r3
 8029a0e:	f7fe fbd9 	bl	80281c4 <PWM_CCU4_SetFreq>
		if (ActVel[0] > 20){
 8029a12:	4b4a      	ldr	r3, [pc, #296]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029a14:	681b      	ldr	r3, [r3, #0]
 8029a16:	2b14      	cmp	r3, #20
 8029a18:	dd0b      	ble.n	8029a32 <CCU40_2_IRQHandler+0x11e>
			digitalWrite(P1_5, false);//Write to GPIO before start
 8029a1a:	484c      	ldr	r0, [pc, #304]	; (8029b4c <CCU40_2_IRQHandler+0x238>)
 8029a1c:	2105      	movs	r1, #5
 8029a1e:	2200      	movs	r2, #0
 8029a20:	f7ff fe10 	bl	8029644 <digitalWrite>
			Dir[0] = 0;
 8029a24:	4b4a      	ldr	r3, [pc, #296]	; (8029b50 <CCU40_2_IRQHandler+0x23c>)
 8029a26:	2200      	movs	r2, #0
 8029a28:	701a      	strb	r2, [r3, #0]
			PWM_CCU4_Start(&PWM_0);
 8029a2a:	4847      	ldr	r0, [pc, #284]	; (8029b48 <CCU40_2_IRQHandler+0x234>)
 8029a2c:	f7fe fb80 	bl	8028130 <PWM_CCU4_Start>
 8029a30:	e013      	b.n	8029a5a <CCU40_2_IRQHandler+0x146>
		}else if (ActVel[0] < -20){
 8029a32:	4b42      	ldr	r3, [pc, #264]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029a34:	681b      	ldr	r3, [r3, #0]
 8029a36:	f113 0f14 	cmn.w	r3, #20
 8029a3a:	da0b      	bge.n	8029a54 <CCU40_2_IRQHandler+0x140>
			digitalWrite(P1_5, true);
 8029a3c:	4843      	ldr	r0, [pc, #268]	; (8029b4c <CCU40_2_IRQHandler+0x238>)
 8029a3e:	2105      	movs	r1, #5
 8029a40:	2201      	movs	r2, #1
 8029a42:	f7ff fdff 	bl	8029644 <digitalWrite>
			Dir[0] = 1;
 8029a46:	4b42      	ldr	r3, [pc, #264]	; (8029b50 <CCU40_2_IRQHandler+0x23c>)
 8029a48:	2201      	movs	r2, #1
 8029a4a:	701a      	strb	r2, [r3, #0]
			PWM_CCU4_Start(&PWM_0);
 8029a4c:	483e      	ldr	r0, [pc, #248]	; (8029b48 <CCU40_2_IRQHandler+0x234>)
 8029a4e:	f7fe fb6f 	bl	8028130 <PWM_CCU4_Start>
 8029a52:	e002      	b.n	8029a5a <CCU40_2_IRQHandler+0x146>
		}else{
			PWM_CCU4_Stop(&PWM_0);
 8029a54:	483c      	ldr	r0, [pc, #240]	; (8029b48 <CCU40_2_IRQHandler+0x234>)
 8029a56:	f7fe fb97 	bl	8028188 <PWM_CCU4_Stop>
		}

		//Channel 1
		PWM_CCU4_SetFreq(&PWM_1, abs(ActVel[1]));
 8029a5a:	4b38      	ldr	r3, [pc, #224]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029a5c:	685b      	ldr	r3, [r3, #4]
 8029a5e:	2b00      	cmp	r3, #0
 8029a60:	bfb8      	it	lt
 8029a62:	425b      	neglt	r3, r3
 8029a64:	483b      	ldr	r0, [pc, #236]	; (8029b54 <CCU40_2_IRQHandler+0x240>)
 8029a66:	4619      	mov	r1, r3
 8029a68:	f7fe fbac 	bl	80281c4 <PWM_CCU4_SetFreq>
		if (ActVel[1] > 20){
 8029a6c:	4b33      	ldr	r3, [pc, #204]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029a6e:	685b      	ldr	r3, [r3, #4]
 8029a70:	2b14      	cmp	r3, #20
 8029a72:	dd0b      	ble.n	8029a8c <CCU40_2_IRQHandler+0x178>
			digitalWrite(P3_5, false);//Write to GPIO before start
 8029a74:	4838      	ldr	r0, [pc, #224]	; (8029b58 <CCU40_2_IRQHandler+0x244>)
 8029a76:	2105      	movs	r1, #5
 8029a78:	2200      	movs	r2, #0
 8029a7a:	f7ff fde3 	bl	8029644 <digitalWrite>
			Dir[1] = 0;
 8029a7e:	4b34      	ldr	r3, [pc, #208]	; (8029b50 <CCU40_2_IRQHandler+0x23c>)
 8029a80:	2200      	movs	r2, #0
 8029a82:	705a      	strb	r2, [r3, #1]
			PWM_CCU4_Start(&PWM_1);
 8029a84:	4833      	ldr	r0, [pc, #204]	; (8029b54 <CCU40_2_IRQHandler+0x240>)
 8029a86:	f7fe fb53 	bl	8028130 <PWM_CCU4_Start>
 8029a8a:	e013      	b.n	8029ab4 <CCU40_2_IRQHandler+0x1a0>
		}else if (ActVel[1] < -20){
 8029a8c:	4b2b      	ldr	r3, [pc, #172]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029a8e:	685b      	ldr	r3, [r3, #4]
 8029a90:	f113 0f14 	cmn.w	r3, #20
 8029a94:	da0b      	bge.n	8029aae <CCU40_2_IRQHandler+0x19a>
			digitalWrite(P3_5, true);
 8029a96:	4830      	ldr	r0, [pc, #192]	; (8029b58 <CCU40_2_IRQHandler+0x244>)
 8029a98:	2105      	movs	r1, #5
 8029a9a:	2201      	movs	r2, #1
 8029a9c:	f7ff fdd2 	bl	8029644 <digitalWrite>
			Dir[1] = 1;
 8029aa0:	4b2b      	ldr	r3, [pc, #172]	; (8029b50 <CCU40_2_IRQHandler+0x23c>)
 8029aa2:	2201      	movs	r2, #1
 8029aa4:	705a      	strb	r2, [r3, #1]
			PWM_CCU4_Start(&PWM_1);
 8029aa6:	482b      	ldr	r0, [pc, #172]	; (8029b54 <CCU40_2_IRQHandler+0x240>)
 8029aa8:	f7fe fb42 	bl	8028130 <PWM_CCU4_Start>
 8029aac:	e002      	b.n	8029ab4 <CCU40_2_IRQHandler+0x1a0>
		}else{
			PWM_CCU4_Stop(&PWM_1);
 8029aae:	4829      	ldr	r0, [pc, #164]	; (8029b54 <CCU40_2_IRQHandler+0x240>)
 8029ab0:	f7fe fb6a 	bl	8028188 <PWM_CCU4_Stop>
		}

		//Channel 2
		PWM_CCU4_SetFreq(&PWM_2, abs(ActVel[2]));
 8029ab4:	4b21      	ldr	r3, [pc, #132]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029ab6:	689b      	ldr	r3, [r3, #8]
 8029ab8:	2b00      	cmp	r3, #0
 8029aba:	bfb8      	it	lt
 8029abc:	425b      	neglt	r3, r3
 8029abe:	4827      	ldr	r0, [pc, #156]	; (8029b5c <CCU40_2_IRQHandler+0x248>)
 8029ac0:	4619      	mov	r1, r3
 8029ac2:	f7fe fb7f 	bl	80281c4 <PWM_CCU4_SetFreq>
		if (ActVel[2] > 20){
 8029ac6:	4b1d      	ldr	r3, [pc, #116]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029ac8:	689b      	ldr	r3, [r3, #8]
 8029aca:	2b14      	cmp	r3, #20
 8029acc:	dd0b      	ble.n	8029ae6 <CCU40_2_IRQHandler+0x1d2>
			digitalWrite(P5_0, false);//Write to GPIO before start
 8029ace:	4824      	ldr	r0, [pc, #144]	; (8029b60 <CCU40_2_IRQHandler+0x24c>)
 8029ad0:	2100      	movs	r1, #0
 8029ad2:	2200      	movs	r2, #0
 8029ad4:	f7ff fdb6 	bl	8029644 <digitalWrite>
			Dir[2] = 0;
 8029ad8:	4b1d      	ldr	r3, [pc, #116]	; (8029b50 <CCU40_2_IRQHandler+0x23c>)
 8029ada:	2200      	movs	r2, #0
 8029adc:	709a      	strb	r2, [r3, #2]
			PWM_CCU4_Start(&PWM_2);
 8029ade:	481f      	ldr	r0, [pc, #124]	; (8029b5c <CCU40_2_IRQHandler+0x248>)
 8029ae0:	f7fe fb26 	bl	8028130 <PWM_CCU4_Start>
 8029ae4:	e013      	b.n	8029b0e <CCU40_2_IRQHandler+0x1fa>
		}else if (ActVel[2] < -20){
 8029ae6:	4b15      	ldr	r3, [pc, #84]	; (8029b3c <CCU40_2_IRQHandler+0x228>)
 8029ae8:	689b      	ldr	r3, [r3, #8]
 8029aea:	f113 0f14 	cmn.w	r3, #20
 8029aee:	da0b      	bge.n	8029b08 <CCU40_2_IRQHandler+0x1f4>
			digitalWrite(P5_0, true);
 8029af0:	481b      	ldr	r0, [pc, #108]	; (8029b60 <CCU40_2_IRQHandler+0x24c>)
 8029af2:	2100      	movs	r1, #0
 8029af4:	2201      	movs	r2, #1
 8029af6:	f7ff fda5 	bl	8029644 <digitalWrite>
			Dir[2] = 1;
 8029afa:	4b15      	ldr	r3, [pc, #84]	; (8029b50 <CCU40_2_IRQHandler+0x23c>)
 8029afc:	2201      	movs	r2, #1
 8029afe:	709a      	strb	r2, [r3, #2]
			PWM_CCU4_Start(&PWM_2);
 8029b00:	4816      	ldr	r0, [pc, #88]	; (8029b5c <CCU40_2_IRQHandler+0x248>)
 8029b02:	f7fe fb15 	bl	8028130 <PWM_CCU4_Start>
 8029b06:	e002      	b.n	8029b0e <CCU40_2_IRQHandler+0x1fa>
		}else{
			PWM_CCU4_Stop(&PWM_2);
 8029b08:	4814      	ldr	r0, [pc, #80]	; (8029b5c <CCU40_2_IRQHandler+0x248>)
 8029b0a:	f7fe fb3d 	bl	8028188 <PWM_CCU4_Stop>
		}
		//ENABLE
		digitalWrite(P0_0, Config >> 0 & 0x1);
 8029b0e:	4b15      	ldr	r3, [pc, #84]	; (8029b64 <CCU40_2_IRQHandler+0x250>)
 8029b10:	681b      	ldr	r3, [r3, #0]
 8029b12:	b2db      	uxtb	r3, r3
 8029b14:	f003 0301 	and.w	r3, r3, #1
 8029b18:	b2db      	uxtb	r3, r3
 8029b1a:	4813      	ldr	r0, [pc, #76]	; (8029b68 <CCU40_2_IRQHandler+0x254>)
 8029b1c:	2100      	movs	r1, #0
 8029b1e:	461a      	mov	r2, r3
 8029b20:	f7ff fd90 	bl	8029644 <digitalWrite>
	}
 8029b24:	370c      	adds	r7, #12
 8029b26:	46bd      	mov	sp, r7
 8029b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029b2a:	bf00      	nop
 8029b2c:	1fff2908 	.word	0x1fff2908
 8029b30:	1fff2914 	.word	0x1fff2914
 8029b34:	1fff2928 	.word	0x1fff2928
 8029b38:	1fff28d4 	.word	0x1fff28d4
 8029b3c:	1fff28ec 	.word	0x1fff28ec
 8029b40:	1fff2934 	.word	0x1fff2934
 8029b44:	1fff28e0 	.word	0x1fff28e0
 8029b48:	1fff148c 	.word	0x1fff148c
 8029b4c:	48028100 	.word	0x48028100
 8029b50:	1fff2924 	.word	0x1fff2924
 8029b54:	1fff14b4 	.word	0x1fff14b4
 8029b58:	48028300 	.word	0x48028300
 8029b5c:	1fff14dc 	.word	0x1fff14dc
 8029b60:	48028500 	.word	0x48028500
 8029b64:	1fff2950 	.word	0x1fff2950
 8029b68:	48028000 	.word	0x48028000

08029b6c <Init_GPIO>:

//GPIO INIT
	void Init_GPIO()
	{
 8029b6c:	b580      	push	{r7, lr}
 8029b6e:	b086      	sub	sp, #24
 8029b70:	af00      	add	r7, sp, #0
		XMC_GPIO_CONFIG_t output = {.mode=XMC_GPIO_MODE_OUTPUT_PUSH_PULL};
 8029b72:	f107 030c 	add.w	r3, r7, #12
 8029b76:	2200      	movs	r2, #0
 8029b78:	601a      	str	r2, [r3, #0]
 8029b7a:	3304      	adds	r3, #4
 8029b7c:	2200      	movs	r2, #0
 8029b7e:	601a      	str	r2, [r3, #0]
 8029b80:	3304      	adds	r3, #4
 8029b82:	2200      	movs	r2, #0
 8029b84:	601a      	str	r2, [r3, #0]
 8029b86:	3304      	adds	r3, #4
 8029b88:	2380      	movs	r3, #128	; 0x80
 8029b8a:	733b      	strb	r3, [r7, #12]
		XMC_GPIO_CONFIG_t input = {.mode=XMC_GPIO_MODE_INPUT_TRISTATE};
 8029b8c:	463b      	mov	r3, r7
 8029b8e:	2200      	movs	r2, #0
 8029b90:	601a      	str	r2, [r3, #0]
 8029b92:	3304      	adds	r3, #4
 8029b94:	2200      	movs	r2, #0
 8029b96:	601a      	str	r2, [r3, #0]
 8029b98:	3304      	adds	r3, #4
 8029b9a:	2200      	movs	r2, #0
 8029b9c:	601a      	str	r2, [r3, #0]
 8029b9e:	3304      	adds	r3, #4

		//P0_8 is DB_TRST,Must INIT Digital Function.Others pin is normal.
		XMC_GPIO_Init(P2_14,&input);
 8029ba0:	463b      	mov	r3, r7
 8029ba2:	4815      	ldr	r0, [pc, #84]	; (8029bf8 <Init_GPIO+0x8c>)
 8029ba4:	210e      	movs	r1, #14
 8029ba6:	461a      	mov	r2, r3
 8029ba8:	f7fc fd06 	bl	80265b8 <XMC_GPIO_Init>
		XMC_GPIO_Init(P2_9,&input);
 8029bac:	463b      	mov	r3, r7
 8029bae:	4812      	ldr	r0, [pc, #72]	; (8029bf8 <Init_GPIO+0x8c>)
 8029bb0:	2109      	movs	r1, #9
 8029bb2:	461a      	mov	r2, r3
 8029bb4:	f7fc fd00 	bl	80265b8 <XMC_GPIO_Init>

		XMC_GPIO_Init(P5_0,&output);
 8029bb8:	f107 030c 	add.w	r3, r7, #12
 8029bbc:	480f      	ldr	r0, [pc, #60]	; (8029bfc <Init_GPIO+0x90>)
 8029bbe:	2100      	movs	r1, #0
 8029bc0:	461a      	mov	r2, r3
 8029bc2:	f7fc fcf9 	bl	80265b8 <XMC_GPIO_Init>
		XMC_GPIO_Init(P0_0,&output);
 8029bc6:	f107 030c 	add.w	r3, r7, #12
 8029bca:	480d      	ldr	r0, [pc, #52]	; (8029c00 <Init_GPIO+0x94>)
 8029bcc:	2100      	movs	r1, #0
 8029bce:	461a      	mov	r2, r3
 8029bd0:	f7fc fcf2 	bl	80265b8 <XMC_GPIO_Init>
		XMC_GPIO_Init(P1_5,&output);
 8029bd4:	f107 030c 	add.w	r3, r7, #12
 8029bd8:	480a      	ldr	r0, [pc, #40]	; (8029c04 <Init_GPIO+0x98>)
 8029bda:	2105      	movs	r1, #5
 8029bdc:	461a      	mov	r2, r3
 8029bde:	f7fc fceb 	bl	80265b8 <XMC_GPIO_Init>
		XMC_GPIO_Init(P3_5,&output);
 8029be2:	f107 030c 	add.w	r3, r7, #12
 8029be6:	4808      	ldr	r0, [pc, #32]	; (8029c08 <Init_GPIO+0x9c>)
 8029be8:	2105      	movs	r1, #5
 8029bea:	461a      	mov	r2, r3
 8029bec:	f7fc fce4 	bl	80265b8 <XMC_GPIO_Init>
	}
 8029bf0:	3718      	adds	r7, #24
 8029bf2:	46bd      	mov	sp, r7
 8029bf4:	bd80      	pop	{r7, pc}
 8029bf6:	bf00      	nop
 8029bf8:	48028200 	.word	0x48028200
 8029bfc:	48028500 	.word	0x48028500
 8029c00:	48028000 	.word	0x48028000
 8029c04:	48028100 	.word	0x48028100
 8029c08:	48028300 	.word	0x48028300

08029c0c <process_app>:


void process_app(TOBJ7000 *OUT_GENERIC, TOBJ6000 *IN_GENERIC)
{
 8029c0c:	b480      	push	{r7}
 8029c0e:	b085      	sub	sp, #20
 8029c10:	af00      	add	r7, sp, #0
 8029c12:	6078      	str	r0, [r7, #4]
 8029c14:	6039      	str	r1, [r7, #0]
	IN_GENERIC->CH0_ActualMode 		= Mode[0];
 8029c16:	4b43      	ldr	r3, [pc, #268]	; (8029d24 <process_app+0x118>)
 8029c18:	681a      	ldr	r2, [r3, #0]
 8029c1a:	683b      	ldr	r3, [r7, #0]
 8029c1c:	609a      	str	r2, [r3, #8]
	IN_GENERIC->CH0_ActualPosition 	= ActPos[0];
 8029c1e:	4b42      	ldr	r3, [pc, #264]	; (8029d28 <process_app+0x11c>)
 8029c20:	681a      	ldr	r2, [r3, #0]
 8029c22:	683b      	ldr	r3, [r7, #0]
 8029c24:	60da      	str	r2, [r3, #12]
	IN_GENERIC->CH0_ActualVelocity	= ActVel[0];
 8029c26:	4b41      	ldr	r3, [pc, #260]	; (8029d2c <process_app+0x120>)
 8029c28:	681a      	ldr	r2, [r3, #0]
 8029c2a:	683b      	ldr	r3, [r7, #0]
 8029c2c:	611a      	str	r2, [r3, #16]

	IN_GENERIC->CH1_ActualMode 		= Mode[1];
 8029c2e:	4b3d      	ldr	r3, [pc, #244]	; (8029d24 <process_app+0x118>)
 8029c30:	685a      	ldr	r2, [r3, #4]
 8029c32:	683b      	ldr	r3, [r7, #0]
 8029c34:	615a      	str	r2, [r3, #20]
	IN_GENERIC->CH1_ActualPosition 	= ActPos[1];
 8029c36:	4b3c      	ldr	r3, [pc, #240]	; (8029d28 <process_app+0x11c>)
 8029c38:	685a      	ldr	r2, [r3, #4]
 8029c3a:	683b      	ldr	r3, [r7, #0]
 8029c3c:	619a      	str	r2, [r3, #24]
	IN_GENERIC->CH1_ActualVelocity 	= ActVel[1];
 8029c3e:	4b3b      	ldr	r3, [pc, #236]	; (8029d2c <process_app+0x120>)
 8029c40:	685a      	ldr	r2, [r3, #4]
 8029c42:	683b      	ldr	r3, [r7, #0]
 8029c44:	61da      	str	r2, [r3, #28]

	IN_GENERIC->CH2_ActualMode		= Mode[2];
 8029c46:	4b37      	ldr	r3, [pc, #220]	; (8029d24 <process_app+0x118>)
 8029c48:	689a      	ldr	r2, [r3, #8]
 8029c4a:	683b      	ldr	r3, [r7, #0]
 8029c4c:	621a      	str	r2, [r3, #32]
	IN_GENERIC->CH2_ActualPosition 	= ActPos[2];
 8029c4e:	4b36      	ldr	r3, [pc, #216]	; (8029d28 <process_app+0x11c>)
 8029c50:	689a      	ldr	r2, [r3, #8]
 8029c52:	683b      	ldr	r3, [r7, #0]
 8029c54:	625a      	str	r2, [r3, #36]	; 0x24
	IN_GENERIC->CH2_ActualVelocity 	= ActVel[2];
 8029c56:	4b35      	ldr	r3, [pc, #212]	; (8029d2c <process_app+0x120>)
 8029c58:	689a      	ldr	r2, [r3, #8]
 8029c5a:	683b      	ldr	r3, [r7, #0]
 8029c5c:	629a      	str	r2, [r3, #40]	; 0x28

	IN_GENERIC->ActualConfig		= Config;
 8029c5e:	4b34      	ldr	r3, [pc, #208]	; (8029d30 <process_app+0x124>)
 8029c60:	681a      	ldr	r2, [r3, #0]
 8029c62:	683b      	ldr	r3, [r7, #0]
 8029c64:	605a      	str	r2, [r3, #4]

	if (outenable){
 8029c66:	4b33      	ldr	r3, [pc, #204]	; (8029d34 <process_app+0x128>)
 8029c68:	781b      	ldrb	r3, [r3, #0]
 8029c6a:	2b00      	cmp	r3, #0
 8029c6c:	d034      	beq.n	8029cd8 <process_app+0xcc>
		TarVel[0] 	= OUT_GENERIC->CH0_ProfileVelocity;
 8029c6e:	687b      	ldr	r3, [r7, #4]
 8029c70:	691b      	ldr	r3, [r3, #16]
 8029c72:	4a31      	ldr	r2, [pc, #196]	; (8029d38 <process_app+0x12c>)
 8029c74:	6013      	str	r3, [r2, #0]
		Acc[0] 		= OUT_GENERIC->CH0_ProfileACC;
 8029c76:	687b      	ldr	r3, [r7, #4]
 8029c78:	695b      	ldr	r3, [r3, #20]
 8029c7a:	4a30      	ldr	r2, [pc, #192]	; (8029d3c <process_app+0x130>)
 8029c7c:	6013      	str	r3, [r2, #0]
		Mode[0] 	= OUT_GENERIC->CH0_Mode;
 8029c7e:	687b      	ldr	r3, [r7, #4]
 8029c80:	689b      	ldr	r3, [r3, #8]
 8029c82:	4a28      	ldr	r2, [pc, #160]	; (8029d24 <process_app+0x118>)
 8029c84:	6013      	str	r3, [r2, #0]
		TarPos[0] 	= OUT_GENERIC->CH0_ProfilePosition;
 8029c86:	687b      	ldr	r3, [r7, #4]
 8029c88:	68db      	ldr	r3, [r3, #12]
 8029c8a:	4a2d      	ldr	r2, [pc, #180]	; (8029d40 <process_app+0x134>)
 8029c8c:	6013      	str	r3, [r2, #0]

		TarVel[1] 	= OUT_GENERIC->CH1_ProfileVelocity;
 8029c8e:	687b      	ldr	r3, [r7, #4]
 8029c90:	6a1b      	ldr	r3, [r3, #32]
 8029c92:	4a29      	ldr	r2, [pc, #164]	; (8029d38 <process_app+0x12c>)
 8029c94:	6053      	str	r3, [r2, #4]
		Acc[1] 		= OUT_GENERIC->CH1_ProfileACC;
 8029c96:	687b      	ldr	r3, [r7, #4]
 8029c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029c9a:	4a28      	ldr	r2, [pc, #160]	; (8029d3c <process_app+0x130>)
 8029c9c:	6053      	str	r3, [r2, #4]
		Mode[1] 	= OUT_GENERIC->CH1_Mode;
 8029c9e:	687b      	ldr	r3, [r7, #4]
 8029ca0:	699b      	ldr	r3, [r3, #24]
 8029ca2:	4a20      	ldr	r2, [pc, #128]	; (8029d24 <process_app+0x118>)
 8029ca4:	6053      	str	r3, [r2, #4]
		TarPos[1] 	= OUT_GENERIC->CH1_ProfilePosition;
 8029ca6:	687b      	ldr	r3, [r7, #4]
 8029ca8:	69db      	ldr	r3, [r3, #28]
 8029caa:	4a25      	ldr	r2, [pc, #148]	; (8029d40 <process_app+0x134>)
 8029cac:	6053      	str	r3, [r2, #4]

		TarVel[2] 	= OUT_GENERIC->CH2_ProfileVelocity;
 8029cae:	687b      	ldr	r3, [r7, #4]
 8029cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029cb2:	4a21      	ldr	r2, [pc, #132]	; (8029d38 <process_app+0x12c>)
 8029cb4:	6093      	str	r3, [r2, #8]
		Acc[2] 		= OUT_GENERIC->CH2_ProfileACC;
 8029cb6:	687b      	ldr	r3, [r7, #4]
 8029cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029cba:	4a20      	ldr	r2, [pc, #128]	; (8029d3c <process_app+0x130>)
 8029cbc:	6093      	str	r3, [r2, #8]
		Mode[2] 	= OUT_GENERIC->CH2_Mode;
 8029cbe:	687b      	ldr	r3, [r7, #4]
 8029cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cc2:	4a18      	ldr	r2, [pc, #96]	; (8029d24 <process_app+0x118>)
 8029cc4:	6093      	str	r3, [r2, #8]
		TarPos[2] 	= OUT_GENERIC->CH2_ProfilePosition;
 8029cc6:	687b      	ldr	r3, [r7, #4]
 8029cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029cca:	4a1d      	ldr	r2, [pc, #116]	; (8029d40 <process_app+0x134>)
 8029ccc:	6093      	str	r3, [r2, #8]

		Config 		= OUT_GENERIC->Config;
 8029cce:	687b      	ldr	r3, [r7, #4]
 8029cd0:	685b      	ldr	r3, [r3, #4]
 8029cd2:	4a17      	ldr	r2, [pc, #92]	; (8029d30 <process_app+0x124>)
 8029cd4:	6013      	str	r3, [r2, #0]
 8029cd6:	e01f      	b.n	8029d18 <process_app+0x10c>
	}else{
		Config 		= 0;
 8029cd8:	4b15      	ldr	r3, [pc, #84]	; (8029d30 <process_app+0x124>)
 8029cda:	2200      	movs	r2, #0
 8029cdc:	601a      	str	r2, [r3, #0]
		for (uint8_t i=0; i<4; i++){
 8029cde:	2300      	movs	r3, #0
 8029ce0:	73fb      	strb	r3, [r7, #15]
 8029ce2:	e016      	b.n	8029d12 <process_app+0x106>
			TarVel[i] = 0;
 8029ce4:	7bfb      	ldrb	r3, [r7, #15]
 8029ce6:	4a14      	ldr	r2, [pc, #80]	; (8029d38 <process_app+0x12c>)
 8029ce8:	2100      	movs	r1, #0
 8029cea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			Acc[i] = 0;
 8029cee:	7bfb      	ldrb	r3, [r7, #15]
 8029cf0:	4a12      	ldr	r2, [pc, #72]	; (8029d3c <process_app+0x130>)
 8029cf2:	2100      	movs	r1, #0
 8029cf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			Mode[i] = 0;
 8029cf8:	7bfb      	ldrb	r3, [r7, #15]
 8029cfa:	4a0a      	ldr	r2, [pc, #40]	; (8029d24 <process_app+0x118>)
 8029cfc:	2100      	movs	r1, #0
 8029cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			TarPos[i] = 0;
 8029d02:	7bfb      	ldrb	r3, [r7, #15]
 8029d04:	4a0e      	ldr	r2, [pc, #56]	; (8029d40 <process_app+0x134>)
 8029d06:	2100      	movs	r1, #0
 8029d08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TarPos[2] 	= OUT_GENERIC->CH2_ProfilePosition;

		Config 		= OUT_GENERIC->Config;
	}else{
		Config 		= 0;
		for (uint8_t i=0; i<4; i++){
 8029d0c:	7bfb      	ldrb	r3, [r7, #15]
 8029d0e:	3301      	adds	r3, #1
 8029d10:	73fb      	strb	r3, [r7, #15]
 8029d12:	7bfb      	ldrb	r3, [r7, #15]
 8029d14:	2b03      	cmp	r3, #3
 8029d16:	d9e5      	bls.n	8029ce4 <process_app+0xd8>
			Acc[i] = 0;
			Mode[i] = 0;
			TarPos[i] = 0;
		}
	}
}
 8029d18:	3714      	adds	r7, #20
 8029d1a:	46bd      	mov	sp, r7
 8029d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d20:	4770      	bx	lr
 8029d22:	bf00      	nop
 8029d24:	1fff2908 	.word	0x1fff2908
 8029d28:	1fff2928 	.word	0x1fff2928
 8029d2c:	1fff28ec 	.word	0x1fff28ec
 8029d30:	1fff2950 	.word	0x1fff2950
 8029d34:	1fff2904 	.word	0x1fff2904
 8029d38:	1fff28d4 	.word	0x1fff28d4
 8029d3c:	1fff2934 	.word	0x1fff2934
 8029d40:	1fff2914 	.word	0x1fff2914

08029d44 <main>:

int main(void)
{
 8029d44:	b580      	push	{r7, lr}
 8029d46:	b082      	sub	sp, #8
 8029d48:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();                     /* Initialization of DAVE APPs  */
 8029d4a:	f7ff fb45 	bl	80293d8 <DAVE_Init>
 8029d4e:	4603      	mov	r3, r0
 8029d50:	71fb      	strb	r3, [r7, #7]
  Init_GPIO();                   /* Initialize GPIO */
 8029d52:	f7ff ff0b 	bl	8029b6c <Init_GPIO>
  if(status == DAVE_STATUS_FAILURE)
 8029d56:	79fb      	ldrb	r3, [r7, #7]
 8029d58:	2b01      	cmp	r3, #1
 8029d5a:	d100      	bne.n	8029d5e <main+0x1a>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
    while(1U)
    {
    }
 8029d5c:	e7fe      	b.n	8029d5c <main+0x18>
  }
  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
    MainLoop();
 8029d5e:	f7f7 f9f9 	bl	8021154 <MainLoop>
  }
 8029d62:	e7fc      	b.n	8029d5e <main+0x1a>

08029d64 <ERU1_3_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC0 Interrupts and need to call the SSC Stack
 */
void SYNC0IRQHandler (void)
{
 8029d64:	b580      	push	{r7, lr}
 8029d66:	af00      	add	r7, sp, #0
	Sync0_Isr();
 8029d68:	f7f7 f896 	bl	8020e98 <Sync0_Isr>
}
 8029d6c:	bd80      	pop	{r7, pc}
 8029d6e:	bf00      	nop

08029d70 <ERU1_0_IRQHandler>:
 *
 * <b>Details of function</b><br>
 * This routine is handling the SYNC1 Interrupts and need to call the SSC Stack
 */
void SYNC1IRQHandler (void)
{
 8029d70:	b580      	push	{r7, lr}
 8029d72:	af00      	add	r7, sp, #0
	Sync1_Isr();
 8029d74:	f7f7 f93c 	bl	8020ff0 <Sync1_Isr>
}
 8029d78:	bd80      	pop	{r7, pc}
 8029d7a:	bf00      	nop

08029d7c <ENABLE_ESC_INT_USER>:
 *
 * <b>Details of function</b><br>
 * This routine is called from ECAT_APP on request of SSC stack once interrupts (sync1/sync0) need to be enabled
 */
void ENABLE_ESC_INT_USER()
{
 8029d7c:	b580      	push	{r7, lr}
 8029d7e:	af00      	add	r7, sp, #0
	INTERRUPT_Enable(&INT_SYNC0);
 8029d80:	4803      	ldr	r0, [pc, #12]	; (8029d90 <ENABLE_ESC_INT_USER+0x14>)
 8029d82:	f7ff fc2b 	bl	80295dc <INTERRUPT_Enable>
	INTERRUPT_Enable(&INT_SYNC1);
 8029d86:	4803      	ldr	r0, [pc, #12]	; (8029d94 <ENABLE_ESC_INT_USER+0x18>)
 8029d88:	f7ff fc28 	bl	80295dc <INTERRUPT_Enable>
}
 8029d8c:	bd80      	pop	{r7, pc}
 8029d8e:	bf00      	nop
 8029d90:	0802abc4 	.word	0x0802abc4
 8029d94:	0802abc0 	.word	0x0802abc0

08029d98 <DISABLE_ESC_INT_USER>:
 *
 * <b>Details of function</b><br>
 * This routine is called from ECAT_APP on request of SSC stack once interrupts (sync1/sync0) need to be disabled
 */
void DISABLE_ESC_INT_USER()
{
 8029d98:	b580      	push	{r7, lr}
 8029d9a:	af00      	add	r7, sp, #0
	INTERRUPT_Disable(&INT_SYNC0);
 8029d9c:	4803      	ldr	r0, [pc, #12]	; (8029dac <DISABLE_ESC_INT_USER+0x14>)
 8029d9e:	f7ff fc2b 	bl	80295f8 <INTERRUPT_Disable>
	INTERRUPT_Disable(&INT_SYNC1);
 8029da2:	4803      	ldr	r0, [pc, #12]	; (8029db0 <DISABLE_ESC_INT_USER+0x18>)
 8029da4:	f7ff fc28 	bl	80295f8 <INTERRUPT_Disable>
}
 8029da8:	bd80      	pop	{r7, pc}
 8029daa:	bf00      	nop
 8029dac:	0802abc4 	.word	0x0802abc4
 8029db0:	0802abc0 	.word	0x0802abc0

08029db4 <__errno>:
 8029db4:	4b01      	ldr	r3, [pc, #4]	; (8029dbc <__errno+0x8>)
 8029db6:	6818      	ldr	r0, [r3, #0]
 8029db8:	4770      	bx	lr
 8029dba:	bf00      	nop
 8029dbc:	1fff160c 	.word	0x1fff160c

08029dc0 <__libc_init_array>:
 8029dc0:	b570      	push	{r4, r5, r6, lr}
 8029dc2:	4b0e      	ldr	r3, [pc, #56]	; (8029dfc <__libc_init_array+0x3c>)
 8029dc4:	4c0e      	ldr	r4, [pc, #56]	; (8029e00 <__libc_init_array+0x40>)
 8029dc6:	1ae4      	subs	r4, r4, r3
 8029dc8:	10a4      	asrs	r4, r4, #2
 8029dca:	2500      	movs	r5, #0
 8029dcc:	461e      	mov	r6, r3
 8029dce:	42a5      	cmp	r5, r4
 8029dd0:	d004      	beq.n	8029ddc <__libc_init_array+0x1c>
 8029dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029dd6:	4798      	blx	r3
 8029dd8:	3501      	adds	r5, #1
 8029dda:	e7f8      	b.n	8029dce <__libc_init_array+0xe>
 8029ddc:	f7fd fdf2 	bl	80279c4 <_init>
 8029de0:	4c08      	ldr	r4, [pc, #32]	; (8029e04 <__libc_init_array+0x44>)
 8029de2:	4b09      	ldr	r3, [pc, #36]	; (8029e08 <__libc_init_array+0x48>)
 8029de4:	1ae4      	subs	r4, r4, r3
 8029de6:	10a4      	asrs	r4, r4, #2
 8029de8:	2500      	movs	r5, #0
 8029dea:	461e      	mov	r6, r3
 8029dec:	42a5      	cmp	r5, r4
 8029dee:	d004      	beq.n	8029dfa <__libc_init_array+0x3a>
 8029df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029df4:	4798      	blx	r3
 8029df6:	3501      	adds	r5, #1
 8029df8:	e7f8      	b.n	8029dec <__libc_init_array+0x2c>
 8029dfa:	bd70      	pop	{r4, r5, r6, pc}
 8029dfc:	1fff1610 	.word	0x1fff1610
 8029e00:	1fff1610 	.word	0x1fff1610
 8029e04:	1fff1610 	.word	0x1fff1610
 8029e08:	1fff1610 	.word	0x1fff1610

08029e0c <malloc>:
 8029e0c:	4b02      	ldr	r3, [pc, #8]	; (8029e18 <malloc+0xc>)
 8029e0e:	4601      	mov	r1, r0
 8029e10:	6818      	ldr	r0, [r3, #0]
 8029e12:	f000 b873 	b.w	8029efc <_malloc_r>
 8029e16:	bf00      	nop
 8029e18:	1fff160c 	.word	0x1fff160c

08029e1c <free>:
 8029e1c:	4b02      	ldr	r3, [pc, #8]	; (8029e28 <free+0xc>)
 8029e1e:	4601      	mov	r1, r0
 8029e20:	6818      	ldr	r0, [r3, #0]
 8029e22:	f000 b827 	b.w	8029e74 <_free_r>
 8029e26:	bf00      	nop
 8029e28:	1fff160c 	.word	0x1fff160c

08029e2c <memcmp>:
 8029e2c:	b510      	push	{r4, lr}
 8029e2e:	440a      	add	r2, r1
 8029e30:	1e44      	subs	r4, r0, #1
 8029e32:	4291      	cmp	r1, r2
 8029e34:	d008      	beq.n	8029e48 <memcmp+0x1c>
 8029e36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8029e3a:	7808      	ldrb	r0, [r1, #0]
 8029e3c:	4283      	cmp	r3, r0
 8029e3e:	d001      	beq.n	8029e44 <memcmp+0x18>
 8029e40:	1a18      	subs	r0, r3, r0
 8029e42:	bd10      	pop	{r4, pc}
 8029e44:	3101      	adds	r1, #1
 8029e46:	e7f4      	b.n	8029e32 <memcmp+0x6>
 8029e48:	2000      	movs	r0, #0
 8029e4a:	bd10      	pop	{r4, pc}

08029e4c <memcpy>:
 8029e4c:	b510      	push	{r4, lr}
 8029e4e:	1e43      	subs	r3, r0, #1
 8029e50:	440a      	add	r2, r1
 8029e52:	4291      	cmp	r1, r2
 8029e54:	d004      	beq.n	8029e60 <memcpy+0x14>
 8029e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029e5e:	e7f8      	b.n	8029e52 <memcpy+0x6>
 8029e60:	bd10      	pop	{r4, pc}

08029e62 <memset>:
 8029e62:	4402      	add	r2, r0
 8029e64:	4603      	mov	r3, r0
 8029e66:	4293      	cmp	r3, r2
 8029e68:	d002      	beq.n	8029e70 <memset+0xe>
 8029e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8029e6e:	e7fa      	b.n	8029e66 <memset+0x4>
 8029e70:	4770      	bx	lr
	...

08029e74 <_free_r>:
 8029e74:	b530      	push	{r4, r5, lr}
 8029e76:	2900      	cmp	r1, #0
 8029e78:	d03d      	beq.n	8029ef6 <_free_r+0x82>
 8029e7a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8029e7e:	1f0b      	subs	r3, r1, #4
 8029e80:	491d      	ldr	r1, [pc, #116]	; (8029ef8 <_free_r+0x84>)
 8029e82:	2a00      	cmp	r2, #0
 8029e84:	bfb8      	it	lt
 8029e86:	189b      	addlt	r3, r3, r2
 8029e88:	680a      	ldr	r2, [r1, #0]
 8029e8a:	460c      	mov	r4, r1
 8029e8c:	b912      	cbnz	r2, 8029e94 <_free_r+0x20>
 8029e8e:	605a      	str	r2, [r3, #4]
 8029e90:	600b      	str	r3, [r1, #0]
 8029e92:	bd30      	pop	{r4, r5, pc}
 8029e94:	4293      	cmp	r3, r2
 8029e96:	d20d      	bcs.n	8029eb4 <_free_r+0x40>
 8029e98:	6819      	ldr	r1, [r3, #0]
 8029e9a:	1858      	adds	r0, r3, r1
 8029e9c:	4290      	cmp	r0, r2
 8029e9e:	bf01      	itttt	eq
 8029ea0:	585a      	ldreq	r2, [r3, r1]
 8029ea2:	1852      	addeq	r2, r2, r1
 8029ea4:	601a      	streq	r2, [r3, #0]
 8029ea6:	6842      	ldreq	r2, [r0, #4]
 8029ea8:	605a      	str	r2, [r3, #4]
 8029eaa:	6023      	str	r3, [r4, #0]
 8029eac:	bd30      	pop	{r4, r5, pc}
 8029eae:	4299      	cmp	r1, r3
 8029eb0:	d803      	bhi.n	8029eba <_free_r+0x46>
 8029eb2:	460a      	mov	r2, r1
 8029eb4:	6851      	ldr	r1, [r2, #4]
 8029eb6:	2900      	cmp	r1, #0
 8029eb8:	d1f9      	bne.n	8029eae <_free_r+0x3a>
 8029eba:	6814      	ldr	r4, [r2, #0]
 8029ebc:	1915      	adds	r5, r2, r4
 8029ebe:	429d      	cmp	r5, r3
 8029ec0:	d10a      	bne.n	8029ed8 <_free_r+0x64>
 8029ec2:	681b      	ldr	r3, [r3, #0]
 8029ec4:	4423      	add	r3, r4
 8029ec6:	18d0      	adds	r0, r2, r3
 8029ec8:	4288      	cmp	r0, r1
 8029eca:	6013      	str	r3, [r2, #0]
 8029ecc:	d113      	bne.n	8029ef6 <_free_r+0x82>
 8029ece:	6808      	ldr	r0, [r1, #0]
 8029ed0:	4403      	add	r3, r0
 8029ed2:	6013      	str	r3, [r2, #0]
 8029ed4:	684b      	ldr	r3, [r1, #4]
 8029ed6:	e00d      	b.n	8029ef4 <_free_r+0x80>
 8029ed8:	d902      	bls.n	8029ee0 <_free_r+0x6c>
 8029eda:	230c      	movs	r3, #12
 8029edc:	6003      	str	r3, [r0, #0]
 8029ede:	bd30      	pop	{r4, r5, pc}
 8029ee0:	681c      	ldr	r4, [r3, #0]
 8029ee2:	1918      	adds	r0, r3, r4
 8029ee4:	4288      	cmp	r0, r1
 8029ee6:	bf04      	itt	eq
 8029ee8:	6808      	ldreq	r0, [r1, #0]
 8029eea:	6849      	ldreq	r1, [r1, #4]
 8029eec:	6059      	str	r1, [r3, #4]
 8029eee:	bf04      	itt	eq
 8029ef0:	1900      	addeq	r0, r0, r4
 8029ef2:	6018      	streq	r0, [r3, #0]
 8029ef4:	6053      	str	r3, [r2, #4]
 8029ef6:	bd30      	pop	{r4, r5, pc}
 8029ef8:	1fff2638 	.word	0x1fff2638

08029efc <_malloc_r>:
 8029efc:	b570      	push	{r4, r5, r6, lr}
 8029efe:	1ccc      	adds	r4, r1, #3
 8029f00:	f024 0403 	bic.w	r4, r4, #3
 8029f04:	3408      	adds	r4, #8
 8029f06:	2c0c      	cmp	r4, #12
 8029f08:	bf38      	it	cc
 8029f0a:	240c      	movcc	r4, #12
 8029f0c:	2c00      	cmp	r4, #0
 8029f0e:	4606      	mov	r6, r0
 8029f10:	da03      	bge.n	8029f1a <_malloc_r+0x1e>
 8029f12:	230c      	movs	r3, #12
 8029f14:	6033      	str	r3, [r6, #0]
 8029f16:	2000      	movs	r0, #0
 8029f18:	bd70      	pop	{r4, r5, r6, pc}
 8029f1a:	428c      	cmp	r4, r1
 8029f1c:	d3f9      	bcc.n	8029f12 <_malloc_r+0x16>
 8029f1e:	4a20      	ldr	r2, [pc, #128]	; (8029fa0 <_malloc_r+0xa4>)
 8029f20:	6813      	ldr	r3, [r2, #0]
 8029f22:	4610      	mov	r0, r2
 8029f24:	4619      	mov	r1, r3
 8029f26:	b1a1      	cbz	r1, 8029f52 <_malloc_r+0x56>
 8029f28:	680a      	ldr	r2, [r1, #0]
 8029f2a:	1b12      	subs	r2, r2, r4
 8029f2c:	d40e      	bmi.n	8029f4c <_malloc_r+0x50>
 8029f2e:	2a0b      	cmp	r2, #11
 8029f30:	d903      	bls.n	8029f3a <_malloc_r+0x3e>
 8029f32:	600a      	str	r2, [r1, #0]
 8029f34:	188b      	adds	r3, r1, r2
 8029f36:	508c      	str	r4, [r1, r2]
 8029f38:	e01f      	b.n	8029f7a <_malloc_r+0x7e>
 8029f3a:	428b      	cmp	r3, r1
 8029f3c:	bf0d      	iteet	eq
 8029f3e:	685a      	ldreq	r2, [r3, #4]
 8029f40:	684a      	ldrne	r2, [r1, #4]
 8029f42:	605a      	strne	r2, [r3, #4]
 8029f44:	6002      	streq	r2, [r0, #0]
 8029f46:	bf18      	it	ne
 8029f48:	460b      	movne	r3, r1
 8029f4a:	e016      	b.n	8029f7a <_malloc_r+0x7e>
 8029f4c:	460b      	mov	r3, r1
 8029f4e:	6849      	ldr	r1, [r1, #4]
 8029f50:	e7e9      	b.n	8029f26 <_malloc_r+0x2a>
 8029f52:	4d14      	ldr	r5, [pc, #80]	; (8029fa4 <_malloc_r+0xa8>)
 8029f54:	682b      	ldr	r3, [r5, #0]
 8029f56:	b91b      	cbnz	r3, 8029f60 <_malloc_r+0x64>
 8029f58:	4630      	mov	r0, r6
 8029f5a:	f000 f825 	bl	8029fa8 <_sbrk_r>
 8029f5e:	6028      	str	r0, [r5, #0]
 8029f60:	4630      	mov	r0, r6
 8029f62:	4621      	mov	r1, r4
 8029f64:	f000 f820 	bl	8029fa8 <_sbrk_r>
 8029f68:	1c42      	adds	r2, r0, #1
 8029f6a:	4603      	mov	r3, r0
 8029f6c:	d0d1      	beq.n	8029f12 <_malloc_r+0x16>
 8029f6e:	1cc5      	adds	r5, r0, #3
 8029f70:	f025 0503 	bic.w	r5, r5, #3
 8029f74:	4285      	cmp	r5, r0
 8029f76:	d10a      	bne.n	8029f8e <_malloc_r+0x92>
 8029f78:	601c      	str	r4, [r3, #0]
 8029f7a:	f103 000b 	add.w	r0, r3, #11
 8029f7e:	1d1a      	adds	r2, r3, #4
 8029f80:	f020 0007 	bic.w	r0, r0, #7
 8029f84:	1a82      	subs	r2, r0, r2
 8029f86:	d00a      	beq.n	8029f9e <_malloc_r+0xa2>
 8029f88:	4251      	negs	r1, r2
 8029f8a:	5099      	str	r1, [r3, r2]
 8029f8c:	bd70      	pop	{r4, r5, r6, pc}
 8029f8e:	4630      	mov	r0, r6
 8029f90:	1ae9      	subs	r1, r5, r3
 8029f92:	f000 f809 	bl	8029fa8 <_sbrk_r>
 8029f96:	3001      	adds	r0, #1
 8029f98:	d0bb      	beq.n	8029f12 <_malloc_r+0x16>
 8029f9a:	462b      	mov	r3, r5
 8029f9c:	e7ec      	b.n	8029f78 <_malloc_r+0x7c>
 8029f9e:	bd70      	pop	{r4, r5, r6, pc}
 8029fa0:	1fff2638 	.word	0x1fff2638
 8029fa4:	1fff2634 	.word	0x1fff2634

08029fa8 <_sbrk_r>:
 8029fa8:	b538      	push	{r3, r4, r5, lr}
 8029faa:	4c06      	ldr	r4, [pc, #24]	; (8029fc4 <_sbrk_r+0x1c>)
 8029fac:	2300      	movs	r3, #0
 8029fae:	4605      	mov	r5, r0
 8029fb0:	4608      	mov	r0, r1
 8029fb2:	6023      	str	r3, [r4, #0]
 8029fb4:	f7fd fcd2 	bl	802795c <_sbrk>
 8029fb8:	1c43      	adds	r3, r0, #1
 8029fba:	d102      	bne.n	8029fc2 <_sbrk_r+0x1a>
 8029fbc:	6823      	ldr	r3, [r4, #0]
 8029fbe:	b103      	cbz	r3, 8029fc2 <_sbrk_r+0x1a>
 8029fc0:	602b      	str	r3, [r5, #0]
 8029fc2:	bd38      	pop	{r3, r4, r5, pc}
 8029fc4:	1fff2954 	.word	0x1fff2954

08029fc8 <strlen>:
 8029fc8:	4603      	mov	r3, r0
 8029fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029fce:	2a00      	cmp	r2, #0
 8029fd0:	d1fb      	bne.n	8029fca <strlen+0x2>
 8029fd2:	1a18      	subs	r0, r3, r0
 8029fd4:	3801      	subs	r0, #1
 8029fd6:	4770      	bx	lr

08029fd8 <asEntryDesc0x1600>:
 8029fd8:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 8029fe8:	0007 0007 0020 0007 0007 0020 0007 0007     .... ..... .....
 8029ff8:	0020 0007 0007 0020 0007 0007 0020 0007      ..... ..... ...
 802a008:	0007 0020 0007 0007 0020 0007 0007 0020     .. ..... ..... .
 802a018:	0007 0007 0020 0007 0007 0020 0007 0007     .... ..... .....
 802a028:	0020 0007                                    ...

0802a02c <aName0x1600>:
 802a02c:	554f 5f54 4547 454e 4952 2043 7270 636f     OUT_GENERIC proc
 802a03c:	7365 2073 6164 6174 6d20 7061 6970 676e     ess data mapping
 802a04c:	5300 6275 6e49 6564 2078 3030 0031 7553     .SubIndex 001.Su
 802a05c:	4962 646e 7865 3020 3230 5300 6275 6e49     bIndex 002.SubIn
 802a06c:	6564 2078 3030 0033 7553 4962 646e 7865     dex 003.SubIndex
 802a07c:	3020 3430 5300 6275 6e49 6564 2078 3030      004.SubIndex 00
 802a08c:	0035 7553 4962 646e 7865 3020 3630 5300     5.SubIndex 006.S
 802a09c:	6275 6e49 6564 2078 3030 0037 7553 4962     ubIndex 007.SubI
 802a0ac:	646e 7865 3020 3830 5300 6275 6e49 6564     ndex 008.SubInde
 802a0bc:	2078 3030 0039 7553 4962 646e 7865 3020     x 009.SubIndex 0
 802a0cc:	3031 5300 6275 6e49 6564 2078 3130 0031     10.SubIndex 011.
 802a0dc:	7553 4962 646e 7865 3020 3231 5300 6275     SubIndex 012.Sub
 802a0ec:	6e49 6564 2078 3130 0033 00ff               Index 013...

0802a0f8 <asEntryDesc0x1A00>:
 802a0f8:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802a108:	0007 0007 0020 0007 0007 0020 0007 0007     .... ..... .....
 802a118:	0020 0007 0007 0020 0007 0007 0020 0007      ..... ..... ...
 802a128:	0007 0020 0007 0007 0020 0007 0007 0020     .. ..... ..... .
 802a138:	0007 0000                                   ....

0802a13c <aName0x1A00>:
 802a13c:	4e49 475f 4e45 5245 4349 7020 6f72 6563     IN_GENERIC proce
 802a14c:	7373 6420 7461 2061 616d 7070 6e69 0067     ss data mapping.
 802a15c:	7553 4962 646e 7865 3020 3130 5300 6275     SubIndex 001.Sub
 802a16c:	6e49 6564 2078 3030 0032 7553 4962 646e     Index 002.SubInd
 802a17c:	7865 3020 3330 5300 6275 6e49 6564 2078     ex 003.SubIndex 
 802a18c:	3030 0034 7553 4962 646e 7865 3020 3530     004.SubIndex 005
 802a19c:	5300 6275 6e49 6564 2078 3030 0036 7553     .SubIndex 006.Su
 802a1ac:	4962 646e 7865 3020 3730 5300 6275 6e49     bIndex 007.SubIn
 802a1bc:	6564 2078 3030 0038 7553 4962 646e 7865     dex 008.SubIndex
 802a1cc:	3020 3930 5300 6275 6e49 6564 2078 3130      009.SubIndex 01
 802a1dc:	0030 00ff                                   0...

0802a1e0 <asEntryDesc0x1C12>:
 802a1e0:	0005 0008 0007 0006 0010 0007               ............

0802a1ec <aName0x1C12>:
 802a1ec:	7953 636e 614d 616e 6567 2072 2032 7361     SyncManager 2 as
 802a1fc:	6973 6e67 656d 746e ff00 0000               signment....

0802a208 <asEntryDesc0x1C13>:
 802a208:	0005 0008 0007 0006 0010 0007               ............

0802a214 <aName0x1C13>:
 802a214:	7953 636e 614d 616e 6567 2072 2033 7361     SyncManager 3 as
 802a224:	6973 6e67 656d 746e ff00 0000               signment....

0802a230 <asEntryDesc0x6000>:
 802a230:	0005 0008 0007 0004 0020 0007 0000 0000     ........ .......
 802a240:	0000 0004 0020 0007 0000 0000 0000 0004     .... ...........
 802a250:	0020 0007 0000 0000 0000 0004 0020 0007      ........... ...
 802a260:	0000 0000 0000 0004 0020 0007 0000 0000     ........ .......
 802a270:	0000 0004 0020 0007 0000 0000 0000 0004     .... ...........
 802a280:	0020 0007 0000 0000 0000 0004 0020 0007      ........... ...
 802a290:	0000 0000 0000 0004 0020 0007 0000 0000     ........ .......
 802a2a0:	0000 0004 0020 0007                         .... ...

0802a2a8 <aName0x6000>:
 802a2a8:	4e49 475f 4e45 5245 4349 4100 7463 6175     IN_GENERIC.Actua
 802a2b8:	436c 6e6f 6966 0067 4300 3048 415f 7463     lConfig..CH0_Act
 802a2c8:	6175 4d6c 646f 0065 4300 3048 415f 7463     ualMode..CH0_Act
 802a2d8:	6175 506c 736f 7469 6f69 006e 4300 3048     ualPosition..CH0
 802a2e8:	415f 7463 6175 566c 6c65 636f 7469 0079     _ActualVelocity.
 802a2f8:	4300 3148 415f 7463 6175 4d6c 646f 0065     .CH1_ActualMode.
 802a308:	4300 3148 415f 7463 6175 506c 736f 7469     .CH1_ActualPosit
 802a318:	6f69 006e 4300 3148 415f 7463 6175 566c     ion..CH1_ActualV
 802a328:	6c65 636f 7469 0079 4300 3248 415f 7463     elocity..CH2_Act
 802a338:	6175 4d6c 646f 0065 4300 3248 415f 7463     ualMode..CH2_Act
 802a348:	6175 506c 736f 7469 6f69 006e 4300 3248     ualPosition..CH2
 802a358:	415f 7463 6175 566c 6c65 636f 7469 0079     _ActualVelocity.
 802a368:	00ff 0000                                   ....

0802a36c <asEntryDesc0x7000>:
 802a36c:	0005 0008 0007 0004 0020 003f 0000 0000     ........ .?.....
 802a37c:	0000 0004 0020 003f 0000 0000 0000 0004     .... .?.........
 802a38c:	0020 003f 0000 0000 0000 0004 0020 003f      .?......... .?.
 802a39c:	0000 0000 0000 0004 0020 003f 0000 0000     ........ .?.....
 802a3ac:	0000 0004 0020 003f 0000 0000 0000 0004     .... .?.........
 802a3bc:	0020 003f 0000 0000 0000 0004 0020 003f      .?......... .?.
 802a3cc:	0000 0000 0000 0004 0020 003f 0000 0000     ........ .?.....
 802a3dc:	0000 0004 0020 003f 0000 0000 0000 0004     .... .?.........
 802a3ec:	0020 003f 0000 0000 0000 0004 0020 003f      .?......... .?.
 802a3fc:	0000 0000 0000 0004 0020 003f               ........ .?.

0802a408 <aName0x7000>:
 802a408:	554f 5f54 4547 454e 4952 0043 6f43 666e     OUT_GENERIC.Conf
 802a418:	6769 0000 4843 5f30 6f4d 6564 0000 4843     ig..CH0_Mode..CH
 802a428:	5f30 7250 666f 6c69 5065 736f 7469 6f69     0_ProfilePositio
 802a438:	006e 4300 3048 505f 6f72 6966 656c 6556     n..CH0_ProfileVe
 802a448:	6f6c 6963 7974 0000 4843 5f30 7250 666f     locity..CH0_Prof
 802a458:	6c69 4165 4343 0000 4843 5f31 6f4d 6564     ileACC..CH1_Mode
 802a468:	0000 4843 5f31 7250 666f 6c69 5065 736f     ..CH1_ProfilePos
 802a478:	7469 6f69 006e 4300 3148 505f 6f72 6966     ition..CH1_Profi
 802a488:	656c 6556 6f6c 6963 7974 0000 4843 5f31     leVelocity..CH1_
 802a498:	7250 666f 6c69 4165 4343 0000 4843 5f32     ProfileACC..CH2_
 802a4a8:	6f4d 6564 0000 4843 5f32 7250 666f 6c69     Mode..CH2_Profil
 802a4b8:	5065 736f 7469 6f69 006e 4300 3248 505f     ePosition..CH2_P
 802a4c8:	6f72 6966 656c 6556 6f6c 6963 7974 0000     rofileVelocity..
 802a4d8:	4843 5f32 7250 666f 6c69 4165 4343 ff00     CH2_ProfileACC..
 802a4e8:	0000 0000                                   ....

0802a4ec <asEntryDesc0xF000>:
 802a4ec:	0005 0008 0007 0006 0010 0007 0006 0010     ................
 802a4fc:	0007 0000                                   ....

0802a500 <aName0xF000>:
 802a500:	6f4d 7564 616c 2072 6544 6976 6563 5020     Modular Device P
 802a510:	6f72 6966 656c 4900 646e 7865 6420 7369     rofile.Index dis
 802a520:	6174 636e 2065 4d00 7861 6d69 6d75 6e20     tance .Maximum n
 802a530:	6d75 6562 2072 666f 6d20 646f 6c75 7365     umber of modules
 802a540:	0020 00ff                                    ...

0802a544 <sEntryDesc0x1000>:
 802a544:	0007 0020 0007 0000                         .. .....

0802a54c <aName0x1000>:
 802a54c:	6544 6976 6563 7420 7079 0065               Device type.

0802a558 <sEntryDesc0x1001>:
 802a558:	0005 0008 0007 0000                         ........

0802a560 <aName0x1001>:
 802a560:	7245 6f72 2072 6572 6967 7473 7265 0000     Error register..

0802a570 <sEntryDesc0x1008>:
 802a570:	0009 00c0 0007 0000                         ........

0802a578 <aName0x1008>:
 802a578:	6544 6976 6563 6e20 6d61 0065               Device name.

0802a584 <sEntryDesc0x1009>:
 802a584:	0009 0018 0007 0000                         ........

0802a58c <aName0x1009>:
 802a58c:	6148 6472 6177 6572 7620 7265 6973 6e6f     Hardware version
 802a59c:	0000 0000                                   ....

0802a5a0 <sEntryDesc0x100A>:
 802a5a0:	0009 0020 0007 0000                         .. .....

0802a5a8 <aName0x100A>:
 802a5a8:	6f53 7466 6177 6572 7620 7265 6973 6e6f     Software version
 802a5b8:	0000 0000                                   ....

0802a5bc <asEntryDesc0x1018>:
 802a5bc:	0005 0008 0007 0007 0020 0007 0007 0020     ........ ..... .
 802a5cc:	0007 0007 0020 0007 0007 0020 0007 0000     .... ..... .....

0802a5dc <aName0x1018>:
 802a5dc:	6449 6e65 6974 7974 5600 6e65 6f64 2072     Identity.Vendor 
 802a5ec:	4449 5000 6f72 7564 7463 6320 646f 0065     ID.Product code.
 802a5fc:	6552 6976 6973 6e6f 5300 7265 6169 206c     Revision.Serial 
 802a60c:	756e 626d 7265 ff00 0000 0000               number......

0802a618 <asEntryDesc0x10F1>:
 802a618:	0005 0008 0007 0007 0020 003f 0006 0010     ........ .?.....
 802a628:	003f 0000                                   ?...

0802a62c <aName0x10F1>:
 802a62c:	7245 6f72 2072 6553 7474 6e69 7367 4c00     Error Settings.L
 802a63c:	636f 6c61 4520 7272 726f 5220 6165 7463     ocal Error React
 802a64c:	6f69 006e 7953 636e 4520 7272 726f 4320     ion.Sync Error C
 802a65c:	756f 746e 7265 4c20 6d69 7469 ff00 0000     ounter Limit....

0802a66c <sEntryDesc0x10F8>:
 802a66c:	001b 0040 00bf 0000                         ..@.....

0802a674 <aName0x10F8>:
 802a674:	6954 656d 7473 6d61 2070 624f 656a 7463     Timestamp Object
 802a684:	ff00 0000                                   ....

0802a688 <asEntryDesc0x1C00>:
 802a688:	0005 0008 0007 0005 0008 0007               ............

0802a694 <aName0x1C00>:
 802a694:	7953 636e 6d20 6e61 6761 7265 7420 7079     Sync manager typ
 802a6a4:	0065 0000                                   e...

0802a6a8 <asEntryDesc0x1C3x>:
 802a6a8:	0005 0008 0007 0006 0010 000f 0007 0020     .............. .
 802a6b8:	0007 0000 0020 0000 0006 0010 0007 0007     .... ...........
 802a6c8:	0020 0007 0007 0020 0007 0000 0020 0000      ..... ..... ...
 802a6d8:	0006 0010 003f 0007 0020 0007 0007 0020     ....?... ..... .
 802a6e8:	003f 0006 0010 0007 0006 0010 0007 0000     ?...............
 802a6f8:	0010 0000 0000 0010 0000 0000 0020 0000     ............ ...
 802a708:	0000 0020 0000 0000 0020 0000 0000 0020     .. ..... ..... .
	...
 802a768:	0001 0001 0007 0000                         ........

0802a770 <aName0x1C32>:
 802a770:	4d53 6f20 7475 7570 2074 6170 6172 656d     SM output parame
 802a780:	6574 0072 7953 636e 7268 6e6f 7a69 7461     ter.Synchronizat
 802a790:	6f69 206e 7954 6570 4300 6379 656c 5420     ion Type.Cycle T
 802a7a0:	6d69 0065 5300 6e79 6863 6f72 696e 617a     ime..Synchroniza
 802a7b0:	6974 6e6f 5420 7079 7365 7320 7075 6f70     tion Types suppo
 802a7c0:	7472 6465 4d00 6e69 6d69 6d75 4320 6379     rted.Minimum Cyc
 802a7d0:	656c 5420 6d69 0065 6143 636c 6120 646e     le Time.Calc and
 802a7e0:	4320 706f 2079 6954 656d 0000 6547 2074      Copy Time..Get 
 802a7f0:	7943 6c63 2065 6954 656d 4400 6c65 7961     Cycle Time.Delay
 802a800:	5420 6d69 0065 7953 636e 2030 7943 6c63      Time.Sync0 Cycl
 802a810:	2065 6954 656d 5300 2d4d 7645 6e65 2074     e Time.SM-Event 
 802a820:	694d 7373 6465 4300 6379 656c 5420 6d69     Missed.Cycle Tim
 802a830:	2065 6f54 206f 6d53 6c61 006c 6853 6669     e Too Small.Shif
 802a840:	2074 6954 656d 5420 6f6f 5320 6f68 7472     t Time Too Short
	...
 802a860:	0000 5300 6e79 2063 7245 6f72 0072 00ff     ...Sync Error...

0802a870 <aName0x1C33>:
 802a870:	4d53 6920 706e 7475 7020 7261 6d61 7465     SM input paramet
 802a880:	7265 5300 6e79 6863 6f72 696e 617a 6974     er.Synchronizati
 802a890:	6e6f 5420 7079 0065 7943 6c63 2065 6954     on Type.Cycle Ti
 802a8a0:	656d 0000 7953 636e 7268 6e6f 7a69 7461     me..Synchronizat
 802a8b0:	6f69 206e 7954 6570 2073 7573 7070 726f     ion Types suppor
 802a8c0:	6574 0064 694d 696e 756d 206d 7943 6c63     ted.Minimum Cycl
 802a8d0:	2065 6954 656d 4300 6c61 2063 6e61 2064     e Time.Calc and 
 802a8e0:	6f43 7970 5420 6d69 0065 4700 7465 4320     Copy Time..Get C
 802a8f0:	6379 656c 5420 6d69 0065 6544 616c 2079     ycle Time.Delay 
 802a900:	6954 656d 5300 6e79 3063 4320 6379 656c     Time.Sync0 Cycle
 802a910:	5420 6d69 0065 4d53 452d 6576 746e 4d20      Time.SM-Event M
 802a920:	7369 6573 0064 7943 6c63 2065 6954 656d     issed.Cycle Time
 802a930:	5420 6f6f 5320 616d 6c6c 5300 6968 7466      Too Small.Shift
 802a940:	5420 6d69 2065 6f54 206f 6853 726f 0074      Time Too Short.
	...
 802a960:	0000 7953 636e 4520 7272 726f ff00 0000     ..Sync Error....

0802a970 <cBitMask>:
 802a970:	0000 0001 0003 0007 000f 001f 003f 007f     ............?...
 802a980:	00ff 01ff 03ff 07ff 0fff 1fff 3fff 7fff     .............?..

0802a990 <cAbortCode>:
 802a990:	0000 0000 0000 0503 0000 0504 0001 0504     ................
 802a9a0:	0005 0504 0000 0601 0001 0601 0002 0601     ................
 802a9b0:	0000 0602 0041 0604 0042 0604 0043 0604     ....A...B...C...
 802a9c0:	0047 0604 0000 0606 0010 0607 0012 0607     G...............
 802a9d0:	0013 0607 0011 0609 0030 0609 0031 0609     ........0...1...
 802a9e0:	0032 0609 0033 0609 0036 0609 0000 0800     2...3...6.......
 802a9f0:	0020 0800 0021 0800 0022 0800 0023 0800      ...!..."...#...
 802aa00:	0003 0601 0004 0601                         ........

0802aa08 <PWM_0_timer_handle>:
 802aa08:	0000 0000 0007 0000                         ........

0802aa10 <PWM_0_event0_config>:
 802aa10:	0000 0001                                   ....

0802aa14 <PWM_0_event1_config>:
 802aa14:	0000 0001                                   ....

0802aa18 <PWM_0_event2_config>:
 802aa18:	0000 0001                                   ....

0802aa1c <PWM_0_ch1_out0_config>:
 802aa1c:	0098 0000 0000 0001 0004 0000               ............

0802aa28 <PWM_0_config_handle>:
 802aa28:	0000 f423 7a12 0100 0000 0000 0000 0303     ..#..z..........
 802aa38:	0000 0000 aa10 0802 aa14 0802 aa18 0802     ................
	...
 802aa54:	0000 0100 0000 0000 0000 2000 aa08 0802     ........... ....
 802aa64:	0001 0000 8200 4802 0002 0000 aa1c 0802     .......H........
 802aa74:	153c 1fff                                   <...

0802aa78 <PWM_1_timer_handle>:
 802aa78:	0000 0000 0007 0000                         ........

0802aa80 <PWM_1_event0_config>:
 802aa80:	0000 0001                                   ....

0802aa84 <PWM_1_event1_config>:
 802aa84:	0000 0001                                   ....

0802aa88 <PWM_1_event2_config>:
 802aa88:	0000 0001                                   ....

0802aa8c <PWM_1_ch1_out0_config>:
 802aa8c:	0098 0000 0000 0001 0004 0000               ............

0802aa98 <PWM_1_config_handle>:
 802aa98:	0000 f423 7a12 0100 0000 0000 0000 0101     ..#..z..........
 802aaa8:	0000 0000 aa80 0802 aa84 0802 aa88 0802     ................
	...
 802aac4:	0000 0100 0000 0000 0000 1000 aa78 0802     ............x...
 802aad4:	0001 0000 8200 4802 0003 0000 aa8c 0802     .......H........
 802aae4:	153c 1fff                                   <...

0802aae8 <PWM_2_timer_handle>:
 802aae8:	0000 0000 0007 0000                         ........

0802aaf0 <PWM_2_event0_config>:
 802aaf0:	0000 0001                                   ....

0802aaf4 <PWM_2_event1_config>:
 802aaf4:	0000 0001                                   ....

0802aaf8 <PWM_2_event2_config>:
 802aaf8:	0000 0001                                   ....

0802aafc <PWM_2_ch1_out0_config>:
 802aafc:	0098 0000 0000 0001 0004 0000               ............

0802ab08 <PWM_2_config_handle>:
 802ab08:	0000 f423 7a12 0100 0000 0000 0000 0000     ..#..z..........
 802ab18:	0000 0000 aaf0 0802 aaf4 0802 aaf8 0802     ................
	...
 802ab34:	0000 0100 0000 0000 0000 0800 aae8 0802     ................
 802ab44:	0001 0000 8200 4802 0004 0000 aafc 0802     .......H........
 802ab54:	153c 1fff                                   <...

0802ab58 <PWM_Tick_timer_handle>:
 802ab58:	0000 0000 0007 0000                         ........

0802ab60 <PWM_Tick_event0_config>:
 802ab60:	0000 0001                                   ....

0802ab64 <PWM_Tick_event1_config>:
 802ab64:	0000 0001                                   ....

0802ab68 <PWM_Tick_event2_config>:
 802ab68:	0000 0001                                   ....

0802ab6c <PWM_Tick_config_handle>:
 802ab6c:	0001 0464 0232 0100 0000 0000 0000 0202     ..d.2...........
 802ab7c:	0000 0000 ab60 0802 ab64 0802 ab68 0802     ....`...d...h...
	...
 802ab98:	0000 0100 0000 0000 0000 0800 ab58 0802     ............X...
	...
 802abb8:	154c 1fff                                   L...

0802abbc <INTERRUPT_0>:
 802abbc:	3f32 0100                                   2?..

0802abc0 <INT_SYNC1>:
 802abc0:	3f05 0100                                   .?..

0802abc4 <INT_SYNC0>:
 802abc4:	3f08 0100                                   .?..

0802abc8 <INT_PWM_0>:
 802abc8:	3c33 0100                                   3<..

0802abcc <INT_PWM_1>:
 802abcc:	3c31 0100                                   1<..

0802abd0 <INT_PWM_2>:
 802abd0:	3c30 0100                                   0<..

0802abd4 <INT_Tick>:
 802abd4:	3d2e 0100                                   .=..

0802abd8 <e_eeprom_xmc4_fce>:
 802abd8:	0020 5002 0700 0000 0000 0000                ..P........

0802abe4 <EG_SYNC_0_OGU_Config>:
 802abe4:	0010 0000                                   ....

0802abe8 <EG_SYNC_1_OGU_Config>:
 802abe8:	0010 0000                                   ....

0802abec <ED_SYNC_0_ETL_Config>:
 802abec:	000c 0000 0135 0000                         ....5...

0802abf4 <ED_SYNC_1_ETL_Config>:
 802abf4:	0003 0000 0005 0000                         ........

0802abfc <ECAT_SSC_0>:
 802abfc:	2628 1fff 1464 1fff abbc 0802 0230 0101     (&..d.......0...
 802ac0c:	0000 0001 0000 0000 0000 0001 0102 0101     ................
 802ac1c:	0043 0000                                   C...
